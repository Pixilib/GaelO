User (GET), (POST), (PUT), (DELETE), (PATCH) => OK
Request (POST) => OK
Login / Logout (POST) (DELETE) => OK
ChangePassword (POST) => OK
User's Roles : (GET), (POST), (DELETE)=>OK
Study : (GET), (GET Expand), (POST), (DELETE), (PATCH) => OK
Preference : (GET), (PUT) =>OK
Center : (GET), (POST), (PUT) => OK
Visit Group : (GET), (POST), (DELETE) => OK
Visit Type : (GET), (POST), (DELETE) => OK
Affiliated Center  : (GET), (POST), (DELETE) =>OK
Export-db : (POST) => OK
Documentation (GET, POST, DELETE) => OK

Preparation Investigateur / Monitor / Controller / Reviewer :
- Api creation Patient (GET, POST, PUT) => Reste PUT
- Api creation Visit (GET, POST, DELETE)
- Api QC (GET, PATCH + API /reset)
- Api Corrective Action (GET, PATCH)
- Api review (POST, GET, DELETE)


Salim TODO :
* Service Orthanc=> Finir les tests (portage fini) => Test qui nécéssiteront Orthanc disponible

* Service Visit => Continuer test passage en upload Done
* Reverse proxy dicomweb et tus
=> Tus : A tester
=> DicomWeb : A Faire (sur le modele de TUS)

* Faire le use case de recupération des images d'une visite et son testing (Get dicoms)


//Import des images
=> Reste a faire check d'authorization

-> A tester : Le usecase recupere les zip de tus et les decompresse via ServiceTus
-> A tester : Le usecase les importe dans orthanc temporary
-> A tester : Le usecase les anonymises
-> A tester : le usecase les transfert vers orthanc pacs
-> OK : le usecase se connecte a orthanc pacs et fait la declaration des studies/series via registerOrthancStudyService
-> OK : le usecase change le statut de la visite via visit service
-> A tester : le usecase catch les erreur, envoie les mails et ecrit dans le tracker

Finir de refactorer :
    GetPatientVisit (refac + changer l'access au données dans bdd)
    Get Visit

//Les tests ne font pas d'assertion sur
- les permissions (à ajouter via mock sur authorization service ?)
- le tracker => Via un spy ?
- l'envoi de mails => voir doc laravel

+Tard :
Faire une condition pour les NoContent dans le controller ? => ou mettre toujours un payload vide pour eviter les errur error->json() dans front?
Voir dans message d'erreur comment ajouter d'autre info que le message (pour id de login)
CreateVisitType et CreateVisitGroup => Ajouter un forbidden si l'etude a déjà des visites crées (etude demarrée)
ReverseProxy TUS => On peut ajouter le studyName dans le header dans uppy pour le recupérer dans le use case et checker le role Investigateur

A executer en post install :
php artisan db:migrate --seed
php artisan passport:install
