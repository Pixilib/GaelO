User (GET), (POST), (PUT), (DELETE), (PATCH) => OK
Request (POST) => OK
Login / Logout (POST) (DELETE) => OK
ChangePassword (POST) => OK
User's Roles : (GET), (POST), (DELETE)=>OK
Study : (GET), (GET Expand), (POST), (DELETE), (PATCH) => OK
Preference : (GET), (PUT) =>OK
Center : (GET), (POST), (PUT) => OK
Visit Group : (GET), (POST), (DELETE) => OK
Visit Type : (GET), (POST), (DELETE) => OK
Affiliated Center  : (GET), (POST), (DELETE) =>OK
Export-db : (POST) => OK
Documentation (GET, POST, DELETE) => OK
Visit Dicoms (GET) => OK
Tus : (All) => OK
Patient : ( GET, POST, PATCH ) => OK
Patient Withdraw : (PATCH)=> OK
Api Visit (GET, POST, DELETE) => OK
QC : (PATCH) => OK
QC Reset : (PATCH) => OK
Corrective Action (PATCH) => OK

Salim TODO :

Preparation Investigateur / Monitor / Controller / Reviewer :
- Ask Unlock (POST)
- Api Review (POST, GET, DELETE)

- API Pour avoir les visit "creable" => Fonction faite dans Visit Service et testée
=> Faire le use case et permission (que investigateur) GET /studies//patients//remaining-visites
//manque logique d'afficher le n+1 et n+2 si optional (si porté par le front pas finetunable)

-API Tree :
Finir Test Unitaire Service creation tree

Class d'authorisation revenir a l'heritage?
Faire un objet specifique pour l'authorisation des Review ?

Pb Authorisation : Un ID Visit peut maintenant a etre attachee a plusieurs etudes ancillaires
=> Le scope de la study demandée doit venir du front
=> Dans authorization on doit verifier que le visit ID a bien une etude === a celle demandee et que l'utilisateur a les droits dessus
=> Le review status doit venir avec les info de la visit dans le repository (partie de code commentée)
=> Creer une table d'ancillaries studies ? => Non juste limiter les roles des etudes ancillaires
=> Quid des roles dans contexte d etude ancillaire (notament supervisor qui doit etre limité)


-Etude ancillaires
=> Crée dans les etudes comme étant acillaires De (patient code prefix reste a null)
=> Ne peut etre crér les roles que de Reviewer et supervisor
=>Supervisor :
Ne doit pas pouvoir modifier les patients
Ne doit pas pouvoir importer des patients
Ne doit pas pouvoir modifier / delete Visites, QC, Upload, local form
Ne doit pas pouvoir faire les relance d'upload
Doit pouvoir unlock / delete les review
Doit pouvoir faire relance de review
Doit pouvoir acceder au tracker seulement pour reviews
Doit pouvoir acceder aux stats
Doit pouvoir telecharger Dicoms
Doit pouvoir exporter data de l'étude
Doit pouvoir set documentation
Doit pouvoir voir user details

* Service Visit => Continuer test passage en upload Done


+Tard :
Faire une condition pour les NoContent dans le controller ? => ou mettre toujours un payload vide pour eviter les errur error->json() dans front?
Voir dans message d'erreur comment ajouter d'autre info que le message (pour id de login)
CreateVisitType et CreateVisitGroup => Ajouter un forbidden si l'etude a déjà des visites crées (etude demarrée)
ReverseProxy TUS => On peut ajouter le studyName dans le header dans uppy pour le recupérer dans le use case et checker le role Investigateur
Reverse proxy dicomweb => Comment faire venir le role et study depuis ohif ? depuis header?
TUS est Joignable sur Delete => peut etre gerer le failure/cancel pour vider tus ?
Deploiement ajouter le login / mdp pour dans orthanc pacs + bloquer delete dans lua script
table visit : UploadUserId plutot que CreateUserId
Dans remplissage DTO request, si variable boolean, un input string est interpretée à true.


//Les tests ne font pas d'assertion sur
- le tracker => Via un spy ?
- l'envoi de mails => voir doc laravel

A executer en post install :
php artisan db:migrate --seed
php artisan passport:install
