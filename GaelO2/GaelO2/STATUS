User (GET), (POST), (PUT), (DELETE), (PATCH) => OK
Request (POST) => OK
Login / Logout (POST) (DELETE) => OK
ChangePassword (POST) => OK
User's studies (GET) => OK
User's Roles In study : (GET), (POST), (DELETE)=>OK
Study : (GET), (GET Expand), (POST), (DELETE), (PATCH) => OK
Preference : (GET), (PUT) =>OK
Center : (GET), (POST), (PUT) => OK
Visit Group : (GET), (POST), (DELETE) => OK
Visit Type : (GET), (POST), (DELETE) => OK
Affiliated Center  : (GET), (POST), (DELETE) =>OK
Export-db : (POST) => OK
Documentation (GET, POST, PATCH (Modify + Reactivate), DELETE) => OK
Visit Dicoms File (GET) => OK
Visit Dicoms (GET) => OK
Tus : (All) => OK
Patient : ( GET, POST, PATCH ) => OK
Patient Withdraw : (PATCH)=> OK
Visit (GET, POST, DELETE, PATCH (reactivate)) => OK
QC : (PATCH) => OK
QC Reset : (PATCH) => OK
Corrective Action (PATCH) => OK
Ask Unlock (POST) => OK
Creatable-Visits (GET) => OK
Possible-Uploads (GET) => OK
dicom-series (DELETE, PATCH) => OK (Nb pour reset upload, loop depuis front)
dicom-study (PATCH) => OK
Investigator-form (GET, PUT, POST, DELETE, PATCH (unlock)) =>OK
Reviews (GET, POST, PUT, DELETE, PATCH (unlock))
Reviews From Visits (GET)
review-progression (GET)
studies/{studyName}/dicom-studies (GET)
studies/{studyName}/dicom-series/file (GET)
studies/{studyName}/visit-types/{visitTypeId}/visits (GET)
studies/{studyName}/visit-types/{visitTypeId}/reviews (GET)
studies/{studyName}/visit-types/{visitTypeId}/investigator-forms (GET)
studies/{studyName}/visit-types/{visitTypeId}/dicom-studies (GET)
studies/{studyName}/visit-types/{visitTypeId}/reviews/metadata (GET)
studies/{studyName}/visit-types/{visitTypeId}/investigator-forms/metadata (GET)
reviews/{id}/file (GET, POST, DELETE)
visit-date (PATCH)

Salim TODO :

Export Data study :
- Export du tracker=> A tester
- Associated File To Review => A faire dans un zip
- Export liste utilisateurs avec lien etude
- Review Ajout Patient Code et Visit Type ?

--- Etudes ancillaires ---
Pb Authorisation : Un ID Visit peut maintenant a etre attachee a plusieurs etudes ancillaires
=> Le scope de la study demandée doit venir du front
=> Dans authorization on doit verifier que le visit ID a bien une etude === a celle demandee et que l'utilisateur a les droits dessus
=> Le review status doit venir avec les info de la visit dans le repository (partie de code commentée)
=> Creer une table d'ancillaries studies ? => Non juste limiter les roles des etudes ancillaires
=> Quid des roles dans contexte d etude ancillaire (notament supervisor qui doit etre limité)

=> Crée dans les etudes comme étant acillaires De (patient code prefix reste a null)
=> Ne peut etre crér les roles que de Reviewer et supervisor
=>Supervisor :
Ne doit pas pouvoir modifier les patients
Ne doit pas pouvoir importer des patients
Ne doit pas pouvoir modifier / delete Visites, QC, Upload, local form
Ne doit pas pouvoir faire les relance d'upload
Doit pouvoir unlock / delete les review
Doit pouvoir faire relance de review
Doit pouvoir acceder au tracker seulement pour reviews
Doit pouvoir acceder aux stats
Doit pouvoir telecharger Dicoms
Doit pouvoir exporter data de l'étude
Doit pouvoir set documentation
Doit pouvoir voir user details

--- /Etudes ancillaires ---

--- Deployment -----
Purge de TUS automatique => Via purge du bucket ?
ajouter le login / mdp pour dans orthanc pacs + bloquer delete dans lua script=> conteneur derivé de OrthancPro
--- /Deployment -----

---- Refactoring Backend ----
Refac pour la lecture eviter de passer par des services pour laisser les services à l'ecriture ?
studies/{studyName}/orthanc-study-id/{orthancStudyID} => A renomer à original-orthanc-study-id (test le hash d'origine pas le courant)
Dicom Series Service => peut etre evoluer vers un DicomService pour les deux niveaux
GetVisitContext des services surement a faire passer a initialisation pour eviter requettes redondantes

Entity :
- Pluger toutes les reponses "data" sur ces entity response
=> GetPossibleUpload => VisitEntity ?
=> GetReviewProgression => Visit + Review_status + Progression entity?
=> GetVisitTree => ?, visit ?

Model et db :
- Type de variable a caster

---- /Refactoring Backend ------

Messagerie à designer (communication intermembre, front avec tinymce)
Creatable Visit : Manque Study Custom Logic (+dans front skip visites optionnelles ?)


Revoir DicowWeb Authorization Service => Pb route orthanc differentes
Review  : faire une propriete dans visit pour savoir si review disponible a un user en plus de status reviewAvailable ?
Verifier que quand on appelle un child si le parent est pas delete (cf probleme de role et study)

Reste Autres :
- Orthanc Send to peer
- Connecteur FTP/SFTP
- Dummy Run => Impact sur la db a designer
- Dicom liée aux review  => Impacte sur la db a designer
- QC items Details => Impact sur la db a designer

**** Tests ***
Test feature : visit et autres (dicom...)
Tests Services à faire
Mock des interfaces pour les uses cases et les services
Les tests ne font pas d'assertion sur
- le tracker => Via un spy ?
- l'envoi de mails => voir doc laravel
Review => tester un scenario de custom conclusion / adjudication


--- Maintenance Tips ---

A executer en post install :
docker-compose run gaelo2 php artisan migrate --seed **ou** php artisan db:migrate --seed

Afficher une nouvelle APP_KEY : (sert a cryptage/decryptage mais pas pour hash)
php artisan key:generate --show

Si dev :
php artisan telescope:install

--- /Maintenance Tips ---
