User (GET), (POST), (PUT), (DELETE), (PATCH) => OK
Request (POST) => OK
Login / Logout (POST) (DELETE) => OK
ChangePassword (POST) => OK
User's Roles : (GET), (POST), (DELETE)=>OK
Study : (GET), (GET Expand), (POST), (DELETE), (PATCH) => OK
Preference : (GET), (PUT) =>OK
Center : (GET), (POST), (PUT) => OK
Visit Group : (GET), (POST), (DELETE) => OK
Visit Type : (GET), (POST), (DELETE) => OK
Affiliated Center  : (GET), (POST), (DELETE) =>OK
Export-db : (POST) => OK
Documentation (GET, POST, DELETE) => OK
Visit Dicoms (GET) => OK

Preparation Investigateur / Monitor / Controller / Reviewer :
- Api creation Patient (GET, POST, PUT) => Reste PUT
- Api creation Visit (GET, POST, DELETE)
- Api QC (GET, PATCH + API /reset)
- Api Corrective Action (GET, PATCH)
- Api Review (POST, GET, DELETE)

Salim TODO :

* Validation des images => OK test à executer
* Service Visit => Continuer test passage en upload Done

* Reverse proxy dicomweb => Reste Authorization
* Reverse Proxy Tus => A tester (passé dans le controller reverse proxy)

Finir de refactorer :
    GetPatientVisit (refac + changer l'access au données dans bdd)
    Get Visit

//Les tests ne font pas d'assertion sur
- les permissions => A ajouter via les TestTools
- le tracker => Via un spy ?
- l'envoi de mails => voir doc laravel

+Tard :
Faire une condition pour les NoContent dans le controller ? => ou mettre toujours un payload vide pour eviter les errur error->json() dans front?
Voir dans message d'erreur comment ajouter d'autre info que le message (pour id de login)
CreateVisitType et CreateVisitGroup => Ajouter un forbidden si l'etude a déjà des visites crées (etude demarrée)
ReverseProxy TUS => On peut ajouter le studyName dans le header dans uppy pour le recupérer dans le use case et checker le role Investigateur
TUS est Joignable sur Delete => peut etre gerer le failure/cancel pour vider tus ?

A executer en post install :
php artisan db:migrate --seed
php artisan passport:install
