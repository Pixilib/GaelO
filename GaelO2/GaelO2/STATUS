User (GET), (POST), (PUT), (DELETE), (PATCH) => OK
Request (POST) => OK
Login / Logout (POST) (DELETE) => OK
ChangePassword (POST) => OK
User's studies (GET) => OK
User's Roles In study : (GET), (POST), (DELETE)=>OK
Study : (GET), (GET Expand), (POST), (DELETE), (PATCH) => OK
Preference : (GET), (PUT) =>OK
Center : (GET), (POST), (PUT) => OK
Visit Group : (GET), (POST), (DELETE) => OK
Visit Type : (GET), (POST), (DELETE) => OK
Affiliated Center  : (GET), (POST), (DELETE) =>OK
Export-db : (POST) => OK
Documentation (GET, POST, PATCH, DELETE) => OK
Visit Dicoms File (GET) => OK
Visit Dicoms (GET) => OK
Tus : (All) => OK
Patient : ( GET, POST, PATCH ) => OK
Patient Withdraw : (PATCH)=> OK
Visit (GET, POST, DELETE, PATCH (reactivate)) => OK
QC : (PATCH) => OK
QC Reset : (PATCH) => OK
Corrective Action (PATCH) => OK
Ask Unlock (POST) => OK
Creatable-Visits (GET) => OK
Possible-Uploads (GET) => OK
dicom-series (DELETE, PATCH) => OK (Nb pour reset upload, loop depuis front)
dicom-study (PATCH) => OK
Investigator-form (GET, PUT, POST, DELETE, PATCH (unlock)) =>OK
Reviews (GET, POST, PUT, DELETE, PATCH (unlock))
Reviews From Visits (GET)
review-progression (GET)
studies/{studyName}/dicom-studies (GET)
studies/{studyName}/dicom-series/file (GET)
studies/{studyName}/visit-types/{visitTypeId}/visits (GET)
studies/{studyName}/visit-types/{visitTypeId}/reviews (GET)
studies/{studyName}/visit-types/{visitTypeId}/investigator-forms (GET)
studies/{studyName}/visit-types/{visitTypeId}/dicom-studies (GET)
reviews/{id}/file (GET, POST, DELETE)

Salim TODO :

Entity :
- Fusionner Investigator et review form ? (ne different que par l'adjudication)
- Pluger toutes les reponses "data" sur ces entity response
=> GetPossibleUpload => PossibleUploadEntity ?
=> GetReviewProgression => Review + Progression entity?
=> GetUserRoleInStudy => RoleEntity ?
=> GetUserRole => RoleEntity ?
=> GetVisitTree => ?

Download Dicom :
Mieux organiser la reponse entity (dissocier les sous niveaux et refusionner dans le front)
Re faire FrontEnd (tout lister au niveau series?)

Messagerie à designer

Creatable Visit : Manque Study Custom Logic (+dans front skip visites optionnelles ?)
Ajouter dicom contstraint dans definition VisitType et upgrader de l'uploader
Checker gestion statut patient (à voir avec test bicar)
AskUnlock basé sur le VisitId ? => passer a review id ?

Export Data study :
- Personalisation au niveau study -> Couche d'abstration notamment pour injecter le lysarc code
- Review Ajout Patient Code et Visit Type ?
- Associated File To Review => A faire dans un zip

Model et db :
- Type de variable a caster
- Clé etrangere DicomStudy et DicomSeries non conventionnelle

Revoir DicowWeb Authorization Service => Pb route orthanc differentes
GetVisitContexte des service surement a faire passer a initialisation pour eviter requettes redondantes
Review  : faire une propriete dans visit pour savoir si review disponible a un user en plus de status reviewAvailable ?
Dicom Series Service => peut etre evoluer vers un DicomService pour les deux niveaux
Verifier que quand on appelle un child si le parent est pas delete (cf probleme de role et study)
download dicom : se reposer sur l'assynchronisme d'orthanc depuis le front (ou generation d'un lien unique pour le dl?)

**** Tests ***
Test feature : visit et autres (dicom...)
Tests Services à faire
Mock des interfaces pour les uses cases et les services
Les tests ne font pas d'assertion sur
- le tracker => Via un spy ?
- l'envoi de mails => voir doc laravel
Review => tester un scenario de custom conclusion / adjudication

+Tard :
studies/{studyName}/orthanc-study-id/{orthancStudyID} => A renomer à original-orthanc-study-id (test le hash d'origine pas le courant)
TUS est Joignable sur Delete => peut etre gerer le failure/cancel pour vider tus ?
Deploiement ajouter le login / mdp pour dans orthanc pacs + bloquer delete dans lua script
Dans remplissage DTO request, si variable boolean, un input string est interpretée à true.
QC Not Needed => autoriser ou pas remove de series ?

Reste Supervisor :
- Upload Manager
- Remininder email upload / review / Communication mail inter membre (utiliser tinyMCE React)
- Orthanc Send to peer

Reste Autres :
- Connecteur FTP/SFTP
- Cron job

*** Etudes ancillaires ***
Pb Authorisation : Un ID Visit peut maintenant a etre attachee a plusieurs etudes ancillaires
=> Le scope de la study demandée doit venir du front
=> Dans authorization on doit verifier que le visit ID a bien une etude === a celle demandee et que l'utilisateur a les droits dessus
=> Le review status doit venir avec les info de la visit dans le repository (partie de code commentée)
=> Creer une table d'ancillaries studies ? => Non juste limiter les roles des etudes ancillaires
=> Quid des roles dans contexte d etude ancillaire (notament supervisor qui doit etre limité)

=> Crée dans les etudes comme étant acillaires De (patient code prefix reste a null)
=> Ne peut etre crér les roles que de Reviewer et supervisor
=>Supervisor :
Ne doit pas pouvoir modifier les patients
Ne doit pas pouvoir importer des patients
Ne doit pas pouvoir modifier / delete Visites, QC, Upload, local form
Ne doit pas pouvoir faire les relance d'upload
Doit pouvoir unlock / delete les review
Doit pouvoir faire relance de review
Doit pouvoir acceder au tracker seulement pour reviews
Doit pouvoir acceder aux stats
Doit pouvoir telecharger Dicoms
Doit pouvoir exporter data de l'étude
Doit pouvoir set documentation
Doit pouvoir voir user details

*** /Etudes ancillaires ***


*** Maintenance Tips ***

A executer en post install :
docker-compose run gaelo2 php artisan migrate --seed **ou** php artisan db:migrate --seed
php artisan passport:install

Si dev :
php artisan telescope:install

*** /Maintenance Tips ***
