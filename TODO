Salim TODO :

- Refac SendMail est complexe probablement a splitter
- Refac : GetVisit pourrait un avoir un accès plus direct aux données (review status + visit context + user details)

- Refac : setVisitData de VisitEntity à revoir (spliter en differents sets)
-> DicomStudyEntity
-> PatientEntity
-> Review Entity
-> Tracker Entity
-> Visit Entity

- Pluger toutes les reponses "data" sur entity response
=> GetPossibleUpload => VisitEntity ?
=> GetReviewProgression => Visit + Review_status + Progression entity?

- Get Creatable Visit, retourner les visitType entity des créables ? 
- CreateVisit => Verifier que la visite à creer est bien créable niveau backend

- Optimiser l'utilisation des authorization service en injectant les data depuis le usecase (ou les rendre stateless)
- Optimiser le service visit en injectant directement le visit context

- Sur les action du superviseur faire passer l'etude appelée en query tag pour sécuriser le contexte dans lequel la ressource est appelée (en cas d'etude ancillaire si l'utilisateur est superviseur de l'étude principale la requette emise de l'étude ancillaire passera le RBAC )
  
- Portage GaelO1 anonymisation RTSTRUCT et Viewers
- Orthanc Send to peer
- Mise en place scheduler, monitoring scheduler par email pourra etre personnalisé (ex que si nouveau patient...)

--- Etudes ancillaires ---
Tester Etudes ancillaire avec Emilie (voir return default data de review status si entitée non crée)
Ne doit pas pouvoir faire les relance d'upload => Voir avec Emilie (probablement passer les info de study dans un contexte)
--- /Etudes ancillaires ---

**** Tests ***
Test feature : visit et autres (dicom...)
Tests Services à faire
Mock des interfaces pour les uses cases et les services
Les tests ne font pas d'assertion sur
- le tracker => Via un spy ?
- l'envoi de mails => voir doc laravel
Review => tester un scenario de custom conclusion / adjudication
Test par etude specifique