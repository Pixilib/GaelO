(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[10],{

/***/ 1003:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {
   true ? factory(exports) :
  undefined;
}(this, (function (exports) { 'use strict';

  /**
   * @module ol/util
   */

  /**
   * @return {?} Any return.
   */
  function abstract() {
    return /** @type {?} */ ((function() {
      throw new Error('Unimplemented abstract method.');
    })());
  }

  /**
   * Counter for getUid.
   * @type {number}
   * @private
   */
  var uidCounter_ = 0;

  /**
   * Gets a unique ID for an object. This mutates the object so that further calls
   * with the same object as a parameter returns the same value. Unique IDs are generated
   * as a strictly increasing sequence. Adapted from goog.getUid.
   *
   * @param {Object} obj The object to get the unique ID for.
   * @return {string} The unique ID for the object.
   * @function module:ol.getUid
   * @api
   */
  function getUid(obj) {
    return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));
  }

  /**
   * OpenLayers version.
   * @type {string}
   */
  var VERSION = '5.3.0';

  /**
   * @module ol/AssertionError
   */

  /**
   * Error object thrown when an assertion failed. This is an ECMA-262 Error,
   * extended with a `code` property.
   * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.
   */
  var AssertionError = /*@__PURE__*/(function (Error) {
    function AssertionError(code) {
      var path = 'v' + VERSION.split('-')[0];
      var message = 'Assertion failed. See https://openlayers.org/en/' + path +
      '/doc/errors/#' + code + ' for details.';

      Error.call(this, message);

      /**
       * Error code. The meaning of the code can be found on
       * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with
       * the version found in the OpenLayers script's header comment if a version
       * other than the latest is used).
       * @type {number}
       * @api
       */
      this.code = code;

      /**
       * @type {string}
       */
      this.name = 'AssertionError';

      // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40
      this.message = message;
    }

    if ( Error ) AssertionError.__proto__ = Error;
    AssertionError.prototype = Object.create( Error && Error.prototype );
    AssertionError.prototype.constructor = AssertionError;

    return AssertionError;
  }(Error));

  /**
   * @module ol/CollectionEventType
   */

  /**
   * @enum {string}
   */
  var CollectionEventType = {
    /**
     * Triggered when an item is added to the collection.
     * @event module:ol/Collection.CollectionEvent#add
     * @api
     */
    ADD: 'add',
    /**
     * Triggered when an item is removed from the collection.
     * @event module:ol/Collection.CollectionEvent#remove
     * @api
     */
    REMOVE: 'remove'
  };

  /**
   * @module ol/ObjectEventType
   */

  /**
   * @enum {string}
   */
  var ObjectEventType = {
    /**
     * Triggered when a property is changed.
     * @event module:ol/Object.ObjectEvent#propertychange
     * @api
     */
    PROPERTYCHANGE: 'propertychange'
  };

  /**
   * @module ol/obj
   */


  /**
   * Polyfill for Object.assign().  Assigns enumerable and own properties from
   * one or more source objects to a target object.
   * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.
   *
   * @param {!Object} target The target object.
   * @param {...Object} var_sources The source object(s).
   * @return {!Object} The modified target object.
   */
  var assign = (typeof Object.assign === 'function') ? Object.assign : function(target, var_sources) {
    var arguments$1 = arguments;

    if (target === undefined || target === null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }

    var output = Object(target);
    for (var i = 1, ii = arguments.length; i < ii; ++i) {
      var source = arguments$1[i];
      if (source !== undefined && source !== null) {
        for (var key in source) {
          if (source.hasOwnProperty(key)) {
            output[key] = source[key];
          }
        }
      }
    }
    return output;
  };


  /**
   * Removes all properties from an object.
   * @param {Object} object The object to clear.
   */
  function clear(object) {
    for (var property in object) {
      delete object[property];
    }
  }


  /**
   * Get an array of property values from an object.
   * @param {Object<K,V>} object The object from which to get the values.
   * @return {!Array<V>} The property values.
   * @template K,V
   */
  function getValues(object) {
    var values = [];
    for (var property in object) {
      values.push(object[property]);
    }
    return values;
  }


  /**
   * Determine if an object has any properties.
   * @param {Object} object The object to check.
   * @return {boolean} The object is empty.
   */
  function isEmpty(object) {
    var property;
    for (property in object) {
      return false;
    }
    return !property;
  }

  /**
   * @module ol/events
   */


  /**
   * Key to use with {@link module:ol/Observable~Observable#unByKey}.
   * @typedef {Object} EventsKey
   * @property {Object} [bindTo]
   * @property {ListenerFunction} [boundListener]
   * @property {boolean} callOnce
   * @property {number} [deleteIndex]
   * @property {ListenerFunction} listener
   * @property {import("./events/Target.js").EventTargetLike} target
   * @property {string} type
   * @api
   */


  /**
   * Listener function. This function is called with an event object as argument.
   * When the function returns `false`, event propagation will stop.
   *
   * @typedef {function((Event|import("./events/Event.js").default)): (void|boolean)} ListenerFunction
   * @api
   */


  /**
   * @param {EventsKey} listenerObj Listener object.
   * @return {ListenerFunction} Bound listener.
   */
  function bindListener(listenerObj) {
    var boundListener = function(evt) {
      var listener = listenerObj.listener;
      var bindTo = listenerObj.bindTo || listenerObj.target;
      if (listenerObj.callOnce) {
        unlistenByKey(listenerObj);
      }
      return listener.call(bindTo, evt);
    };
    listenerObj.boundListener = boundListener;
    return boundListener;
  }


  /**
   * Finds the matching {@link module:ol/events~EventsKey} in the given listener
   * array.
   *
   * @param {!Array<!EventsKey>} listeners Array of listeners.
   * @param {!Function} listener The listener function.
   * @param {Object=} opt_this The `this` value inside the listener.
   * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching
   *     listener, for {@link module:ol/events~unlistenByKey}.
   * @return {EventsKey|undefined} The matching listener object.
   */
  function findListener(listeners, listener, opt_this, opt_setDeleteIndex) {
    var listenerObj;
    for (var i = 0, ii = listeners.length; i < ii; ++i) {
      listenerObj = listeners[i];
      if (listenerObj.listener === listener &&
          listenerObj.bindTo === opt_this) {
        if (opt_setDeleteIndex) {
          listenerObj.deleteIndex = i;
        }
        return listenerObj;
      }
    }
    return undefined;
  }


  /**
   * @param {import("./events/Target.js").EventTargetLike} target Target.
   * @param {string} type Type.
   * @return {Array<EventsKey>|undefined} Listeners.
   */
  function getListeners(target, type) {
    var listenerMap = getListenerMap(target);
    return listenerMap ? listenerMap[type] : undefined;
  }


  /**
   * Get the lookup of listeners.
   * @param {Object} target Target.
   * @param {boolean=} opt_create If a map should be created if it doesn't exist.
   * @return {!Object<string, Array<EventsKey>>} Map of
   *     listeners by event type.
   */
  function getListenerMap(target, opt_create) {
    var listenerMap = target.ol_lm;
    if (!listenerMap && opt_create) {
      listenerMap = target.ol_lm = {};
    }
    return listenerMap;
  }


  /**
   * Remove the listener map from a target.
   * @param {Object} target Target.
   */
  function removeListenerMap(target) {
    delete target.ol_lm;
  }


  /**
   * Clean up all listener objects of the given type.  All properties on the
   * listener objects will be removed, and if no listeners remain in the listener
   * map, it will be removed from the target.
   * @param {import("./events/Target.js").EventTargetLike} target Target.
   * @param {string} type Type.
   */
  function removeListeners(target, type) {
    var listeners = getListeners(target, type);
    if (listeners) {
      for (var i = 0, ii = listeners.length; i < ii; ++i) {
        /** @type {import("./events/Target.js").default} */ (target).
          removeEventListener(type, listeners[i].boundListener);
        clear(listeners[i]);
      }
      listeners.length = 0;
      var listenerMap = getListenerMap(target);
      if (listenerMap) {
        delete listenerMap[type];
        if (Object.keys(listenerMap).length === 0) {
          removeListenerMap(target);
        }
      }
    }
  }


  /**
   * Registers an event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * This function efficiently binds a `listener` to a `this` object, and returns
   * a key for use with {@link module:ol/events~unlistenByKey}.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object=} opt_this Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   * @param {boolean=} opt_once If true, add the listener as one-off listener.
   * @return {EventsKey} Unique key for the listener.
   */
  function listen(target, type, listener, opt_this, opt_once) {
    var listenerMap = getListenerMap(target, true);
    var listeners = listenerMap[type];
    if (!listeners) {
      listeners = listenerMap[type] = [];
    }
    var listenerObj = findListener(listeners, listener, opt_this, false);
    if (listenerObj) {
      if (!opt_once) {
        // Turn one-off listener into a permanent one.
        listenerObj.callOnce = false;
      }
    } else {
      listenerObj = /** @type {EventsKey} */ ({
        bindTo: opt_this,
        callOnce: !!opt_once,
        listener: listener,
        target: target,
        type: type
      });
      /** @type {import("./events/Target.js").default} */ (target).
        addEventListener(type, bindListener(listenerObj));
      listeners.push(listenerObj);
    }

    return listenerObj;
  }


  /**
   * Registers a one-off event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * This function efficiently binds a `listener` as self-unregistering listener
   * to a `this` object, and returns a key for use with
   * {@link module:ol/events~unlistenByKey} in case the listener needs to be
   * unregistered before it is called.
   *
   * When {@link module:ol/events~listen} is called with the same arguments after this
   * function, the self-unregistering listener will be turned into a permanent
   * listener.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object=} opt_this Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   * @return {EventsKey} Key for unlistenByKey.
   */
  function listenOnce(target, type, listener, opt_this) {
    return listen(target, type, listener, opt_this, true);
  }


  /**
   * Unregisters an event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * To return a listener, this function needs to be called with the exact same
   * arguments that were used for a previous {@link module:ol/events~listen} call.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object=} opt_this Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   */
  function unlisten(target, type, listener, opt_this) {
    var listeners = getListeners(target, type);
    if (listeners) {
      var listenerObj = findListener(listeners, listener, opt_this, true);
      if (listenerObj) {
        unlistenByKey(listenerObj);
      }
    }
  }


  /**
   * Unregisters event listeners on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * The argument passed to this function is the key returned from
   * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.
   *
   * @param {EventsKey} key The key.
   */
  function unlistenByKey(key) {
    if (key && key.target) {
      /** @type {import("./events/Target.js").default} */ (key.target).
        removeEventListener(key.type, key.boundListener);
      var listeners = getListeners(key.target, key.type);
      if (listeners) {
        var i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);
        if (i !== -1) {
          listeners.splice(i, 1);
        }
        if (listeners.length === 0) {
          removeListeners(key.target, key.type);
        }
      }
      clear(key);
    }
  }


  /**
   * Unregisters all event listeners on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * @param {import("./events/Target.js").EventTargetLike} target Target.
   */
  function unlistenAll(target) {
    var listenerMap = getListenerMap(target);
    if (listenerMap) {
      for (var type in listenerMap) {
        removeListeners(target, type);
      }
    }
  }

  /**
   * @module ol/Disposable
   */

  /**
   * @classdesc
   * Objects that need to clean up after themselves.
   */
  var Disposable = function Disposable() {
    /**
     * The object has already been disposed.
     * @type {boolean}
     * @private
     */
    this.disposed_ = false;
  };

  /**
   * Clean up.
   */
  Disposable.prototype.dispose = function dispose () {
    if (!this.disposed_) {
      this.disposed_ = true;
      this.disposeInternal();
    }
  };

  /**
   * Extension point for disposable objects.
   * @protected
   */
  Disposable.prototype.disposeInternal = function disposeInternal () {};

  /**
   * @module ol/functions
   */

  /**
   * Always returns true.
   * @returns {boolean} true.
   */
  function TRUE() {
    return true;
  }

  /**
   * Always returns false.
   * @returns {boolean} false.
   */
  function FALSE() {
    return false;
  }

  /**
   * A reusable function, used e.g. as a default for callbacks.
   *
   * @return {void} Nothing.
   */
  function VOID() {}

  /**
   * @module ol/events/Event
   */

  /**
   * @classdesc
   * Stripped down implementation of the W3C DOM Level 2 Event interface.
   * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.
   *
   * This implementation only provides `type` and `target` properties, and
   * `stopPropagation` and `preventDefault` methods. It is meant as base class
   * for higher level events defined in the library, and works with
   * {@link module:ol/events/Target~Target}.
   */
  var Event = function Event(type) {

    /**
     * @type {boolean}
     */
    this.propagationStopped;

    /**
     * The event type.
     * @type {string}
     * @api
     */
    this.type = type;

    /**
     * The event target.
     * @type {Object}
     * @api
     */
    this.target = null;
  };

  /**
   * Stop event propagation.
   * @api
   */
  Event.prototype.preventDefault = function preventDefault () {
    this.propagationStopped = true;
  };

  /**
   * Stop event propagation.
   * @api
   */
  Event.prototype.stopPropagation = function stopPropagation () {
    this.propagationStopped = true;
  };


  /**
   * @param {Event|import("./Event.js").default} evt Event
   */
  function stopPropagation(evt) {
    evt.stopPropagation();
  }

  /**
   * @module ol/events/Target
   */


  /**
   * @typedef {EventTarget|Target} EventTargetLike
   */


  /**
   * @classdesc
   * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
   * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.
   *
   * There are two important simplifications compared to the specification:
   *
   * 1. The handling of `useCapture` in `addEventListener` and
   *    `removeEventListener`. There is no real capture model.
   * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
   *    There is no event target hierarchy. When a listener calls
   *    `stopPropagation` or `preventDefault` on an event object, it means that no
   *    more listeners after this one will be called. Same as when the listener
   *    returns false.
   */
  var Target = /*@__PURE__*/(function (Disposable$$1) {
    function Target() {

      Disposable$$1.call(this);

      /**
       * @private
       * @type {!Object<string, number>}
       */
      this.pendingRemovals_ = {};

      /**
       * @private
       * @type {!Object<string, number>}
       */
      this.dispatching_ = {};

      /**
       * @private
       * @type {!Object<string, Array<import("../events.js").ListenerFunction>>}
       */
      this.listeners_ = {};

    }

    if ( Disposable$$1 ) Target.__proto__ = Disposable$$1;
    Target.prototype = Object.create( Disposable$$1 && Disposable$$1.prototype );
    Target.prototype.constructor = Target;

    /**
     * @param {string} type Type.
     * @param {import("../events.js").ListenerFunction} listener Listener.
     */
    Target.prototype.addEventListener = function addEventListener (type, listener) {
      var listeners = this.listeners_[type];
      if (!listeners) {
        listeners = this.listeners_[type] = [];
      }
      if (listeners.indexOf(listener) === -1) {
        listeners.push(listener);
      }
    };

    /**
     * Dispatches an event and calls all listeners listening for events
     * of this type. The event parameter can either be a string or an
     * Object with a `type` property.
     *
     * @param {{type: string,
     *     target: (EventTargetLike|undefined),
     *     propagationStopped: (boolean|undefined)}|
     *     import("./Event.js").default|string} event Event object.
     * @return {boolean|undefined} `false` if anyone called preventDefault on the
     *     event object or if any of the listeners returned false.
     * @api
     */
    Target.prototype.dispatchEvent = function dispatchEvent (event) {
      var evt = typeof event === 'string' ? new Event(event) : event;
      var type = evt.type;
      evt.target = this;
      var listeners = this.listeners_[type];
      var propagate;
      if (listeners) {
        if (!(type in this.dispatching_)) {
          this.dispatching_[type] = 0;
          this.pendingRemovals_[type] = 0;
        }
        ++this.dispatching_[type];
        for (var i = 0, ii = listeners.length; i < ii; ++i) {
          if (listeners[i].call(this, evt) === false || evt.propagationStopped) {
            propagate = false;
            break;
          }
        }
        --this.dispatching_[type];
        if (this.dispatching_[type] === 0) {
          var pendingRemovals = this.pendingRemovals_[type];
          delete this.pendingRemovals_[type];
          while (pendingRemovals--) {
            this.removeEventListener(type, VOID);
          }
          delete this.dispatching_[type];
        }
        return propagate;
      }
    };

    /**
     * @inheritDoc
     */
    Target.prototype.disposeInternal = function disposeInternal () {
      unlistenAll(this);
    };

    /**
     * Get the listeners for a specified event type. Listeners are returned in the
     * order that they will be called in.
     *
     * @param {string} type Type.
     * @return {Array<import("../events.js").ListenerFunction>} Listeners.
     */
    Target.prototype.getListeners = function getListeners$$1 (type) {
      return this.listeners_[type];
    };

    /**
     * @param {string=} opt_type Type. If not provided,
     *     `true` will be returned if this event target has any listeners.
     * @return {boolean} Has listeners.
     */
    Target.prototype.hasListener = function hasListener (opt_type) {
      return opt_type ?
        opt_type in this.listeners_ :
        Object.keys(this.listeners_).length > 0;
    };

    /**
     * @param {string} type Type.
     * @param {import("../events.js").ListenerFunction} listener Listener.
     */
    Target.prototype.removeEventListener = function removeEventListener (type, listener) {
      var listeners = this.listeners_[type];
      if (listeners) {
        var index = listeners.indexOf(listener);
        if (type in this.pendingRemovals_) {
          // make listener a no-op, and remove later in #dispatchEvent()
          listeners[index] = VOID;
          ++this.pendingRemovals_[type];
        } else {
          listeners.splice(index, 1);
          if (listeners.length === 0) {
            delete this.listeners_[type];
          }
        }
      }
    };

    return Target;
  }(Disposable));

  /**
   * @module ol/events/EventType
   */

  /**
   * @enum {string}
   * @const
   */
  var EventType = {
    /**
     * Generic change event. Triggered when the revision counter is increased.
     * @event module:ol/events/Event~Event#change
     * @api
     */
    CHANGE: 'change',

    CLEAR: 'clear',
    CONTEXTMENU: 'contextmenu',
    CLICK: 'click',
    DBLCLICK: 'dblclick',
    DRAGENTER: 'dragenter',
    DRAGOVER: 'dragover',
    DROP: 'drop',
    ERROR: 'error',
    KEYDOWN: 'keydown',
    KEYPRESS: 'keypress',
    LOAD: 'load',
    MOUSEDOWN: 'mousedown',
    MOUSEMOVE: 'mousemove',
    MOUSEOUT: 'mouseout',
    MOUSEUP: 'mouseup',
    MOUSEWHEEL: 'mousewheel',
    MSPOINTERDOWN: 'MSPointerDown',
    RESIZE: 'resize',
    TOUCHSTART: 'touchstart',
    TOUCHMOVE: 'touchmove',
    TOUCHEND: 'touchend',
    WHEEL: 'wheel'
  };

  /**
   * @module ol/Observable
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * An event target providing convenient methods for listener registration
   * and unregistration. A generic `change` event is always available through
   * {@link module:ol/Observable~Observable#changed}.
   *
   * @fires import("./events/Event.js").Event
   * @api
   */
  var Observable = /*@__PURE__*/(function (EventTarget) {
    function Observable() {

      EventTarget.call(this);

      /**
       * @private
       * @type {number}
       */
      this.revision_ = 0;

    }

    if ( EventTarget ) Observable.__proto__ = EventTarget;
    Observable.prototype = Object.create( EventTarget && EventTarget.prototype );
    Observable.prototype.constructor = Observable;

    /**
     * Increases the revision counter and dispatches a 'change' event.
     * @api
     */
    Observable.prototype.changed = function changed () {
      ++this.revision_;
      this.dispatchEvent(EventType.CHANGE);
    };

    /**
     * Get the version number for this object.  Each time the object is modified,
     * its version number will be incremented.
     * @return {number} Revision.
     * @api
     */
    Observable.prototype.getRevision = function getRevision () {
      return this.revision_;
    };

    /**
     * Listen for a certain type of event.
     * @param {string|Array<string>} type The event type or array of event types.
     * @param {function(?): ?} listener The listener function.
     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
     *     called with an array of event types as the first argument, the return
     *     will be an array of keys.
     * @api
     */
    Observable.prototype.on = function on (type, listener) {
      if (Array.isArray(type)) {
        var len = type.length;
        var keys = new Array(len);
        for (var i = 0; i < len; ++i) {
          keys[i] = listen(this, type[i], listener);
        }
        return keys;
      } else {
        return listen(this, /** @type {string} */ (type), listener);
      }
    };

    /**
     * Listen once for a certain type of event.
     * @param {string|Array<string>} type The event type or array of event types.
     * @param {function(?): ?} listener The listener function.
     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
     *     called with an array of event types as the first argument, the return
     *     will be an array of keys.
     * @api
     */
    Observable.prototype.once = function once (type, listener) {
      if (Array.isArray(type)) {
        var len = type.length;
        var keys = new Array(len);
        for (var i = 0; i < len; ++i) {
          keys[i] = listenOnce(this, type[i], listener);
        }
        return keys;
      } else {
        return listenOnce(this, /** @type {string} */ (type), listener);
      }
    };

    /**
     * Unlisten for a certain type of event.
     * @param {string|Array<string>} type The event type or array of event types.
     * @param {function(?): ?} listener The listener function.
     * @api
     */
    Observable.prototype.un = function un (type, listener) {
      if (Array.isArray(type)) {
        for (var i = 0, ii = type.length; i < ii; ++i) {
          unlisten(this, type[i], listener);
        }
        return;
      } else {
        unlisten(this, /** @type {string} */ (type), listener);
      }
    };

    return Observable;
  }(Target));

  /**
   * @module ol/Object
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.
   */
  var ObjectEvent = /*@__PURE__*/(function (Event$$1) {
    function ObjectEvent(type, key, oldValue) {
      Event$$1.call(this, type);

      /**
       * The name of the property whose value is changing.
       * @type {string}
       * @api
       */
      this.key = key;

      /**
       * The old value. To get the new value use `e.target.get(e.key)` where
       * `e` is the event object.
       * @type {*}
       * @api
       */
      this.oldValue = oldValue;

    }

    if ( Event$$1 ) ObjectEvent.__proto__ = Event$$1;
    ObjectEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    ObjectEvent.prototype.constructor = ObjectEvent;

    return ObjectEvent;
  }(Event));


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Most non-trivial classes inherit from this.
   *
   * This extends {@link module:ol/Observable} with observable
   * properties, where each property is observable as well as the object as a
   * whole.
   *
   * Classes that inherit from this have pre-defined properties, to which you can
   * add your owns. The pre-defined properties are listed in this documentation as
   * 'Observable Properties', and have their own accessors; for example,
   * {@link module:ol/Map~Map} has a `target` property, accessed with
   * `getTarget()` and changed with `setTarget()`. Not all properties are however
   * settable. There are also general-purpose accessors `get()` and `set()`. For
   * example, `get('target')` is equivalent to `getTarget()`.
   *
   * The `set` accessors trigger a change event, and you can monitor this by
   * registering a listener. For example, {@link module:ol/View~View} has a
   * `center` property, so `view.on('change:center', function(evt) {...});` would
   * call the function whenever the value of the center property changes. Within
   * the function, `evt.target` would be the view, so `evt.target.getCenter()`
   * would return the new center.
   *
   * You can add your own observable properties with
   * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
   * You can listen for changes on that property value with
   * `object.on('change:prop', listener)`. You can get a list of all
   * properties with {@link module:ol/Object~BaseObject#getProperties}.
   *
   * Note that the observable properties are separate from standard JS properties.
   * You can, for example, give your map object a title with
   * `map.title='New title'` and with `map.set('title', 'Another title')`. The
   * first will be a `hasOwnProperty`; the second will appear in
   * `getProperties()`. Only the second is observable.
   *
   * Properties can be deleted by using the unset method. E.g.
   * object.unset('foo').
   *
   * @fires ObjectEvent
   * @api
   */
  var BaseObject = /*@__PURE__*/(function (Observable$$1) {
    function BaseObject(opt_values) {
      Observable$$1.call(this);

      // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is
      // the same as the order in which they were created.  This also helps to
      // ensure that object properties are always added in the same order, which
      // helps many JavaScript engines generate faster code.
      getUid(this);

      /**
       * @private
       * @type {!Object<string, *>}
       */
      this.values_ = {};

      if (opt_values !== undefined) {
        this.setProperties(opt_values);
      }
    }

    if ( Observable$$1 ) BaseObject.__proto__ = Observable$$1;
    BaseObject.prototype = Object.create( Observable$$1 && Observable$$1.prototype );
    BaseObject.prototype.constructor = BaseObject;

    /**
     * Gets a value.
     * @param {string} key Key name.
     * @return {*} Value.
     * @api
     */
    BaseObject.prototype.get = function get (key) {
      var value;
      if (this.values_.hasOwnProperty(key)) {
        value = this.values_[key];
      }
      return value;
    };

    /**
     * Get a list of object property names.
     * @return {Array<string>} List of property names.
     * @api
     */
    BaseObject.prototype.getKeys = function getKeys () {
      return Object.keys(this.values_);
    };

    /**
     * Get an object of all property names and values.
     * @return {Object<string, *>} Object.
     * @api
     */
    BaseObject.prototype.getProperties = function getProperties () {
      return assign({}, this.values_);
    };

    /**
     * @param {string} key Key name.
     * @param {*} oldValue Old value.
     */
    BaseObject.prototype.notify = function notify (key, oldValue) {
      var eventType;
      eventType = getChangeEventType(key);
      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
      eventType = ObjectEventType.PROPERTYCHANGE;
      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
    };

    /**
     * Sets a value.
     * @param {string} key Key name.
     * @param {*} value Value.
     * @param {boolean=} opt_silent Update without triggering an event.
     * @api
     */
    BaseObject.prototype.set = function set (key, value, opt_silent) {
      if (opt_silent) {
        this.values_[key] = value;
      } else {
        var oldValue = this.values_[key];
        this.values_[key] = value;
        if (oldValue !== value) {
          this.notify(key, oldValue);
        }
      }
    };

    /**
     * Sets a collection of key-value pairs.  Note that this changes any existing
     * properties and adds new ones (it does not remove any existing properties).
     * @param {Object<string, *>} values Values.
     * @param {boolean=} opt_silent Update without triggering an event.
     * @api
     */
    BaseObject.prototype.setProperties = function setProperties (values, opt_silent) {
      for (var key in values) {
        this.set(key, values[key], opt_silent);
      }
    };

    /**
     * Unsets a property.
     * @param {string} key Key name.
     * @param {boolean=} opt_silent Unset without triggering an event.
     * @api
     */
    BaseObject.prototype.unset = function unset (key, opt_silent) {
      if (key in this.values_) {
        var oldValue = this.values_[key];
        delete this.values_[key];
        if (!opt_silent) {
          this.notify(key, oldValue);
        }
      }
    };

    return BaseObject;
  }(Observable));


  /**
   * @type {Object<string, string>}
   */
  var changeEventTypeCache = {};


  /**
   * @param {string} key Key name.
   * @return {string} Change name.
   */
  function getChangeEventType(key) {
    return changeEventTypeCache.hasOwnProperty(key) ?
      changeEventTypeCache[key] :
      (changeEventTypeCache[key] = 'change:' + key);
  }

  /**
   * @module ol/Collection
   */


  /**
   * @enum {string}
   * @private
   */
  var Property = {
    LENGTH: 'length'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this
   * type.
   */
  var CollectionEvent = /*@__PURE__*/(function (Event$$1) {
    function CollectionEvent(type, opt_element) {
      Event$$1.call(this, type);

      /**
       * The element that is added to or removed from the collection.
       * @type {*}
       * @api
       */
      this.element = opt_element;

    }

    if ( Event$$1 ) CollectionEvent.__proto__ = Event$$1;
    CollectionEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    CollectionEvent.prototype.constructor = CollectionEvent;

    return CollectionEvent;
  }(Event));


  /**
   * @typedef {Object} Options
   * @property {boolean} [unique=false] Disallow the same item from being added to
   * the collection twice.
   */

  /**
   * @classdesc
   * An expanded version of standard JS Array, adding convenience methods for
   * manipulation. Add and remove changes to the Collection trigger a Collection
   * event. Note that this does not cover changes to the objects _within_ the
   * Collection; they trigger events on the appropriate object, not on the
   * Collection as a whole.
   *
   * @fires CollectionEvent
   *
   * @template T
   * @api
   */
  var Collection = /*@__PURE__*/(function (BaseObject$$1) {
    function Collection(opt_array, opt_options) {

      BaseObject$$1.call(this);

      var options = opt_options || {};

      /**
       * @private
       * @type {boolean}
       */
      this.unique_ = !!options.unique;

      /**
       * @private
       * @type {!Array<T>}
       */
      this.array_ = opt_array ? opt_array : [];

      if (this.unique_) {
        for (var i = 0, ii = this.array_.length; i < ii; ++i) {
          this.assertUnique_(this.array_[i], i);
        }
      }

      this.updateLength_();

    }

    if ( BaseObject$$1 ) Collection.__proto__ = BaseObject$$1;
    Collection.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Collection.prototype.constructor = Collection;

    /**
     * Remove all elements from the collection.
     * @api
     */
    Collection.prototype.clear = function clear () {
      while (this.getLength() > 0) {
        this.pop();
      }
    };

    /**
     * Add elements to the collection.  This pushes each item in the provided array
     * to the end of the collection.
     * @param {!Array<T>} arr Array.
     * @return {Collection<T>} This collection.
     * @api
     */
    Collection.prototype.extend = function extend (arr) {
      for (var i = 0, ii = arr.length; i < ii; ++i) {
        this.push(arr[i]);
      }
      return this;
    };

    /**
     * Iterate over each element, calling the provided callback.
     * @param {function(T, number, Array<T>): *} f The function to call
     *     for every element. This function takes 3 arguments (the element, the
     *     index and the array). The return value is ignored.
     * @api
     */
    Collection.prototype.forEach = function forEach (f) {
      var array = this.array_;
      for (var i = 0, ii = array.length; i < ii; ++i) {
        f(array[i], i, array);
      }
    };

    /**
     * Get a reference to the underlying Array object. Warning: if the array
     * is mutated, no events will be dispatched by the collection, and the
     * collection's "length" property won't be in sync with the actual length
     * of the array.
     * @return {!Array<T>} Array.
     * @api
     */
    Collection.prototype.getArray = function getArray () {
      return this.array_;
    };

    /**
     * Get the element at the provided index.
     * @param {number} index Index.
     * @return {T} Element.
     * @api
     */
    Collection.prototype.item = function item (index) {
      return this.array_[index];
    };

    /**
     * Get the length of this collection.
     * @return {number} The length of the array.
     * @observable
     * @api
     */
    Collection.prototype.getLength = function getLength () {
      return this.get(Property.LENGTH);
    };

    /**
     * Insert an element at the provided index.
     * @param {number} index Index.
     * @param {T} elem Element.
     * @api
     */
    Collection.prototype.insertAt = function insertAt (index, elem) {
      if (this.unique_) {
        this.assertUnique_(elem);
      }
      this.array_.splice(index, 0, elem);
      this.updateLength_();
      this.dispatchEvent(
        new CollectionEvent(CollectionEventType.ADD, elem));
    };

    /**
     * Remove the last element of the collection and return it.
     * Return `undefined` if the collection is empty.
     * @return {T|undefined} Element.
     * @api
     */
    Collection.prototype.pop = function pop () {
      return this.removeAt(this.getLength() - 1);
    };

    /**
     * Insert the provided element at the end of the collection.
     * @param {T} elem Element.
     * @return {number} New length of the collection.
     * @api
     */
    Collection.prototype.push = function push (elem) {
      if (this.unique_) {
        this.assertUnique_(elem);
      }
      var n = this.getLength();
      this.insertAt(n, elem);
      return this.getLength();
    };

    /**
     * Remove the first occurrence of an element from the collection.
     * @param {T} elem Element.
     * @return {T|undefined} The removed element or undefined if none found.
     * @api
     */
    Collection.prototype.remove = function remove (elem) {
      var arr = this.array_;
      for (var i = 0, ii = arr.length; i < ii; ++i) {
        if (arr[i] === elem) {
          return this.removeAt(i);
        }
      }
      return undefined;
    };

    /**
     * Remove the element at the provided index and return it.
     * Return `undefined` if the collection does not contain this index.
     * @param {number} index Index.
     * @return {T|undefined} Value.
     * @api
     */
    Collection.prototype.removeAt = function removeAt (index) {
      var prev = this.array_[index];
      this.array_.splice(index, 1);
      this.updateLength_();
      this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev));
      return prev;
    };

    /**
     * Set the element at the provided index.
     * @param {number} index Index.
     * @param {T} elem Element.
     * @api
     */
    Collection.prototype.setAt = function setAt (index, elem) {
      var n = this.getLength();
      if (index < n) {
        if (this.unique_) {
          this.assertUnique_(elem, index);
        }
        var prev = this.array_[index];
        this.array_[index] = elem;
        this.dispatchEvent(
          new CollectionEvent(CollectionEventType.REMOVE, prev));
        this.dispatchEvent(
          new CollectionEvent(CollectionEventType.ADD, elem));
      } else {
        for (var j = n; j < index; ++j) {
          this.insertAt(j, undefined);
        }
        this.insertAt(index, elem);
      }
    };

    /**
     * @private
     */
    Collection.prototype.updateLength_ = function updateLength_ () {
      this.set(Property.LENGTH, this.array_.length);
    };

    /**
     * @private
     * @param {T} elem Element.
     * @param {number=} opt_except Optional index to ignore.
     */
    Collection.prototype.assertUnique_ = function assertUnique_ (elem, opt_except) {
      for (var i = 0, ii = this.array_.length; i < ii; ++i) {
        if (this.array_[i] === elem && i !== opt_except) {
          throw new AssertionError(58);
        }
      }
    };

    return Collection;
  }(BaseObject));

  /**
   * @module ol/MapEvent
   */

  /**
   * @classdesc
   * Events emitted as map events are instances of this type.
   * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map event.
   */
  var MapEvent = /*@__PURE__*/(function (Event$$1) {
    function MapEvent(type, map, opt_frameState) {

      Event$$1.call(this, type);

      /**
       * The map where the event occurred.
       * @type {import("./PluggableMap.js").default}
       * @api
       */
      this.map = map;

      /**
       * The frame state at the time of the event.
       * @type {?import("./PluggableMap.js").FrameState}
       * @api
       */
      this.frameState = opt_frameState !== undefined ? opt_frameState : null;

    }

    if ( Event$$1 ) MapEvent.__proto__ = Event$$1;
    MapEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    MapEvent.prototype.constructor = MapEvent;

    return MapEvent;
  }(Event));

  /**
   * @module ol/MapBrowserEvent
   */

  /**
   * @classdesc
   * Events emitted as map browser events are instances of this type.
   * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.
   */
  var MapBrowserEvent = /*@__PURE__*/(function (MapEvent$$1) {
    function MapBrowserEvent(type, map, browserEvent, opt_dragging, opt_frameState) {

      MapEvent$$1.call(this, type, map, opt_frameState);

      /**
       * The original browser event.
       * @const
       * @type {Event}
       * @api
       */
      this.originalEvent = browserEvent;

      /**
       * The map pixel relative to the viewport corresponding to the original browser event.
       * @type {import("./pixel.js").Pixel}
       * @api
       */
      this.pixel = map.getEventPixel(browserEvent);

      /**
       * The coordinate in view projection corresponding to the original browser event.
       * @type {import("./coordinate.js").Coordinate}
       * @api
       */
      this.coordinate = map.getCoordinateFromPixel(this.pixel);

      /**
       * Indicates if the map is currently being dragged. Only set for
       * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
       *
       * @type {boolean}
       * @api
       */
      this.dragging = opt_dragging !== undefined ? opt_dragging : false;

    }

    if ( MapEvent$$1 ) MapBrowserEvent.__proto__ = MapEvent$$1;
    MapBrowserEvent.prototype = Object.create( MapEvent$$1 && MapEvent$$1.prototype );
    MapBrowserEvent.prototype.constructor = MapBrowserEvent;

    /**
     * Prevents the default browser action.
     * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
     * @override
     * @api
     */
    MapBrowserEvent.prototype.preventDefault = function preventDefault () {
      MapEvent$$1.prototype.preventDefault.call(this);
      this.originalEvent.preventDefault();
    };

    /**
     * Prevents further propagation of the current event.
     * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
     * @override
     * @api
     */
    MapBrowserEvent.prototype.stopPropagation = function stopPropagation () {
      MapEvent$$1.prototype.stopPropagation.call(this);
      this.originalEvent.stopPropagation();
    };

    return MapBrowserEvent;
  }(MapEvent));

  /**
   * @module ol/webgl
   */


  /**
   * Constants taken from goog.webgl
   */


  /**
   * @const
   * @type {number}
   */
  var ONE = 1;


  /**
   * @const
   * @type {number}
   */
  var SRC_ALPHA = 0x0302;


  /**
   * @const
   * @type {number}
   */
  var COLOR_ATTACHMENT0 = 0x8CE0;


  /**
   * @const
   * @type {number}
   */
  var COLOR_BUFFER_BIT = 0x00004000;


  /**
   * @const
   * @type {number}
   */
  var TRIANGLES = 0x0004;


  /**
   * @const
   * @type {number}
   */
  var TRIANGLE_STRIP = 0x0005;


  /**
   * @const
   * @type {number}
   */
  var ONE_MINUS_SRC_ALPHA = 0x0303;


  /**
   * @const
   * @type {number}
   */
  var ARRAY_BUFFER = 0x8892;


  /**
   * @const
   * @type {number}
   */
  var ELEMENT_ARRAY_BUFFER = 0x8893;


  /**
   * @const
   * @type {number}
   */
  var STREAM_DRAW = 0x88E0;


  /**
   * @const
   * @type {number}
   */
  var STATIC_DRAW = 0x88E4;


  /**
   * @const
   * @type {number}
   */
  var DYNAMIC_DRAW = 0x88E8;


  /**
   * @const
   * @type {number}
   */
  var CULL_FACE = 0x0B44;


  /**
   * @const
   * @type {number}
   */
  var BLEND = 0x0BE2;


  /**
   * @const
   * @type {number}
   */
  var STENCIL_TEST = 0x0B90;


  /**
   * @const
   * @type {number}
   */
  var DEPTH_TEST = 0x0B71;


  /**
   * @const
   * @type {number}
   */
  var SCISSOR_TEST = 0x0C11;


  /**
   * @const
   * @type {number}
   */
  var UNSIGNED_BYTE = 0x1401;


  /**
   * @const
   * @type {number}
   */
  var UNSIGNED_SHORT = 0x1403;


  /**
   * @const
   * @type {number}
   */
  var UNSIGNED_INT = 0x1405;


  /**
   * @const
   * @type {number}
   */
  var FLOAT = 0x1406;


  /**
   * @const
   * @type {number}
   */
  var RGBA = 0x1908;


  /**
   * @const
   * @type {number}
   */
  var FRAGMENT_SHADER = 0x8B30;


  /**
   * @const
   * @type {number}
   */
  var VERTEX_SHADER = 0x8B31;


  /**
   * @const
   * @type {number}
   */
  var LINEAR = 0x2601;


  /**
   * @const
   * @type {number}
   */
  var TEXTURE_MAG_FILTER = 0x2800;


  /**
   * @const
   * @type {number}
   */
  var TEXTURE_MIN_FILTER = 0x2801;


  /**
   * @const
   * @type {number}
   */
  var TEXTURE_WRAP_S = 0x2802;


  /**
   * @const
   * @type {number}
   */
  var TEXTURE_WRAP_T = 0x2803;


  /**
   * @const
   * @type {number}
   */
  var TEXTURE_2D = 0x0DE1;


  /**
   * @const
   * @type {number}
   */
  var TEXTURE0 = 0x84C0;


  /**
   * @const
   * @type {number}
   */
  var CLAMP_TO_EDGE = 0x812F;


  /**
   * @const
   * @type {number}
   */
  var FRAMEBUFFER = 0x8D40;


  /** end of goog.webgl constants
   */


  /**
   * @const
   * @type {Array<string>}
   */
  var CONTEXT_IDS = [
    'experimental-webgl',
    'webgl',
    'webkit-3d',
    'moz-webgl'
  ];


  /**
   * @param {HTMLCanvasElement} canvas Canvas.
   * @param {Object=} opt_attributes Attributes.
   * @return {WebGLRenderingContext} WebGL rendering context.
   */
  function getContext(canvas, opt_attributes) {
    var ii = CONTEXT_IDS.length;
    for (var i = 0; i < ii; ++i) {
      try {
        var context = canvas.getContext(CONTEXT_IDS[i], opt_attributes);
        if (context) {
          return /** @type {!WebGLRenderingContext} */ (context);
        }
      } catch (e) {
        // pass
      }
    }
    return null;
  }


  /**
   * The maximum supported WebGL texture size in pixels. If WebGL is not
   * supported, the value is set to `undefined`.
   * @type {number|undefined}
   */
  var MAX_TEXTURE_SIZE; // value is set below


  /**
   * List of supported WebGL extensions.
   * @type {Array<string>}
   */
  var EXTENSIONS; // value is set below

  //TODO Remove side effects
  if (typeof window !== 'undefined' && 'WebGLRenderingContext' in window) {
    try {
      var canvas = /** @type {HTMLCanvasElement} */ (document.createElement('canvas'));
      var gl = getContext(canvas, {failIfMajorPerformanceCaveat: true});
      if (gl) {
        MAX_TEXTURE_SIZE = /** @type {number} */ (gl.getParameter(gl.MAX_TEXTURE_SIZE));
        EXTENSIONS = gl.getSupportedExtensions();
      }
    } catch (e) {
      // pass
    }
  }

  /**
   * @module ol/has
   */

  var ua = typeof navigator !== 'undefined' ?
    navigator.userAgent.toLowerCase() : '';

  /**
   * User agent string says we are dealing with Firefox as browser.
   * @type {boolean}
   */
  var FIREFOX = ua.indexOf('firefox') !== -1;

  /**
   * User agent string says we are dealing with Safari as browser.
   * @type {boolean}
   */
  var SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;

  /**
   * User agent string says we are dealing with a WebKit engine.
   * @type {boolean}
   */
  var WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;

  /**
   * User agent string says we are dealing with a Mac as platform.
   * @type {boolean}
   */
  var MAC = ua.indexOf('macintosh') !== -1;


  /**
   * The ratio between physical pixels and device-independent pixels
   * (dips) on the device (`window.devicePixelRatio`).
   * @const
   * @type {number}
   * @api
   */
  var DEVICE_PIXEL_RATIO = window.devicePixelRatio || 1;


  /**
   * True if the browser's Canvas implementation implements {get,set}LineDash.
   * @type {boolean}
   */
  var CANVAS_LINE_DASH = function() {
    var has = false;
    try {
      has = !!document.createElement('canvas').getContext('2d').setLineDash;
    } catch (e) {
      // pass
    }
    return has;
  }();


  /**
   * True if browser supports touch events.
   * @const
   * @type {boolean}
   * @api
   */
  var TOUCH = 'ontouchstart' in window;


  /**
   * True if browser supports pointer events.
   * @const
   * @type {boolean}
   */
  var POINTER = 'PointerEvent' in window;


  /**
   * True if browser supports ms pointer events (IE 10).
   * @const
   * @type {boolean}
   */
  var MSPOINTER = !!(navigator.msPointerEnabled);

  /**
   * @module ol/MapBrowserEventType
   */

  /**
   * Constants for event names.
   * @enum {string}
   */
  var MapBrowserEventType = {

    /**
     * A true single click with no dragging and no double click. Note that this
     * event is delayed by 250 ms to ensure that it is not a double click.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
     * @api
     */
    SINGLECLICK: 'singleclick',

    /**
     * A click with no dragging. A double click will fire two of this.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
     * @api
     */
    CLICK: EventType.CLICK,

    /**
     * A true double click, with no dragging.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
     * @api
     */
    DBLCLICK: EventType.DBLCLICK,

    /**
     * Triggered when a pointer is dragged.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
     * @api
     */
    POINTERDRAG: 'pointerdrag',

    /**
     * Triggered when a pointer is moved. Note that on touch devices this is
     * triggered when the map is panned, so is not the same as mousemove.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
     * @api
     */
    POINTERMOVE: 'pointermove',

    POINTERDOWN: 'pointerdown',
    POINTERUP: 'pointerup',
    POINTEROVER: 'pointerover',
    POINTEROUT: 'pointerout',
    POINTERENTER: 'pointerenter',
    POINTERLEAVE: 'pointerleave',
    POINTERCANCEL: 'pointercancel'
  };

  /**
   * @module ol/MapBrowserPointerEvent
   */

  var MapBrowserPointerEvent = /*@__PURE__*/(function (MapBrowserEvent$$1) {
    function MapBrowserPointerEvent(type, map, pointerEvent, opt_dragging, opt_frameState) {

      MapBrowserEvent$$1.call(this, type, map, pointerEvent.originalEvent, opt_dragging, opt_frameState);

      /**
       * @const
       * @type {import("./pointer/PointerEvent.js").default}
       */
      this.pointerEvent = pointerEvent;

    }

    if ( MapBrowserEvent$$1 ) MapBrowserPointerEvent.__proto__ = MapBrowserEvent$$1;
    MapBrowserPointerEvent.prototype = Object.create( MapBrowserEvent$$1 && MapBrowserEvent$$1.prototype );
    MapBrowserPointerEvent.prototype.constructor = MapBrowserPointerEvent;

    return MapBrowserPointerEvent;
  }(MapBrowserEvent));

  /**
   * @module ol/pointer/EventType
   */

  /**
   * Constants for event names.
   * @enum {string}
   */
  var PointerEventType = {
    POINTERMOVE: 'pointermove',
    POINTERDOWN: 'pointerdown',
    POINTERUP: 'pointerup',
    POINTEROVER: 'pointerover',
    POINTEROUT: 'pointerout',
    POINTERENTER: 'pointerenter',
    POINTERLEAVE: 'pointerleave',
    POINTERCANCEL: 'pointercancel'
  };

  /**
   * @module ol/pointer/EventSource
   */

  var EventSource = function EventSource(dispatcher, mapping) {

    /**
     * @type {import("./PointerEventHandler.js").default}
     */
    this.dispatcher = dispatcher;

    /**
     * @private
     * @const
     * @type {!Object<string, function(Event)>}
     */
    this.mapping_ = mapping;
  };

  /**
   * List of events supported by this source.
   * @return {Array<string>} Event names
   */
  EventSource.prototype.getEvents = function getEvents () {
    return Object.keys(this.mapping_);
  };

  /**
   * Returns the handler that should handle a given event type.
   * @param {string} eventType The event type.
   * @return {function(Event)} Handler
   */
  EventSource.prototype.getHandlerForEvent = function getHandlerForEvent (eventType) {
    return this.mapping_[eventType];
  };

  /**
   * @module ol/pointer/MouseSource
   */


  /**
   * @type {number}
   */
  var POINTER_ID = 1;


  /**
   * @type {string}
   */
  var POINTER_TYPE = 'mouse';


  /**
   * Radius around touchend that swallows mouse events.
   *
   * @type {number}
   */
  var DEDUP_DIST = 25;

  /**
   * Handler for `mousedown`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mousedown(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      // TODO(dfreedman) workaround for some elements not sending mouseup
      // http://crbug/149091
      if (POINTER_ID.toString() in this.pointerMap) {
        this.cancel(inEvent);
      }
      var e = prepareEvent(inEvent, this.dispatcher);
      this.pointerMap[POINTER_ID.toString()] = inEvent;
      this.dispatcher.down(e, inEvent);
    }
  }

  /**
   * Handler for `mousemove`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mousemove(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      var e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.move(e, inEvent);
    }
  }

  /**
   * Handler for `mouseup`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mouseup(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      var p = this.pointerMap[POINTER_ID.toString()];

      if (p && p.button === inEvent.button) {
        var e = prepareEvent(inEvent, this.dispatcher);
        this.dispatcher.up(e, inEvent);
        this.cleanupMouse();
      }
    }
  }

  /**
   * Handler for `mouseover`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mouseover(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      var e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.enterOver(e, inEvent);
    }
  }

  /**
   * Handler for `mouseout`.
   *
   * @this {MouseSource}
   * @param {MouseEvent} inEvent The in event.
   */
  function mouseout(inEvent) {
    if (!this.isEventSimulatedFromTouch_(inEvent)) {
      var e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.leaveOut(e, inEvent);
    }
  }


  var MouseSource = /*@__PURE__*/(function (EventSource$$1) {
    function MouseSource(dispatcher) {
      var mapping = {
        'mousedown': mousedown,
        'mousemove': mousemove,
        'mouseup': mouseup,
        'mouseover': mouseover,
        'mouseout': mouseout
      };
      EventSource$$1.call(this, dispatcher, mapping);

      /**
       * @const
       * @type {!Object<string, Event|Object>}
       */
      this.pointerMap = dispatcher.pointerMap;

      /**
       * @const
       * @type {Array<import("../pixel.js").Pixel>}
       */
      this.lastTouches = [];
    }

    if ( EventSource$$1 ) MouseSource.__proto__ = EventSource$$1;
    MouseSource.prototype = Object.create( EventSource$$1 && EventSource$$1.prototype );
    MouseSource.prototype.constructor = MouseSource;

    /**
     * Detect if a mouse event was simulated from a touch by
     * checking if previously there was a touch event at the
     * same position.
     *
     * FIXME - Known problem with the native Android browser on
     * Samsung GT-I9100 (Android 4.1.2):
     * In case the page is scrolled, this function does not work
     * correctly when a canvas is used (WebGL or canvas renderer).
     * Mouse listeners on canvas elements (for this browser), create
     * two mouse events: One 'good' and one 'bad' one (on other browsers or
     * when a div is used, there is only one event). For the 'bad' one,
     * clientX/clientY and also pageX/pageY are wrong when the page
     * is scrolled. Because of that, this function can not detect if
     * the events were simulated from a touch event. As result, a
     * pointer event at a wrong position is dispatched, which confuses
     * the map interactions.
     * It is unclear, how one can get the correct position for the event
     * or detect that the positions are invalid.
     *
     * @private
     * @param {MouseEvent} inEvent The in event.
     * @return {boolean} True, if the event was generated by a touch.
     */
    MouseSource.prototype.isEventSimulatedFromTouch_ = function isEventSimulatedFromTouch_ (inEvent) {
      var lts = this.lastTouches;
      var x = inEvent.clientX;
      var y = inEvent.clientY;
      for (var i = 0, l = lts.length, t = (void 0); i < l && (t = lts[i]); i++) {
        // simulated mouse events will be swallowed near a primary touchend
        var dx = Math.abs(x - t[0]);
        var dy = Math.abs(y - t[1]);
        if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {
          return true;
        }
      }
      return false;
    };

    /**
     * Dispatches a `pointercancel` event.
     *
     * @param {Event} inEvent The in event.
     */
    MouseSource.prototype.cancel = function cancel (inEvent) {
      var e = prepareEvent(inEvent, this.dispatcher);
      this.dispatcher.cancel(e, inEvent);
      this.cleanupMouse();
    };

    /**
     * Remove the mouse from the list of active pointers.
     */
    MouseSource.prototype.cleanupMouse = function cleanupMouse () {
      delete this.pointerMap[POINTER_ID.toString()];
    };

    return MouseSource;
  }(EventSource));


  /**
   * Creates a copy of the original event that will be used
   * for the fake pointer event.
   *
   * @param {Event} inEvent The in event.
   * @param {import("./PointerEventHandler.js").default} dispatcher Event handler.
   * @return {Object} The copied event.
   */
  function prepareEvent(inEvent, dispatcher) {
    var e = dispatcher.cloneEvent(inEvent, inEvent);

    // forward mouse preventDefault
    var pd = e.preventDefault;
    e.preventDefault = function() {
      inEvent.preventDefault();
      pd();
    };

    e.pointerId = POINTER_ID;
    e.isPrimary = true;
    e.pointerType = POINTER_TYPE;

    return e;
  }

  /**
   * @module ol/pointer/MsSource
   */


  /**
   * @const
   * @type {Array<string>}
   */
  var POINTER_TYPES = [
    '',
    'unavailable',
    'touch',
    'pen',
    'mouse'
  ];

  /**
   * Handler for `msPointerDown`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerDown(inEvent) {
    this.pointerMap[inEvent.pointerId.toString()] = inEvent;
    var e = this.prepareEvent_(inEvent);
    this.dispatcher.down(e, inEvent);
  }

  /**
   * Handler for `msPointerMove`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerMove(inEvent) {
    var e = this.prepareEvent_(inEvent);
    this.dispatcher.move(e, inEvent);
  }

  /**
   * Handler for `msPointerUp`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerUp(inEvent) {
    var e = this.prepareEvent_(inEvent);
    this.dispatcher.up(e, inEvent);
    this.cleanup(inEvent.pointerId);
  }

  /**
   * Handler for `msPointerOut`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerOut(inEvent) {
    var e = this.prepareEvent_(inEvent);
    this.dispatcher.leaveOut(e, inEvent);
  }

  /**
   * Handler for `msPointerOver`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerOver(inEvent) {
    var e = this.prepareEvent_(inEvent);
    this.dispatcher.enterOver(e, inEvent);
  }

  /**
   * Handler for `msPointerCancel`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msPointerCancel(inEvent) {
    var e = this.prepareEvent_(inEvent);
    this.dispatcher.cancel(e, inEvent);
    this.cleanup(inEvent.pointerId);
  }

  /**
   * Handler for `msLostPointerCapture`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msLostPointerCapture(inEvent) {
    var e = this.dispatcher.makeEvent('lostpointercapture', inEvent, inEvent);
    this.dispatcher.dispatchEvent(e);
  }

  /**
   * Handler for `msGotPointerCapture`.
   *
   * @this {MsSource}
   * @param {MSPointerEvent} inEvent The in event.
   */
  function msGotPointerCapture(inEvent) {
    var e = this.dispatcher.makeEvent('gotpointercapture', inEvent, inEvent);
    this.dispatcher.dispatchEvent(e);
  }

  var MsSource = /*@__PURE__*/(function (EventSource$$1) {
    function MsSource(dispatcher) {
      var mapping = {
        'MSPointerDown': msPointerDown,
        'MSPointerMove': msPointerMove,
        'MSPointerUp': msPointerUp,
        'MSPointerOut': msPointerOut,
        'MSPointerOver': msPointerOver,
        'MSPointerCancel': msPointerCancel,
        'MSGotPointerCapture': msGotPointerCapture,
        'MSLostPointerCapture': msLostPointerCapture
      };
      EventSource$$1.call(this, dispatcher, mapping);

      /**
       * @const
       * @type {!Object<string, MSPointerEvent|Object>}
       */
      this.pointerMap = dispatcher.pointerMap;
    }

    if ( EventSource$$1 ) MsSource.__proto__ = EventSource$$1;
    MsSource.prototype = Object.create( EventSource$$1 && EventSource$$1.prototype );
    MsSource.prototype.constructor = MsSource;

    /**
     * Creates a copy of the original event that will be used
     * for the fake pointer event.
     *
     * @private
     * @param {MSPointerEvent} inEvent The in event.
     * @return {Object} The copied event.
     */
    MsSource.prototype.prepareEvent_ = function prepareEvent_ (inEvent) {
      /** @type {MSPointerEvent|Object} */
      var e = inEvent;
      if (typeof inEvent.pointerType === 'number') {
        e = this.dispatcher.cloneEvent(inEvent, inEvent);
        e.pointerType = POINTER_TYPES[inEvent.pointerType];
      }

      return e;
    };

    /**
     * Remove this pointer from the list of active pointers.
     * @param {number} pointerId Pointer identifier.
     */
    MsSource.prototype.cleanup = function cleanup (pointerId) {
      delete this.pointerMap[pointerId.toString()];
    };

    return MsSource;
  }(EventSource));

  /**
   * @module ol/pointer/NativeSource
   */

  /**
   * Handler for `pointerdown`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerDown(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointermove`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerMove(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointerup`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerUp(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointerout`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerOut(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointerover`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerOver(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `pointercancel`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function pointerCancel(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `lostpointercapture`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function lostPointerCapture(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  /**
   * Handler for `gotpointercapture`.
   *
   * @this {NativeSource}
   * @param {Event} inEvent The in event.
   */
  function gotPointerCapture(inEvent) {
    this.dispatcher.fireNativeEvent(inEvent);
  }

  var NativeSource = /*@__PURE__*/(function (EventSource$$1) {
    function NativeSource(dispatcher) {
      var mapping = {
        'pointerdown': pointerDown,
        'pointermove': pointerMove,
        'pointerup': pointerUp,
        'pointerout': pointerOut,
        'pointerover': pointerOver,
        'pointercancel': pointerCancel,
        'gotpointercapture': gotPointerCapture,
        'lostpointercapture': lostPointerCapture
      };
      EventSource$$1.call(this, dispatcher, mapping);
    }

    if ( EventSource$$1 ) NativeSource.__proto__ = EventSource$$1;
    NativeSource.prototype = Object.create( EventSource$$1 && EventSource$$1.prototype );
    NativeSource.prototype.constructor = NativeSource;

    return NativeSource;
  }(EventSource));

  /**
   * @module ol/pointer/PointerEvent
   */


  /**
   * Is the `buttons` property supported?
   * @type {boolean}
   */
  var HAS_BUTTONS = false;


  var PointerEvent = /*@__PURE__*/(function (_Event) {
    function PointerEvent(type, originalEvent, opt_eventDict) {
      _Event.call(this, type);

      /**
       * @const
       * @type {Event}
       */
      this.originalEvent = originalEvent;

      var eventDict = opt_eventDict ? opt_eventDict : {};

      /**
       * @type {number}
       */
      this.buttons = getButtons(eventDict);

      /**
       * @type {number}
       */
      this.pressure = getPressure(eventDict, this.buttons);

      // MouseEvent related properties

      /**
       * @type {boolean}
       */
      this.bubbles = 'bubbles' in eventDict ? eventDict['bubbles'] : false;

      /**
       * @type {boolean}
       */
      this.cancelable = 'cancelable' in eventDict ? eventDict['cancelable'] : false;

      /**
       * @type {Object}
       */
      this.view = 'view' in eventDict ? eventDict['view'] : null;

      /**
       * @type {number}
       */
      this.detail = 'detail' in eventDict ? eventDict['detail'] : null;

      /**
       * @type {number}
       */
      this.screenX = 'screenX' in eventDict ? eventDict['screenX'] : 0;

      /**
       * @type {number}
       */
      this.screenY = 'screenY' in eventDict ? eventDict['screenY'] : 0;

      /**
       * @type {number}
       */
      this.clientX = 'clientX' in eventDict ? eventDict['clientX'] : 0;

      /**
       * @type {number}
       */
      this.clientY = 'clientY' in eventDict ? eventDict['clientY'] : 0;

      /**
       * @type {boolean}
       */
      this.ctrlKey = 'ctrlKey' in eventDict ? eventDict['ctrlKey'] : false;

      /**
       * @type {boolean}
       */
      this.altKey = 'altKey' in eventDict ? eventDict['altKey'] : false;

      /**
       * @type {boolean}
       */
      this.shiftKey = 'shiftKey' in eventDict ? eventDict['shiftKey'] : false;

      /**
       * @type {boolean}
       */
      this.metaKey = 'metaKey' in eventDict ? eventDict['metaKey'] : false;

      /**
       * @type {number}
       */
      this.button = 'button' in eventDict ? eventDict['button'] : 0;

      /**
       * @type {Node}
       */
      this.relatedTarget = 'relatedTarget' in eventDict ?
        eventDict['relatedTarget'] : null;

      // PointerEvent related properties

      /**
       * @const
       * @type {number}
       */
      this.pointerId = 'pointerId' in eventDict ? eventDict['pointerId'] : 0;

      /**
       * @type {number}
       */
      this.width = 'width' in eventDict ? eventDict['width'] : 0;

      /**
       * @type {number}
       */
      this.height = 'height' in eventDict ? eventDict['height'] : 0;

      /**
       * @type {number}
       */
      this.tiltX = 'tiltX' in eventDict ? eventDict['tiltX'] : 0;

      /**
       * @type {number}
       */
      this.tiltY = 'tiltY' in eventDict ? eventDict['tiltY'] : 0;

      /**
       * @type {string}
       */
      this.pointerType = 'pointerType' in eventDict ? eventDict['pointerType'] : '';

      /**
       * @type {number}
       */
      this.hwTimestamp = 'hwTimestamp' in eventDict ? eventDict['hwTimestamp'] : 0;

      /**
       * @type {boolean}
       */
      this.isPrimary = 'isPrimary' in eventDict ? eventDict['isPrimary'] : false;

      // keep the semantics of preventDefault
      if (originalEvent.preventDefault) {
        this.preventDefault = function() {
          originalEvent.preventDefault();
        };
      }
    }

    if ( _Event ) PointerEvent.__proto__ = _Event;
    PointerEvent.prototype = Object.create( _Event && _Event.prototype );
    PointerEvent.prototype.constructor = PointerEvent;

    return PointerEvent;
  }(Event));


  /**
   * @param {Object<string, ?>} eventDict The event dictionary.
   * @return {number} Button indicator.
   */
  function getButtons(eventDict) {
    // According to the w3c spec,
    // http://www.w3.org/TR/DOM-Level-3-Events/#events-MouseEvent-button
    // MouseEvent.button == 0 can mean either no mouse button depressed, or the
    // left mouse button depressed.
    //
    // As of now, the only way to distinguish between the two states of
    // MouseEvent.button is by using the deprecated MouseEvent.which property, as
    // this maps mouse buttons to positive integers > 0, and uses 0 to mean that
    // no mouse button is held.
    //
    // MouseEvent.which is derived from MouseEvent.button at MouseEvent creation,
    // but initMouseEvent does not expose an argument with which to set
    // MouseEvent.which. Calling initMouseEvent with a buttonArg of 0 will set
    // MouseEvent.button == 0 and MouseEvent.which == 1, breaking the expectations
    // of app developers.
    //
    // The only way to propagate the correct state of MouseEvent.which and
    // MouseEvent.button to a new MouseEvent.button == 0 and MouseEvent.which == 0
    // is to call initMouseEvent with a buttonArg value of -1.
    //
    // This is fixed with DOM Level 4's use of buttons
    var buttons;
    if (eventDict.buttons || HAS_BUTTONS) {
      buttons = eventDict.buttons;
    } else {
      switch (eventDict.which) {
        case 1: buttons = 1; break;
        case 2: buttons = 4; break;
        case 3: buttons = 2; break;
        default: buttons = 0;
      }
    }
    return buttons;
  }


  /**
   * @param {Object<string, ?>} eventDict The event dictionary.
   * @param {number} buttons Button indicator.
   * @return {number} The pressure.
   */
  function getPressure(eventDict, buttons) {
    // Spec requires that pointers without pressure specified use 0.5 for down
    // state and 0 for up state.
    var pressure = 0;
    if (eventDict.pressure) {
      pressure = eventDict.pressure;
    } else {
      pressure = buttons ? 0.5 : 0;
    }
    return pressure;
  }


  /**
   * Checks if the `buttons` property is supported.
   */
  (function() {
    try {
      var ev = new MouseEvent('click', {buttons: 1});
      HAS_BUTTONS = ev.buttons === 1;
    } catch (e) {
      // pass
    }
  })();

  /**
   * @module ol/array
   */


  /**
   * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
   * https://github.com/darkskyapp/binary-search
   *
   * @param {Array<*>} haystack Items to search through.
   * @param {*} needle The item to look for.
   * @param {Function=} opt_comparator Comparator function.
   * @return {number} The index of the item if found, -1 if not.
   */
  function binarySearch(haystack, needle, opt_comparator) {
    var mid, cmp;
    var comparator = opt_comparator || numberSafeCompareFunction;
    var low = 0;
    var high = haystack.length;
    var found = false;

    while (low < high) {
      /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
       * to double (which gives the wrong results). */
      mid = low + (high - low >> 1);
      cmp = +comparator(haystack[mid], needle);

      if (cmp < 0.0) { /* Too low. */
        low = mid + 1;

      } else { /* Key found or too high */
        high = mid;
        found = !cmp;
      }
    }

    /* Key not found. */
    return found ? low : ~low;
  }


  /**
   * Compare function for array sort that is safe for numbers.
   * @param {*} a The first object to be compared.
   * @param {*} b The second object to be compared.
   * @return {number} A negative number, zero, or a positive number as the first
   *     argument is less than, equal to, or greater than the second.
   */
  function numberSafeCompareFunction(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }


  /**
   * Whether the array contains the given object.
   * @param {Array<*>} arr The array to test for the presence of the element.
   * @param {*} obj The object for which to test.
   * @return {boolean} The object is in the array.
   */
  function includes(arr, obj) {
    return arr.indexOf(obj) >= 0;
  }


  /**
   * @param {Array<number>} arr Array.
   * @param {number} target Target.
   * @param {number} direction 0 means return the nearest, > 0
   *    means return the largest nearest, < 0 means return the
   *    smallest nearest.
   * @return {number} Index.
   */
  function linearFindNearest(arr, target, direction) {
    var n = arr.length;
    if (arr[0] <= target) {
      return 0;
    } else if (target <= arr[n - 1]) {
      return n - 1;
    } else {
      var i;
      if (direction > 0) {
        for (i = 1; i < n; ++i) {
          if (arr[i] < target) {
            return i - 1;
          }
        }
      } else if (direction < 0) {
        for (i = 1; i < n; ++i) {
          if (arr[i] <= target) {
            return i;
          }
        }
      } else {
        for (i = 1; i < n; ++i) {
          if (arr[i] == target) {
            return i;
          } else if (arr[i] < target) {
            if (arr[i - 1] - target < target - arr[i]) {
              return i - 1;
            } else {
              return i;
            }
          }
        }
      }
      return n - 1;
    }
  }


  /**
   * @param {Array<*>} arr Array.
   * @param {number} begin Begin index.
   * @param {number} end End index.
   */
  function reverseSubArray(arr, begin, end) {
    while (begin < end) {
      var tmp = arr[begin];
      arr[begin] = arr[end];
      arr[end] = tmp;
      ++begin;
      --end;
    }
  }


  /**
   * @param {Array<VALUE>} arr The array to modify.
   * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.
   * @template VALUE
   */
  function extend(arr, data) {
    var extension = Array.isArray(data) ? data : [data];
    var length = extension.length;
    for (var i = 0; i < length; i++) {
      arr[arr.length] = extension[i];
    }
  }


  /**
   * @param {Array<VALUE>} arr The array to modify.
   * @param {VALUE} obj The element to remove.
   * @template VALUE
   * @return {boolean} If the element was removed.
   */
  function remove(arr, obj) {
    var i = arr.indexOf(obj);
    var found = i > -1;
    if (found) {
      arr.splice(i, 1);
    }
    return found;
  }


  /**
   * @param {Array|Uint8ClampedArray} arr1 The first array to compare.
   * @param {Array|Uint8ClampedArray} arr2 The second array to compare.
   * @return {boolean} Whether the two arrays are equal.
   */
  function equals(arr1, arr2) {
    var len1 = arr1.length;
    if (len1 !== arr2.length) {
      return false;
    }
    for (var i = 0; i < len1; i++) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }
    return true;
  }


  /**
   * Sort the passed array such that the relative order of equal elements is preverved.
   * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.
   * @param {Array<*>} arr The array to sort (modifies original).
   * @param {!function(*, *): number} compareFnc Comparison function.
   * @api
   */
  function stableSort(arr, compareFnc) {
    var length = arr.length;
    var tmp = Array(arr.length);
    var i;
    for (i = 0; i < length; i++) {
      tmp[i] = {index: i, value: arr[i]};
    }
    tmp.sort(function(a, b) {
      return compareFnc(a.value, b.value) || a.index - b.index;
    });
    for (i = 0; i < arr.length; i++) {
      arr[i] = tmp[i].value;
    }
  }


  /**
   * @param {Array<*>} arr The array to test.
   * @param {Function=} opt_func Comparison function.
   * @param {boolean=} opt_strict Strictly sorted (default false).
   * @return {boolean} Return index.
   */
  function isSorted(arr, opt_func, opt_strict) {
    var compare = opt_func || numberSafeCompareFunction;
    return arr.every(function(currentVal, index) {
      if (index === 0) {
        return true;
      }
      var res = compare(arr[index - 1], currentVal);
      return !(res > 0 || opt_strict && res === 0);
    });
  }

  /**
   * @module ol/pointer/TouchSource
   */


  /**
   * @type {number}
   */
  var CLICK_COUNT_TIMEOUT = 200;

  /**
   * @type {string}
   */
  var POINTER_TYPE$1 = 'touch';

  /**
   * Handler for `touchstart`, triggers `pointerover`,
   * `pointerenter` and `pointerdown` events.
   *
   * @this {TouchSource}
   * @param {TouchEvent} inEvent The in event.
   */
  function touchstart(inEvent) {
    this.vacuumTouches_(inEvent);
    this.setPrimaryTouch_(inEvent.changedTouches[0]);
    this.dedupSynthMouse_(inEvent);
    this.clickCount_++;
    this.processTouches_(inEvent, this.overDown_);
  }

  /**
   * Handler for `touchmove`.
   *
   * @this {TouchSource}
   * @param {TouchEvent} inEvent The in event.
   */
  function touchmove(inEvent) {
    this.processTouches_(inEvent, this.moveOverOut_);
  }

  /**
   * Handler for `touchend`, triggers `pointerup`,
   * `pointerout` and `pointerleave` events.
   *
   * @this {TouchSource}
   * @param {TouchEvent} inEvent The event.
   */
  function touchend(inEvent) {
    this.dedupSynthMouse_(inEvent);
    this.processTouches_(inEvent, this.upOut_);
  }

  /**
   * Handler for `touchcancel`, triggers `pointercancel`,
   * `pointerout` and `pointerleave` events.
   *
   * @this {TouchSource}
   * @param {TouchEvent} inEvent The in event.
   */
  function touchcancel(inEvent) {
    this.processTouches_(inEvent, this.cancelOut_);
  }


  var TouchSource = /*@__PURE__*/(function (EventSource$$1) {
    function TouchSource(dispatcher, mouseSource) {
      var mapping = {
        'touchstart': touchstart,
        'touchmove': touchmove,
        'touchend': touchend,
        'touchcancel': touchcancel
      };
      EventSource$$1.call(this, dispatcher, mapping);

      /**
       * @const
       * @type {!Object<string, Event|Object>}
       */
      this.pointerMap = dispatcher.pointerMap;

      /**
       * @const
       * @type {import("./MouseSource.js").default}
       */
      this.mouseSource = mouseSource;

      /**
       * @private
       * @type {number|undefined}
       */
      this.firstTouchId_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.clickCount_ = 0;

      /**
       * @private
       * @type {?}
       */
      this.resetId_;

      /**
       * Mouse event timeout: This should be long enough to
       * ignore compat mouse events made by touch.
       * @private
       * @type {number}
       */
      this.dedupTimeout_ = 2500;
    }

    if ( EventSource$$1 ) TouchSource.__proto__ = EventSource$$1;
    TouchSource.prototype = Object.create( EventSource$$1 && EventSource$$1.prototype );
    TouchSource.prototype.constructor = TouchSource;

    /**
     * @private
     * @param {Touch} inTouch The in touch.
     * @return {boolean} True, if this is the primary touch.
     */
    TouchSource.prototype.isPrimaryTouch_ = function isPrimaryTouch_ (inTouch) {
      return this.firstTouchId_ === inTouch.identifier;
    };

    /**
     * Set primary touch if there are no pointers, or the only pointer is the mouse.
     * @param {Touch} inTouch The in touch.
     * @private
     */
    TouchSource.prototype.setPrimaryTouch_ = function setPrimaryTouch_ (inTouch) {
      var count = Object.keys(this.pointerMap).length;
      if (count === 0 || (count === 1 && POINTER_ID.toString() in this.pointerMap)) {
        this.firstTouchId_ = inTouch.identifier;
        this.cancelResetClickCount_();
      }
    };

    /**
     * @private
     * @param {PointerEvent} inPointer The in pointer object.
     */
    TouchSource.prototype.removePrimaryPointer_ = function removePrimaryPointer_ (inPointer) {
      if (inPointer.isPrimary) {
        this.firstTouchId_ = undefined;
        this.resetClickCount_();
      }
    };

    /**
     * @private
     */
    TouchSource.prototype.resetClickCount_ = function resetClickCount_ () {
      this.resetId_ = setTimeout(
        this.resetClickCountHandler_.bind(this),
        CLICK_COUNT_TIMEOUT);
    };

    /**
     * @private
     */
    TouchSource.prototype.resetClickCountHandler_ = function resetClickCountHandler_ () {
      this.clickCount_ = 0;
      this.resetId_ = undefined;
    };

    /**
     * @private
     */
    TouchSource.prototype.cancelResetClickCount_ = function cancelResetClickCount_ () {
      if (this.resetId_ !== undefined) {
        clearTimeout(this.resetId_);
      }
    };

    /**
     * @private
     * @param {TouchEvent} browserEvent Browser event
     * @param {Touch} inTouch Touch event
     * @return {PointerEvent} A pointer object.
     */
    TouchSource.prototype.touchToPointer_ = function touchToPointer_ (browserEvent, inTouch) {
      var e = this.dispatcher.cloneEvent(browserEvent, inTouch);
      // Spec specifies that pointerId 1 is reserved for Mouse.
      // Touch identifiers can start at 0.
      // Add 2 to the touch identifier for compatibility.
      e.pointerId = inTouch.identifier + 2;
      // TODO: check if this is necessary?
      //e.target = findTarget(e);
      e.bubbles = true;
      e.cancelable = true;
      e.detail = this.clickCount_;
      e.button = 0;
      e.buttons = 1;
      e.width = inTouch.radiusX || 0;
      e.height = inTouch.radiusY || 0;
      e.pressure = inTouch.force || 0.5;
      e.isPrimary = this.isPrimaryTouch_(inTouch);
      e.pointerType = POINTER_TYPE$1;

      // make sure that the properties that are different for
      // each `Touch` object are not copied from the BrowserEvent object
      e.clientX = inTouch.clientX;
      e.clientY = inTouch.clientY;
      e.screenX = inTouch.screenX;
      e.screenY = inTouch.screenY;

      return e;
    };

    /**
     * @private
     * @param {TouchEvent} inEvent Touch event
     * @param {function(TouchEvent, PointerEvent)} inFunction In function.
     */
    TouchSource.prototype.processTouches_ = function processTouches_ (inEvent, inFunction) {
      var touches = Array.prototype.slice.call(inEvent.changedTouches);
      var count = touches.length;
      function preventDefault() {
        inEvent.preventDefault();
      }
      for (var i = 0; i < count; ++i) {
        var pointer = this.touchToPointer_(inEvent, touches[i]);
        // forward touch preventDefaults
        pointer.preventDefault = preventDefault;
        inFunction.call(this, inEvent, pointer);
      }
    };

    /**
     * @private
     * @param {TouchList} touchList The touch list.
     * @param {number} searchId Search identifier.
     * @return {boolean} True, if the `Touch` with the given id is in the list.
     */
    TouchSource.prototype.findTouch_ = function findTouch_ (touchList, searchId) {
      var l = touchList.length;
      for (var i = 0; i < l; i++) {
        var touch = touchList[i];
        if (touch.identifier === searchId) {
          return true;
        }
      }
      return false;
    };

    /**
     * In some instances, a touchstart can happen without a touchend. This
     * leaves the pointermap in a broken state.
     * Therefore, on every touchstart, we remove the touches that did not fire a
     * touchend event.
     * To keep state globally consistent, we fire a pointercancel for
     * this "abandoned" touch
     *
     * @private
     * @param {TouchEvent} inEvent The in event.
     */
    TouchSource.prototype.vacuumTouches_ = function vacuumTouches_ (inEvent) {
      var touchList = inEvent.touches;
      // pointerMap.getCount() should be < touchList.length here,
      // as the touchstart has not been processed yet.
      var keys = Object.keys(this.pointerMap);
      var count = keys.length;
      if (count >= touchList.length) {
        var d = [];
        for (var i = 0; i < count; ++i) {
          var key = Number(keys[i]);
          var value = this.pointerMap[key];
          // Never remove pointerId == 1, which is mouse.
          // Touch identifiers are 2 smaller than their pointerId, which is the
          // index in pointermap.
          if (key != POINTER_ID && !this.findTouch_(touchList, key - 2)) {
            d.push(value.out);
          }
        }
        for (var i$1 = 0; i$1 < d.length; ++i$1) {
          this.cancelOut_(inEvent, d[i$1]);
        }
      }
    };

    /**
     * @private
     * @param {TouchEvent} browserEvent The event.
     * @param {PointerEvent} inPointer The in pointer object.
     */
    TouchSource.prototype.overDown_ = function overDown_ (browserEvent, inPointer) {
      this.pointerMap[inPointer.pointerId] = {
        target: inPointer.target,
        out: inPointer,
        outTarget: inPointer.target
      };
      this.dispatcher.over(inPointer, browserEvent);
      this.dispatcher.enter(inPointer, browserEvent);
      this.dispatcher.down(inPointer, browserEvent);
    };

    /**
     * @private
     * @param {TouchEvent} browserEvent The event.
     * @param {PointerEvent} inPointer The in pointer.
     */
    TouchSource.prototype.moveOverOut_ = function moveOverOut_ (browserEvent, inPointer) {
      var event = inPointer;
      var pointer = this.pointerMap[event.pointerId];
      // a finger drifted off the screen, ignore it
      if (!pointer) {
        return;
      }
      var outEvent = pointer.out;
      var outTarget = pointer.outTarget;
      this.dispatcher.move(event, browserEvent);
      if (outEvent && outTarget !== event.target) {
        outEvent.relatedTarget = event.target;
        /** @type {Object} */ (event).relatedTarget = outTarget;
        // recover from retargeting by shadow
        outEvent.target = outTarget;
        if (event.target) {
          this.dispatcher.leaveOut(outEvent, browserEvent);
          this.dispatcher.enterOver(event, browserEvent);
        } else {
          // clean up case when finger leaves the screen
          /** @type {Object} */ (event).target = outTarget;
          /** @type {Object} */ (event).relatedTarget = null;
          this.cancelOut_(browserEvent, event);
        }
      }
      pointer.out = event;
      pointer.outTarget = event.target;
    };

    /**
     * @private
     * @param {TouchEvent} browserEvent An event.
     * @param {PointerEvent} inPointer The inPointer object.
     */
    TouchSource.prototype.upOut_ = function upOut_ (browserEvent, inPointer) {
      this.dispatcher.up(inPointer, browserEvent);
      this.dispatcher.out(inPointer, browserEvent);
      this.dispatcher.leave(inPointer, browserEvent);
      this.cleanUpPointer_(inPointer);
    };

    /**
     * @private
     * @param {TouchEvent} browserEvent The event.
     * @param {PointerEvent} inPointer The in pointer.
     */
    TouchSource.prototype.cancelOut_ = function cancelOut_ (browserEvent, inPointer) {
      this.dispatcher.cancel(inPointer, browserEvent);
      this.dispatcher.out(inPointer, browserEvent);
      this.dispatcher.leave(inPointer, browserEvent);
      this.cleanUpPointer_(inPointer);
    };

    /**
     * @private
     * @param {PointerEvent} inPointer The inPointer object.
     */
    TouchSource.prototype.cleanUpPointer_ = function cleanUpPointer_ (inPointer) {
      delete this.pointerMap[inPointer.pointerId];
      this.removePrimaryPointer_(inPointer);
    };

    /**
     * Prevent synth mouse events from creating pointer events.
     *
     * @private
     * @param {TouchEvent} inEvent The in event.
     */
    TouchSource.prototype.dedupSynthMouse_ = function dedupSynthMouse_ (inEvent) {
      var lts = this.mouseSource.lastTouches;
      var t = inEvent.changedTouches[0];
      // only the primary finger will synth mouse events
      if (this.isPrimaryTouch_(t)) {
        // remember x/y of last touch
        var lt = [t.clientX, t.clientY];
        lts.push(lt);

        setTimeout(function() {
          // remove touch after timeout
          remove(lts, lt);
        }, this.dedupTimeout_);
      }
    };

    return TouchSource;
  }(EventSource));

  /**
   * @module ol/pointer/PointerEventHandler
   */


  /**
   * Properties to copy when cloning an event, with default values.
   * @type {Array<Array>}
   */
  var CLONE_PROPS = [
    // MouseEvent
    ['bubbles', false],
    ['cancelable', false],
    ['view', null],
    ['detail', null],
    ['screenX', 0],
    ['screenY', 0],
    ['clientX', 0],
    ['clientY', 0],
    ['ctrlKey', false],
    ['altKey', false],
    ['shiftKey', false],
    ['metaKey', false],
    ['button', 0],
    ['relatedTarget', null],
    // DOM Level 3
    ['buttons', 0],
    // PointerEvent
    ['pointerId', 0],
    ['width', 0],
    ['height', 0],
    ['pressure', 0],
    ['tiltX', 0],
    ['tiltY', 0],
    ['pointerType', ''],
    ['hwTimestamp', 0],
    ['isPrimary', false],
    // event instance
    ['type', ''],
    ['target', null],
    ['currentTarget', null],
    ['which', 0]
  ];


  var PointerEventHandler = /*@__PURE__*/(function (EventTarget) {
    function PointerEventHandler(element) {
      EventTarget.call(this);

      /**
       * @const
       * @private
       * @type {Element|HTMLDocument}
       */
      this.element_ = element;

      /**
       * @const
       * @type {!Object<string, Event|Object>}
       */
      this.pointerMap = {};

      /**
       * @type {Object<string, function(Event)>}
       * @private
       */
      this.eventMap_ = {};

      /**
       * @type {Array<import("./EventSource.js").default>}
       * @private
       */
      this.eventSourceList_ = [];

      this.registerSources();
    }

    if ( EventTarget ) PointerEventHandler.__proto__ = EventTarget;
    PointerEventHandler.prototype = Object.create( EventTarget && EventTarget.prototype );
    PointerEventHandler.prototype.constructor = PointerEventHandler;

    /**
     * Set up the event sources (mouse, touch and native pointers)
     * that generate pointer events.
     */
    PointerEventHandler.prototype.registerSources = function registerSources () {
      if (POINTER) {
        this.registerSource('native', new NativeSource(this));
      } else if (MSPOINTER) {
        this.registerSource('ms', new MsSource(this));
      } else {
        var mouseSource = new MouseSource(this);
        this.registerSource('mouse', mouseSource);

        if (TOUCH) {
          this.registerSource('touch', new TouchSource(this, mouseSource));
        }
      }

      // register events on the viewport element
      this.register_();
    };

    /**
     * Add a new event source that will generate pointer events.
     *
     * @param {string} name A name for the event source
     * @param {import("./EventSource.js").default} source The source event.
     */
    PointerEventHandler.prototype.registerSource = function registerSource (name, source) {
      var s = source;
      var newEvents = s.getEvents();

      if (newEvents) {
        newEvents.forEach(function(e) {
          var handler = s.getHandlerForEvent(e);

          if (handler) {
            this.eventMap_[e] = handler.bind(s);
          }
        }.bind(this));
        this.eventSourceList_.push(s);
      }
    };

    /**
     * Set up the events for all registered event sources.
     * @private
     */
    PointerEventHandler.prototype.register_ = function register_ () {
      var l = this.eventSourceList_.length;
      for (var i = 0; i < l; i++) {
        var eventSource = this.eventSourceList_[i];
        this.addEvents_(eventSource.getEvents());
      }
    };

    /**
     * Remove all registered events.
     * @private
     */
    PointerEventHandler.prototype.unregister_ = function unregister_ () {
      var l = this.eventSourceList_.length;
      for (var i = 0; i < l; i++) {
        var eventSource = this.eventSourceList_[i];
        this.removeEvents_(eventSource.getEvents());
      }
    };

    /**
     * Calls the right handler for a new event.
     * @private
     * @param {Event} inEvent Browser event.
     */
    PointerEventHandler.prototype.eventHandler_ = function eventHandler_ (inEvent) {
      var type = inEvent.type;
      var handler = this.eventMap_[type];
      if (handler) {
        handler(inEvent);
      }
    };

    /**
     * Setup listeners for the given events.
     * @private
     * @param {Array<string>} events List of events.
     */
    PointerEventHandler.prototype.addEvents_ = function addEvents_ (events) {
      events.forEach(function(eventName) {
        listen(this.element_, eventName, this.eventHandler_, this);
      }.bind(this));
    };

    /**
     * Unregister listeners for the given events.
     * @private
     * @param {Array<string>} events List of events.
     */
    PointerEventHandler.prototype.removeEvents_ = function removeEvents_ (events) {
      events.forEach(function(e) {
        unlisten(this.element_, e, this.eventHandler_, this);
      }.bind(this));
    };

    /**
     * Returns a snapshot of inEvent, with writable properties.
     *
     * @param {Event} event Browser event.
     * @param {Event|Touch} inEvent An event that contains
     *    properties to copy.
     * @return {Object} An object containing shallow copies of
     *    `inEvent`'s properties.
     */
    PointerEventHandler.prototype.cloneEvent = function cloneEvent (event, inEvent) {
      var eventCopy = {};
      for (var i = 0, ii = CLONE_PROPS.length; i < ii; i++) {
        var p = CLONE_PROPS[i][0];
        eventCopy[p] = event[p] || inEvent[p] || CLONE_PROPS[i][1];
      }

      return eventCopy;
    };

    // EVENTS


    /**
     * Triggers a 'pointerdown' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.down = function down (data, event) {
      this.fireEvent(PointerEventType.POINTERDOWN, data, event);
    };

    /**
     * Triggers a 'pointermove' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.move = function move (data, event) {
      this.fireEvent(PointerEventType.POINTERMOVE, data, event);
    };

    /**
     * Triggers a 'pointerup' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.up = function up (data, event) {
      this.fireEvent(PointerEventType.POINTERUP, data, event);
    };

    /**
     * Triggers a 'pointerenter' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.enter = function enter (data, event) {
      data.bubbles = false;
      this.fireEvent(PointerEventType.POINTERENTER, data, event);
    };

    /**
     * Triggers a 'pointerleave' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.leave = function leave (data, event) {
      data.bubbles = false;
      this.fireEvent(PointerEventType.POINTERLEAVE, data, event);
    };

    /**
     * Triggers a 'pointerover' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.over = function over (data, event) {
      data.bubbles = true;
      this.fireEvent(PointerEventType.POINTEROVER, data, event);
    };

    /**
     * Triggers a 'pointerout' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.out = function out (data, event) {
      data.bubbles = true;
      this.fireEvent(PointerEventType.POINTEROUT, data, event);
    };

    /**
     * Triggers a 'pointercancel' event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.cancel = function cancel (data, event) {
      this.fireEvent(PointerEventType.POINTERCANCEL, data, event);
    };

    /**
     * Triggers a combination of 'pointerout' and 'pointerleave' events.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.leaveOut = function leaveOut (data, event) {
      this.out(data, event);
      if (!this.contains_(data.target, data.relatedTarget)) {
        this.leave(data, event);
      }
    };

    /**
     * Triggers a combination of 'pointerover' and 'pointerevents' events.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.enterOver = function enterOver (data, event) {
      this.over(data, event);
      if (!this.contains_(data.target, data.relatedTarget)) {
        this.enter(data, event);
      }
    };

    /**
     * @private
     * @param {Element} container The container element.
     * @param {Element} contained The contained element.
     * @return {boolean} Returns true if the container element
     *   contains the other element.
     */
    PointerEventHandler.prototype.contains_ = function contains_ (container, contained) {
      if (!container || !contained) {
        return false;
      }
      return container.contains(contained);
    };

    // EVENT CREATION AND TRACKING
    /**
     * Creates a new Event of type `inType`, based on the information in
     * `data`.
     *
     * @param {string} inType A string representing the type of event to create.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     * @return {PointerEvent} A PointerEvent of type `inType`.
     */
    PointerEventHandler.prototype.makeEvent = function makeEvent (inType, data, event) {
      return new PointerEvent(inType, event, data);
    };

    /**
     * Make and dispatch an event in one call.
     * @param {string} inType A string representing the type of event.
     * @param {Object} data Pointer event data.
     * @param {Event} event The event.
     */
    PointerEventHandler.prototype.fireEvent = function fireEvent (inType, data, event) {
      var e = this.makeEvent(inType, data, event);
      this.dispatchEvent(e);
    };

    /**
     * Creates a pointer event from a native pointer event
     * and dispatches this event.
     * @param {Event} event A platform event with a target.
     */
    PointerEventHandler.prototype.fireNativeEvent = function fireNativeEvent (event) {
      var e = this.makeEvent(event.type, event, event);
      this.dispatchEvent(e);
    };

    /**
     * Wrap a native mouse event into a pointer event.
     * This proxy method is required for the legacy IE support.
     * @param {string} eventType The pointer event type.
     * @param {Event} event The event.
     * @return {PointerEvent} The wrapped event.
     */
    PointerEventHandler.prototype.wrapMouseEvent = function wrapMouseEvent (eventType, event) {
      var pointerEvent = this.makeEvent(
        eventType, prepareEvent(event, this), event);
      return pointerEvent;
    };

    /**
     * @inheritDoc
     */
    PointerEventHandler.prototype.disposeInternal = function disposeInternal () {
      this.unregister_();
      EventTarget.prototype.disposeInternal.call(this);
    };

    return PointerEventHandler;
  }(Target));

  /**
   * @module ol/MapBrowserEventHandler
   */

  var MapBrowserEventHandler = /*@__PURE__*/(function (EventTarget) {
    function MapBrowserEventHandler(map, moveTolerance) {

      EventTarget.call(this);

      /**
       * This is the element that we will listen to the real events on.
       * @type {import("./PluggableMap.js").default}
       * @private
       */
      this.map_ = map;

      /**
       * @type {any}
       * @private
       */
      this.clickTimeoutId_;

      /**
       * @type {boolean}
       * @private
       */
      this.dragging_ = false;

      /**
       * @type {!Array<import("./events.js").EventsKey>}
       * @private
       */
      this.dragListenerKeys_ = [];

      /**
       * @type {number}
       * @private
       */
      this.moveTolerance_ = moveTolerance ?
        moveTolerance * DEVICE_PIXEL_RATIO : DEVICE_PIXEL_RATIO;

      /**
       * The most recent "down" type event (or null if none have occurred).
       * Set on pointerdown.
       * @type {import("./pointer/PointerEvent.js").default}
       * @private
       */
      this.down_ = null;

      var element = this.map_.getViewport();

      /**
       * @type {number}
       * @private
       */
      this.activePointers_ = 0;

      /**
       * @type {!Object<number, boolean>}
       * @private
       */
      this.trackedTouches_ = {};

      /**
       * Event handler which generates pointer events for
       * the viewport element.
       *
       * @type {PointerEventHandler}
       * @private
       */
      this.pointerEventHandler_ = new PointerEventHandler(element);

      /**
       * Event handler which generates pointer events for
       * the document (used when dragging).
       *
       * @type {PointerEventHandler}
       * @private
       */
      this.documentPointerEventHandler_ = null;

      /**
       * @type {?import("./events.js").EventsKey}
       * @private
       */
      this.pointerdownListenerKey_ = listen(this.pointerEventHandler_,
        PointerEventType.POINTERDOWN,
        this.handlePointerDown_, this);

      /**
       * @type {?import("./events.js").EventsKey}
       * @private
       */
      this.relayedListenerKey_ = listen(this.pointerEventHandler_,
        PointerEventType.POINTERMOVE,
        this.relayEvent_, this);

    }

    if ( EventTarget ) MapBrowserEventHandler.__proto__ = EventTarget;
    MapBrowserEventHandler.prototype = Object.create( EventTarget && EventTarget.prototype );
    MapBrowserEventHandler.prototype.constructor = MapBrowserEventHandler;

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    MapBrowserEventHandler.prototype.emulateClick_ = function emulateClick_ (pointerEvent) {
      var newEvent = new MapBrowserPointerEvent(
        MapBrowserEventType.CLICK, this.map_, pointerEvent);
      this.dispatchEvent(newEvent);
      if (this.clickTimeoutId_ !== undefined) {
        // double-click
        clearTimeout(this.clickTimeoutId_);
        this.clickTimeoutId_ = undefined;
        newEvent = new MapBrowserPointerEvent(
          MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);
        this.dispatchEvent(newEvent);
      } else {
        // click
        this.clickTimeoutId_ = setTimeout(function() {
          this.clickTimeoutId_ = undefined;
          var newEvent = new MapBrowserPointerEvent(
            MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);
          this.dispatchEvent(newEvent);
        }.bind(this), 250);
      }
    };

    /**
     * Keeps track on how many pointers are currently active.
     *
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    MapBrowserEventHandler.prototype.updateActivePointers_ = function updateActivePointers_ (pointerEvent) {
      var event = pointerEvent;

      if (event.type == MapBrowserEventType.POINTERUP ||
          event.type == MapBrowserEventType.POINTERCANCEL) {
        delete this.trackedTouches_[event.pointerId];
      } else if (event.type == MapBrowserEventType.POINTERDOWN) {
        this.trackedTouches_[event.pointerId] = true;
      }
      this.activePointers_ = Object.keys(this.trackedTouches_).length;
    };

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    MapBrowserEventHandler.prototype.handlePointerUp_ = function handlePointerUp_ (pointerEvent) {
      this.updateActivePointers_(pointerEvent);
      var newEvent = new MapBrowserPointerEvent(
        MapBrowserEventType.POINTERUP, this.map_, pointerEvent);
      this.dispatchEvent(newEvent);

      // We emulate click events on left mouse button click, touch contact, and pen
      // contact. isMouseActionButton returns true in these cases (evt.button is set
      // to 0).
      // See http://www.w3.org/TR/pointerevents/#button-states
      // We only fire click, singleclick, and doubleclick if nobody has called
      // event.stopPropagation() or event.preventDefault().
      if (!newEvent.propagationStopped && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) {
        this.emulateClick_(this.down_);
      }

      if (this.activePointers_ === 0) {
        this.dragListenerKeys_.forEach(unlistenByKey);
        this.dragListenerKeys_.length = 0;
        this.dragging_ = false;
        this.down_ = null;
        this.documentPointerEventHandler_.dispose();
        this.documentPointerEventHandler_ = null;
      }
    };

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @return {boolean} If the left mouse button was pressed.
     * @private
     */
    MapBrowserEventHandler.prototype.isMouseActionButton_ = function isMouseActionButton_ (pointerEvent) {
      return pointerEvent.button === 0;
    };

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    MapBrowserEventHandler.prototype.handlePointerDown_ = function handlePointerDown_ (pointerEvent) {
      this.updateActivePointers_(pointerEvent);
      var newEvent = new MapBrowserPointerEvent(
        MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);
      this.dispatchEvent(newEvent);

      this.down_ = pointerEvent;

      if (this.dragListenerKeys_.length === 0) {
        /* Set up a pointer event handler on the `document`,
         * which is required when the pointer is moved outside
         * the viewport when dragging.
         */
        this.documentPointerEventHandler_ =
            new PointerEventHandler(document);

        this.dragListenerKeys_.push(
          listen(this.documentPointerEventHandler_,
            MapBrowserEventType.POINTERMOVE,
            this.handlePointerMove_, this),
          listen(this.documentPointerEventHandler_,
            MapBrowserEventType.POINTERUP,
            this.handlePointerUp_, this),
          /* Note that the listener for `pointercancel is set up on
           * `pointerEventHandler_` and not `documentPointerEventHandler_` like
           * the `pointerup` and `pointermove` listeners.
           *
           * The reason for this is the following: `TouchSource.vacuumTouches_()`
           * issues `pointercancel` events, when there was no `touchend` for a
           * `touchstart`. Now, let's say a first `touchstart` is registered on
           * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
           * But `documentPointerEventHandler_` doesn't know about the first
           * `touchstart`. If there is no `touchend` for the `touchstart`, we can
           * only receive a `touchcancel` from `pointerEventHandler_`, because it is
           * only registered there.
           */
          listen(this.pointerEventHandler_,
            MapBrowserEventType.POINTERCANCEL,
            this.handlePointerUp_, this)
        );
      }
    };

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    MapBrowserEventHandler.prototype.handlePointerMove_ = function handlePointerMove_ (pointerEvent) {
      // Between pointerdown and pointerup, pointermove events are triggered.
      // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
      // moved a significant distance.
      if (this.isMoving_(pointerEvent)) {
        this.dragging_ = true;
        var newEvent = new MapBrowserPointerEvent(
          MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent,
          this.dragging_);
        this.dispatchEvent(newEvent);
      }

      // Some native android browser triggers mousemove events during small period
      // of time. See: https://code.google.com/p/android/issues/detail?id=5491 or
      // https://code.google.com/p/android/issues/detail?id=19827
      // ex: Galaxy Tab P3110 + Android 4.1.1
      pointerEvent.preventDefault();
    };

    /**
     * Wrap and relay a pointer event.  Note that this requires that the type
     * string for the MapBrowserPointerEvent matches the PointerEvent type.
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @private
     */
    MapBrowserEventHandler.prototype.relayEvent_ = function relayEvent_ (pointerEvent) {
      var dragging = !!(this.down_ && this.isMoving_(pointerEvent));
      this.dispatchEvent(new MapBrowserPointerEvent(
        pointerEvent.type, this.map_, pointerEvent, dragging));
    };

    /**
     * @param {import("./pointer/PointerEvent.js").default} pointerEvent Pointer
     * event.
     * @return {boolean} Is moving.
     * @private
     */
    MapBrowserEventHandler.prototype.isMoving_ = function isMoving_ (pointerEvent) {
      return this.dragging_ ||
          Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ ||
          Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;
    };

    /**
     * @inheritDoc
     */
    MapBrowserEventHandler.prototype.disposeInternal = function disposeInternal () {
      if (this.relayedListenerKey_) {
        unlistenByKey(this.relayedListenerKey_);
        this.relayedListenerKey_ = null;
      }
      if (this.pointerdownListenerKey_) {
        unlistenByKey(this.pointerdownListenerKey_);
        this.pointerdownListenerKey_ = null;
      }

      this.dragListenerKeys_.forEach(unlistenByKey);
      this.dragListenerKeys_.length = 0;

      if (this.documentPointerEventHandler_) {
        this.documentPointerEventHandler_.dispose();
        this.documentPointerEventHandler_ = null;
      }
      if (this.pointerEventHandler_) {
        this.pointerEventHandler_.dispose();
        this.pointerEventHandler_ = null;
      }
      EventTarget.prototype.disposeInternal.call(this);
    };

    return MapBrowserEventHandler;
  }(Target));

  /**
   * @module ol/MapEventType
   */

  /**
   * @enum {string}
   */
  var MapEventType = {

    /**
     * Triggered after a map frame is rendered.
     * @event module:ol/MapEvent~MapEvent#postrender
     * @api
     */
    POSTRENDER: 'postrender',

    /**
     * Triggered when the map starts moving.
     * @event module:ol/MapEvent~MapEvent#movestart
     * @api
     */
    MOVESTART: 'movestart',

    /**
     * Triggered after the map is moved.
     * @event module:ol/MapEvent~MapEvent#moveend
     * @api
     */
    MOVEEND: 'moveend'

  };

  /**
   * @module ol/MapProperty
   */

  /**
   * @enum {string}
   */
  var MapProperty = {
    LAYERGROUP: 'layergroup',
    SIZE: 'size',
    TARGET: 'target',
    VIEW: 'view'
  };

  /**
   * @module ol/render/EventType
   */

  /**
   * @enum {string}
   */
  var RenderEventType = {
    /**
     * @event module:ol/render/Event~RenderEvent#postcompose
     * @api
     */
    POSTCOMPOSE: 'postcompose',
    /**
     * @event module:ol/render/Event~RenderEvent#precompose
     * @api
     */
    PRECOMPOSE: 'precompose',
    /**
     * @event module:ol/render/Event~RenderEvent#render
     * @api
     */
    RENDER: 'render',
    /**
     * Triggered when rendering is complete, i.e. all sources and tiles have
     * finished loading for the current viewport, and all tiles are faded in.
     * @event module:ol/render/Event~RenderEvent#rendercomplete
     * @api
     */
    RENDERCOMPLETE: 'rendercomplete'
  };

  /**
   * @module ol/TileState
   */

  /**
   * @enum {number}
   */
  var TileState = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    /**
     * Indicates that tile loading failed
     * @type {number}
     */
    ERROR: 3,
    EMPTY: 4,
    ABORT: 5
  };

  /**
   * @module ol/asserts
   */

  /**
   * @param {*} assertion Assertion we expected to be truthy.
   * @param {number} errorCode Error code.
   */
  function assert(assertion, errorCode) {
    if (!assertion) {
      throw new AssertionError(errorCode);
    }
  }

  /**
   * @module ol/structs/PriorityQueue
   */


  /**
   * @type {number}
   */
  var DROP = Infinity;


  /**
   * @classdesc
   * Priority queue.
   *
   * The implementation is inspired from the Closure Library's Heap class and
   * Python's heapq module.
   *
   * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html
   * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.
   *
   * @template T
   */
  var PriorityQueue = function PriorityQueue(priorityFunction, keyFunction) {

    /**
     * @type {function(T): number}
     * @private
     */
    this.priorityFunction_ = priorityFunction;

    /**
     * @type {function(T): string}
     * @private
     */
    this.keyFunction_ = keyFunction;

    /**
     * @type {Array<T>}
     * @private
     */
    this.elements_ = [];

    /**
     * @type {Array<number>}
     * @private
     */
    this.priorities_ = [];

    /**
     * @type {!Object<string, boolean>}
     * @private
     */
    this.queuedElements_ = {};

  };

  /**
   * FIXME empty description for jsdoc
   */
  PriorityQueue.prototype.clear = function clear$1 () {
    this.elements_.length = 0;
    this.priorities_.length = 0;
    clear(this.queuedElements_);
  };


  /**
   * Remove and return the highest-priority element. O(log N).
   * @return {T} Element.
   */
  PriorityQueue.prototype.dequeue = function dequeue () {
    var elements = this.elements_;
    var priorities = this.priorities_;
    var element = elements[0];
    if (elements.length == 1) {
      elements.length = 0;
      priorities.length = 0;
    } else {
      elements[0] = elements.pop();
      priorities[0] = priorities.pop();
      this.siftUp_(0);
    }
    var elementKey = this.keyFunction_(element);
    delete this.queuedElements_[elementKey];
    return element;
  };


  /**
   * Enqueue an element. O(log N).
   * @param {T} element Element.
   * @return {boolean} The element was added to the queue.
   */
  PriorityQueue.prototype.enqueue = function enqueue (element) {
    assert(!(this.keyFunction_(element) in this.queuedElements_),
      31); // Tried to enqueue an `element` that was already added to the queue
    var priority = this.priorityFunction_(element);
    if (priority != DROP) {
      this.elements_.push(element);
      this.priorities_.push(priority);
      this.queuedElements_[this.keyFunction_(element)] = true;
      this.siftDown_(0, this.elements_.length - 1);
      return true;
    }
    return false;
  };


  /**
   * @return {number} Count.
   */
  PriorityQueue.prototype.getCount = function getCount () {
    return this.elements_.length;
  };


  /**
   * Gets the index of the left child of the node at the given index.
   * @param {number} index The index of the node to get the left child for.
   * @return {number} The index of the left child.
   * @private
   */
  PriorityQueue.prototype.getLeftChildIndex_ = function getLeftChildIndex_ (index) {
    return index * 2 + 1;
  };


  /**
   * Gets the index of the right child of the node at the given index.
   * @param {number} index The index of the node to get the right child for.
   * @return {number} The index of the right child.
   * @private
   */
  PriorityQueue.prototype.getRightChildIndex_ = function getRightChildIndex_ (index) {
    return index * 2 + 2;
  };


  /**
   * Gets the index of the parent of the node at the given index.
   * @param {number} index The index of the node to get the parent for.
   * @return {number} The index of the parent.
   * @private
   */
  PriorityQueue.prototype.getParentIndex_ = function getParentIndex_ (index) {
    return (index - 1) >> 1;
  };


  /**
   * Make this a heap. O(N).
   * @private
   */
  PriorityQueue.prototype.heapify_ = function heapify_ () {
    var i;
    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {
      this.siftUp_(i);
    }
  };


  /**
   * @return {boolean} Is empty.
   */
  PriorityQueue.prototype.isEmpty = function isEmpty$$1 () {
    return this.elements_.length === 0;
  };


  /**
   * @param {string} key Key.
   * @return {boolean} Is key queued.
   */
  PriorityQueue.prototype.isKeyQueued = function isKeyQueued (key) {
    return key in this.queuedElements_;
  };


  /**
   * @param {T} element Element.
   * @return {boolean} Is queued.
   */
  PriorityQueue.prototype.isQueued = function isQueued (element) {
    return this.isKeyQueued(this.keyFunction_(element));
  };


  /**
   * @param {number} index The index of the node to move down.
   * @private
   */
  PriorityQueue.prototype.siftUp_ = function siftUp_ (index) {
    var elements = this.elements_;
    var priorities = this.priorities_;
    var count = elements.length;
    var element = elements[index];
    var priority = priorities[index];
    var startIndex = index;

    while (index < (count >> 1)) {
      var lIndex = this.getLeftChildIndex_(index);
      var rIndex = this.getRightChildIndex_(index);

      var smallerChildIndex = rIndex < count &&
          priorities[rIndex] < priorities[lIndex] ?
        rIndex : lIndex;

      elements[index] = elements[smallerChildIndex];
      priorities[index] = priorities[smallerChildIndex];
      index = smallerChildIndex;
    }

    elements[index] = element;
    priorities[index] = priority;
    this.siftDown_(startIndex, index);
  };


  /**
   * @param {number} startIndex The index of the root.
   * @param {number} index The index of the node to move up.
   * @private
   */
  PriorityQueue.prototype.siftDown_ = function siftDown_ (startIndex, index) {
    var elements = this.elements_;
    var priorities = this.priorities_;
    var element = elements[index];
    var priority = priorities[index];

    while (index > startIndex) {
      var parentIndex = this.getParentIndex_(index);
      if (priorities[parentIndex] > priority) {
        elements[index] = elements[parentIndex];
        priorities[index] = priorities[parentIndex];
        index = parentIndex;
      } else {
        break;
      }
    }
    elements[index] = element;
    priorities[index] = priority;
  };


  /**
   * FIXME empty description for jsdoc
   */
  PriorityQueue.prototype.reprioritize = function reprioritize () {
    var priorityFunction = this.priorityFunction_;
    var elements = this.elements_;
    var priorities = this.priorities_;
    var index = 0;
    var n = elements.length;
    var element, i, priority;
    for (i = 0; i < n; ++i) {
      element = elements[i];
      priority = priorityFunction(element);
      if (priority == DROP) {
        delete this.queuedElements_[this.keyFunction_(element)];
      } else {
        priorities[index] = priority;
        elements[index++] = element;
      }
    }
    elements.length = index;
    priorities.length = index;
    this.heapify_();
  };

  /**
   * @module ol/TileQueue
   */


  /**
   * @typedef {function(import("./Tile.js").default, string, import("./coordinate.js").Coordinate, number): number} PriorityFunction
   */


  var TileQueue = /*@__PURE__*/(function (PriorityQueue$$1) {
    function TileQueue(tilePriorityFunction, tileChangeCallback) {

      PriorityQueue$$1.call(
        /**
         * @param {Array} element Element.
         * @return {number} Priority.
         */
        this, function(element) {
          return tilePriorityFunction.apply(null, element);
        },
        /**
         * @param {Array} element Element.
         * @return {string} Key.
         */
        function(element) {
          return (/** @type {import("./Tile.js").default} */ (element[0]).getKey());
        });

      /**
       * @private
       * @type {function(): ?}
       */
      this.tileChangeCallback_ = tileChangeCallback;

      /**
       * @private
       * @type {number}
       */
      this.tilesLoading_ = 0;

      /**
       * @private
       * @type {!Object<string,boolean>}
       */
      this.tilesLoadingKeys_ = {};

    }

    if ( PriorityQueue$$1 ) TileQueue.__proto__ = PriorityQueue$$1;
    TileQueue.prototype = Object.create( PriorityQueue$$1 && PriorityQueue$$1.prototype );
    TileQueue.prototype.constructor = TileQueue;

    /**
     * @inheritDoc
     */
    TileQueue.prototype.enqueue = function enqueue (element) {
      var added = PriorityQueue$$1.prototype.enqueue.call(this, element);
      if (added) {
        var tile = element[0];
        listen(tile, EventType.CHANGE, this.handleTileChange, this);
      }
      return added;
    };

    /**
     * @return {number} Number of tiles loading.
     */
    TileQueue.prototype.getTilesLoading = function getTilesLoading () {
      return this.tilesLoading_;
    };

    /**
     * @param {import("./events/Event.js").default} event Event.
     * @protected
     */
    TileQueue.prototype.handleTileChange = function handleTileChange (event) {
      var tile = /** @type {import("./Tile.js").default} */ (event.target);
      var state = tile.getState();
      if (state === TileState.LOADED || state === TileState.ERROR ||
          state === TileState.EMPTY || state === TileState.ABORT) {
        unlisten(tile, EventType.CHANGE, this.handleTileChange, this);
        var tileKey = tile.getKey();
        if (tileKey in this.tilesLoadingKeys_) {
          delete this.tilesLoadingKeys_[tileKey];
          --this.tilesLoading_;
        }
        this.tileChangeCallback_();
      }
    };

    /**
     * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
     * @param {number} maxNewLoads Maximum number of new tiles to load.
     */
    TileQueue.prototype.loadMoreTiles = function loadMoreTiles (maxTotalLoading, maxNewLoads) {
      var newLoads = 0;
      var abortedTiles = false;
      var state, tile, tileKey;
      while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads &&
             this.getCount() > 0) {
        tile = /** @type {import("./Tile.js").default} */ (this.dequeue()[0]);
        tileKey = tile.getKey();
        state = tile.getState();
        if (state === TileState.ABORT) {
          abortedTiles = true;
        } else if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {
          this.tilesLoadingKeys_[tileKey] = true;
          ++this.tilesLoading_;
          ++newLoads;
          tile.load();
        }
      }
      if (newLoads === 0 && abortedTiles) {
        // Do not stop the render loop when all wanted tiles were aborted due to
        // a small, saturated tile cache.
        this.tileChangeCallback_();
      }
    };

    return TileQueue;
  }(PriorityQueue));

  /**
   * @module ol/tilegrid/common
   */

  /**
   * Default maximum zoom for default tile grids.
   * @type {number}
   */
  var DEFAULT_MAX_ZOOM = 42;

  /**
   * Default tile size.
   * @type {number}
   */
  var DEFAULT_TILE_SIZE = 256;

  /**
   * @module ol/math
   */

  /**
   * Takes a number and clamps it to within the provided bounds.
   * @param {number} value The input number.
   * @param {number} min The minimum value to return.
   * @param {number} max The maximum value to return.
   * @return {number} The input number if it is within bounds, or the nearest
   *     number within the bounds.
   */
  function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
  }


  /**
   * Return the hyperbolic cosine of a given number. The method will use the
   * native `Math.cosh` function if it is available, otherwise the hyperbolic
   * cosine will be calculated via the reference implementation of the Mozilla
   * developer network.
   *
   * @param {number} x X.
   * @return {number} Hyperbolic cosine of x.
   */
  var cosh = (function() {
    // Wrapped in a iife, to save the overhead of checking for the native
    // implementation on every invocation.
    var cosh;
    if ('cosh' in Math) {
      // The environment supports the native Math.cosh function, use it…
      cosh = Math.cosh;
    } else {
      // … else, use the reference implementation of MDN:
      cosh = function(x) {
        var y = /** @type {Math} */ (Math).exp(x);
        return (y + 1 / y) / 2;
      };
    }
    return cosh;
  }());


  /**
   * @param {number} x X.
   * @return {number} The smallest power of two greater than or equal to x.
   */
  function roundUpToPowerOfTwo(x) {
    assert(0 < x, 29); // `x` must be greater than `0`
    return Math.pow(2, Math.ceil(Math.log(x) / Math.LN2));
  }


  /**
   * Returns the square of the closest distance between the point (x, y) and the
   * line segment (x1, y1) to (x2, y2).
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} x1 X1.
   * @param {number} y1 Y1.
   * @param {number} x2 X2.
   * @param {number} y2 Y2.
   * @return {number} Squared distance.
   */
  function squaredSegmentDistance(x, y, x1, y1, x2, y2) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    if (dx !== 0 || dy !== 0) {
      var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
      if (t > 1) {
        x1 = x2;
        y1 = y2;
      } else if (t > 0) {
        x1 += dx * t;
        y1 += dy * t;
      }
    }
    return squaredDistance(x, y, x1, y1);
  }


  /**
   * Returns the square of the distance between the points (x1, y1) and (x2, y2).
   * @param {number} x1 X1.
   * @param {number} y1 Y1.
   * @param {number} x2 X2.
   * @param {number} y2 Y2.
   * @return {number} Squared distance.
   */
  function squaredDistance(x1, y1, x2, y2) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    return dx * dx + dy * dy;
  }


  /**
   * Solves system of linear equations using Gaussian elimination method.
   *
   * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)
   *                                     in row-major order.
   * @return {Array<number>} The resulting vector.
   */
  function solveLinearSystem(mat) {
    var n = mat.length;

    for (var i = 0; i < n; i++) {
      // Find max in the i-th column (ignoring i - 1 first rows)
      var maxRow = i;
      var maxEl = Math.abs(mat[i][i]);
      for (var r = i + 1; r < n; r++) {
        var absValue = Math.abs(mat[r][i]);
        if (absValue > maxEl) {
          maxEl = absValue;
          maxRow = r;
        }
      }

      if (maxEl === 0) {
        return null; // matrix is singular
      }

      // Swap max row with i-th (current) row
      var tmp = mat[maxRow];
      mat[maxRow] = mat[i];
      mat[i] = tmp;

      // Subtract the i-th row to make all the remaining rows 0 in the i-th column
      for (var j = i + 1; j < n; j++) {
        var coef = -mat[j][i] / mat[i][i];
        for (var k = i; k < n + 1; k++) {
          if (i == k) {
            mat[j][k] = 0;
          } else {
            mat[j][k] += coef * mat[i][k];
          }
        }
      }
    }

    // Solve Ax=b for upper triangular matrix A (mat)
    var x = new Array(n);
    for (var l = n - 1; l >= 0; l--) {
      x[l] = mat[l][n] / mat[l][l];
      for (var m = l - 1; m >= 0; m--) {
        mat[m][n] -= mat[m][l] * x[l];
      }
    }
    return x;
  }


  /**
   * Converts degrees to radians.
   *
   * @param {number} angleInDegrees Angle in degrees.
   * @return {number} Angle in radians.
   */
  function toRadians(angleInDegrees) {
    return angleInDegrees * Math.PI / 180;
  }

  /**
   * Returns the modulo of a / b, depending on the sign of b.
   *
   * @param {number} a Dividend.
   * @param {number} b Divisor.
   * @return {number} Modulo.
   */
  function modulo(a, b) {
    var r = a % b;
    return r * b < 0 ? r + b : r;
  }

  /**
   * Calculates the linearly interpolated value of x between a and b.
   *
   * @param {number} a Number
   * @param {number} b Number
   * @param {number} x Value to be interpolated.
   * @return {number} Interpolated value.
   */
  function lerp(a, b, x) {
    return a + x * (b - a);
  }

  /**
   * @module ol/centerconstraint
   */


  /**
   * @typedef {function((import("./coordinate.js").Coordinate|undefined)): (import("./coordinate.js").Coordinate|undefined)} Type
   */


  /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @return {Type} The constraint.
   */
  function createExtent(extent) {
    return (
      /**
       * @param {import("./coordinate.js").Coordinate=} center Center.
       * @return {import("./coordinate.js").Coordinate|undefined} Center.
       */
      function(center) {
        if (center) {
          return [
            clamp(center[0], extent[0], extent[2]),
            clamp(center[1], extent[1], extent[3])
          ];
        } else {
          return undefined;
        }
      }
    );
  }


  /**
   * @param {import("./coordinate.js").Coordinate=} center Center.
   * @return {import("./coordinate.js").Coordinate|undefined} Center.
   */
  function none(center) {
    return center;
  }

  /**
   * @module ol/resolutionconstraint
   */


  /**
   * @typedef {function((number|undefined), number, number): (number|undefined)} Type
   */


  /**
   * @param {Array<number>} resolutions Resolutions.
   * @return {Type} Zoom function.
   */
  function createSnapToResolutions(resolutions) {
    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} delta Delta.
       * @param {number} direction Direction.
       * @return {number|undefined} Resolution.
       */
      function(resolution, delta, direction) {
        if (resolution !== undefined) {
          var z = linearFindNearest(resolutions, resolution, direction);
          z = clamp(z + delta, 0, resolutions.length - 1);
          var index = Math.floor(z);
          if (z != index && index < resolutions.length - 1) {
            var power = resolutions[index] / resolutions[index + 1];
            return resolutions[index] / Math.pow(power, z - index);
          } else {
            return resolutions[index];
          }
        } else {
          return undefined;
        }
      }
    );
  }


  /**
   * @param {number} power Power.
   * @param {number} maxResolution Maximum resolution.
   * @param {number=} opt_maxLevel Maximum level.
   * @return {Type} Zoom function.
   */
  function createSnapToPower(power, maxResolution, opt_maxLevel) {
    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} delta Delta.
       * @param {number} direction Direction.
       * @return {number|undefined} Resolution.
       */
      function(resolution, delta, direction) {
        if (resolution !== undefined) {
          var offset = -direction / 2 + 0.5;
          var oldLevel = Math.floor(
            Math.log(maxResolution / resolution) / Math.log(power) + offset);
          var newLevel = Math.max(oldLevel + delta, 0);
          if (opt_maxLevel !== undefined) {
            newLevel = Math.min(newLevel, opt_maxLevel);
          }
          return maxResolution / Math.pow(power, newLevel);
        } else {
          return undefined;
        }
      });
  }

  /**
   * @module ol/rotationconstraint
   */


  /**
   * @typedef {function((number|undefined), number): (number|undefined)} Type
   */


  /**
   * @param {number|undefined} rotation Rotation.
   * @param {number} delta Delta.
   * @return {number|undefined} Rotation.
   */
  function disable(rotation, delta) {
    if (rotation !== undefined) {
      return 0;
    } else {
      return undefined;
    }
  }


  /**
   * @param {number|undefined} rotation Rotation.
   * @param {number} delta Delta.
   * @return {number|undefined} Rotation.
   */
  function none$1(rotation, delta) {
    if (rotation !== undefined) {
      return rotation + delta;
    } else {
      return undefined;
    }
  }


  /**
   * @param {number} n N.
   * @return {Type} Rotation constraint.
   */
  function createSnapToN(n) {
    var theta = 2 * Math.PI / n;
    return (
      /**
       * @param {number|undefined} rotation Rotation.
       * @param {number} delta Delta.
       * @return {number|undefined} Rotation.
       */
      function(rotation, delta) {
        if (rotation !== undefined) {
          rotation = Math.floor((rotation + delta) / theta + 0.5) * theta;
          return rotation;
        } else {
          return undefined;
        }
      });
  }


  /**
   * @param {number=} opt_tolerance Tolerance.
   * @return {Type} Rotation constraint.
   */
  function createSnapToZero(opt_tolerance) {
    var tolerance = opt_tolerance || toRadians(5);
    return (
      /**
       * @param {number|undefined} rotation Rotation.
       * @param {number} delta Delta.
       * @return {number|undefined} Rotation.
       */
      function(rotation, delta) {
        if (rotation !== undefined) {
          if (Math.abs(rotation + delta) <= tolerance) {
            return 0;
          } else {
            return rotation + delta;
          }
        } else {
          return undefined;
        }
      });
  }

  /**
   * @module ol/ViewHint
   */

  /**
   * @enum {number}
   */
  var ViewHint = {
    ANIMATING: 0,
    INTERACTING: 1
  };

  /**
   * @module ol/ViewProperty
   */

  /**
   * @enum {string}
   */
  var ViewProperty = {
    CENTER: 'center',
    RESOLUTION: 'resolution',
    ROTATION: 'rotation'
  };

  /**
   * @module ol/string
   */

  /**
   * @module ol/coordinate
   */


  /**
   * An array of numbers representing an xy coordinate. Example: `[16, 48]`.
   * @typedef {Array<number>} Coordinate
   * @api
   */


  /**
   * A function that takes a {@link module:ol/coordinate~Coordinate} and
   * transforms it into a `{string}`.
   *
   * @typedef {function((Coordinate|undefined)): string} CoordinateFormat
   * @api
   */


  /**
   * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
   * by the function.
   *
   * Example:
   *
   *     import {add} from 'ol/coordinate';
   *
   *     var coord = [7.85, 47.983333];
   *     add(coord, [-2, 4]);
   *     // coord is now [5.85, 51.983333]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {Coordinate} delta Delta.
   * @return {Coordinate} The input coordinate adjusted by
   * the given delta.
   * @api
   */
  function add(coordinate, delta) {
    coordinate[0] += delta[0];
    coordinate[1] += delta[1];
    return coordinate;
  }


  /**
   * Calculates the point closest to the passed coordinate on the passed circle.
   *
   * @param {Coordinate} coordinate The coordinate.
   * @param {import("./geom/Circle.js").default} circle The circle.
   * @return {Coordinate} Closest point on the circumference.
   */
  function closestOnCircle(coordinate, circle) {
    var r = circle.getRadius();
    var center = circle.getCenter();
    var x0 = center[0];
    var y0 = center[1];
    var x1 = coordinate[0];
    var y1 = coordinate[1];

    var dx = x1 - x0;
    var dy = y1 - y0;
    if (dx === 0 && dy === 0) {
      dx = 1;
    }
    var d = Math.sqrt(dx * dx + dy * dy);

    var x = x0 + r * dx / d;
    var y = y0 + r * dy / d;

    return [x, y];
  }


  /**
   * Calculates the point closest to the passed coordinate on the passed segment.
   * This is the foot of the perpendicular of the coordinate to the segment when
   * the foot is on the segment, or the closest segment coordinate when the foot
   * is outside the segment.
   *
   * @param {Coordinate} coordinate The coordinate.
   * @param {Array<Coordinate>} segment The two coordinates
   * of the segment.
   * @return {Coordinate} The foot of the perpendicular of
   * the coordinate to the segment.
   */
  function closestOnSegment(coordinate, segment) {
    var x0 = coordinate[0];
    var y0 = coordinate[1];
    var start = segment[0];
    var end = segment[1];
    var x1 = start[0];
    var y1 = start[1];
    var x2 = end[0];
    var y2 = end[1];
    var dx = x2 - x1;
    var dy = y2 - y1;
    var along = (dx === 0 && dy === 0) ? 0 :
      ((dx * (x0 - x1)) + (dy * (y0 - y1))) / ((dx * dx + dy * dy) || 0);
    var x, y;
    if (along <= 0) {
      x = x1;
      y = y1;
    } else if (along >= 1) {
      x = x2;
      y = y2;
    } else {
      x = x1 + along * dx;
      y = y1 + along * dy;
    }
    return [x, y];
  }


  /**
   * @param {Coordinate} coordinate1 First coordinate.
   * @param {Coordinate} coordinate2 Second coordinate.
   * @return {boolean} The two coordinates are equal.
   */
  function equals$1(coordinate1, coordinate2) {
    var equals = true;
    for (var i = coordinate1.length - 1; i >= 0; --i) {
      if (coordinate1[i] != coordinate2[i]) {
        equals = false;
        break;
      }
    }
    return equals;
  }


  /**
   * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
   * returned by the function.
   *
   * Example:
   *
   *     import {rotate} from 'ol/coordinate';
   *
   *     var coord = [7.85, 47.983333];
   *     var rotateRadians = Math.PI / 2; // 90 degrees
   *     rotate(coord, rotateRadians);
   *     // coord is now [-47.983333, 7.85]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} angle Angle in radian.
   * @return {Coordinate} Coordinate.
   * @api
   */
  function rotate(coordinate, angle) {
    var cosAngle = Math.cos(angle);
    var sinAngle = Math.sin(angle);
    var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
    var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
    coordinate[0] = x;
    coordinate[1] = y;
    return coordinate;
  }


  /**
   * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned
   * by the function.
   *
   * Example:
   *
   *     import {scale as scaleCoordinate} from 'ol/coordinate';
   *
   *     var coord = [7.85, 47.983333];
   *     var scale = 1.2;
   *     scaleCoordinate(coord, scale);
   *     // coord is now [9.42, 57.5799996]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} scale Scale factor.
   * @return {Coordinate} Coordinate.
   */
  function scale(coordinate, scale) {
    coordinate[0] *= scale;
    coordinate[1] *= scale;
    return coordinate;
  }


  /**
   * @param {Coordinate} coord1 First coordinate.
   * @param {Coordinate} coord2 Second coordinate.
   * @return {number} Squared distance between coord1 and coord2.
   */
  function squaredDistance$1(coord1, coord2) {
    var dx = coord1[0] - coord2[0];
    var dy = coord1[1] - coord2[1];
    return dx * dx + dy * dy;
  }


  /**
   * @param {Coordinate} coord1 First coordinate.
   * @param {Coordinate} coord2 Second coordinate.
   * @return {number} Distance between coord1 and coord2.
   */
  function distance(coord1, coord2) {
    return Math.sqrt(squaredDistance$1(coord1, coord2));
  }


  /**
   * Calculate the squared distance from a coordinate to a line segment.
   *
   * @param {Coordinate} coordinate Coordinate of the point.
   * @param {Array<Coordinate>} segment Line segment (2
   * coordinates).
   * @return {number} Squared distance from the point to the line segment.
   */
  function squaredDistanceToSegment(coordinate, segment) {
    return squaredDistance$1(coordinate,
      closestOnSegment(coordinate, segment));
  }

  /**
   * @module ol/easing
   */


  /**
   * Start slow and speed up.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function easeIn(t) {
    return Math.pow(t, 3);
  }


  /**
   * Start fast and slow down.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function easeOut(t) {
    return 1 - easeIn(1 - t);
  }


  /**
   * Start slow, speed up, and then slow down again.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function inAndOut(t) {
    return 3 * t * t - 2 * t * t * t;
  }


  /**
   * Maintain a constant speed over time.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function linear(t) {
    return t;
  }

  /**
   * @module ol/extent/Corner
   */

  /**
   * Extent corner.
   * @enum {string}
   */
  var Corner = {
    BOTTOM_LEFT: 'bottom-left',
    BOTTOM_RIGHT: 'bottom-right',
    TOP_LEFT: 'top-left',
    TOP_RIGHT: 'top-right'
  };

  /**
   * @module ol/extent/Relationship
   */

  /**
   * Relationship to an extent.
   * @enum {number}
   */
  var Relationship = {
    UNKNOWN: 0,
    INTERSECTING: 1,
    ABOVE: 2,
    RIGHT: 4,
    BELOW: 8,
    LEFT: 16
  };

  /**
   * @module ol/extent
   */


  /**
   * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
   * @typedef {Array<number>} Extent
   * @api
   */

  /**
   * Build an extent that includes all given coordinates.
   *
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @return {Extent} Bounding extent.
   * @api
   */
  function boundingExtent(coordinates) {
    var extent = createEmpty();
    for (var i = 0, ii = coordinates.length; i < ii; ++i) {
      extendCoordinate(extent, coordinates[i]);
    }
    return extent;
  }


  /**
   * Return extent increased by the provided value.
   * @param {Extent} extent Extent.
   * @param {number} value The amount by which the extent should be buffered.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   * @api
   */
  function buffer(extent, value, opt_extent) {
    if (opt_extent) {
      opt_extent[0] = extent[0] - value;
      opt_extent[1] = extent[1] - value;
      opt_extent[2] = extent[2] + value;
      opt_extent[3] = extent[3] + value;
      return opt_extent;
    } else {
      return [
        extent[0] - value,
        extent[1] - value,
        extent[2] + value,
        extent[3] + value
      ];
    }
  }


  /**
   * Creates a clone of an extent.
   *
   * @param {Extent} extent Extent to clone.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} The clone.
   */
  function clone(extent, opt_extent) {
    if (opt_extent) {
      opt_extent[0] = extent[0];
      opt_extent[1] = extent[1];
      opt_extent[2] = extent[2];
      opt_extent[3] = extent[3];
      return opt_extent;
    } else {
      return extent.slice();
    }
  }


  /**
   * @param {Extent} extent Extent.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {number} Closest squared distance.
   */
  function closestSquaredDistanceXY(extent, x, y) {
    var dx, dy;
    if (x < extent[0]) {
      dx = extent[0] - x;
    } else if (extent[2] < x) {
      dx = x - extent[2];
    } else {
      dx = 0;
    }
    if (y < extent[1]) {
      dy = extent[1] - y;
    } else if (extent[3] < y) {
      dy = y - extent[3];
    } else {
      dy = 0;
    }
    return dx * dx + dy * dy;
  }


  /**
   * Check if the passed coordinate is contained or on the edge of the extent.
   *
   * @param {Extent} extent Extent.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @return {boolean} The coordinate is contained in the extent.
   * @api
   */
  function containsCoordinate(extent, coordinate) {
    return containsXY(extent, coordinate[0], coordinate[1]);
  }


  /**
   * Check if one extent contains another.
   *
   * An extent is deemed contained if it lies completely within the other extent,
   * including if they share one or more edges.
   *
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {boolean} The second extent is contained by or on the edge of the
   *     first.
   * @api
   */
  function containsExtent(extent1, extent2) {
    return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] &&
        extent1[1] <= extent2[1] && extent2[3] <= extent1[3];
  }


  /**
   * Check if the passed coordinate is contained or on the edge of the extent.
   *
   * @param {Extent} extent Extent.
   * @param {number} x X coordinate.
   * @param {number} y Y coordinate.
   * @return {boolean} The x, y values are contained in the extent.
   * @api
   */
  function containsXY(extent, x, y) {
    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];
  }


  /**
   * Get the relationship between a coordinate and extent.
   * @param {Extent} extent The extent.
   * @param {import("./coordinate.js").Coordinate} coordinate The coordinate.
   * @return {Relationship} The relationship (bitwise compare with
   *     import("./extent/Relationship.js").Relationship).
   */
  function coordinateRelationship(extent, coordinate) {
    var minX = extent[0];
    var minY = extent[1];
    var maxX = extent[2];
    var maxY = extent[3];
    var x = coordinate[0];
    var y = coordinate[1];
    var relationship = Relationship.UNKNOWN;
    if (x < minX) {
      relationship = relationship | Relationship.LEFT;
    } else if (x > maxX) {
      relationship = relationship | Relationship.RIGHT;
    }
    if (y < minY) {
      relationship = relationship | Relationship.BELOW;
    } else if (y > maxY) {
      relationship = relationship | Relationship.ABOVE;
    }
    if (relationship === Relationship.UNKNOWN) {
      relationship = Relationship.INTERSECTING;
    }
    return relationship;
  }


  /**
   * Create an empty extent.
   * @return {Extent} Empty extent.
   * @api
   */
  function createEmpty() {
    return [Infinity, Infinity, -Infinity, -Infinity];
  }


  /**
   * Create a new extent or update the provided extent.
   * @param {number} minX Minimum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxX Maximum X.
   * @param {number} maxY Maximum Y.
   * @param {Extent=} opt_extent Destination extent.
   * @return {Extent} Extent.
   */
  function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {
    if (opt_extent) {
      opt_extent[0] = minX;
      opt_extent[1] = minY;
      opt_extent[2] = maxX;
      opt_extent[3] = maxY;
      return opt_extent;
    } else {
      return [minX, minY, maxX, maxY];
    }
  }


  /**
   * Create a new empty extent or make the provided one empty.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateEmpty(opt_extent) {
    return createOrUpdate(
      Infinity, Infinity, -Infinity, -Infinity, opt_extent);
  }


  /**
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromCoordinate(coordinate, opt_extent) {
    var x = coordinate[0];
    var y = coordinate[1];
    return createOrUpdate(x, y, x, y, opt_extent);
  }


  /**
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromCoordinates(coordinates, opt_extent) {
    var extent = createOrUpdateEmpty(opt_extent);
    return extendCoordinates(extent, coordinates);
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {
    var extent = createOrUpdateEmpty(opt_extent);
    return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);
  }


  /**
   * Determine if two extents are equivalent.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {boolean} The two extents are equivalent.
   * @api
   */
  function equals$2(extent1, extent2) {
    return extent1[0] == extent2[0] && extent1[2] == extent2[2] &&
        extent1[1] == extent2[1] && extent1[3] == extent2[3];
  }


  /**
   * Modify an extent to include another extent.
   * @param {Extent} extent1 The extent to be modified.
   * @param {Extent} extent2 The extent that will be included in the first.
   * @return {Extent} A reference to the first (extended) extent.
   * @api
   */
  function extend$1(extent1, extent2) {
    if (extent2[0] < extent1[0]) {
      extent1[0] = extent2[0];
    }
    if (extent2[2] > extent1[2]) {
      extent1[2] = extent2[2];
    }
    if (extent2[1] < extent1[1]) {
      extent1[1] = extent2[1];
    }
    if (extent2[3] > extent1[3]) {
      extent1[3] = extent2[3];
    }
    return extent1;
  }


  /**
   * @param {Extent} extent Extent.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   */
  function extendCoordinate(extent, coordinate) {
    if (coordinate[0] < extent[0]) {
      extent[0] = coordinate[0];
    }
    if (coordinate[0] > extent[2]) {
      extent[2] = coordinate[0];
    }
    if (coordinate[1] < extent[1]) {
      extent[1] = coordinate[1];
    }
    if (coordinate[1] > extent[3]) {
      extent[3] = coordinate[1];
    }
  }


  /**
   * @param {Extent} extent Extent.
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @return {Extent} Extent.
   */
  function extendCoordinates(extent, coordinates) {
    for (var i = 0, ii = coordinates.length; i < ii; ++i) {
      extendCoordinate(extent, coordinates[i]);
    }
    return extent;
  }


  /**
   * @param {Extent} extent Extent.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {Extent} Extent.
   */
  function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {
    for (; offset < end; offset += stride) {
      extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);
    }
    return extent;
  }


  /**
   * @param {Extent} extent Extent.
   * @param {number} x X.
   * @param {number} y Y.
   */
  function extendXY(extent, x, y) {
    extent[0] = Math.min(extent[0], x);
    extent[1] = Math.min(extent[1], y);
    extent[2] = Math.max(extent[2], x);
    extent[3] = Math.max(extent[3], y);
  }


  /**
   * This function calls `callback` for each corner of the extent. If the
   * callback returns a truthy value the function returns that value
   * immediately. Otherwise the function returns `false`.
   * @param {Extent} extent Extent.
   * @param {function(this:T, import("./coordinate.js").Coordinate): S} callback Callback.
   * @param {T=} opt_this Value to use as `this` when executing `callback`.
   * @return {S|boolean} Value.
   * @template S, T
   */
  function forEachCorner(extent, callback, opt_this) {
    var val;
    val = callback.call(opt_this, getBottomLeft(extent));
    if (val) {
      return val;
    }
    val = callback.call(opt_this, getBottomRight(extent));
    if (val) {
      return val;
    }
    val = callback.call(opt_this, getTopRight(extent));
    if (val) {
      return val;
    }
    val = callback.call(opt_this, getTopLeft(extent));
    if (val) {
      return val;
    }
    return false;
  }


  /**
   * Get the size of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Area.
   * @api
   */
  function getArea(extent) {
    var area = 0;
    if (!isEmpty$1(extent)) {
      area = getWidth(extent) * getHeight(extent);
    }
    return area;
  }


  /**
   * Get the bottom left coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Bottom left coordinate.
   * @api
   */
  function getBottomLeft(extent) {
    return [extent[0], extent[1]];
  }


  /**
   * Get the bottom right coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Bottom right coordinate.
   * @api
   */
  function getBottomRight(extent) {
    return [extent[2], extent[1]];
  }


  /**
   * Get the center coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Center.
   * @api
   */
  function getCenter(extent) {
    return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
  }


  /**
   * Get a corner coordinate of an extent.
   * @param {Extent} extent Extent.
   * @param {Corner} corner Corner.
   * @return {import("./coordinate.js").Coordinate} Corner coordinate.
   */
  function getCorner(extent, corner) {
    var coordinate;
    if (corner === Corner.BOTTOM_LEFT) {
      coordinate = getBottomLeft(extent);
    } else if (corner === Corner.BOTTOM_RIGHT) {
      coordinate = getBottomRight(extent);
    } else if (corner === Corner.TOP_LEFT) {
      coordinate = getTopLeft(extent);
    } else if (corner === Corner.TOP_RIGHT) {
      coordinate = getTopRight(extent);
    } else {
      assert(false, 13); // Invalid corner
    }
    return coordinate;
  }


  /**
   * @param {import("./coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {import("./size.js").Size} size Size.
   * @param {Extent=} opt_extent Destination extent.
   * @return {Extent} Extent.
   */
  function getForViewAndSize(center, resolution, rotation, size, opt_extent) {
    var dx = resolution * size[0] / 2;
    var dy = resolution * size[1] / 2;
    var cosRotation = Math.cos(rotation);
    var sinRotation = Math.sin(rotation);
    var xCos = dx * cosRotation;
    var xSin = dx * sinRotation;
    var yCos = dy * cosRotation;
    var ySin = dy * sinRotation;
    var x = center[0];
    var y = center[1];
    var x0 = x - xCos + ySin;
    var x1 = x - xCos - ySin;
    var x2 = x + xCos - ySin;
    var x3 = x + xCos + ySin;
    var y0 = y - xSin - yCos;
    var y1 = y - xSin + yCos;
    var y2 = y + xSin + yCos;
    var y3 = y + xSin - yCos;
    return createOrUpdate(
      Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3),
      Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3),
      opt_extent);
  }


  /**
   * Get the height of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Height.
   * @api
   */
  function getHeight(extent) {
    return extent[3] - extent[1];
  }


  /**
   * Get the intersection of two extents.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @param {Extent=} opt_extent Optional extent to populate with intersection.
   * @return {Extent} Intersecting extent.
   * @api
   */
  function getIntersection(extent1, extent2, opt_extent) {
    var intersection = opt_extent ? opt_extent : createEmpty();
    if (intersects(extent1, extent2)) {
      if (extent1[0] > extent2[0]) {
        intersection[0] = extent1[0];
      } else {
        intersection[0] = extent2[0];
      }
      if (extent1[1] > extent2[1]) {
        intersection[1] = extent1[1];
      } else {
        intersection[1] = extent2[1];
      }
      if (extent1[2] < extent2[2]) {
        intersection[2] = extent1[2];
      } else {
        intersection[2] = extent2[2];
      }
      if (extent1[3] < extent2[3]) {
        intersection[3] = extent1[3];
      } else {
        intersection[3] = extent2[3];
      }
    } else {
      createOrUpdateEmpty(intersection);
    }
    return intersection;
  }


  /**
   * Get the top left coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Top left coordinate.
   * @api
   */
  function getTopLeft(extent) {
    return [extent[0], extent[3]];
  }


  /**
   * Get the top right coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Top right coordinate.
   * @api
   */
  function getTopRight(extent) {
    return [extent[2], extent[3]];
  }


  /**
   * Get the width of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Width.
   * @api
   */
  function getWidth(extent) {
    return extent[2] - extent[0];
  }


  /**
   * Determine if one extent intersects another.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent.
   * @return {boolean} The two extents intersect.
   * @api
   */
  function intersects(extent1, extent2) {
    return extent1[0] <= extent2[2] &&
        extent1[2] >= extent2[0] &&
        extent1[1] <= extent2[3] &&
        extent1[3] >= extent2[1];
  }


  /**
   * Determine if an extent is empty.
   * @param {Extent} extent Extent.
   * @return {boolean} Is empty.
   * @api
   */
  function isEmpty$1(extent) {
    return extent[2] < extent[0] || extent[3] < extent[1];
  }


  /**
   * @param {Extent} extent Extent.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function returnOrUpdate(extent, opt_extent) {
    if (opt_extent) {
      opt_extent[0] = extent[0];
      opt_extent[1] = extent[1];
      opt_extent[2] = extent[2];
      opt_extent[3] = extent[3];
      return opt_extent;
    } else {
      return extent;
    }
  }


  /**
   * @param {Extent} extent Extent.
   * @param {number} value Value.
   */
  function scaleFromCenter(extent, value) {
    var deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);
    var deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);
    extent[0] -= deltaX;
    extent[2] += deltaX;
    extent[1] -= deltaY;
    extent[3] += deltaY;
  }


  /**
   * Determine if the segment between two coordinates intersects (crosses,
   * touches, or is contained by) the provided extent.
   * @param {Extent} extent The extent.
   * @param {import("./coordinate.js").Coordinate} start Segment start coordinate.
   * @param {import("./coordinate.js").Coordinate} end Segment end coordinate.
   * @return {boolean} The segment intersects the extent.
   */
  function intersectsSegment(extent, start, end) {
    var intersects = false;
    var startRel = coordinateRelationship(extent, start);
    var endRel = coordinateRelationship(extent, end);
    if (startRel === Relationship.INTERSECTING ||
        endRel === Relationship.INTERSECTING) {
      intersects = true;
    } else {
      var minX = extent[0];
      var minY = extent[1];
      var maxX = extent[2];
      var maxY = extent[3];
      var startX = start[0];
      var startY = start[1];
      var endX = end[0];
      var endY = end[1];
      var slope = (endY - startY) / (endX - startX);
      var x, y;
      if (!!(endRel & Relationship.ABOVE) &&
          !(startRel & Relationship.ABOVE)) {
        // potentially intersects top
        x = endX - ((endY - maxY) / slope);
        intersects = x >= minX && x <= maxX;
      }
      if (!intersects && !!(endRel & Relationship.RIGHT) &&
          !(startRel & Relationship.RIGHT)) {
        // potentially intersects right
        y = endY - ((endX - maxX) * slope);
        intersects = y >= minY && y <= maxY;
      }
      if (!intersects && !!(endRel & Relationship.BELOW) &&
          !(startRel & Relationship.BELOW)) {
        // potentially intersects bottom
        x = endX - ((endY - minY) / slope);
        intersects = x >= minX && x <= maxX;
      }
      if (!intersects && !!(endRel & Relationship.LEFT) &&
          !(startRel & Relationship.LEFT)) {
        // potentially intersects left
        y = endY - ((endX - minX) * slope);
        intersects = y >= minY && y <= maxY;
      }

    }
    return intersects;
  }

  /**
   * @module ol/geom/GeometryType
   */

  /**
   * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,
   * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
   * `'GeometryCollection'`, `'Circle'`.
   * @enum {string}
   */
  var GeometryType = {
    POINT: 'Point',
    LINE_STRING: 'LineString',
    LINEAR_RING: 'LinearRing',
    POLYGON: 'Polygon',
    MULTI_POINT: 'MultiPoint',
    MULTI_LINE_STRING: 'MultiLineString',
    MULTI_POLYGON: 'MultiPolygon',
    GEOMETRY_COLLECTION: 'GeometryCollection',
    CIRCLE: 'Circle'
  };

  /**
   * @module ol/geom/GeometryLayout
   */

  /**
   * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
   * or measure ('M') coordinate is available. Supported values are `'XY'`,
   * `'XYZ'`, `'XYM'`, `'XYZM'`.
   * @enum {string}
   */
  var GeometryLayout = {
    XY: 'XY',
    XYZ: 'XYZ',
    XYM: 'XYM',
    XYZM: 'XYZM'
  };

  /**
   * @module ol/geom/flat/transform
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {
    var dest = opt_dest ? opt_dest : [];
    var i = 0;
    for (var j = offset; j < end; j += stride) {
      var x = flatCoordinates[j];
      var y = flatCoordinates[j + 1];
      dest[i++] = transform[0] * x + transform[2] * y + transform[4];
      dest[i++] = transform[1] * x + transform[3] * y + transform[5];
    }
    if (opt_dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} angle Angle.
   * @param {Array<number>} anchor Rotation anchor point.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function rotate$1(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {
    var dest = opt_dest ? opt_dest : [];
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);
    var anchorX = anchor[0];
    var anchorY = anchor[1];
    var i = 0;
    for (var j = offset; j < end; j += stride) {
      var deltaX = flatCoordinates[j] - anchorX;
      var deltaY = flatCoordinates[j + 1] - anchorY;
      dest[i++] = anchorX + deltaX * cos - deltaY * sin;
      dest[i++] = anchorY + deltaX * sin + deltaY * cos;
      for (var k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (opt_dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }


  /**
   * Scale the coordinates.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} sx Scale factor in the x-direction.
   * @param {number} sy Scale factor in the y-direction.
   * @param {Array<number>} anchor Scale anchor point.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function scale$1(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {
    var dest = opt_dest ? opt_dest : [];
    var anchorX = anchor[0];
    var anchorY = anchor[1];
    var i = 0;
    for (var j = offset; j < end; j += stride) {
      var deltaX = flatCoordinates[j] - anchorX;
      var deltaY = flatCoordinates[j + 1] - anchorY;
      dest[i++] = anchorX + sx * deltaX;
      dest[i++] = anchorY + sy * deltaY;
      for (var k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (opt_dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} deltaX Delta X.
   * @param {number} deltaY Delta Y.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {
    var dest = opt_dest ? opt_dest : [];
    var i = 0;
    for (var j = offset; j < end; j += stride) {
      dest[i++] = flatCoordinates[j] + deltaX;
      dest[i++] = flatCoordinates[j + 1] + deltaY;
      for (var k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (opt_dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }

  /**
   * @license
   * Latitude/longitude spherical geodesy formulae taken from
   * http://www.movable-type.co.uk/scripts/latlong.html
   * Licensed under CC-BY-3.0.
   */


  /**
   * Object literal with options for the {@link getLength} or {@link getArea}
   * functions.
   * @typedef {Object} SphereMetricOptions
   * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857']
   * Projection of the  geometry.  By default, the geometry is assumed to be in
   * Web Mercator.
   * @property {number} [radius=6371008.8] Sphere radius.  By default, the radius of the
   * earth is used (Clarke 1866 Authalic Sphere).
   */


  /**
   * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.
   * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius
   * @type {number}
   */
  var DEFAULT_RADIUS = 6371008.8;


  /**
   * Get the great circle distance (in meters) between two geographic coordinates.
   * @param {Array} c1 Starting coordinate.
   * @param {Array} c2 Ending coordinate.
   * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
   *     mean radius using the WGS84 ellipsoid.
   * @return {number} The great circle distance between the points (in meters).
   * @api
   */
  function getDistance(c1, c2, opt_radius) {
    var radius = opt_radius || DEFAULT_RADIUS;
    var lat1 = toRadians(c1[1]);
    var lat2 = toRadians(c2[1]);
    var deltaLatBy2 = (lat2 - lat1) / 2;
    var deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;
    var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +
        Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) *
        Math.cos(lat1) * Math.cos(lat2);
    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  }

  /**
   * @module ol/proj/Units
   */

  /**
   * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or
   * `'us-ft'`.
   * @enum {string}
   */
  var Units = {
    DEGREES: 'degrees',
    FEET: 'ft',
    METERS: 'm',
    PIXELS: 'pixels',
    TILE_PIXELS: 'tile-pixels',
    USFEET: 'us-ft'
  };


  /**
   * Meters per unit lookup table.
   * @const
   * @type {Object<Units, number>}
   * @api
   */
  var METERS_PER_UNIT = {};
  // use the radius of the Normal sphere
  METERS_PER_UNIT[Units.DEGREES] = 2 * Math.PI * 6370997 / 360;
  METERS_PER_UNIT[Units.FEET] = 0.3048;
  METERS_PER_UNIT[Units.METERS] = 1;
  METERS_PER_UNIT[Units.USFEET] = 1200 / 3937;

  /**
   * @module ol/proj/Projection
   */


  /**
   * @typedef {Object} Options
   * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
   * @property {import("./Units.js").default|string} [units] Units. Required unless a
   * proj4 projection is defined for `code`.
   * @property {import("../extent.js").Extent} [extent] The validity extent for the SRS.
   * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
   * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
   * @property {number} [metersPerUnit] The meters per unit for the SRS.
   * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}
   * lookup table.
   * @property {import("../extent.js").Extent} [worldExtent] The world extent for the SRS.
   * @property {function(number, import("../coordinate.js").Coordinate):number} [getPointResolution]
   * Function to determine resolution at a point. The function is called with a
   * `{number}` view resolution and an `{import("../coordinate.js").Coordinate}` as arguments, and returns
   * the `{number}` resolution at the passed coordinate. If this is `undefined`,
   * the default {@link module:ol/proj#getPointResolution} function will be used.
   */


  /**
   * @classdesc
   * Projection definition class. One of these is created for each projection
   * supported in the application and stored in the {@link module:ol/proj} namespace.
   * You can use these in applications, but this is not required, as API params
   * and options use {@link module:ol/proj~ProjectionLike} which means the simple string
   * code will suffice.
   *
   * You can use {@link module:ol/proj~get} to retrieve the object for a particular
   * projection.
   *
   * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
   * with the following aliases:
   * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
   *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
   *     http://www.opengis.net/gml/srs/epsg.xml#4326,
   *     urn:x-ogc:def:crs:EPSG:4326
   * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
   *     urn:ogc:def:crs:EPSG:6.18:3:3857,
   *     http://www.opengis.net/gml/srs/epsg.xml#3857
   *
   * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can
   * be added using `proj4.defs()`. After all required projection definitions are
   * added, call the {@link module:ol/proj/proj4~register} function.
   *
   * @api
   */
  var Projection = function Projection(options) {
    /**
     * @private
     * @type {string}
     */
    this.code_ = options.code;

    /**
     * Units of projected coordinates. When set to `TILE_PIXELS`, a
     * `this.extent_` and `this.worldExtent_` must be configured properly for each
     * tile.
     * @private
     * @type {import("./Units.js").default}
     */
    this.units_ = /** @type {import("./Units.js").default} */ (options.units);

    /**
     * Validity extent of the projection in projected coordinates. For projections
     * with `TILE_PIXELS` units, this is the extent of the tile in
     * tile pixel space.
     * @private
     * @type {import("../extent.js").Extent}
     */
    this.extent_ = options.extent !== undefined ? options.extent : null;

    /**
     * Extent of the world in EPSG:4326. For projections with
     * `TILE_PIXELS` units, this is the extent of the tile in
     * projected coordinate space.
     * @private
     * @type {import("../extent.js").Extent}
     */
    this.worldExtent_ = options.worldExtent !== undefined ?
      options.worldExtent : null;

    /**
     * @private
     * @type {string}
     */
    this.axisOrientation_ = options.axisOrientation !== undefined ?
      options.axisOrientation : 'enu';

    /**
     * @private
     * @type {boolean}
     */
    this.global_ = options.global !== undefined ? options.global : false;

    /**
     * @private
     * @type {boolean}
     */
    this.canWrapX_ = !!(this.global_ && this.extent_);

    /**
     * @private
     * @type {function(number, import("../coordinate.js").Coordinate):number|undefined}
     */
    this.getPointResolutionFunc_ = options.getPointResolution;

    /**
     * @private
     * @type {import("../tilegrid/TileGrid.js").default}
     */
    this.defaultTileGrid_ = null;

    /**
     * @private
     * @type {number|undefined}
     */
    this.metersPerUnit_ = options.metersPerUnit;
  };

  /**
   * @return {boolean} The projection is suitable for wrapping the x-axis
   */
  Projection.prototype.canWrapX = function canWrapX () {
    return this.canWrapX_;
  };

  /**
   * Get the code for this projection, e.g. 'EPSG:4326'.
   * @return {string} Code.
   * @api
   */
  Projection.prototype.getCode = function getCode () {
    return this.code_;
  };

  /**
   * Get the validity extent for this projection.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */
  Projection.prototype.getExtent = function getExtent () {
    return this.extent_;
  };

  /**
   * Get the units of this projection.
   * @return {import("./Units.js").default} Units.
   * @api
   */
  Projection.prototype.getUnits = function getUnits () {
    return this.units_;
  };

  /**
   * Get the amount of meters per unit of this projection.If the projection is
   * not configured with `metersPerUnit` or a units identifier, the return is
   * `undefined`.
   * @return {number|undefined} Meters.
   * @api
   */
  Projection.prototype.getMetersPerUnit = function getMetersPerUnit () {
    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];
  };

  /**
   * Get the world extent for this projection.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */
  Projection.prototype.getWorldExtent = function getWorldExtent () {
    return this.worldExtent_;
  };

  /**
   * Get the axis orientation of this projection.
   * Example values are:
   * enu - the default easting, northing, elevation.
   * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
   *   or south orientated transverse mercator.
   * wnu - westing, northing, up - some planetary coordinate systems have
   *   "west positive" coordinate systems
   * @return {string} Axis orientation.
   * @api
   */
  Projection.prototype.getAxisOrientation = function getAxisOrientation () {
    return this.axisOrientation_;
  };

  /**
   * Is this projection a global projection which spans the whole world?
   * @return {boolean} Whether the projection is global.
   * @api
   */
  Projection.prototype.isGlobal = function isGlobal () {
    return this.global_;
  };

  /**
   * Set if the projection is a global projection which spans the whole world
   * @param {boolean} global Whether the projection is global.
   * @api
   */
  Projection.prototype.setGlobal = function setGlobal (global) {
    this.global_ = global;
    this.canWrapX_ = !!(global && this.extent_);
  };

  /**
   * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
   */
  Projection.prototype.getDefaultTileGrid = function getDefaultTileGrid () {
    return this.defaultTileGrid_;
  };

  /**
   * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
   */
  Projection.prototype.setDefaultTileGrid = function setDefaultTileGrid (tileGrid) {
    this.defaultTileGrid_ = tileGrid;
  };

  /**
   * Set the validity extent for this projection.
   * @param {import("../extent.js").Extent} extent Extent.
   * @api
   */
  Projection.prototype.setExtent = function setExtent (extent) {
    this.extent_ = extent;
    this.canWrapX_ = !!(this.global_ && extent);
  };

  /**
   * Set the world extent for this projection.
   * @param {import("../extent.js").Extent} worldExtent World extent
   *   [minlon, minlat, maxlon, maxlat].
   * @api
   */
  Projection.prototype.setWorldExtent = function setWorldExtent (worldExtent) {
    this.worldExtent_ = worldExtent;
  };

  /**
   * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}
   * for this projection.
   * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
   * @api
   */
  Projection.prototype.setGetPointResolution = function setGetPointResolution (func) {
    this.getPointResolutionFunc_ = func;
  };

  /**
   * Get the custom point resolution function for this projection (if set).
   * @return {function(number, import("../coordinate.js").Coordinate):number|undefined} The custom point
   * resolution function (if set).
   */
  Projection.prototype.getPointResolutionFunc = function getPointResolutionFunc () {
    return this.getPointResolutionFunc_;
  };

  /**
   * @module ol/proj/epsg3857
   */


  /**
   * Radius of WGS84 sphere
   *
   * @const
   * @type {number}
   */
  var RADIUS = 6378137;


  /**
   * @const
   * @type {number}
   */
  var HALF_SIZE = Math.PI * RADIUS;


  /**
   * @const
   * @type {import("../extent.js").Extent}
   */
  var EXTENT = [
    -HALF_SIZE, -HALF_SIZE,
    HALF_SIZE, HALF_SIZE
  ];


  /**
   * @const
   * @type {import("../extent.js").Extent}
   */
  var WORLD_EXTENT = [-180, -85, 180, 85];


  /**
   * @classdesc
   * Projection object for web/spherical Mercator (EPSG:3857).
   */
  var EPSG3857Projection = /*@__PURE__*/(function (Projection$$1) {
    function EPSG3857Projection(code) {
      Projection$$1.call(this, {
        code: code,
        units: Units.METERS,
        extent: EXTENT,
        global: true,
        worldExtent: WORLD_EXTENT,
        getPointResolution: function(resolution, point) {
          return resolution / cosh(point[1] / RADIUS);
        }
      });

    }

    if ( Projection$$1 ) EPSG3857Projection.__proto__ = Projection$$1;
    EPSG3857Projection.prototype = Object.create( Projection$$1 && Projection$$1.prototype );
    EPSG3857Projection.prototype.constructor = EPSG3857Projection;

    return EPSG3857Projection;
  }(Projection));


  /**
   * Projections equal to EPSG:3857.
   *
   * @const
   * @type {Array<import("./Projection.js").default>}
   */
  var PROJECTIONS = [
    new EPSG3857Projection('EPSG:3857'),
    new EPSG3857Projection('EPSG:102100'),
    new EPSG3857Projection('EPSG:102113'),
    new EPSG3857Projection('EPSG:900913'),
    new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),
    new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),
    new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')
  ];


  /**
   * Transformation from EPSG:4326 to EPSG:3857.
   *
   * @param {Array<number>} input Input array of coordinate values.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension (default is `2`).
   * @return {Array<number>} Output array of coordinate values.
   */
  function fromEPSG4326(input, opt_output, opt_dimension) {
    var length = input.length;
    var dimension = opt_dimension > 1 ? opt_dimension : 2;
    var output = opt_output;
    if (output === undefined) {
      if (dimension > 2) {
        // preserve values beyond second dimension
        output = input.slice();
      } else {
        output = new Array(length);
      }
    }
    var halfSize = HALF_SIZE;
    for (var i = 0; i < length; i += dimension) {
      output[i] = halfSize * input[i] / 180;
      var y = RADIUS *
          Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));
      if (y > halfSize) {
        y = halfSize;
      } else if (y < -halfSize) {
        y = -halfSize;
      }
      output[i + 1] = y;
    }
    return output;
  }


  /**
   * Transformation from EPSG:3857 to EPSG:4326.
   *
   * @param {Array<number>} input Input array of coordinate values.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension (default is `2`).
   * @return {Array<number>} Output array of coordinate values.
   */
  function toEPSG4326(input, opt_output, opt_dimension) {
    var length = input.length;
    var dimension = opt_dimension > 1 ? opt_dimension : 2;
    var output = opt_output;
    if (output === undefined) {
      if (dimension > 2) {
        // preserve values beyond second dimension
        output = input.slice();
      } else {
        output = new Array(length);
      }
    }
    for (var i = 0; i < length; i += dimension) {
      output[i] = 180 * input[i] / HALF_SIZE;
      output[i + 1] = 360 * Math.atan(
        Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;
    }
    return output;
  }

  /**
   * @module ol/proj/epsg4326
   */


  /**
   * Semi-major radius of the WGS84 ellipsoid.
   *
   * @const
   * @type {number}
   */
  var RADIUS$1 = 6378137;


  /**
   * Extent of the EPSG:4326 projection which is the whole world.
   *
   * @const
   * @type {import("../extent.js").Extent}
   */
  var EXTENT$1 = [-180, -90, 180, 90];


  /**
   * @const
   * @type {number}
   */
  var METERS_PER_UNIT$1 = Math.PI * RADIUS$1 / 180;


  /**
   * @classdesc
   * Projection object for WGS84 geographic coordinates (EPSG:4326).
   *
   * Note that OpenLayers does not strictly comply with the EPSG definition.
   * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
   * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
   */
  var EPSG4326Projection = /*@__PURE__*/(function (Projection$$1) {
    function EPSG4326Projection(code, opt_axisOrientation) {
      Projection$$1.call(this, {
        code: code,
        units: Units.DEGREES,
        extent: EXTENT$1,
        axisOrientation: opt_axisOrientation,
        global: true,
        metersPerUnit: METERS_PER_UNIT$1,
        worldExtent: EXTENT$1
      });

    }

    if ( Projection$$1 ) EPSG4326Projection.__proto__ = Projection$$1;
    EPSG4326Projection.prototype = Object.create( Projection$$1 && Projection$$1.prototype );
    EPSG4326Projection.prototype.constructor = EPSG4326Projection;

    return EPSG4326Projection;
  }(Projection));


  /**
   * Projections equal to EPSG:4326.
   *
   * @const
   * @type {Array<import("./Projection.js").default>}
   */
  var PROJECTIONS$1 = [
    new EPSG4326Projection('CRS:84'),
    new EPSG4326Projection('EPSG:4326', 'neu'),
    new EPSG4326Projection('urn:ogc:def:crs:EPSG::4326', 'neu'),
    new EPSG4326Projection('urn:ogc:def:crs:EPSG:6.6:4326', 'neu'),
    new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),
    new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),
    new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),
    new EPSG4326Projection('urn:x-ogc:def:crs:EPSG:4326', 'neu')
  ];

  /**
   * @module ol/proj/projections
   */


  /**
   * @type {Object<string, import("./Projection.js").default>}
   */
  var cache = {};


  /**
   * Get a cached projection by code.
   * @param {string} code The code for the projection.
   * @return {import("./Projection.js").default} The projection (if cached).
   */
  function get(code) {
    return cache[code] || null;
  }


  /**
   * Add a projection to the cache.
   * @param {string} code The projection code.
   * @param {import("./Projection.js").default} projection The projection to cache.
   */
  function add$1(code, projection) {
    cache[code] = projection;
  }

  /**
   * @module ol/proj/transforms
   */


  /**
   * @private
   * @type {!Object<string, Object<string, import("../proj.js").TransformFunction>>}
   */
  var transforms = {};


  /**
   * Registers a conversion function to convert coordinates from the source
   * projection to the destination projection.
   *
   * @param {import("./Projection.js").default} source Source.
   * @param {import("./Projection.js").default} destination Destination.
   * @param {import("../proj.js").TransformFunction} transformFn Transform.
   */
  function add$2(source, destination, transformFn) {
    var sourceCode = source.getCode();
    var destinationCode = destination.getCode();
    if (!(sourceCode in transforms)) {
      transforms[sourceCode] = {};
    }
    transforms[sourceCode][destinationCode] = transformFn;
  }


  /**
   * Get a transform given a source code and a destination code.
   * @param {string} sourceCode The code for the source projection.
   * @param {string} destinationCode The code for the destination projection.
   * @return {import("../proj.js").TransformFunction|undefined} The transform function (if found).
   */
  function get$1(sourceCode, destinationCode) {
    var transform;
    if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {
      transform = transforms[sourceCode][destinationCode];
    }
    return transform;
  }

  /**
   * @module ol/proj
   */

  /**
   * @param {Array<number>} input Input coordinate array.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension.
   * @return {Array<number>} Output coordinate array (new array, same coordinate
   *     values).
   */
  function cloneTransform(input, opt_output, opt_dimension) {
    var output;
    if (opt_output !== undefined) {
      for (var i = 0, ii = input.length; i < ii; ++i) {
        opt_output[i] = input[i];
      }
      output = opt_output;
    } else {
      output = input.slice();
    }
    return output;
  }


  /**
   * @param {Array<number>} input Input coordinate array.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension.
   * @return {Array<number>} Input coordinate array (same array as input).
   */
  function identityTransform(input, opt_output, opt_dimension) {
    if (opt_output !== undefined && input !== opt_output) {
      for (var i = 0, ii = input.length; i < ii; ++i) {
        opt_output[i] = input[i];
      }
      input = opt_output;
    }
    return input;
  }


  /**
   * Add a Projection object to the list of supported projections that can be
   * looked up by their code.
   *
   * @param {Projection} projection Projection instance.
   * @api
   */
  function addProjection(projection) {
    add$1(projection.getCode(), projection);
    add$2(projection, projection, cloneTransform);
  }


  /**
   * @param {Array<Projection>} projections Projections.
   */
  function addProjections(projections) {
    projections.forEach(addProjection);
  }


  /**
   * Fetches a Projection object for the code specified.
   *
   * @param {ProjectionLike} projectionLike Either a code string which is
   *     a combination of authority and identifier such as "EPSG:4326", or an
   *     existing projection object, or undefined.
   * @return {Projection} Projection object, or null if not in list.
   * @api
   */
  function get$2(projectionLike) {
    return typeof projectionLike === 'string' ?
      get(/** @type {string} */ (projectionLike)) :
      (/** @type {Projection} */ (projectionLike) || null);
  }


  /**
   * Get the resolution of the point in degrees or distance units.
   * For projections with degrees as the unit this will simply return the
   * provided resolution. For other projections the point resolution is
   * by default estimated by transforming the 'point' pixel to EPSG:4326,
   * measuring its width and height on the normal sphere,
   * and taking the average of the width and height.
   * A custom function can be provided for a specific projection, either
   * by setting the `getPointResolution` option in the
   * {@link module:ol/proj/Projection~Projection} constructor or by using
   * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing
   * projection object.
   * @param {ProjectionLike} projection The projection.
   * @param {number} resolution Nominal resolution in projection units.
   * @param {import("./coordinate.js").Coordinate} point Point to find adjusted resolution at.
   * @param {Units=} opt_units Units to get the point resolution in.
   * Default is the projection's units.
   * @return {number} Point resolution.
   * @api
   */
  function getPointResolution(projection, resolution, point, opt_units) {
    projection = get$2(projection);
    var pointResolution;
    var getter = projection.getPointResolutionFunc();
    if (getter) {
      pointResolution = getter(resolution, point);
    } else {
      var units = projection.getUnits();
      if (units == Units.DEGREES && !opt_units || opt_units == Units.DEGREES) {
        pointResolution = resolution;
      } else {
        // Estimate point resolution by transforming the center pixel to EPSG:4326,
        // measuring its width and height on the normal sphere, and taking the
        // average of the width and height.
        var toEPSG4326$$1 = getTransformFromProjections(projection, get$2('EPSG:4326'));
        var vertices = [
          point[0] - resolution / 2, point[1],
          point[0] + resolution / 2, point[1],
          point[0], point[1] - resolution / 2,
          point[0], point[1] + resolution / 2
        ];
        vertices = toEPSG4326$$1(vertices, vertices, 2);
        var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));
        var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));
        pointResolution = (width + height) / 2;
        var metersPerUnit = opt_units ?
          METERS_PER_UNIT[opt_units] :
          projection.getMetersPerUnit();
        if (metersPerUnit !== undefined) {
          pointResolution /= metersPerUnit;
        }
      }
    }
    return pointResolution;
  }


  /**
   * Registers transformation functions that don't alter coordinates. Those allow
   * to transform between projections with equal meaning.
   *
   * @param {Array<Projection>} projections Projections.
   * @api
   */
  function addEquivalentProjections(projections) {
    addProjections(projections);
    projections.forEach(function(source) {
      projections.forEach(function(destination) {
        if (source !== destination) {
          add$2(source, destination, cloneTransform);
        }
      });
    });
  }


  /**
   * Registers transformation functions to convert coordinates in any projection
   * in projection1 to any projection in projection2.
   *
   * @param {Array<Projection>} projections1 Projections with equal
   *     meaning.
   * @param {Array<Projection>} projections2 Projections with equal
   *     meaning.
   * @param {TransformFunction} forwardTransform Transformation from any
   *   projection in projection1 to any projection in projection2.
   * @param {TransformFunction} inverseTransform Transform from any projection
   *   in projection2 to any projection in projection1..
   */
  function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {
    projections1.forEach(function(projection1) {
      projections2.forEach(function(projection2) {
        add$2(projection1, projection2, forwardTransform);
        add$2(projection2, projection1, inverseTransform);
      });
    });
  }


  /**
   * @param {Projection|string|undefined} projection Projection.
   * @param {string} defaultCode Default code.
   * @return {Projection} Projection.
   */
  function createProjection(projection, defaultCode) {
    if (!projection) {
      return get$2(defaultCode);
    } else if (typeof projection === 'string') {
      return get$2(projection);
    } else {
      return (
        /** @type {Projection} */ (projection)
      );
    }
  }


  /**
   * Checks if two projections are the same, that is every coordinate in one
   * projection does represent the same geographic point as the same coordinate in
   * the other projection.
   *
   * @param {Projection} projection1 Projection 1.
   * @param {Projection} projection2 Projection 2.
   * @return {boolean} Equivalent.
   * @api
   */
  function equivalent(projection1, projection2) {
    if (projection1 === projection2) {
      return true;
    }
    var equalUnits = projection1.getUnits() === projection2.getUnits();
    if (projection1.getCode() === projection2.getCode()) {
      return equalUnits;
    } else {
      var transformFunc = getTransformFromProjections(projection1, projection2);
      return transformFunc === cloneTransform && equalUnits;
    }
  }


  /**
   * Searches in the list of transform functions for the function for converting
   * coordinates from the source projection to the destination projection.
   *
   * @param {Projection} sourceProjection Source Projection object.
   * @param {Projection} destinationProjection Destination Projection
   *     object.
   * @return {TransformFunction} Transform function.
   */
  function getTransformFromProjections(sourceProjection, destinationProjection) {
    var sourceCode = sourceProjection.getCode();
    var destinationCode = destinationProjection.getCode();
    var transformFunc = get$1(sourceCode, destinationCode);
    if (!transformFunc) {
      transformFunc = identityTransform;
    }
    return transformFunc;
  }


  /**
   * Given the projection-like objects, searches for a transformation
   * function to convert a coordinates array from the source projection to the
   * destination projection.
   *
   * @param {ProjectionLike} source Source.
   * @param {ProjectionLike} destination Destination.
   * @return {TransformFunction} Transform function.
   * @api
   */
  function getTransform(source, destination) {
    var sourceProjection = get$2(source);
    var destinationProjection = get$2(destination);
    return getTransformFromProjections(sourceProjection, destinationProjection);
  }


  /**
   * Transforms a coordinate from source projection to destination projection.
   * This returns a new coordinate (and does not modify the original).
   *
   * See {@link module:ol/proj~transformExtent} for extent transformation.
   * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its
   * subclasses for geometry transforms.
   *
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {ProjectionLike} source Source projection-like.
   * @param {ProjectionLike} destination Destination projection-like.
   * @return {import("./coordinate.js").Coordinate} Coordinate.
   * @api
   */
  function transform(coordinate, source, destination) {
    var transformFunc = getTransform(source, destination);
    return transformFunc(coordinate, undefined, coordinate.length);
  }

  /**
   * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called
   * by when this module is executed and should only need to be called again after
   * `clearAllProjections()` is called (e.g. in tests).
   */
  function addCommon() {
    // Add transformations that don't alter coordinates to convert within set of
    // projections with equal meaning.
    addEquivalentProjections(PROJECTIONS);
    addEquivalentProjections(PROJECTIONS$1);
    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
    // coordinates and back.
    addEquivalentTransforms(PROJECTIONS$1, PROJECTIONS, fromEPSG4326, toEPSG4326);
  }

  addCommon();

  /**
   * @module ol/transform
   */


  /**
   * An array representing an affine 2d transformation for use with
   * {@link module:ol/transform} functions. The array has 6 elements.
   * @typedef {!Array<number>} Transform
   */


  /**
   * Collection of affine 2d transformation functions. The functions work on an
   * array of 6 elements. The element order is compatible with the [SVGMatrix
   * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
   * a subset (elements a to f) of a 3×3 matrix:
   * ```
   * [ a c e ]
   * [ b d f ]
   * [ 0 0 1 ]
   * ```
   */


  /**
   * @private
   * @type {Transform}
   */
  var tmp_ = new Array(6);


  /**
   * Create an identity transform.
   * @return {!Transform} Identity transform.
   */
  function create() {
    return [1, 0, 0, 1, 0, 0];
  }


  /**
   * Resets the given transform to an identity transform.
   * @param {!Transform} transform Transform.
   * @return {!Transform} Transform.
   */
  function reset(transform) {
    return set(transform, 1, 0, 0, 1, 0, 0);
  }


  /**
   * Multiply the underlying matrices of two transforms and return the result in
   * the first transform.
   * @param {!Transform} transform1 Transform parameters of matrix 1.
   * @param {!Transform} transform2 Transform parameters of matrix 2.
   * @return {!Transform} transform1 multiplied with transform2.
   */
  function multiply(transform1, transform2) {
    var a1 = transform1[0];
    var b1 = transform1[1];
    var c1 = transform1[2];
    var d1 = transform1[3];
    var e1 = transform1[4];
    var f1 = transform1[5];
    var a2 = transform2[0];
    var b2 = transform2[1];
    var c2 = transform2[2];
    var d2 = transform2[3];
    var e2 = transform2[4];
    var f2 = transform2[5];

    transform1[0] = a1 * a2 + c1 * b2;
    transform1[1] = b1 * a2 + d1 * b2;
    transform1[2] = a1 * c2 + c1 * d2;
    transform1[3] = b1 * c2 + d1 * d2;
    transform1[4] = a1 * e2 + c1 * f2 + e1;
    transform1[5] = b1 * e2 + d1 * f2 + f1;

    return transform1;
  }

  /**
   * Set the transform components a-f on a given transform.
   * @param {!Transform} transform Transform.
   * @param {number} a The a component of the transform.
   * @param {number} b The b component of the transform.
   * @param {number} c The c component of the transform.
   * @param {number} d The d component of the transform.
   * @param {number} e The e component of the transform.
   * @param {number} f The f component of the transform.
   * @return {!Transform} Matrix with transform applied.
   */
  function set(transform, a, b, c, d, e, f) {
    transform[0] = a;
    transform[1] = b;
    transform[2] = c;
    transform[3] = d;
    transform[4] = e;
    transform[5] = f;
    return transform;
  }


  /**
   * Set transform on one matrix from another matrix.
   * @param {!Transform} transform1 Matrix to set transform to.
   * @param {!Transform} transform2 Matrix to set transform from.
   * @return {!Transform} transform1 with transform from transform2 applied.
   */
  function setFromArray(transform1, transform2) {
    transform1[0] = transform2[0];
    transform1[1] = transform2[1];
    transform1[2] = transform2[2];
    transform1[3] = transform2[3];
    transform1[4] = transform2[4];
    transform1[5] = transform2[5];
    return transform1;
  }


  /**
   * Transforms the given coordinate with the given transform returning the
   * resulting, transformed coordinate. The coordinate will be modified in-place.
   *
   * @param {Transform} transform The transformation.
   * @param {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} coordinate The coordinate to transform.
   * @return {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} return coordinate so that operations can be
   *     chained together.
   */
  function apply(transform, coordinate) {
    var x = coordinate[0];
    var y = coordinate[1];
    coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
    coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
    return coordinate;
  }


  /**
   * Applies rotation to the given transform.
   * @param {!Transform} transform Transform.
   * @param {number} angle Angle in radians.
   * @return {!Transform} The rotated transform.
   */
  function rotate$2(transform, angle) {
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);
    return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));
  }


  /**
   * Applies scale to a given transform.
   * @param {!Transform} transform Transform.
   * @param {number} x Scale factor x.
   * @param {number} y Scale factor y.
   * @return {!Transform} The scaled transform.
   */
  function scale$2(transform, x, y) {
    return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));
  }


  /**
   * Applies translation to the given transform.
   * @param {!Transform} transform Transform.
   * @param {number} dx Translation x.
   * @param {number} dy Translation y.
   * @return {!Transform} The translated transform.
   */
  function translate$1(transform, dx, dy) {
    return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));
  }


  /**
   * Creates a composite transform given an initial translation, scale, rotation, and
   * final translation (in that order only, not commutative).
   * @param {!Transform} transform The transform (will be modified in place).
   * @param {number} dx1 Initial translation x.
   * @param {number} dy1 Initial translation y.
   * @param {number} sx Scale factor x.
   * @param {number} sy Scale factor y.
   * @param {number} angle Rotation (in counter-clockwise radians).
   * @param {number} dx2 Final translation x.
   * @param {number} dy2 Final translation y.
   * @return {!Transform} The composite transform.
   */
  function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
    var sin = Math.sin(angle);
    var cos = Math.cos(angle);
    transform[0] = sx * cos;
    transform[1] = sy * sin;
    transform[2] = -sx * sin;
    transform[3] = sy * cos;
    transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
    transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
    return transform;
  }


  /**
   * Invert the given transform.
   * @param {!Transform} transform Transform.
   * @return {!Transform} Inverse of the transform.
   */
  function invert(transform) {
    var det = determinant(transform);
    assert(det !== 0, 32); // Transformation matrix cannot be inverted

    var a = transform[0];
    var b = transform[1];
    var c = transform[2];
    var d = transform[3];
    var e = transform[4];
    var f = transform[5];

    transform[0] = d / det;
    transform[1] = -b / det;
    transform[2] = -c / det;
    transform[3] = a / det;
    transform[4] = (c * f - d * e) / det;
    transform[5] = -(a * f - b * e) / det;

    return transform;
  }


  /**
   * Returns the determinant of the given matrix.
   * @param {!Transform} mat Matrix.
   * @return {number} Determinant.
   */
  function determinant(mat) {
    return mat[0] * mat[3] - mat[1] * mat[2];
  }

  /**
   * @module ol/geom/Geometry
   */


  /**
   * @type {import("../transform.js").Transform}
   */
  var tmpTransform = create();


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for vector geometries.
   *
   * To get notified of changes to the geometry, register a listener for the
   * generic `change` event on your geometry instance.
   *
   * @abstract
   * @api
   */
  var Geometry = /*@__PURE__*/(function (BaseObject$$1) {
    function Geometry() {

      BaseObject$$1.call(this);

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = createEmpty();

      /**
       * @private
       * @type {number}
       */
      this.extentRevision_ = -1;

      /**
       * @protected
       * @type {Object<string, Geometry>}
       */
      this.simplifiedGeometryCache = {};

      /**
       * @protected
       * @type {number}
       */
      this.simplifiedGeometryMaxMinSquaredTolerance = 0;

      /**
       * @protected
       * @type {number}
       */
      this.simplifiedGeometryRevision = 0;

    }

    if ( BaseObject$$1 ) Geometry.__proto__ = BaseObject$$1;
    Geometry.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Geometry.prototype.constructor = Geometry;

    /**
     * Make a complete copy of the geometry.
     * @abstract
     * @return {!Geometry} Clone.
     */
    Geometry.prototype.clone = function clone$$1 () {
      return abstract();
    };

    /**
     * @abstract
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    Geometry.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      return abstract();
    };

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    Geometry.prototype.containsXY = function containsXY$$1 (x, y) {
      return false;
    };

    /**
     * Return the closest point of the geometry to the passed point as
     * {@link module:ol/coordinate~Coordinate coordinate}.
     * @param {import("../coordinate.js").Coordinate} point Point.
     * @param {import("../coordinate.js").Coordinate=} opt_closestPoint Closest point.
     * @return {import("../coordinate.js").Coordinate} Closest point.
     * @api
     */
    Geometry.prototype.getClosestPoint = function getClosestPoint (point, opt_closestPoint) {
      var closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];
      this.closestPointXY(point[0], point[1], closestPoint, Infinity);
      return closestPoint;
    };

    /**
     * Returns true if this geometry includes the specified coordinate. If the
     * coordinate is on the boundary of the geometry, returns false.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {boolean} Contains coordinate.
     * @api
     */
    Geometry.prototype.intersectsCoordinate = function intersectsCoordinate (coordinate) {
      return this.containsXY(coordinate[0], coordinate[1]);
    };

    /**
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */
    Geometry.prototype.computeExtent = function computeExtent (extent) {
      return abstract();
    };

    /**
     * Get the extent of the geometry.
     * @param {import("../extent.js").Extent=} opt_extent Extent.
     * @return {import("../extent.js").Extent} extent Extent.
     * @api
     */
    Geometry.prototype.getExtent = function getExtent (opt_extent) {
      if (this.extentRevision_ != this.getRevision()) {
        this.extent_ = this.computeExtent(this.extent_);
        this.extentRevision_ = this.getRevision();
      }
      return returnOrUpdate(this.extent_, opt_extent);
    };

    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} angle Rotation angle in radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     */
    Geometry.prototype.rotate = function rotate (angle, anchor) {
      abstract();
    };

    /**
     * Scale the geometry (with an optional origin).  This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} sx The scaling factor in the x-direction.
     * @param {number=} opt_sy The scaling factor in the y-direction (defaults to
     *     sx).
     * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
     *     of the geometry extent).
     * @api
     */
    Geometry.prototype.scale = function scale (sx, opt_sy, opt_anchor) {
      abstract();
    };

    /**
     * Create a simplified version of this geometry.  For linestrings, this uses
     * the the {@link
     * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
     * Douglas Peucker} algorithm.  For polygons, a quantization-based
     * simplification is used to preserve topology.
     * @param {number} tolerance The tolerance distance for simplification.
     * @return {Geometry} A new, simplified version of the original geometry.
     * @api
     */
    Geometry.prototype.simplify = function simplify (tolerance) {
      return this.getSimplifiedGeometry(tolerance * tolerance);
    };

    /**
     * Create a simplified version of this geometry using the Douglas Peucker
     * algorithm.
     * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
     * @abstract
     * @param {number} squaredTolerance Squared tolerance.
     * @return {Geometry} Simplified geometry.
     */
    Geometry.prototype.getSimplifiedGeometry = function getSimplifiedGeometry (squaredTolerance) {
      return abstract();
    };

    /**
     * Get the type of this geometry.
     * @abstract
     * @return {import("./GeometryType.js").default} Geometry type.
     */
    Geometry.prototype.getType = function getType () {
      return abstract();
    };

    /**
     * Apply a transform function to each coordinate of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @abstract
     * @param {import("../proj.js").TransformFunction} transformFn Transform.
     */
    Geometry.prototype.applyTransform = function applyTransform$$1 (transformFn) {
      abstract();
    };

    /**
     * Test if the geometry and the passed extent intersect.
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     */
    Geometry.prototype.intersectsExtent = function intersectsExtent (extent) {
      return abstract();
    };

    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @abstract
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     */
    Geometry.prototype.translate = function translate$$1 (deltaX, deltaY) {
      abstract();
    };

    /**
     * Transform each coordinate of the geometry from one coordinate reference
     * system to another. The geometry is modified in place.
     * For example, a line will be transformed to a line and a circle to a circle.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     *
     * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @return {Geometry} This geometry.  Note that original geometry is
     *     modified in place.
     * @api
     */
    Geometry.prototype.transform = function transform$$1 (source, destination) {
      /** @type {import("../proj/Projection.js").default} */
      var sourceProj = get$2(source);
      var transformFn = sourceProj.getUnits() == Units.TILE_PIXELS ?
        function(inCoordinates, outCoordinates, stride) {
          var pixelExtent = sourceProj.getExtent();
          var projectedExtent = sourceProj.getWorldExtent();
          var scale = getHeight(projectedExtent) / getHeight(pixelExtent);
          compose(tmpTransform,
            projectedExtent[0], projectedExtent[3],
            scale, -scale, 0,
            0, 0);
          transform2D(inCoordinates, 0, inCoordinates.length, stride,
            tmpTransform, outCoordinates);
          return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);
        } :
        getTransform(sourceProj, destination);
      this.applyTransform(transformFn);
      return this;
    };

    return Geometry;
  }(BaseObject));

  /**
   * @module ol/geom/SimpleGeometry
   */

  /**
   * @classdesc
   * Abstract base class; only used for creating subclasses; do not instantiate
   * in apps, as cannot be rendered.
   *
   * @abstract
   * @api
   */
  var SimpleGeometry = /*@__PURE__*/(function (Geometry$$1) {
    function SimpleGeometry() {

      Geometry$$1.call(this);

      /**
       * @protected
       * @type {GeometryLayout}
       */
      this.layout = GeometryLayout.XY;

      /**
       * @protected
       * @type {number}
       */
      this.stride = 2;

      /**
       * @protected
       * @type {Array<number>}
       */
      this.flatCoordinates = null;

    }

    if ( Geometry$$1 ) SimpleGeometry.__proto__ = Geometry$$1;
    SimpleGeometry.prototype = Object.create( Geometry$$1 && Geometry$$1.prototype );
    SimpleGeometry.prototype.constructor = SimpleGeometry;

    /**
     * @inheritDoc
     */
    SimpleGeometry.prototype.computeExtent = function computeExtent (extent) {
      return createOrUpdateFromFlatCoordinates(this.flatCoordinates,
        0, this.flatCoordinates.length, this.stride, extent);
    };

    /**
     * @abstract
     * @return {Array} Coordinates.
     */
    SimpleGeometry.prototype.getCoordinates = function getCoordinates () {
      return abstract();
    };

    /**
     * Return the first coordinate of the geometry.
     * @return {import("../coordinate.js").Coordinate} First coordinate.
     * @api
     */
    SimpleGeometry.prototype.getFirstCoordinate = function getFirstCoordinate () {
      return this.flatCoordinates.slice(0, this.stride);
    };

    /**
     * @return {Array<number>} Flat coordinates.
     */
    SimpleGeometry.prototype.getFlatCoordinates = function getFlatCoordinates () {
      return this.flatCoordinates;
    };

    /**
     * Return the last coordinate of the geometry.
     * @return {import("../coordinate.js").Coordinate} Last point.
     * @api
     */
    SimpleGeometry.prototype.getLastCoordinate = function getLastCoordinate () {
      return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
    };

    /**
     * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.
     * @return {GeometryLayout} Layout.
     * @api
     */
    SimpleGeometry.prototype.getLayout = function getLayout () {
      return this.layout;
    };

    /**
     * @inheritDoc
     */
    SimpleGeometry.prototype.getSimplifiedGeometry = function getSimplifiedGeometry (squaredTolerance) {
      if (this.simplifiedGeometryRevision != this.getRevision()) {
        clear(this.simplifiedGeometryCache);
        this.simplifiedGeometryMaxMinSquaredTolerance = 0;
        this.simplifiedGeometryRevision = this.getRevision();
      }
      // If squaredTolerance is negative or if we know that simplification will not
      // have any effect then just return this.
      if (squaredTolerance < 0 ||
          (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
           squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {
        return this;
      }
      var key = squaredTolerance.toString();
      if (this.simplifiedGeometryCache.hasOwnProperty(key)) {
        return this.simplifiedGeometryCache[key];
      } else {
        var simplifiedGeometry =
            this.getSimplifiedGeometryInternal(squaredTolerance);
        var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
        if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {
          this.simplifiedGeometryCache[key] = simplifiedGeometry;
          return simplifiedGeometry;
        } else {
          // Simplification did not actually remove any coordinates.  We now know
          // that any calls to getSimplifiedGeometry with a squaredTolerance less
          // than or equal to the current squaredTolerance will also not have any
          // effect.  This allows us to short circuit simplification (saving CPU
          // cycles) and prevents the cache of simplified geometries from filling
          // up with useless identical copies of this geometry (saving memory).
          this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
          return this;
        }
      }
    };

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {SimpleGeometry} Simplified geometry.
     * @protected
     */
    SimpleGeometry.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {
      return this;
    };

    /**
     * @return {number} Stride.
     */
    SimpleGeometry.prototype.getStride = function getStride () {
      return this.stride;
    };

    /**
     * @param {GeometryLayout} layout Layout.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     */
    SimpleGeometry.prototype.setFlatCoordinates = function setFlatCoordinates (layout, flatCoordinates) {
      this.stride = getStrideForLayout(layout);
      this.layout = layout;
      this.flatCoordinates = flatCoordinates;
    };

    /**
     * @abstract
     * @param {!Array} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     */
    SimpleGeometry.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      abstract();
    };

    /**
     * @param {GeometryLayout|undefined} layout Layout.
     * @param {Array} coordinates Coordinates.
     * @param {number} nesting Nesting.
     * @protected
     */
    SimpleGeometry.prototype.setLayout = function setLayout (layout, coordinates, nesting) {
      /** @type {number} */
      var stride;
      if (layout) {
        stride = getStrideForLayout(layout);
      } else {
        for (var i = 0; i < nesting; ++i) {
          if (coordinates.length === 0) {
            this.layout = GeometryLayout.XY;
            this.stride = 2;
            return;
          } else {
            coordinates = /** @type {Array} */ (coordinates[0]);
          }
        }
        stride = coordinates.length;
        layout = getLayoutForStride(stride);
      }
      this.layout = layout;
      this.stride = stride;
    };

    /**
     * @inheritDoc
     * @api
     */
    SimpleGeometry.prototype.applyTransform = function applyTransform$$1 (transformFn) {
      if (this.flatCoordinates) {
        transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);
        this.changed();
      }
    };

    /**
     * @inheritDoc
     * @api
     */
    SimpleGeometry.prototype.rotate = function rotate$1$$1 (angle, anchor) {
      var flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        var stride = this.getStride();
        rotate$1(
          flatCoordinates, 0, flatCoordinates.length,
          stride, angle, anchor, flatCoordinates);
        this.changed();
      }
    };

    /**
     * @inheritDoc
     * @api
     */
    SimpleGeometry.prototype.scale = function scale$1$$1 (sx, opt_sy, opt_anchor) {
      var sy = opt_sy;
      if (sy === undefined) {
        sy = sx;
      }
      var anchor = opt_anchor;
      if (!anchor) {
        anchor = getCenter(this.getExtent());
      }
      var flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        var stride = this.getStride();
        scale$1(
          flatCoordinates, 0, flatCoordinates.length,
          stride, sx, sy, anchor, flatCoordinates);
        this.changed();
      }
    };

    /**
     * @inheritDoc
     * @api
     */
    SimpleGeometry.prototype.translate = function translate$1 (deltaX, deltaY) {
      var flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        var stride = this.getStride();
        translate(
          flatCoordinates, 0, flatCoordinates.length, stride,
          deltaX, deltaY, flatCoordinates);
        this.changed();
      }
    };

    return SimpleGeometry;
  }(Geometry));


  /**
   * @param {number} stride Stride.
   * @return {GeometryLayout} layout Layout.
   */
  function getLayoutForStride(stride) {
    var layout;
    if (stride == 2) {
      layout = GeometryLayout.XY;
    } else if (stride == 3) {
      layout = GeometryLayout.XYZ;
    } else if (stride == 4) {
      layout = GeometryLayout.XYZM;
    }
    return (
      /** @type {GeometryLayout} */ (layout)
    );
  }


  /**
   * @param {GeometryLayout} layout Layout.
   * @return {number} Stride.
   */
  function getStrideForLayout(layout) {
    var stride;
    if (layout == GeometryLayout.XY) {
      stride = 2;
    } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {
      stride = 3;
    } else if (layout == GeometryLayout.XYZM) {
      stride = 4;
    }
    return /** @type {number} */ (stride);
  }


  /**
   * @param {SimpleGeometry} simpleGeometry Simple geometry.
   * @param {import("../transform.js").Transform} transform Transform.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed flat coordinates.
   */
  function transformGeom2D(simpleGeometry, transform, opt_dest) {
    var flatCoordinates = simpleGeometry.getFlatCoordinates();
    if (!flatCoordinates) {
      return null;
    } else {
      var stride = simpleGeometry.getStride();
      return transform2D(
        flatCoordinates, 0, flatCoordinates.length, stride,
        transform, opt_dest);
    }
  }

  /**
   * @module ol/geom/flat/area
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRing(flatCoordinates, offset, end, stride) {
    var twiceArea = 0;
    var x1 = flatCoordinates[end - stride];
    var y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      var x2 = flatCoordinates[offset];
      var y2 = flatCoordinates[offset + 1];
      twiceArea += y1 * x2 - x1 * y2;
      x1 = x2;
      y1 = y2;
    }
    return twiceArea / 2;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRings(flatCoordinates, offset, ends, stride) {
    var area = 0;
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      area += linearRing(flatCoordinates, offset, end, stride);
      offset = end;
    }
    return area;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRingss(flatCoordinates, offset, endss, stride) {
    var area = 0;
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      area += linearRings(flatCoordinates, offset, ends, stride);
      offset = ends[ends.length - 1];
    }
    return area;
  }

  /**
   * @module ol/geom/flat/closest
   */


  /**
   * Returns the point on the 2D line segment flatCoordinates[offset1] to
   * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
   * dimensions are linearly interpolated.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset1 Offset 1.
   * @param {number} offset2 Offset 2.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   */
  function assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {
    var x1 = flatCoordinates[offset1];
    var y1 = flatCoordinates[offset1 + 1];
    var dx = flatCoordinates[offset2] - x1;
    var dy = flatCoordinates[offset2 + 1] - y1;
    var offset;
    if (dx === 0 && dy === 0) {
      offset = offset1;
    } else {
      var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
      if (t > 1) {
        offset = offset2;
      } else if (t > 0) {
        for (var i = 0; i < stride; ++i) {
          closestPoint[i] = lerp(flatCoordinates[offset1 + i],
            flatCoordinates[offset2 + i], t);
        }
        closestPoint.length = stride;
        return;
      } else {
        offset = offset1;
      }
    }
    for (var i$1 = 0; i$1 < stride; ++i$1) {
      closestPoint[i$1] = flatCoordinates[offset + i$1];
    }
    closestPoint.length = stride;
  }


  /**
   * Return the squared of the largest distance between any pair of consecutive
   * coordinates.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {
    var x1 = flatCoordinates[offset];
    var y1 = flatCoordinates[offset + 1];
    for (offset += stride; offset < end; offset += stride) {
      var x2 = flatCoordinates[offset];
      var y2 = flatCoordinates[offset + 1];
      var squaredDelta = squaredDistance(x1, y1, x2, y2);
      if (squaredDelta > max) {
        max = squaredDelta;
      }
      x1 = x2;
      y1 = y2;
    }
    return max;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      max = maxSquaredDelta(
        flatCoordinates, offset, end, stride, max);
      offset = end;
    }
    return max;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      max = arrayMaxSquaredDelta(
        flatCoordinates, offset, ends, stride, max);
      offset = ends[ends.length - 1];
    }
    return max;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>=} opt_tmpPoint Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestPoint(flatCoordinates, offset, end,
    stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,
    opt_tmpPoint) {
    if (offset == end) {
      return minSquaredDistance;
    }
    var i, squaredDistance$$1;
    if (maxDelta === 0) {
      // All points are identical, so just test the first point.
      squaredDistance$$1 = squaredDistance(
        x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);
      if (squaredDistance$$1 < minSquaredDistance) {
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = flatCoordinates[offset + i];
        }
        closestPoint.length = stride;
        return squaredDistance$$1;
      } else {
        return minSquaredDistance;
      }
    }
    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
    var index = offset + stride;
    while (index < end) {
      assignClosest(
        flatCoordinates, index - stride, index, stride, x, y, tmpPoint);
      squaredDistance$$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
      if (squaredDistance$$1 < minSquaredDistance) {
        minSquaredDistance = squaredDistance$$1;
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = tmpPoint[i];
        }
        closestPoint.length = stride;
        index += stride;
      } else {
        // Skip ahead multiple points, because we know that all the skipped
        // points cannot be any closer than the closest point we have found so
        // far.  We know this because we know how close the current point is, how
        // close the closest point we have found so far is, and the maximum
        // distance between consecutive points.  For example, if we're currently
        // at distance 10, the best we've found so far is 3, and that the maximum
        // distance between consecutive points is 2, then we'll need to skip at
        // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
        // finding a closer point.  We use Math.max(..., 1) to ensure that we
        // always advance at least one point, to avoid an infinite loop.
        index += stride * Math.max(
          ((Math.sqrt(squaredDistance$$1) -
              Math.sqrt(minSquaredDistance)) / maxDelta) | 0, 1);
      }
    }
    if (isRing) {
      // Check the closing segment.
      assignClosest(
        flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);
      squaredDistance$$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
      if (squaredDistance$$1 < minSquaredDistance) {
        minSquaredDistance = squaredDistance$$1;
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = tmpPoint[i];
        }
        closestPoint.length = stride;
      }
    }
    return minSquaredDistance;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>=} opt_tmpPoint Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestArrayPoint(flatCoordinates, offset, ends,
    stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,
    opt_tmpPoint) {
    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      minSquaredDistance = assignClosestPoint(
        flatCoordinates, offset, end, stride,
        maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
      offset = end;
    }
    return minSquaredDistance;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>=} opt_tmpPoint Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestMultiArrayPoint(flatCoordinates, offset,
    endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance,
    opt_tmpPoint) {
    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      minSquaredDistance = assignClosestArrayPoint(
        flatCoordinates, offset, ends, stride,
        maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
      offset = ends[ends.length - 1];
    }
    return minSquaredDistance;
  }

  /**
   * @module ol/geom/flat/deflate
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} stride Stride.
   * @return {number} offset Offset.
   */
  function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
    for (var i = 0, ii = coordinate.length; i < ii; ++i) {
      flatCoordinates[offset++] = coordinate[i];
    }
    return offset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<import("../../coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {number} stride Stride.
   * @return {number} offset Offset.
   */
  function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {
    for (var i = 0, ii = coordinates.length; i < ii; ++i) {
      var coordinate = coordinates[i];
      for (var j = 0; j < stride; ++j) {
        flatCoordinates[offset++] = coordinate[j];
      }
    }
    return offset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<import("../../coordinate.js").Coordinate>>} coordinatess Coordinatess.
   * @param {number} stride Stride.
   * @param {Array<number>=} opt_ends Ends.
   * @return {Array<number>} Ends.
   */
  function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, opt_ends) {
    var ends = opt_ends ? opt_ends : [];
    var i = 0;
    for (var j = 0, jj = coordinatess.length; j < jj; ++j) {
      var end = deflateCoordinates(
        flatCoordinates, offset, coordinatess[j], stride);
      ends[i++] = end;
      offset = end;
    }
    ends.length = i;
    return ends;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} coordinatesss Coordinatesss.
   * @param {number} stride Stride.
   * @param {Array<Array<number>>=} opt_endss Endss.
   * @return {Array<Array<number>>} Endss.
   */
  function deflateMultiCoordinatesArray(flatCoordinates, offset, coordinatesss, stride, opt_endss) {
    var endss = opt_endss ? opt_endss : [];
    var i = 0;
    for (var j = 0, jj = coordinatesss.length; j < jj; ++j) {
      var ends = deflateCoordinatesArray(
        flatCoordinates, offset, coordinatesss[j], stride, endss[i]);
      endss[i++] = ends;
      offset = ends[ends.length - 1];
    }
    endss.length = i;
    return endss;
  }

  /**
   * @module ol/geom/flat/inflate
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Array<import("../../coordinate.js").Coordinate>=} opt_coordinates Coordinates.
   * @return {Array<import("../../coordinate.js").Coordinate>} Coordinates.
   */
  function inflateCoordinates(flatCoordinates, offset, end, stride, opt_coordinates) {
    var coordinates = opt_coordinates !== undefined ? opt_coordinates : [];
    var i = 0;
    for (var j = offset; j < end; j += stride) {
      coordinates[i++] = flatCoordinates.slice(j, j + stride);
    }
    coordinates.length = i;
    return coordinates;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<Array<import("../../coordinate.js").Coordinate>>=} opt_coordinatess Coordinatess.
   * @return {Array<Array<import("../../coordinate.js").Coordinate>>} Coordinatess.
   */
  function inflateCoordinatesArray(flatCoordinates, offset, ends, stride, opt_coordinatess) {
    var coordinatess = opt_coordinatess !== undefined ? opt_coordinatess : [];
    var i = 0;
    for (var j = 0, jj = ends.length; j < jj; ++j) {
      var end = ends[j];
      coordinatess[i++] = inflateCoordinates(
        flatCoordinates, offset, end, stride, coordinatess[i]);
      offset = end;
    }
    coordinatess.length = i;
    return coordinatess;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>=} opt_coordinatesss
   *     Coordinatesss.
   * @return {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} Coordinatesss.
   */
  function inflateMultiCoordinatesArray(flatCoordinates, offset, endss, stride, opt_coordinatesss) {
    var coordinatesss = opt_coordinatesss !== undefined ? opt_coordinatesss : [];
    var i = 0;
    for (var j = 0, jj = endss.length; j < jj; ++j) {
      var ends = endss[j];
      coordinatesss[i++] = inflateCoordinatesArray(
        flatCoordinates, offset, ends, stride, coordinatesss[i]);
      offset = ends[ends.length - 1];
    }
    coordinatesss.length = i;
    return coordinatesss;
  }

  /**
   * @module ol/geom/flat/simplify
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @return {number} Simplified offset.
   */
  function douglasPeucker(flatCoordinates, offset, end,
    stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
    var n = (end - offset) / stride;
    if (n < 3) {
      for (; offset < end; offset += stride) {
        simplifiedFlatCoordinates[simplifiedOffset++] =
            flatCoordinates[offset];
        simplifiedFlatCoordinates[simplifiedOffset++] =
            flatCoordinates[offset + 1];
      }
      return simplifiedOffset;
    }
    /** @type {Array<number>} */
    var markers = new Array(n);
    markers[0] = 1;
    markers[n - 1] = 1;
    /** @type {Array<number>} */
    var stack = [offset, end - stride];
    var index = 0;
    while (stack.length > 0) {
      var last = stack.pop();
      var first = stack.pop();
      var maxSquaredDistance = 0;
      var x1 = flatCoordinates[first];
      var y1 = flatCoordinates[first + 1];
      var x2 = flatCoordinates[last];
      var y2 = flatCoordinates[last + 1];
      for (var i = first + stride; i < last; i += stride) {
        var x = flatCoordinates[i];
        var y = flatCoordinates[i + 1];
        var squaredDistance$$1 = squaredSegmentDistance(
          x, y, x1, y1, x2, y2);
        if (squaredDistance$$1 > maxSquaredDistance) {
          index = i;
          maxSquaredDistance = squaredDistance$$1;
        }
      }
      if (maxSquaredDistance > squaredTolerance) {
        markers[(index - offset) / stride] = 1;
        if (first + stride < index) {
          stack.push(first, index);
        }
        if (index + stride < last) {
          stack.push(index, last);
        }
      }
    }
    for (var i$1 = 0; i$1 < n; ++i$1) {
      if (markers[i$1]) {
        simplifiedFlatCoordinates[simplifiedOffset++] =
            flatCoordinates[offset + i$1 * stride];
        simplifiedFlatCoordinates[simplifiedOffset++] =
            flatCoordinates[offset + i$1 * stride + 1];
      }
    }
    return simplifiedOffset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<number>} simplifiedEnds Simplified ends.
   * @return {number} Simplified offset.
   */
  function douglasPeuckerArray(flatCoordinates, offset,
    ends, stride, squaredTolerance, simplifiedFlatCoordinates,
    simplifiedOffset, simplifiedEnds) {
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      simplifiedOffset = douglasPeucker(
        flatCoordinates, offset, end, stride, squaredTolerance,
        simplifiedFlatCoordinates, simplifiedOffset);
      simplifiedEnds.push(simplifiedOffset);
      offset = end;
    }
    return simplifiedOffset;
  }


  /**
   * @param {number} value Value.
   * @param {number} tolerance Tolerance.
   * @return {number} Rounded value.
   */
  function snap(value, tolerance) {
    return tolerance * Math.round(value / tolerance);
  }


  /**
   * Simplifies a line string using an algorithm designed by Tim Schaub.
   * Coordinates are snapped to the nearest value in a virtual grid and
   * consecutive duplicate coordinates are discarded.  This effectively preserves
   * topology as the simplification of any subsection of a line string is
   * independent of the rest of the line string.  This means that, for examples,
   * the common edge between two polygons will be simplified to the same line
   * string independently in both polygons.  This implementation uses a single
   * pass over the coordinates and eliminates intermediate collinear points.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @return {number} Simplified offset.
   */
  function quantize(flatCoordinates, offset, end, stride,
    tolerance, simplifiedFlatCoordinates, simplifiedOffset) {
    // do nothing if the line is empty
    if (offset == end) {
      return simplifiedOffset;
    }
    // snap the first coordinate (P1)
    var x1 = snap(flatCoordinates[offset], tolerance);
    var y1 = snap(flatCoordinates[offset + 1], tolerance);
    offset += stride;
    // add the first coordinate to the output
    simplifiedFlatCoordinates[simplifiedOffset++] = x1;
    simplifiedFlatCoordinates[simplifiedOffset++] = y1;
    // find the next coordinate that does not snap to the same value as the first
    // coordinate (P2)
    var x2, y2;
    do {
      x2 = snap(flatCoordinates[offset], tolerance);
      y2 = snap(flatCoordinates[offset + 1], tolerance);
      offset += stride;
      if (offset == end) {
        // all coordinates snap to the same value, the line collapses to a point
        // push the last snapped value anyway to ensure that the output contains
        // at least two points
        // FIXME should we really return at least two points anyway?
        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
        return simplifiedOffset;
      }
    } while (x2 == x1 && y2 == y1);
    while (offset < end) {
      // snap the next coordinate (P3)
      var x3 = snap(flatCoordinates[offset], tolerance);
      var y3 = snap(flatCoordinates[offset + 1], tolerance);
      offset += stride;
      // skip P3 if it is equal to P2
      if (x3 == x2 && y3 == y2) {
        continue;
      }
      // calculate the delta between P1 and P2
      var dx1 = x2 - x1;
      var dy1 = y2 - y1;
      // calculate the delta between P3 and P1
      var dx2 = x3 - x1;
      var dy2 = y3 - y1;
      // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
      // P1 in the same direction then P2 is on the straight line between P1 and
      // P3
      if ((dx1 * dy2 == dy1 * dx2) &&
          ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&
          ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))) {
        // discard P2 and set P2 = P3
        x2 = x3;
        y2 = y3;
        continue;
      }
      // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
      // between P3 and P1 or on the opposite half of the line to P2.  add P2,
      // and continue with P1 = P2 and P2 = P3
      simplifiedFlatCoordinates[simplifiedOffset++] = x2;
      simplifiedFlatCoordinates[simplifiedOffset++] = y2;
      x1 = x2;
      y1 = y2;
      x2 = x3;
      y2 = y3;
    }
    // add the last point (P2)
    simplifiedFlatCoordinates[simplifiedOffset++] = x2;
    simplifiedFlatCoordinates[simplifiedOffset++] = y2;
    return simplifiedOffset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<number>} simplifiedEnds Simplified ends.
   * @return {number} Simplified offset.
   */
  function quantizeArray(
    flatCoordinates, offset, ends, stride,
    tolerance,
    simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      simplifiedOffset = quantize(
        flatCoordinates, offset, end, stride,
        tolerance,
        simplifiedFlatCoordinates, simplifiedOffset);
      simplifiedEnds.push(simplifiedOffset);
      offset = end;
    }
    return simplifiedOffset;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<Array<number>>} simplifiedEndss Simplified endss.
   * @return {number} Simplified offset.
   */
  function quantizeMultiArray(
    flatCoordinates, offset, endss, stride,
    tolerance,
    simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      var simplifiedEnds = [];
      simplifiedOffset = quantizeArray(
        flatCoordinates, offset, ends, stride,
        tolerance,
        simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
      simplifiedEndss.push(simplifiedEnds);
      offset = ends[ends.length - 1];
    }
    return simplifiedOffset;
  }

  /**
   * @module ol/geom/LinearRing
   */

  /**
   * @classdesc
   * Linear ring geometry. Only used as part of polygon; cannot be rendered
   * on its own.
   *
   * @api
   */
  var LinearRing = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function LinearRing(coordinates, opt_layout) {

      SimpleGeometry$$1.call(this);

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
      } else {
        this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
      }

    }

    if ( SimpleGeometry$$1 ) LinearRing.__proto__ = SimpleGeometry$$1;
    LinearRing.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    LinearRing.prototype.constructor = LinearRing;

    /**
     * Make a complete copy of the geometry.
     * @return {!LinearRing} Clone.
     * @override
     * @api
     */
    LinearRing.prototype.clone = function clone$$1 () {
      return new LinearRing(this.flatCoordinates.slice(), this.layout);
    };

    /**
     * @inheritDoc
     */
    LinearRing.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(maxSquaredDelta(
          this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestPoint(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    };

    /**
     * Return the area of the linear ring on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    LinearRing.prototype.getArea = function getArea$$1 () {
      return linearRing(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };

    /**
     * Return the coordinates of the linear ring.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @override
     * @api
     */
    LinearRing.prototype.getCoordinates = function getCoordinates () {
      return inflateCoordinates(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };

    /**
     * @inheritDoc
     */
    LinearRing.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {
      var simplifiedFlatCoordinates = [];
      simplifiedFlatCoordinates.length = douglasPeucker(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        squaredTolerance, simplifiedFlatCoordinates, 0);
      return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);
    };

    /**
     * @inheritDoc
     * @api
     */
    LinearRing.prototype.getType = function getType () {
      return GeometryType.LINEAR_RING;
    };

    /**
     * @inheritDoc
     */
    LinearRing.prototype.intersectsExtent = function intersectsExtent (extent) {
      return false;
    };

    /**
     * Set the coordinates of the linear ring.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    LinearRing.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    };

    return LinearRing;
  }(SimpleGeometry));

  /**
   * @module ol/geom/Point
   */

  /**
   * @classdesc
   * Point geometry.
   *
   * @api
   */
  var Point = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function Point(coordinates, opt_layout) {
      SimpleGeometry$$1.call(this);
      this.setCoordinates(coordinates, opt_layout);
    }

    if ( SimpleGeometry$$1 ) Point.__proto__ = SimpleGeometry$$1;
    Point.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    Point.prototype.constructor = Point;

    /**
     * Make a complete copy of the geometry.
     * @return {!Point} Clone.
     * @override
     * @api
     */
    Point.prototype.clone = function clone$$1 () {
      var point = new Point(this.flatCoordinates.slice(), this.layout);
      return point;
    };

    /**
     * @inheritDoc
     */
    Point.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      var flatCoordinates = this.flatCoordinates;
      var squaredDistance$$1 = squaredDistance(x, y, flatCoordinates[0], flatCoordinates[1]);
      if (squaredDistance$$1 < minSquaredDistance) {
        var stride = this.stride;
        for (var i = 0; i < stride; ++i) {
          closestPoint[i] = flatCoordinates[i];
        }
        closestPoint.length = stride;
        return squaredDistance$$1;
      } else {
        return minSquaredDistance;
      }
    };

    /**
     * Return the coordinate of the point.
     * @return {import("../coordinate.js").Coordinate} Coordinates.
     * @override
     * @api
     */
    Point.prototype.getCoordinates = function getCoordinates () {
      return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
    };

    /**
     * @inheritDoc
     */
    Point.prototype.computeExtent = function computeExtent (extent) {
      return createOrUpdateFromCoordinate(this.flatCoordinates, extent);
    };

    /**
     * @inheritDoc
     * @api
     */
    Point.prototype.getType = function getType () {
      return GeometryType.POINT;
    };

    /**
     * @inheritDoc
     * @api
     */
    Point.prototype.intersectsExtent = function intersectsExtent (extent) {
      return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
    };

    /**
     * @inheritDoc
     * @api
     */
    Point.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 0);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinate(
        this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    };

    return Point;
  }(SimpleGeometry));

  /**
   * @module ol/geom/flat/contains
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} Contains extent.
   */
  function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent) {
    var outside = forEachCorner(extent,
      /**
       * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
       * @return {boolean} Contains (x, y).
       */
      function(coordinate) {
        return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);
      });
    return !outside;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {
    // http://geomalgorithms.com/a03-_inclusion.html
    // Copyright 2000 softSurfer, 2012 Dan Sunday
    // This code may be freely used and modified for any purpose
    // providing that this copyright notice is included with it.
    // SoftSurfer makes no warranty for this code, and cannot be held
    // liable for any real or imagined damage resulting from its use.
    // Users of this code must verify correctness for their application.
    var wn = 0;
    var x1 = flatCoordinates[end - stride];
    var y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      var x2 = flatCoordinates[offset];
      var y2 = flatCoordinates[offset + 1];
      if (y1 <= y) {
        if (y2 > y && ((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)) > 0) {
          wn++;
        }
      } else if (y2 <= y && ((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)) < 0) {
        wn--;
      }
      x1 = x2;
      y1 = y2;
    }
    return wn !== 0;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {
    if (ends.length === 0) {
      return false;
    }
    if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {
      return false;
    }
    for (var i = 1, ii = ends.length; i < ii; ++i) {
      if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) {
        return false;
      }
    }
    return true;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingssContainsXY(flatCoordinates, offset, endss, stride, x, y) {
    if (endss.length === 0) {
      return false;
    }
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
        return true;
      }
      offset = ends[ends.length - 1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/interiorpoint
   */


  /**
   * Calculates a point that is likely to lie in the interior of the linear rings.
   * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<number>} flatCenters Flat centers.
   * @param {number} flatCentersOffset Flat center offset.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Destination point as XYM coordinate, where M is the
   * length of the horizontal intersection that the point belongs to.
   */
  function getInteriorPointOfArray(flatCoordinates, offset,
    ends, stride, flatCenters, flatCentersOffset, opt_dest) {
    var i, ii, x, x1, x2, y1, y2;
    var y = flatCenters[flatCentersOffset + 1];
    /** @type {Array<number>} */
    var intersections = [];
    // Calculate intersections with the horizontal line
    for (var r = 0, rr = ends.length; r < rr; ++r) {
      var end = ends[r];
      x1 = flatCoordinates[end - stride];
      y1 = flatCoordinates[end - stride + 1];
      for (i = offset; i < end; i += stride) {
        x2 = flatCoordinates[i];
        y2 = flatCoordinates[i + 1];
        if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {
          x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;
          intersections.push(x);
        }
        x1 = x2;
        y1 = y2;
      }
    }
    // Find the longest segment of the horizontal line that has its center point
    // inside the linear ring.
    var pointX = NaN;
    var maxSegmentLength = -Infinity;
    intersections.sort(numberSafeCompareFunction);
    x1 = intersections[0];
    for (i = 1, ii = intersections.length; i < ii; ++i) {
      x2 = intersections[i];
      var segmentLength = Math.abs(x2 - x1);
      if (segmentLength > maxSegmentLength) {
        x = (x1 + x2) / 2;
        if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
          pointX = x;
          maxSegmentLength = segmentLength;
        }
      }
      x1 = x2;
    }
    if (isNaN(pointX)) {
      // There is no horizontal line that has its center point inside the linear
      // ring.  Use the center of the the linear ring's extent.
      pointX = flatCenters[flatCentersOffset];
    }
    if (opt_dest) {
      opt_dest.push(pointX, y, maxSegmentLength);
      return opt_dest;
    } else {
      return [pointX, y, maxSegmentLength];
    }
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {Array<number>} flatCenters Flat centers.
   * @return {Array<number>} Interior points as XYM coordinates, where M is the
   * length of the horizontal intersection that the point belongs to.
   */
  function getInteriorPointsOfMultiArray(flatCoordinates, offset, endss, stride, flatCenters) {
    var interiorPoints = [];
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      interiorPoints = getInteriorPointOfArray(flatCoordinates,
        offset, ends, stride, flatCenters, 2 * i, interiorPoints);
      offset = ends[ends.length - 1];
    }
    return interiorPoints;
  }

  /**
   * @module ol/geom/flat/segments
   */


  /**
   * This function calls `callback` for each segment of the flat coordinates
   * array. If the callback returns a truthy value the function returns that
   * value immediately. Otherwise the function returns `false`.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {function(this: S, import("../../coordinate.js").Coordinate, import("../../coordinate.js").Coordinate): T} callback Function
   *     called for each segment.
   * @param {S=} opt_this The object to be used as the value of 'this'
   *     within callback.
   * @return {T|boolean} Value.
   * @template T,S
   */
  function forEach(flatCoordinates, offset, end, stride, callback, opt_this) {
    var point1 = [flatCoordinates[offset], flatCoordinates[offset + 1]];
    var point2 = [];
    var ret;
    for (; (offset + stride) < end; offset += stride) {
      point2[0] = flatCoordinates[offset + stride];
      point2[1] = flatCoordinates[offset + stride + 1];
      ret = callback.call(opt_this, point1, point2);
      if (ret) {
        return ret;
      }
      point1[0] = point2[0];
      point1[1] = point2[1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/intersectsextent
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLineString(flatCoordinates, offset, end, stride, extent) {
    var coordinatesExtent = extendFlatCoordinates(
      createEmpty(), flatCoordinates, offset, end, stride);
    if (!intersects(extent, coordinatesExtent)) {
      return false;
    }
    if (containsExtent(extent, coordinatesExtent)) {
      return true;
    }
    if (coordinatesExtent[0] >= extent[0] &&
        coordinatesExtent[2] <= extent[2]) {
      return true;
    }
    if (coordinatesExtent[1] >= extent[1] &&
        coordinatesExtent[3] <= extent[3]) {
      return true;
    }
    return forEach(flatCoordinates, offset, end, stride,
      /**
       * @param {import("../../coordinate.js").Coordinate} point1 Start point.
       * @param {import("../../coordinate.js").Coordinate} point2 End point.
       * @return {boolean} `true` if the segment and the extent intersect,
       *     `false` otherwise.
       */
      function(point1, point2) {
        return intersectsSegment(extent, point1, point2);
      });
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      if (intersectsLineString(
        flatCoordinates, offset, ends[i], stride, extent)) {
        return true;
      }
      offset = ends[i];
    }
    return false;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {
    if (intersectsLineString(
      flatCoordinates, offset, end, stride, extent)) {
      return true;
    }
    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {
      return true;
    }
    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {
      return true;
    }
    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {
      return true;
    }
    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {
      return true;
    }
    return false;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {
    if (!intersectsLinearRing(
      flatCoordinates, offset, ends[0], stride, extent)) {
      return false;
    }
    if (ends.length === 1) {
      return true;
    }
    for (var i = 1, ii = ends.length; i < ii; ++i) {
      if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
        if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
          return false;
        }
      }
    }
    return true;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      if (intersectsLinearRingArray(
        flatCoordinates, offset, ends, stride, extent)) {
        return true;
      }
      offset = ends[ends.length - 1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/reverse
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   */
  function coordinates(flatCoordinates, offset, end, stride) {
    while (offset < end - stride) {
      for (var i = 0; i < stride; ++i) {
        var tmp = flatCoordinates[offset + i];
        flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
        flatCoordinates[end - stride + i] = tmp;
      }
      offset += stride;
      end -= stride;
    }
  }

  /**
   * @module ol/geom/flat/orient
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {boolean} Is clockwise.
   */
  function linearRingIsClockwise(flatCoordinates, offset, end, stride) {
    // http://tinyurl.com/clockwise-method
    // https://github.com/OSGeo/gdal/blob/trunk/gdal/ogr/ogrlinearring.cpp
    var edge = 0;
    var x1 = flatCoordinates[end - stride];
    var y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      var x2 = flatCoordinates[offset];
      var y2 = flatCoordinates[offset + 1];
      edge += (x2 - x1) * (y2 + y1);
      x1 = x2;
      y1 = y2;
    }
    return edge > 0;
  }


  /**
   * Determines if linear rings are oriented.  By default, left-hand orientation
   * is tested (first ring must be clockwise, remaining rings counter-clockwise).
   * To test for right-hand orientation, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Test for right-hand orientation
   *     (counter-clockwise exterior ring and clockwise interior rings).
   * @return {boolean} Rings are correctly oriented.
   */
  function linearRingIsOriented(flatCoordinates, offset, ends, stride, opt_right) {
    var right = opt_right !== undefined ? opt_right : false;
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      var isClockwise = linearRingIsClockwise(
        flatCoordinates, offset, end, stride);
      if (i === 0) {
        if ((right && isClockwise) || (!right && !isClockwise)) {
          return false;
        }
      } else {
        if ((right && !isClockwise) || (!right && isClockwise)) {
          return false;
        }
      }
      offset = end;
    }
    return true;
  }


  /**
   * Determines if linear rings are oriented.  By default, left-hand orientation
   * is tested (first ring must be clockwise, remaining rings counter-clockwise).
   * To test for right-hand orientation, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Array of array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Test for right-hand orientation
   *     (counter-clockwise exterior ring and clockwise interior rings).
   * @return {boolean} Rings are correctly oriented.
   */
  function linearRingsAreOriented(flatCoordinates, offset, endss, stride, opt_right) {
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      if (!linearRingIsOriented(
        flatCoordinates, offset, endss[i], stride, opt_right)) {
        return false;
      }
    }
    return true;
  }


  /**
   * Orient coordinates in a flat array of linear rings.  By default, rings
   * are oriented following the left-hand rule (clockwise for exterior and
   * counter-clockwise for interior rings).  To orient according to the
   * right-hand rule, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Follow the right-hand rule for orientation.
   * @return {number} End.
   */
  function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {
    var right = opt_right !== undefined ? opt_right : false;
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      var isClockwise = linearRingIsClockwise(
        flatCoordinates, offset, end, stride);
      var reverse = i === 0 ?
        (right && isClockwise) || (!right && !isClockwise) :
        (right && !isClockwise) || (!right && isClockwise);
      if (reverse) {
        coordinates(flatCoordinates, offset, end, stride);
      }
      offset = end;
    }
    return offset;
  }


  /**
   * Orient coordinates in a flat array of linear rings.  By default, rings
   * are oriented following the left-hand rule (clockwise for exterior and
   * counter-clockwise for interior rings).  To orient according to the
   * right-hand rule, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Array of array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Follow the right-hand rule for orientation.
   * @return {number} End.
   */
  function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      offset = orientLinearRings(
        flatCoordinates, offset, endss[i], stride, opt_right);
    }
    return offset;
  }

  /**
   * @module ol/geom/Polygon
   */

  /**
   * @classdesc
   * Polygon geometry.
   *
   * @api
   */
  var Polygon = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function Polygon(coordinates, opt_layout, opt_ends) {

      SimpleGeometry$$1.call(this);

      /**
       * @type {Array<number>}
       * @private
       */
      this.ends_ = [];

      /**
       * @private
       * @type {number}
       */
      this.flatInteriorPointRevision_ = -1;

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.flatInteriorPoint_ = null;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.orientedRevision_ = -1;

      /**
       * @private
       * @type {Array<number>}
       */
      this.orientedFlatCoordinates_ = null;

      if (opt_layout !== undefined && opt_ends) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
        this.ends_ = opt_ends;
      } else {
        this.setCoordinates(/** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
      }

    }

    if ( SimpleGeometry$$1 ) Polygon.__proto__ = SimpleGeometry$$1;
    Polygon.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    Polygon.prototype.constructor = Polygon;

    /**
     * Append the passed linear ring to this polygon.
     * @param {LinearRing} linearRing Linear ring.
     * @api
     */
    Polygon.prototype.appendLinearRing = function appendLinearRing (linearRing$$1) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = linearRing$$1.getFlatCoordinates().slice();
      } else {
        extend(this.flatCoordinates, linearRing$$1.getFlatCoordinates());
      }
      this.ends_.push(this.flatCoordinates.length);
      this.changed();
    };

    /**
     * Make a complete copy of the geometry.
     * @return {!Polygon} Clone.
     * @override
     * @api
     */
    Polygon.prototype.clone = function clone$$1 () {
      return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
    };

    /**
     * @inheritDoc
     */
    Polygon.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(
          this.flatCoordinates, 0, this.ends_, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestArrayPoint(
        this.flatCoordinates, 0, this.ends_, this.stride,
        this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    };

    /**
     * @inheritDoc
     */
    Polygon.prototype.containsXY = function containsXY$$1 (x, y) {
      return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);
    };

    /**
     * Return the area of the polygon on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    Polygon.prototype.getArea = function getArea$$1 () {
      return linearRings(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
    };

    /**
     * Get the coordinate array for this geometry.  This array has the structure
     * of a GeoJSON coordinate array for polygons.
     *
     * @param {boolean=} opt_right Orient coordinates according to the right-hand
     *     rule (counter-clockwise for exterior and clockwise for interior rings).
     *     If `false`, coordinates will be oriented according to the left-hand rule
     *     (clockwise for exterior and counter-clockwise for interior rings).
     *     By default, coordinate orientation will depend on how the geometry was
     *     constructed.
     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
     * @override
     * @api
     */
    Polygon.prototype.getCoordinates = function getCoordinates (opt_right) {
      var flatCoordinates;
      if (opt_right !== undefined) {
        flatCoordinates = this.getOrientedFlatCoordinates().slice();
        orientLinearRings(
          flatCoordinates, 0, this.ends_, this.stride, opt_right);
      } else {
        flatCoordinates = this.flatCoordinates;
      }

      return inflateCoordinatesArray(
        flatCoordinates, 0, this.ends_, this.stride);
    };

    /**
     * @return {Array<number>} Ends.
     */
    Polygon.prototype.getEnds = function getEnds () {
      return this.ends_;
    };

    /**
     * @return {Array<number>} Interior point.
     */
    Polygon.prototype.getFlatInteriorPoint = function getFlatInteriorPoint () {
      if (this.flatInteriorPointRevision_ != this.getRevision()) {
        var flatCenter = getCenter(this.getExtent());
        this.flatInteriorPoint_ = getInteriorPointOfArray(
          this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride,
          flatCenter, 0);
        this.flatInteriorPointRevision_ = this.getRevision();
      }
      return this.flatInteriorPoint_;
    };

    /**
     * Return an interior point of the polygon.
     * @return {Point} Interior point as XYM coordinate, where M is the
     * length of the horizontal intersection that the point belongs to.
     * @api
     */
    Polygon.prototype.getInteriorPoint = function getInteriorPoint () {
      return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);
    };

    /**
     * Return the number of rings of the polygon,  this includes the exterior
     * ring and any interior rings.
     *
     * @return {number} Number of rings.
     * @api
     */
    Polygon.prototype.getLinearRingCount = function getLinearRingCount () {
      return this.ends_.length;
    };

    /**
     * Return the Nth linear ring of the polygon geometry. Return `null` if the
     * given index is out of range.
     * The exterior linear ring is available at index `0` and the interior rings
     * at index `1` and beyond.
     *
     * @param {number} index Index.
     * @return {LinearRing} Linear ring.
     * @api
     */
    Polygon.prototype.getLinearRing = function getLinearRing (index) {
      if (index < 0 || this.ends_.length <= index) {
        return null;
      }
      return new LinearRing(this.flatCoordinates.slice(
        index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
    };

    /**
     * Return the linear rings of the polygon.
     * @return {Array<LinearRing>} Linear rings.
     * @api
     */
    Polygon.prototype.getLinearRings = function getLinearRings () {
      var layout = this.layout;
      var flatCoordinates = this.flatCoordinates;
      var ends = this.ends_;
      var linearRings$$1 = [];
      var offset$$1 = 0;
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        var end = ends[i];
        var linearRing$$1 = new LinearRing(flatCoordinates.slice(offset$$1, end), layout);
        linearRings$$1.push(linearRing$$1);
        offset$$1 = end;
      }
      return linearRings$$1;
    };

    /**
     * @return {Array<number>} Oriented flat coordinates.
     */
    Polygon.prototype.getOrientedFlatCoordinates = function getOrientedFlatCoordinates () {
      if (this.orientedRevision_ != this.getRevision()) {
        var flatCoordinates = this.flatCoordinates;
        if (linearRingIsOriented(
          flatCoordinates, 0, this.ends_, this.stride)) {
          this.orientedFlatCoordinates_ = flatCoordinates;
        } else {
          this.orientedFlatCoordinates_ = flatCoordinates.slice();
          this.orientedFlatCoordinates_.length =
              orientLinearRings(
                this.orientedFlatCoordinates_, 0, this.ends_, this.stride);
        }
        this.orientedRevision_ = this.getRevision();
      }
      return this.orientedFlatCoordinates_;
    };

    /**
     * @inheritDoc
     */
    Polygon.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {
      var simplifiedFlatCoordinates = [];
      var simplifiedEnds = [];
      simplifiedFlatCoordinates.length = quantizeArray(
        this.flatCoordinates, 0, this.ends_, this.stride,
        Math.sqrt(squaredTolerance),
        simplifiedFlatCoordinates, 0, simplifiedEnds);
      return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
    };

    /**
     * @inheritDoc
     * @api
     */
    Polygon.prototype.getType = function getType () {
      return GeometryType.POLYGON;
    };

    /**
     * @inheritDoc
     * @api
     */
    Polygon.prototype.intersectsExtent = function intersectsExtent (extent) {
      return intersectsLinearRingArray(
        this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);
    };

    /**
     * Set the coordinates of the polygon.
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    Polygon.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 2);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      var ends = deflateCoordinatesArray(
        this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
      this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
      this.changed();
    };

    return Polygon;
  }(SimpleGeometry));


  /**
   * Create a polygon from an extent. The layout used is `XY`.
   * @param {import("../extent.js").Extent} extent The extent.
   * @return {Polygon} The polygon.
   * @api
   */
  function fromExtent(extent) {
    var minX = extent[0];
    var minY = extent[1];
    var maxX = extent[2];
    var maxY = extent[3];
    var flatCoordinates =
        [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];
    return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);
  }


  /**
   * Create a regular polygon from a circle.
   * @param {import("./Circle.js").default} circle Circle geometry.
   * @param {number=} opt_sides Number of sides of the polygon. Default is 32.
   * @param {number=} opt_angle Start angle for the first vertex of the polygon in
   *     radians. Default is 0.
   * @return {Polygon} Polygon geometry.
   * @api
   */
  function fromCircle(circle, opt_sides, opt_angle) {
    var sides = opt_sides ? opt_sides : 32;
    var stride = circle.getStride();
    var layout = circle.getLayout();
    var center = circle.getCenter();
    var arrayLength = stride * (sides + 1);
    var flatCoordinates = new Array(arrayLength);
    for (var i = 0; i < arrayLength; i += stride) {
      flatCoordinates[i] = 0;
      flatCoordinates[i + 1] = 0;
      for (var j = 2; j < stride; j++) {
        flatCoordinates[i + j] = center[j];
      }
    }
    var ends = [flatCoordinates.length];
    var polygon = new Polygon(flatCoordinates, layout, ends);
    makeRegular(polygon, center, circle.getRadius(), opt_angle);
    return polygon;
  }


  /**
   * Modify the coordinates of a polygon to make it a regular polygon.
   * @param {Polygon} polygon Polygon geometry.
   * @param {import("../coordinate.js").Coordinate} center Center of the regular polygon.
   * @param {number} radius Radius of the regular polygon.
   * @param {number=} opt_angle Start angle for the first vertex of the polygon in
   *     radians. Default is 0.
   */
  function makeRegular(polygon, center, radius, opt_angle) {
    var flatCoordinates = polygon.getFlatCoordinates();
    var stride = polygon.getStride();
    var sides = flatCoordinates.length / stride - 1;
    var startAngle = opt_angle ? opt_angle : 0;
    for (var i = 0; i <= sides; ++i) {
      var offset$$1 = i * stride;
      var angle = startAngle + (modulo(i, sides) * 2 * Math.PI / sides);
      flatCoordinates[offset$$1] = center[0] + (radius * Math.cos(angle));
      flatCoordinates[offset$$1 + 1] = center[1] + (radius * Math.sin(angle));
    }
    polygon.changed();
  }

  /**
   * @module ol/View
   */


  /**
   * An animation configuration
   *
   * @typedef {Object} Animation
   * @property {import("./coordinate.js").Coordinate} [sourceCenter]
   * @property {import("./coordinate.js").Coordinate} [targetCenter]
   * @property {number} [sourceResolution]
   * @property {number} [targetResolution]
   * @property {number} [sourceRotation]
   * @property {number} [targetRotation]
   * @property {import("./coordinate.js").Coordinate} [anchor]
   * @property {number} start
   * @property {number} duration
   * @property {boolean} complete
   * @property {function(number):number} easing
   * @property {function(boolean)} callback
   */


  /**
   * @typedef {Object} Constraints
   * @property {import("./centerconstraint.js").Type} center
   * @property {import("./resolutionconstraint.js").Type} resolution
   * @property {import("./rotationconstraint.js").Type} rotation
   */


  /**
   * @typedef {Object} FitOptions
   * @property {import("./size.js").Size} [size] The size in pixels of the box to fit
   * the extent into. Default is the current size of the first map in the DOM that
   * uses this view, or `[100, 100]` if no such map is found.
   * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
   * cleared inside the view. Values in the array are top, right, bottom and left
   * padding.
   * @property {boolean} [constrainResolution=true] Constrain the resolution.
   * @property {boolean} [nearest=false] If `constrainResolution` is `true`, get
   * the nearest extent instead of the closest that actually fits the view.
   * @property {number} [minResolution=0] Minimum resolution that we zoom to.
   * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
   * `minResolution` is given, this property is ignored.
   * @property {number} [duration] The duration of the animation in milliseconds.
   * By default, there is no animation to the target extent.
   * @property {function(number):number} [easing] The easing function used during
   * the animation (defaults to {@link module:ol/easing~inAndOut}).
   * The function will be called for each frame with a number representing a
   * fraction of the animation's duration.  The function should return a number
   * between 0 and 1 representing the progress toward the destination state.
   * @property {function(boolean)} [callback] Function called when the view is in
   * its final position. The callback will be called with `true` if the animation
   * series completed on its own or `false` if it was cancelled.
   */


  /**
   * @typedef {Object} ViewOptions
   * @property {import("./coordinate.js").Coordinate} [center] The initial center for
   * the view. The coordinate system for the center is specified with the
   * `projection` option. Layer sources will not be fetched if this is not set,
   * but the center can be set later with {@link #setCenter}.
   * @property {boolean|number} [constrainRotation=true] Rotation constraint.
   * `false` means no constraint. `true` means no constraint, but snap to zero
   * near zero. A number constrains the rotation to that number of values. For
   * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
   * @property {boolean} [enableRotation=true] Enable rotation.
   * If `false`, a rotation constraint that always sets the rotation to zero is
   * used. The `constrainRotation` option has no effect if `enableRotation` is
   * `false`.
   * @property {import("./extent.js").Extent} [extent] The extent that constrains the
   * center, in other words, center cannot be set outside this extent.
   * @property {number} [maxResolution] The maximum resolution used to determine
   * the resolution constraint. It is used together with `minResolution` (or
   * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
   * that the projection's validity extent fits in a 256x256 px tile. If the
   * projection is Spherical Mercator (the default) then `maxResolution` defaults
   * to `40075016.68557849 / 256 = 156543.03392804097`.
   * @property {number} [minResolution] The minimum resolution used to determine
   * the resolution constraint.  It is used together with `maxResolution` (or
   * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
   * zoom levels (with a factor of 2). If the projection is Spherical Mercator
   * (the default) then `minResolution` defaults to
   * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
   * @property {number} [maxZoom=28] The maximum zoom level used to determine the
   * resolution constraint. It is used together with `minZoom` (or
   * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
   * provided, it is given precedence over `maxZoom`.
   * @property {number} [minZoom=0] The minimum zoom level used to determine the
   * resolution constraint. It is used together with `maxZoom` (or
   * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
   * provided, it is given precedence over `minZoom`.
   * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857'] The
   * projection. The default is Spherical Mercator.
   * @property {number} [resolution] The initial resolution for the view. The
   * units are `projection` units per pixel (e.g. meters per pixel). An
   * alternative to setting this is to set `zoom`. Layer sources will not be
   * fetched if neither this nor `zoom` are defined, but they can be set later
   * with {@link #setZoom} or {@link #setResolution}.
   * @property {Array<number>} [resolutions] Resolutions to determine the
   * resolution constraint. If set the `maxResolution`, `minResolution`,
   * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
   * @property {number} [rotation=0] The initial rotation for the view in radians
   * (positive rotation clockwise, 0 means North).
   * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
   * level used to calculate the initial resolution for the view. The initial
   * resolution is determined using the {@link #constrainResolution} method.
   * @property {number} [zoomFactor=2] The zoom factor used to determine the
   * resolution constraint.
   */


  /**
   * @typedef {Object} AnimationOptions
   * @property {import("./coordinate.js").Coordinate} [center] The center of the view at the end of
   * the animation.
   * @property {number} [zoom] The zoom level of the view at the end of the
   * animation. This takes precedence over `resolution`.
   * @property {number} [resolution] The resolution of the view at the end
   * of the animation.  If `zoom` is also provided, this option will be ignored.
   * @property {number} [rotation] The rotation of the view at the end of
   * the animation.
   * @property {import("./coordinate.js").Coordinate} [anchor] Optional anchor to remained fixed
   * during a rotation or resolution animation.
   * @property {number} [duration=1000] The duration of the animation in milliseconds.
   * @property {function(number):number} [easing] The easing function used
   * during the animation (defaults to {@link module:ol/easing~inAndOut}).
   * The function will be called for each frame with a number representing a
   * fraction of the animation's duration.  The function should return a number
   * between 0 and 1 representing the progress toward the destination state.
   */


  /**
   * @typedef {Object} State
   * @property {import("./coordinate.js").Coordinate} center
   * @property {import("./proj/Projection.js").default} projection
   * @property {number} resolution
   * @property {number} rotation
   * @property {number} zoom
   */


  /**
   * Default min zoom level for the map view.
   * @type {number}
   */
  var DEFAULT_MIN_ZOOM = 0;


  /**
   * @classdesc
   * A View object represents a simple 2D view of the map.
   *
   * This is the object to act upon to change the center, resolution,
   * and rotation of the map.
   *
   * ### The view states
   *
   * An View is determined by three states: `center`, `resolution`,
   * and `rotation`. Each state has a corresponding getter and setter, e.g.
   * `getCenter` and `setCenter` for the `center` state.
   *
   * An View has a `projection`. The projection determines the
   * coordinate system of the center, and its units determine the units of the
   * resolution (projection units per pixel). The default projection is
   * Spherical Mercator (EPSG:3857).
   *
   * ### The constraints
   *
   * `setCenter`, `setResolution` and `setRotation` can be used to change the
   * states of the view. Any value can be passed to the setters. And the value
   * that is passed to a setter will effectively be the value set in the view,
   * and returned by the corresponding getter.
   *
   * But a View object also has a *resolution constraint*, a
   * *rotation constraint* and a *center constraint*.
   *
   * As said above, no constraints are applied when the setters are used to set
   * new states for the view. Applying constraints is done explicitly through
   * the use of the `constrain*` functions (`constrainResolution` and
   * `constrainRotation` and `constrainCenter`).
   *
   * The main users of the constraints are the interactions and the
   * controls. For example, double-clicking on the map changes the view to
   * the "next" resolution. And releasing the fingers after pinch-zooming
   * snaps to the closest resolution (with an animation).
   *
   * The *resolution constraint* snaps to specific resolutions. It is
   * determined by the following options: `resolutions`, `maxResolution`,
   * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three
   * options are ignored. See documentation for each option for more
   * information.
   *
   * The *rotation constraint* snaps to specific angles. It is determined
   * by the following options: `enableRotation` and `constrainRotation`.
   * By default the rotation value is snapped to zero when approaching the
   * horizontal.
   *
   * The *center constraint* is determined by the `extent` option. By
   * default the center is not constrained at all.
   *
    * @api
   */
  var View = /*@__PURE__*/(function (BaseObject$$1) {
    function View(opt_options) {
      BaseObject$$1.call(this);

      var options = assign({}, opt_options);

      /**
       * @private
       * @type {Array<number>}
       */
      this.hints_ = [0, 0];

      /**
       * @private
       * @type {Array<Array<Animation>>}
       */
      this.animations_ = [];

      /**
       * @private
       * @type {number|undefined}
       */
      this.updateAnimationKey_;

      this.updateAnimations_ = this.updateAnimations_.bind(this);

      /**
       * @private
       * @const
       * @type {import("./proj/Projection.js").default}
       */
      this.projection_ = createProjection(options.projection, 'EPSG:3857');

      this.applyOptions_(options);
    }

    if ( BaseObject$$1 ) View.__proto__ = BaseObject$$1;
    View.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    View.prototype.constructor = View;

    /**
     * Set up the view with the given options.
     * @param {ViewOptions} options View options.
     */
    View.prototype.applyOptions_ = function applyOptions_ (options) {

      /**
       * @type {Object<string, *>}
       */
      var properties = {};
      properties[ViewProperty.CENTER] = options.center !== undefined ?
        options.center : null;

      var resolutionConstraintInfo = createResolutionConstraint(options);

      /**
       * @private
       * @type {number}
       */
      this.maxResolution_ = resolutionConstraintInfo.maxResolution;

      /**
       * @private
       * @type {number}
       */
      this.minResolution_ = resolutionConstraintInfo.minResolution;

      /**
       * @private
       * @type {number}
       */
      this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;

      /**
       * @private
       * @type {Array<number>|undefined}
       */
      this.resolutions_ = options.resolutions;

      /**
       * @private
       * @type {number}
       */
      this.minZoom_ = resolutionConstraintInfo.minZoom;

      var centerConstraint = createCenterConstraint(options);
      var resolutionConstraint = resolutionConstraintInfo.constraint;
      var rotationConstraint = createRotationConstraint(options);

      /**
       * @private
       * @type {Constraints}
       */
      this.constraints_ = {
        center: centerConstraint,
        resolution: resolutionConstraint,
        rotation: rotationConstraint
      };

      if (options.resolution !== undefined) {
        properties[ViewProperty.RESOLUTION] = options.resolution;
      } else if (options.zoom !== undefined) {
        properties[ViewProperty.RESOLUTION] = this.constrainResolution(
          this.maxResolution_, options.zoom - this.minZoom_);

        if (this.resolutions_) { // in case map zoom is out of min/max zoom range
          properties[ViewProperty.RESOLUTION] = clamp(
            Number(this.getResolution() || properties[ViewProperty.RESOLUTION]),
            this.minResolution_, this.maxResolution_);
        }
      }
      properties[ViewProperty.ROTATION] = options.rotation !== undefined ? options.rotation : 0;
      this.setProperties(properties);

      /**
       * @private
       * @type {ViewOptions}
       */
      this.options_ = options;

    };

    /**
     * Get an updated version of the view options used to construct the view.  The
     * current resolution (or zoom), center, and rotation are applied to any stored
     * options.  The provided options can be used to apply new min/max zoom or
     * resolution limits.
     * @param {ViewOptions} newOptions New options to be applied.
     * @return {ViewOptions} New options updated with the current view state.
     */
    View.prototype.getUpdatedOptions_ = function getUpdatedOptions_ (newOptions) {
      var options = assign({}, this.options_);

      // preserve resolution (or zoom)
      if (options.resolution !== undefined) {
        options.resolution = this.getResolution();
      } else {
        options.zoom = this.getZoom();
      }

      // preserve center
      options.center = this.getCenter();

      // preserve rotation
      options.rotation = this.getRotation();

      return assign({}, options, newOptions);
    };

    /**
     * Animate the view.  The view's center, zoom (or resolution), and rotation
     * can be animated for smooth transitions between view states.  For example,
     * to animate the view to a new zoom level:
     *
     *     view.animate({zoom: view.getZoom() + 1});
     *
     * By default, the animation lasts one second and uses in-and-out easing.  You
     * can customize this behavior by including `duration` (in milliseconds) and
     * `easing` options (see {@link module:ol/easing}).
     *
     * To chain together multiple animations, call the method with multiple
     * animation objects.  For example, to first zoom and then pan:
     *
     *     view.animate({zoom: 10}, {center: [0, 0]});
     *
     * If you provide a function as the last argument to the animate method, it
     * will get called at the end of an animation series.  The callback will be
     * called with `true` if the animation series completed on its own or `false`
     * if it was cancelled.
     *
     * Animations are cancelled by user interactions (e.g. dragging the map) or by
     * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
     * (or another method that calls one of these).
     *
     * @param {...(AnimationOptions|function(boolean))} var_args Animation
     *     options.  Multiple animations can be run in series by passing multiple
     *     options objects.  To run multiple animations in parallel, call the method
     *     multiple times.  An optional callback can be provided as a final
     *     argument.  The callback will be called with a boolean indicating whether
     *     the animation completed without being cancelled.
     * @api
     */
    View.prototype.animate = function animate (var_args) {
      var arguments$1 = arguments;

      var animationCount = arguments.length;
      var callback;
      if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {
        callback = arguments[animationCount - 1];
        --animationCount;
      }
      if (!this.isDef()) {
        // if view properties are not yet set, shortcut to the final state
        var state = arguments[animationCount - 1];
        if (state.center) {
          this.setCenter(state.center);
        }
        if (state.zoom !== undefined) {
          this.setZoom(state.zoom);
        }
        if (state.rotation !== undefined) {
          this.setRotation(state.rotation);
        }
        if (callback) {
          animationCallback(callback, true);
        }
        return;
      }
      var start = Date.now();
      var center = this.getCenter().slice();
      var resolution = this.getResolution();
      var rotation = this.getRotation();
      var series = [];
      for (var i = 0; i < animationCount; ++i) {
        var options = /** @type {AnimationOptions} */ (arguments$1[i]);

        var animation = /** @type {Animation} */ ({
          start: start,
          complete: false,
          anchor: options.anchor,
          duration: options.duration !== undefined ? options.duration : 1000,
          easing: options.easing || inAndOut
        });

        if (options.center) {
          animation.sourceCenter = center;
          animation.targetCenter = options.center;
          center = animation.targetCenter;
        }

        if (options.zoom !== undefined) {
          animation.sourceResolution = resolution;
          animation.targetResolution = this.constrainResolution(
            this.maxResolution_, options.zoom - this.minZoom_, 0);
          resolution = animation.targetResolution;
        } else if (options.resolution) {
          animation.sourceResolution = resolution;
          animation.targetResolution = options.resolution;
          resolution = animation.targetResolution;
        }

        if (options.rotation !== undefined) {
          animation.sourceRotation = rotation;
          var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
          animation.targetRotation = rotation + delta;
          rotation = animation.targetRotation;
        }

        animation.callback = callback;

        // check if animation is a no-op
        if (isNoopAnimation(animation)) {
          animation.complete = true;
          // we still push it onto the series for callback handling
        } else {
          start += animation.duration;
        }
        series.push(animation);
      }
      this.animations_.push(series);
      this.setHint(ViewHint.ANIMATING, 1);
      this.updateAnimations_();
    };

    /**
     * Determine if the view is being animated.
     * @return {boolean} The view is being animated.
     * @api
     */
    View.prototype.getAnimating = function getAnimating () {
      return this.hints_[ViewHint.ANIMATING] > 0;
    };

    /**
     * Determine if the user is interacting with the view, such as panning or zooming.
     * @return {boolean} The view is being interacted with.
     * @api
     */
    View.prototype.getInteracting = function getInteracting () {
      return this.hints_[ViewHint.INTERACTING] > 0;
    };

    /**
     * Cancel any ongoing animations.
     * @api
     */
    View.prototype.cancelAnimations = function cancelAnimations () {
      this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);
      for (var i = 0, ii = this.animations_.length; i < ii; ++i) {
        var series = this.animations_[i];
        if (series[0].callback) {
          animationCallback(series[0].callback, false);
        }
      }
      this.animations_.length = 0;
    };

    /**
     * Update all animations.
     */
    View.prototype.updateAnimations_ = function updateAnimations_ () {
      if (this.updateAnimationKey_ !== undefined) {
        cancelAnimationFrame(this.updateAnimationKey_);
        this.updateAnimationKey_ = undefined;
      }
      if (!this.getAnimating()) {
        return;
      }
      var now = Date.now();
      var more = false;
      for (var i = this.animations_.length - 1; i >= 0; --i) {
        var series = this.animations_[i];
        var seriesComplete = true;
        for (var j = 0, jj = series.length; j < jj; ++j) {
          var animation = series[j];
          if (animation.complete) {
            continue;
          }
          var elapsed = now - animation.start;
          var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;
          if (fraction >= 1) {
            animation.complete = true;
            fraction = 1;
          } else {
            seriesComplete = false;
          }
          var progress = animation.easing(fraction);
          if (animation.sourceCenter) {
            var x0 = animation.sourceCenter[0];
            var y0 = animation.sourceCenter[1];
            var x1 = animation.targetCenter[0];
            var y1 = animation.targetCenter[1];
            var x = x0 + progress * (x1 - x0);
            var y = y0 + progress * (y1 - y0);
            this.set(ViewProperty.CENTER, [x, y]);
          }
          if (animation.sourceResolution && animation.targetResolution) {
            var resolution = progress === 1 ?
              animation.targetResolution :
              animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);
            if (animation.anchor) {
              this.set(ViewProperty.CENTER,
                this.calculateCenterZoom(resolution, animation.anchor));
            }
            this.set(ViewProperty.RESOLUTION, resolution);
          }
          if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {
            var rotation = progress === 1 ?
              modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :
              animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);
            if (animation.anchor) {
              this.set(ViewProperty.CENTER,
                this.calculateCenterRotate(rotation, animation.anchor));
            }
            this.set(ViewProperty.ROTATION, rotation);
          }
          more = true;
          if (!animation.complete) {
            break;
          }
        }
        if (seriesComplete) {
          this.animations_[i] = null;
          this.setHint(ViewHint.ANIMATING, -1);
          var callback = series[0].callback;
          if (callback) {
            animationCallback(callback, true);
          }
        }
      }
      // prune completed series
      this.animations_ = this.animations_.filter(Boolean);
      if (more && this.updateAnimationKey_ === undefined) {
        this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);
      }
    };

    /**
     * @param {number} rotation Target rotation.
     * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
     * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
     */
    View.prototype.calculateCenterRotate = function calculateCenterRotate (rotation, anchor) {
      var center;
      var currentCenter = this.getCenter();
      if (currentCenter !== undefined) {
        center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];
        rotate(center, rotation - this.getRotation());
        add(center, anchor);
      }
      return center;
    };

    /**
     * @param {number} resolution Target resolution.
     * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
     * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
     */
    View.prototype.calculateCenterZoom = function calculateCenterZoom (resolution, anchor) {
      var center;
      var currentCenter = this.getCenter();
      var currentResolution = this.getResolution();
      if (currentCenter !== undefined && currentResolution !== undefined) {
        var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;
        var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;
        center = [x, y];
      }
      return center;
    };

    /**
     * @private
     * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
     */
    View.prototype.getSizeFromViewport_ = function getSizeFromViewport_ () {
      var size = [100, 100];
      var selector = '.ol-viewport[data-view="' + getUid(this) + '"]';
      var element = document.querySelector(selector);
      if (element) {
        var metrics = getComputedStyle(element);
        size[0] = parseInt(metrics.width, 10);
        size[1] = parseInt(metrics.height, 10);
      }
      return size;
    };

    /**
     * Get the constrained center of this view.
     * @param {import("./coordinate.js").Coordinate|undefined} center Center.
     * @return {import("./coordinate.js").Coordinate|undefined} Constrained center.
     * @api
     */
    View.prototype.constrainCenter = function constrainCenter (center) {
      return this.constraints_.center(center);
    };

    /**
     * Get the constrained resolution of this view.
     * @param {number|undefined} resolution Resolution.
     * @param {number=} opt_delta Delta. Default is `0`.
     * @param {number=} opt_direction Direction. Default is `0`.
     * @return {number|undefined} Constrained resolution.
     * @api
     */
    View.prototype.constrainResolution = function constrainResolution (resolution, opt_delta, opt_direction) {
      var delta = opt_delta || 0;
      var direction = opt_direction || 0;
      return this.constraints_.resolution(resolution, delta, direction);
    };

    /**
     * Get the constrained rotation of this view.
     * @param {number|undefined} rotation Rotation.
     * @param {number=} opt_delta Delta. Default is `0`.
     * @return {number|undefined} Constrained rotation.
     * @api
     */
    View.prototype.constrainRotation = function constrainRotation (rotation, opt_delta) {
      var delta = opt_delta || 0;
      return this.constraints_.rotation(rotation, delta);
    };

    /**
     * Get the view center.
     * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
     * @observable
     * @api
     */
    View.prototype.getCenter = function getCenter$$1 () {
      return (
        /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(ViewProperty.CENTER))
      );
    };

    /**
     * @return {Constraints} Constraints.
     */
    View.prototype.getConstraints = function getConstraints () {
      return this.constraints_;
    };

    /**
     * @param {Array<number>=} opt_hints Destination array.
     * @return {Array<number>} Hint.
     */
    View.prototype.getHints = function getHints (opt_hints) {
      if (opt_hints !== undefined) {
        opt_hints[0] = this.hints_[0];
        opt_hints[1] = this.hints_[1];
        return opt_hints;
      } else {
        return this.hints_.slice();
      }
    };

    /**
     * Calculate the extent for the current view state and the passed size.
     * The size is the pixel dimensions of the box into which the calculated extent
     * should fit. In most cases you want to get the extent of the entire map,
     * that is `map.getSize()`.
     * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided, the size of the
     * first map that uses this view will be used.
     * @return {import("./extent.js").Extent} Extent.
     * @api
     */
    View.prototype.calculateExtent = function calculateExtent (opt_size) {
      var size = opt_size || this.getSizeFromViewport_();
      var center = /** @type {!import("./coordinate.js").Coordinate} */ (this.getCenter());
      assert(center, 1); // The view center is not defined
      var resolution = /** @type {!number} */ (this.getResolution());
      assert(resolution !== undefined, 2); // The view resolution is not defined
      var rotation = /** @type {!number} */ (this.getRotation());
      assert(rotation !== undefined, 3); // The view rotation is not defined

      return getForViewAndSize(center, resolution, rotation, size);
    };

    /**
     * Get the maximum resolution of the view.
     * @return {number} The maximum resolution of the view.
     * @api
     */
    View.prototype.getMaxResolution = function getMaxResolution () {
      return this.maxResolution_;
    };

    /**
     * Get the minimum resolution of the view.
     * @return {number} The minimum resolution of the view.
     * @api
     */
    View.prototype.getMinResolution = function getMinResolution () {
      return this.minResolution_;
    };

    /**
     * Get the maximum zoom level for the view.
     * @return {number} The maximum zoom level.
     * @api
     */
    View.prototype.getMaxZoom = function getMaxZoom () {
      return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));
    };

    /**
     * Set a new maximum zoom level for the view.
     * @param {number} zoom The maximum zoom level.
     * @api
     */
    View.prototype.setMaxZoom = function setMaxZoom (zoom) {
      this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));
    };

    /**
     * Get the minimum zoom level for the view.
     * @return {number} The minimum zoom level.
     * @api
     */
    View.prototype.getMinZoom = function getMinZoom () {
      return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));
    };

    /**
     * Set a new minimum zoom level for the view.
     * @param {number} zoom The minimum zoom level.
     * @api
     */
    View.prototype.setMinZoom = function setMinZoom (zoom) {
      this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));
    };

    /**
     * Get the view projection.
     * @return {import("./proj/Projection.js").default} The projection of the view.
     * @api
     */
    View.prototype.getProjection = function getProjection () {
      return this.projection_;
    };

    /**
     * Get the view resolution.
     * @return {number|undefined} The resolution of the view.
     * @observable
     * @api
     */
    View.prototype.getResolution = function getResolution () {
      return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));
    };

    /**
     * Get the resolutions for the view. This returns the array of resolutions
     * passed to the constructor of the View, or undefined if none were given.
     * @return {Array<number>|undefined} The resolutions of the view.
     * @api
     */
    View.prototype.getResolutions = function getResolutions () {
      return this.resolutions_;
    };

    /**
     * Get the resolution for a provided extent (in map units) and size (in pixels).
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {import("./size.js").Size=} opt_size Box pixel size.
     * @return {number} The resolution at which the provided extent will render at
     *     the given size.
     * @api
     */
    View.prototype.getResolutionForExtent = function getResolutionForExtent (extent, opt_size) {
      var size = opt_size || this.getSizeFromViewport_();
      var xResolution = getWidth(extent) / size[0];
      var yResolution = getHeight(extent) / size[1];
      return Math.max(xResolution, yResolution);
    };

    /**
     * Return a function that returns a value between 0 and 1 for a
     * resolution. Exponential scaling is assumed.
     * @param {number=} opt_power Power.
     * @return {function(number): number} Resolution for value function.
     */
    View.prototype.getResolutionForValueFunction = function getResolutionForValueFunction (opt_power) {
      var power = opt_power || 2;
      var maxResolution = this.maxResolution_;
      var minResolution = this.minResolution_;
      var max = Math.log(maxResolution / minResolution) / Math.log(power);
      return (
        /**
         * @param {number} value Value.
         * @return {number} Resolution.
         */
        function(value) {
          var resolution = maxResolution / Math.pow(power, value * max);
          return resolution;
        });
    };

    /**
     * Get the view rotation.
     * @return {number} The rotation of the view in radians.
     * @observable
     * @api
     */
    View.prototype.getRotation = function getRotation () {
      return /** @type {number} */ (this.get(ViewProperty.ROTATION));
    };

    /**
     * Return a function that returns a resolution for a value between
     * 0 and 1. Exponential scaling is assumed.
     * @param {number=} opt_power Power.
     * @return {function(number): number} Value for resolution function.
     */
    View.prototype.getValueForResolutionFunction = function getValueForResolutionFunction (opt_power) {
      var power = opt_power || 2;
      var maxResolution = this.maxResolution_;
      var minResolution = this.minResolution_;
      var max = Math.log(maxResolution / minResolution) / Math.log(power);
      return (
        /**
         * @param {number} resolution Resolution.
         * @return {number} Value.
         */
        function(resolution) {
          var value = (Math.log(maxResolution / resolution) / Math.log(power)) / max;
          return value;
        });
    };

    /**
     * @param {number} pixelRatio Pixel ratio for center rounding.
     * @return {State} View state.
     */
    View.prototype.getState = function getState (pixelRatio) {
      var center = /** @type {import("./coordinate.js").Coordinate} */ (this.getCenter());
      var projection = this.getProjection();
      var resolution = /** @type {number} */ (this.getResolution());
      var pixelResolution = resolution / pixelRatio;
      var rotation = this.getRotation();
      return (
        /** @type {State} */ ({
          center: [
            Math.round(center[0] / pixelResolution) * pixelResolution,
            Math.round(center[1] / pixelResolution) * pixelResolution
          ],
          projection: projection !== undefined ? projection : null,
          resolution: resolution,
          rotation: rotation,
          zoom: this.getZoom()
        })
      );
    };

    /**
     * Get the current zoom level.  If you configured your view with a resolutions
     * array (this is rare), this method may return non-integer zoom levels (so
     * the zoom level is not safe to use as an index into a resolutions array).
     * @return {number|undefined} Zoom.
     * @api
     */
    View.prototype.getZoom = function getZoom () {
      var zoom;
      var resolution = this.getResolution();
      if (resolution !== undefined) {
        zoom = this.getZoomForResolution(resolution);
      }
      return zoom;
    };

    /**
     * Get the zoom level for a resolution.
     * @param {number} resolution The resolution.
     * @return {number|undefined} The zoom level for the provided resolution.
     * @api
     */
    View.prototype.getZoomForResolution = function getZoomForResolution (resolution) {
      var offset = this.minZoom_ || 0;
      var max, zoomFactor;
      if (this.resolutions_) {
        var nearest = linearFindNearest(this.resolutions_, resolution, 1);
        offset = nearest;
        max = this.resolutions_[nearest];
        if (nearest == this.resolutions_.length - 1) {
          zoomFactor = 2;
        } else {
          zoomFactor = max / this.resolutions_[nearest + 1];
        }
      } else {
        max = this.maxResolution_;
        zoomFactor = this.zoomFactor_;
      }
      return offset + Math.log(max / resolution) / Math.log(zoomFactor);
    };

    /**
     * Get the resolution for a zoom level.
     * @param {number} zoom Zoom level.
     * @return {number} The view resolution for the provided zoom level.
     * @api
     */
    View.prototype.getResolutionForZoom = function getResolutionForZoom (zoom) {
      return /** @type {number} */ (this.constrainResolution(
        this.maxResolution_, zoom - this.minZoom_, 0));
    };

    /**
     * Fit the given geometry or extent based on the given map size and border.
     * The size is pixel dimensions of the box to fit the extent into.
     * In most cases you will want to use the map size, that is `map.getSize()`.
     * Takes care of the map angle.
     * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
     *     extent to fit the view to.
     * @param {FitOptions=} opt_options Options.
     * @api
     */
    View.prototype.fit = function fit (geometryOrExtent, opt_options) {
      var options = opt_options || {};
      var size = options.size;
      if (!size) {
        size = this.getSizeFromViewport_();
      }
      /** @type {import("./geom/SimpleGeometry.js").default} */
      var geometry;
      assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ (geometryOrExtent).getSimplifiedGeometry === 'function',
        24); // Invalid extent or geometry provided as `geometry`
      if (Array.isArray(geometryOrExtent)) {
        assert(!isEmpty$1(geometryOrExtent),
          25); // Cannot fit empty extent provided as `geometry`
        geometry = fromExtent(geometryOrExtent);
      } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {
        geometryOrExtent = geometryOrExtent.getExtent();
        geometry = fromExtent(geometryOrExtent);
        geometry.rotate(this.getRotation(), getCenter(geometryOrExtent));
      } else {
        geometry = geometryOrExtent;
      }

      var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];
      var constrainResolution = options.constrainResolution !== undefined ?
        options.constrainResolution : true;
      var nearest = options.nearest !== undefined ? options.nearest : false;
      var minResolution;
      if (options.minResolution !== undefined) {
        minResolution = options.minResolution;
      } else if (options.maxZoom !== undefined) {
        minResolution = this.constrainResolution(
          this.maxResolution_, options.maxZoom - this.minZoom_, 0);
      } else {
        minResolution = 0;
      }
      var coords = geometry.getFlatCoordinates();

      // calculate rotated extent
      var rotation = this.getRotation();
      var cosAngle = Math.cos(-rotation);
      var sinAngle = Math.sin(-rotation);
      var minRotX = +Infinity;
      var minRotY = +Infinity;
      var maxRotX = -Infinity;
      var maxRotY = -Infinity;
      var stride = geometry.getStride();
      for (var i = 0, ii = coords.length; i < ii; i += stride) {
        var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
        var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
        minRotX = Math.min(minRotX, rotX);
        minRotY = Math.min(minRotY, rotY);
        maxRotX = Math.max(maxRotX, rotX);
        maxRotY = Math.max(maxRotY, rotY);
      }

      // calculate resolution
      var resolution = this.getResolutionForExtent(
        [minRotX, minRotY, maxRotX, maxRotY],
        [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);
      resolution = isNaN(resolution) ? minResolution :
        Math.max(resolution, minResolution);
      if (constrainResolution) {
        var constrainedResolution = this.constrainResolution(resolution, 0, 0);
        if (!nearest && constrainedResolution < resolution) {
          constrainedResolution = this.constrainResolution(
            constrainedResolution, -1, 0);
        }
        resolution = constrainedResolution;
      }

      // calculate center
      sinAngle = -sinAngle; // go back to original rotation
      var centerRotX = (minRotX + maxRotX) / 2;
      var centerRotY = (minRotY + maxRotY) / 2;
      centerRotX += (padding[1] - padding[3]) / 2 * resolution;
      centerRotY += (padding[0] - padding[2]) / 2 * resolution;
      var centerX = centerRotX * cosAngle - centerRotY * sinAngle;
      var centerY = centerRotY * cosAngle + centerRotX * sinAngle;
      var center = [centerX, centerY];
      var callback = options.callback ? options.callback : VOID;

      if (options.duration !== undefined) {
        this.animate({
          resolution: resolution,
          center: center,
          duration: options.duration,
          easing: options.easing
        }, callback);
      } else {
        this.setResolution(resolution);
        this.setCenter(center);
        animationCallback(callback, true);
      }
    };

    /**
     * Center on coordinate and view position.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("./size.js").Size} size Box pixel size.
     * @param {import("./pixel.js").Pixel} position Position on the view to center on.
     * @api
     */
    View.prototype.centerOn = function centerOn (coordinate, size, position) {
      // calculate rotated position
      var rotation = this.getRotation();
      var cosAngle = Math.cos(-rotation);
      var sinAngle = Math.sin(-rotation);
      var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
      var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
      var resolution = this.getResolution();
      rotX += (size[0] / 2 - position[0]) * resolution;
      rotY += (position[1] - size[1] / 2) * resolution;

      // go back to original angle
      sinAngle = -sinAngle; // go back to original rotation
      var centerX = rotX * cosAngle - rotY * sinAngle;
      var centerY = rotY * cosAngle + rotX * sinAngle;

      this.setCenter([centerX, centerY]);
    };

    /**
     * @return {boolean} Is defined.
     */
    View.prototype.isDef = function isDef () {
      return !!this.getCenter() && this.getResolution() !== undefined;
    };

    /**
     * Rotate the view around a given coordinate.
     * @param {number} rotation New rotation value for the view.
     * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
     * @api
     */
    View.prototype.rotate = function rotate$$1 (rotation, opt_anchor) {
      if (opt_anchor !== undefined) {
        var center = this.calculateCenterRotate(rotation, opt_anchor);
        this.setCenter(center);
      }
      this.setRotation(rotation);
    };

    /**
     * Set the center of the current view.
     * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
     * @observable
     * @api
     */
    View.prototype.setCenter = function setCenter (center) {
      this.set(ViewProperty.CENTER, center);
      if (this.getAnimating()) {
        this.cancelAnimations();
      }
    };

    /**
     * @param {ViewHint} hint Hint.
     * @param {number} delta Delta.
     * @return {number} New value.
     */
    View.prototype.setHint = function setHint (hint, delta) {
      this.hints_[hint] += delta;
      this.changed();
      return this.hints_[hint];
    };

    /**
     * Set the resolution for this view.
     * @param {number|undefined} resolution The resolution of the view.
     * @observable
     * @api
     */
    View.prototype.setResolution = function setResolution (resolution) {
      this.set(ViewProperty.RESOLUTION, resolution);
      if (this.getAnimating()) {
        this.cancelAnimations();
      }
    };

    /**
     * Set the rotation for this view.
     * @param {number} rotation The rotation of the view in radians.
     * @observable
     * @api
     */
    View.prototype.setRotation = function setRotation (rotation) {
      this.set(ViewProperty.ROTATION, rotation);
      if (this.getAnimating()) {
        this.cancelAnimations();
      }
    };

    /**
     * Zoom to a specific zoom level.
     * @param {number} zoom Zoom level.
     * @api
     */
    View.prototype.setZoom = function setZoom (zoom) {
      this.setResolution(this.getResolutionForZoom(zoom));
    };

    return View;
  }(BaseObject));


  /**
   * @param {Function} callback Callback.
   * @param {*} returnValue Return value.
   */
  function animationCallback(callback, returnValue) {
    setTimeout(function() {
      callback(returnValue);
    }, 0);
  }


  /**
   * @param {ViewOptions} options View options.
   * @return {import("./centerconstraint.js").Type} The constraint.
   */
  function createCenterConstraint(options) {
    if (options.extent !== undefined) {
      return createExtent(options.extent);
    } else {
      return none;
    }
  }


  /**
   * @param {ViewOptions} options View options.
   * @return {{constraint: import("./resolutionconstraint.js").Type, maxResolution: number,
   *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.
   */
  function createResolutionConstraint(options) {
    var resolutionConstraint;
    var maxResolution;
    var minResolution;

    // TODO: move these to be ol constants
    // see https://github.com/openlayers/openlayers/issues/2076
    var defaultMaxZoom = 28;
    var defaultZoomFactor = 2;

    var minZoom = options.minZoom !== undefined ?
      options.minZoom : DEFAULT_MIN_ZOOM;

    var maxZoom = options.maxZoom !== undefined ?
      options.maxZoom : defaultMaxZoom;

    var zoomFactor = options.zoomFactor !== undefined ?
      options.zoomFactor : defaultZoomFactor;

    if (options.resolutions !== undefined) {
      var resolutions = options.resolutions;
      maxResolution = resolutions[minZoom];
      minResolution = resolutions[maxZoom] !== undefined ?
        resolutions[maxZoom] : resolutions[resolutions.length - 1];
      resolutionConstraint = createSnapToResolutions(
        resolutions);
    } else {
      // calculate the default min and max resolution
      var projection = createProjection(options.projection, 'EPSG:3857');
      var extent = projection.getExtent();
      var size = !extent ?
        // use an extent that can fit the whole world if need be
        360 * METERS_PER_UNIT[Units.DEGREES] /
              projection.getMetersPerUnit() :
        Math.max(getWidth(extent), getHeight(extent));

      var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(
        defaultZoomFactor, DEFAULT_MIN_ZOOM);

      var defaultMinResolution = defaultMaxResolution / Math.pow(
        defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);

      // user provided maxResolution takes precedence
      maxResolution = options.maxResolution;
      if (maxResolution !== undefined) {
        minZoom = 0;
      } else {
        maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
      }

      // user provided minResolution takes precedence
      minResolution = options.minResolution;
      if (minResolution === undefined) {
        if (options.maxZoom !== undefined) {
          if (options.maxResolution !== undefined) {
            minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
          } else {
            minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
          }
        } else {
          minResolution = defaultMinResolution;
        }
      }

      // given discrete zoom levels, minResolution may be different than provided
      maxZoom = minZoom + Math.floor(
        Math.log(maxResolution / minResolution) / Math.log(zoomFactor));
      minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);

      resolutionConstraint = createSnapToPower(
        zoomFactor, maxResolution, maxZoom - minZoom);
    }
    return {constraint: resolutionConstraint, maxResolution: maxResolution,
      minResolution: minResolution, minZoom: minZoom, zoomFactor: zoomFactor};
  }


  /**
   * @param {ViewOptions} options View options.
   * @return {import("./rotationconstraint.js").Type} Rotation constraint.
   */
  function createRotationConstraint(options) {
    var enableRotation = options.enableRotation !== undefined ?
      options.enableRotation : true;
    if (enableRotation) {
      var constrainRotation = options.constrainRotation;
      if (constrainRotation === undefined || constrainRotation === true) {
        return createSnapToZero();
      } else if (constrainRotation === false) {
        return none$1;
      } else if (typeof constrainRotation === 'number') {
        return createSnapToN(constrainRotation);
      } else {
        return none$1;
      }
    } else {
      return disable;
    }
  }


  /**
   * Determine if an animation involves no view change.
   * @param {Animation} animation The animation.
   * @return {boolean} The animation involves no view change.
   */
  function isNoopAnimation(animation) {
    if (animation.sourceCenter && animation.targetCenter) {
      if (!equals$1(animation.sourceCenter, animation.targetCenter)) {
        return false;
      }
    }
    if (animation.sourceResolution !== animation.targetResolution) {
      return false;
    }
    if (animation.sourceRotation !== animation.targetRotation) {
      return false;
    }
    return true;
  }

  /**
   * @module ol/dom
   */


  /**
   * Create an html canvas element and returns its 2d context.
   * @param {number=} opt_width Canvas width.
   * @param {number=} opt_height Canvas height.
   * @return {CanvasRenderingContext2D} The context.
   */
  function createCanvasContext2D(opt_width, opt_height) {
    var canvas = /** @type {HTMLCanvasElement} */ (document.createElement('canvas'));
    if (opt_width) {
      canvas.width = opt_width;
    }
    if (opt_height) {
      canvas.height = opt_height;
    }
    return /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));
  }


  /**
   * Get the current computed width for the given element including margin,
   * padding and border.
   * Equivalent to jQuery's `$(el).outerWidth(true)`.
   * @param {!HTMLElement} element Element.
   * @return {number} The width.
   */
  function outerWidth(element) {
    var width = element.offsetWidth;
    var style = getComputedStyle(element);
    width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);

    return width;
  }


  /**
   * Get the current computed height for the given element including margin,
   * padding and border.
   * Equivalent to jQuery's `$(el).outerHeight(true)`.
   * @param {!HTMLElement} element Element.
   * @return {number} The height.
   */
  function outerHeight(element) {
    var height = element.offsetHeight;
    var style = getComputedStyle(element);
    height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);

    return height;
  }

  /**
   * @param {Node} newNode Node to replace old node
   * @param {Node} oldNode The node to be replaced
   */
  function replaceNode(newNode, oldNode) {
    var parent = oldNode.parentNode;
    if (parent) {
      parent.replaceChild(newNode, oldNode);
    }
  }

  /**
   * @param {Node} node The node to remove.
   * @returns {Node} The node that was removed or null.
   */
  function removeNode(node) {
    return node && node.parentNode ? node.parentNode.removeChild(node) : null;
  }

  /**
   * @param {Node} node The node to remove the children from.
   */
  function removeChildren(node) {
    while (node.lastChild) {
      node.removeChild(node.lastChild);
    }
  }

  /**
   * @module ol/layer/Property
   */

  /**
   * @enum {string}
   */
  var LayerProperty = {
    OPACITY: 'opacity',
    VISIBLE: 'visible',
    EXTENT: 'extent',
    Z_INDEX: 'zIndex',
    MAX_RESOLUTION: 'maxResolution',
    MIN_RESOLUTION: 'minResolution',
    SOURCE: 'source'
  };

  /**
   * @module ol/layer/Base
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in
   * the options is set as a {@link module:ol/Object} property on the layer object, so
   * is observable, and has get/set accessors.
   *
   * @api
   */
  var BaseLayer = /*@__PURE__*/(function (BaseObject$$1) {
    function BaseLayer(options) {

      BaseObject$$1.call(this);

      /**
       * @type {Object<string, *>}
       */
      var properties = assign({}, options);
      properties[LayerProperty.OPACITY] =
         options.opacity !== undefined ? options.opacity : 1;
      properties[LayerProperty.VISIBLE] =
         options.visible !== undefined ? options.visible : true;
      properties[LayerProperty.Z_INDEX] = options.zIndex;
      properties[LayerProperty.MAX_RESOLUTION] =
         options.maxResolution !== undefined ? options.maxResolution : Infinity;
      properties[LayerProperty.MIN_RESOLUTION] =
         options.minResolution !== undefined ? options.minResolution : 0;

      this.setProperties(properties);

      /**
       * @type {import("./Layer.js").State}
       * @private
       */
      this.state_ = null;

      /**
       * The layer type.
       * @type {import("../LayerType.js").default}
       * @protected;
       */
      this.type;

    }

    if ( BaseObject$$1 ) BaseLayer.__proto__ = BaseObject$$1;
    BaseLayer.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    BaseLayer.prototype.constructor = BaseLayer;

    /**
     * Get the layer type (used when creating a layer renderer).
     * @return {import("../LayerType.js").default} The layer type.
     */
    BaseLayer.prototype.getType = function getType () {
      return this.type;
    };

    /**
     * @return {import("./Layer.js").State} Layer state.
     */
    BaseLayer.prototype.getLayerState = function getLayerState () {
      /** @type {import("./Layer.js").State} */
      var state = this.state_ || /** @type {?} */ ({
        layer: this,
        managed: true
      });
      state.opacity = clamp(this.getOpacity(), 0, 1);
      state.sourceState = this.getSourceState();
      state.visible = this.getVisible();
      state.extent = this.getExtent();
      state.zIndex = this.getZIndex() || 0;
      state.maxResolution = this.getMaxResolution();
      state.minResolution = Math.max(this.getMinResolution(), 0);
      this.state_ = state;

      return state;
    };

    /**
     * @abstract
     * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be
     *     modified in place).
     * @return {Array<import("./Layer.js").default>} Array of layers.
     */
    BaseLayer.prototype.getLayersArray = function getLayersArray (opt_array) {
      return abstract();
    };

    /**
     * @abstract
     * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer
     *     states (to be modified in place).
     * @return {Array<import("./Layer.js").State>} List of layer states.
     */
    BaseLayer.prototype.getLayerStatesArray = function getLayerStatesArray (opt_states) {
      return abstract();
    };

    /**
     * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
     * will be visible regardless of extent.
     * @return {import("../extent.js").Extent|undefined} The layer extent.
     * @observable
     * @api
     */
    BaseLayer.prototype.getExtent = function getExtent () {
      return (
        /** @type {import("../extent.js").Extent|undefined} */ (this.get(LayerProperty.EXTENT))
      );
    };

    /**
     * Return the maximum resolution of the layer.
     * @return {number} The maximum resolution of the layer.
     * @observable
     * @api
     */
    BaseLayer.prototype.getMaxResolution = function getMaxResolution () {
      return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));
    };

    /**
     * Return the minimum resolution of the layer.
     * @return {number} The minimum resolution of the layer.
     * @observable
     * @api
     */
    BaseLayer.prototype.getMinResolution = function getMinResolution () {
      return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));
    };

    /**
     * Return the opacity of the layer (between 0 and 1).
     * @return {number} The opacity of the layer.
     * @observable
     * @api
     */
    BaseLayer.prototype.getOpacity = function getOpacity () {
      return /** @type {number} */ (this.get(LayerProperty.OPACITY));
    };

    /**
     * @abstract
     * @return {import("../source/State.js").default} Source state.
     */
    BaseLayer.prototype.getSourceState = function getSourceState () {
      return abstract();
    };

    /**
     * Return the visibility of the layer (`true` or `false`).
     * @return {boolean} The visibility of the layer.
     * @observable
     * @api
     */
    BaseLayer.prototype.getVisible = function getVisible () {
      return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));
    };

    /**
     * Return the Z-index of the layer, which is used to order layers before
     * rendering. The default Z-index is 0.
     * @return {number} The Z-index of the layer.
     * @observable
     * @api
     */
    BaseLayer.prototype.getZIndex = function getZIndex () {
      return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));
    };

    /**
     * Set the extent at which the layer is visible.  If `undefined`, the layer
     * will be visible at all extents.
     * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
     * @observable
     * @api
     */
    BaseLayer.prototype.setExtent = function setExtent (extent) {
      this.set(LayerProperty.EXTENT, extent);
    };

    /**
     * Set the maximum resolution at which the layer is visible.
     * @param {number} maxResolution The maximum resolution of the layer.
     * @observable
     * @api
     */
    BaseLayer.prototype.setMaxResolution = function setMaxResolution (maxResolution) {
      this.set(LayerProperty.MAX_RESOLUTION, maxResolution);
    };

    /**
     * Set the minimum resolution at which the layer is visible.
     * @param {number} minResolution The minimum resolution of the layer.
     * @observable
     * @api
     */
    BaseLayer.prototype.setMinResolution = function setMinResolution (minResolution) {
      this.set(LayerProperty.MIN_RESOLUTION, minResolution);
    };

    /**
     * Set the opacity of the layer, allowed values range from 0 to 1.
     * @param {number} opacity The opacity of the layer.
     * @observable
     * @api
     */
    BaseLayer.prototype.setOpacity = function setOpacity (opacity) {
      this.set(LayerProperty.OPACITY, opacity);
    };

    /**
     * Set the visibility of the layer (`true` or `false`).
     * @param {boolean} visible The visibility of the layer.
     * @observable
     * @api
     */
    BaseLayer.prototype.setVisible = function setVisible (visible) {
      this.set(LayerProperty.VISIBLE, visible);
    };

    /**
     * Set Z-index of the layer, which is used to order layers before rendering.
     * The default Z-index is 0.
     * @param {number} zindex The z-index of the layer.
     * @observable
     * @api
     */
    BaseLayer.prototype.setZIndex = function setZIndex (zindex) {
      this.set(LayerProperty.Z_INDEX, zindex);
    };

    return BaseLayer;
  }(BaseObject));

  /**
   * @module ol/source/State
   */

  /**
   * @enum {string}
   * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
   */
  var SourceState = {
    UNDEFINED: 'undefined',
    LOADING: 'loading',
    READY: 'ready',
    ERROR: 'error'
  };

  /**
   * @module ol/layer/Group
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {Array<import("./Base.js").default>|import("../Collection.js").default<import("./Base.js").default>} [layers] Child layers.
   */


  /**
   * @enum {string}
   * @private
   */
  var Property$1 = {
    LAYERS: 'layers'
  };


  /**
   * @classdesc
   * A {@link module:ol/Collection~Collection} of layers that are handled together.
   *
   * A generic `change` event is triggered when the group/Collection changes.
   *
   * @api
   */
  var LayerGroup = /*@__PURE__*/(function (BaseLayer$$1) {
    function LayerGroup(opt_options) {

      var options = opt_options || {};
      var baseOptions = /** @type {Options} */ (assign({}, options));
      delete baseOptions.layers;

      var layers = options.layers;

      BaseLayer$$1.call(this, baseOptions);

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.layersListenerKeys_ = [];

      /**
       * @private
       * @type {Object<string, Array<import("../events.js").EventsKey>>}
       */
      this.listenerKeys_ = {};

      listen(this,
        getChangeEventType(Property$1.LAYERS),
        this.handleLayersChanged_, this);

      if (layers) {
        if (Array.isArray(layers)) {
          layers = new Collection(layers.slice(), {unique: true});
        } else {
          assert(typeof /** @type {?} */ (layers).getArray === 'function',
            43); // Expected `layers` to be an array or a `Collection`
        }
      } else {
        layers = new Collection(undefined, {unique: true});
      }

      this.setLayers(layers);

    }

    if ( BaseLayer$$1 ) LayerGroup.__proto__ = BaseLayer$$1;
    LayerGroup.prototype = Object.create( BaseLayer$$1 && BaseLayer$$1.prototype );
    LayerGroup.prototype.constructor = LayerGroup;

    /**
     * @private
     */
    LayerGroup.prototype.handleLayerChange_ = function handleLayerChange_ () {
      this.changed();
    };

    /**
     * @private
     */
    LayerGroup.prototype.handleLayersChanged_ = function handleLayersChanged_ () {
      this.layersListenerKeys_.forEach(unlistenByKey);
      this.layersListenerKeys_.length = 0;

      var layers = this.getLayers();
      this.layersListenerKeys_.push(
        listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this),
        listen(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this)
      );

      for (var id in this.listenerKeys_) {
        this.listenerKeys_[id].forEach(unlistenByKey);
      }
      clear(this.listenerKeys_);

      var layersArray = layers.getArray();
      for (var i = 0, ii = layersArray.length; i < ii; i++) {
        var layer = layersArray[i];
        this.listenerKeys_[getUid(layer)] = [
          listen(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
          listen(layer, EventType.CHANGE, this.handleLayerChange_, this)
        ];
      }

      this.changed();
    };

    /**
     * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
     * @private
     */
    LayerGroup.prototype.handleLayersAdd_ = function handleLayersAdd_ (collectionEvent) {
      var layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
      this.listenerKeys_[getUid(layer)] = [
        listen(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
        listen(layer, EventType.CHANGE, this.handleLayerChange_, this)
      ];
      this.changed();
    };

    /**
     * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
     * @private
     */
    LayerGroup.prototype.handleLayersRemove_ = function handleLayersRemove_ (collectionEvent) {
      var layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
      var key = getUid(layer);
      this.listenerKeys_[key].forEach(unlistenByKey);
      delete this.listenerKeys_[key];
      this.changed();
    };

    /**
     * Returns the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
     * in this group.
     * @return {!import("../Collection.js").default<import("./Base.js").default>} Collection of
     *   {@link module:ol/layer/Base layers} that are part of this group.
     * @observable
     * @api
     */
    LayerGroup.prototype.getLayers = function getLayers () {
      return (
        /** @type {!import("../Collection.js").default<import("./Base.js").default>} */ (this.get(Property$1.LAYERS))
      );
    };

    /**
     * Set the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
     * in this group.
     * @param {!import("../Collection.js").default<import("./Base.js").default>} layers Collection of
     *   {@link module:ol/layer/Base layers} that are part of this group.
     * @observable
     * @api
     */
    LayerGroup.prototype.setLayers = function setLayers (layers) {
      this.set(Property$1.LAYERS, layers);
    };

    /**
     * @inheritDoc
     */
    LayerGroup.prototype.getLayersArray = function getLayersArray (opt_array) {
      var array = opt_array !== undefined ? opt_array : [];
      this.getLayers().forEach(function(layer) {
        layer.getLayersArray(array);
      });
      return array;
    };

    /**
     * @inheritDoc
     */
    LayerGroup.prototype.getLayerStatesArray = function getLayerStatesArray (opt_states) {
      var states = opt_states !== undefined ? opt_states : [];

      var pos = states.length;

      this.getLayers().forEach(function(layer) {
        layer.getLayerStatesArray(states);
      });

      var ownLayerState = this.getLayerState();
      for (var i = pos, ii = states.length; i < ii; i++) {
        var layerState = states[i];
        layerState.opacity *= ownLayerState.opacity;
        layerState.visible = layerState.visible && ownLayerState.visible;
        layerState.maxResolution = Math.min(
          layerState.maxResolution, ownLayerState.maxResolution);
        layerState.minResolution = Math.max(
          layerState.minResolution, ownLayerState.minResolution);
        if (ownLayerState.extent !== undefined) {
          if (layerState.extent !== undefined) {
            layerState.extent = getIntersection(layerState.extent, ownLayerState.extent);
          } else {
            layerState.extent = ownLayerState.extent;
          }
        }
      }

      return states;
    };

    /**
     * @inheritDoc
     */
    LayerGroup.prototype.getSourceState = function getSourceState () {
      return SourceState.READY;
    };

    return LayerGroup;
  }(BaseLayer));

  /**
   * @module ol/size
   */


  /**
   * Determines if a size has a positive area.
   * @param {Size} size The size to test.
   * @return {boolean} The size has a positive area.
   */
  function hasArea(size) {
    return size[0] > 0 && size[1] > 0;
  }


  /**
   * Returns a size scaled by a ratio. The result will be an array of integers.
   * @param {Size} size Size.
   * @param {number} ratio Ratio.
   * @param {Size=} opt_size Optional reusable size array.
   * @return {Size} The scaled size.
   */
  function scale$3(size, ratio, opt_size) {
    if (opt_size === undefined) {
      opt_size = [0, 0];
    }
    opt_size[0] = (size[0] * ratio + 0.5) | 0;
    opt_size[1] = (size[1] * ratio + 0.5) | 0;
    return opt_size;
  }


  /**
   * Returns an `Size` array for the passed in number (meaning: square) or
   * `Size` array.
   * (meaning: non-square),
   * @param {number|Size} size Width and height.
   * @param {Size=} opt_size Optional reusable size array.
   * @return {Size} Size.
   * @api
   */
  function toSize(size, opt_size) {
    if (Array.isArray(size)) {
      return size;
    } else {
      if (opt_size === undefined) {
        opt_size = [size, size];
      } else {
        opt_size[0] = opt_size[1] = /** @type {number} */ (size);
      }
      return opt_size;
    }
  }

  /**
   * @module ol/PluggableMap
   */


  /**
   * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
   * be used in applications.
   * @typedef {Object} FrameState
   * @property {number} pixelRatio The pixel ratio of the frame.
   * @property {number} time The time when rendering of the frame was requested.
   * @property {import("./View.js").State} viewState The state of the current view.
   * @property {boolean} animate
   * @property {import("./transform.js").Transform} coordinateToPixelTransform
   * @property {null|import("./extent.js").Extent} extent
   * @property {import("./coordinate.js").Coordinate} focus
   * @property {number} index
   * @property {Object<string, import("./layer/Layer.js").State>} layerStates
   * @property {Array<import("./layer/Layer.js").State>} layerStatesArray
   * @property {import("./transform.js").Transform} pixelToCoordinateTransform
   * @property {Array<PostRenderFunction>} postRenderFunctions
   * @property {import("./size.js").Size} size
   * @property {!Object<string, boolean>} skippedFeatureUids
   * @property {TileQueue} tileQueue
   * @property {Object<string, Object<string, import("./TileRange.js").default>>} usedTiles
   * @property {Array<number>} viewHints
   * @property {!Object<string, Object<string, boolean>>} wantedTiles
   */


  /**
   * @typedef {function(PluggableMap, ?FrameState): boolean} PostRenderFunction
   */


  /**
   * @typedef {Object} AtPixelOptions
   * @property {undefined|function(import("./layer/Layer.js").default): boolean} layerFilter Layer filter
   * function. The filter function will receive one argument, the
   * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.
   * Only layers which are visible and for which this function returns `true`
   * will be tested for features. By default, all visible layers will be tested.
   * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels
   * inside the radius around the given position will be checked for features. This only
   * works for the canvas renderer and not for WebGL.
   */


  /**
   * @typedef {Object} MapOptionsInternal
   * @property {Collection<import("./control/Control.js").default>} [controls]
   * @property {Collection<import("./interaction/Interaction.js").default>} [interactions]
   * @property {HTMLElement|Document} keyboardEventTarget
   * @property {Collection<import("./Overlay.js").default>} overlays
   * @property {Object<string, *>} values
   */


  /**
   * Object literal with config options for the map.
   * @typedef {Object} MapOptions
   * @property {Collection<import("./control/Control.js").default>|Array<import("./control/Control.js").default>} [controls]
   * Controls initially added to the map. If not specified,
   * {@link module:ol/control~defaults} is used.
   * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
   * physical pixels and device-independent pixels (dips) on the device.
   * @property {Collection<import("./interaction/Interaction.js").default>|Array<import("./interaction/Interaction.js").default>} [interactions]
   * Interactions that are initially added to the map. If not specified,
   * {@link module:ol/interaction~defaults} is used.
   * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
   * listen to keyboard events on. This determines when the `KeyboardPan` and
   * `KeyboardZoom` interactions trigger. For example, if this option is set to
   * `document` the keyboard interactions will always trigger. If this option is
   * not specified, the element the library listens to keyboard events on is the
   * map target (i.e. the user-provided div for the map). If this is not
   * `document`, the target element needs to be focused for key events to be
   * emitted, requiring that the target element has a `tabindex` attribute.
   * @property {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>|LayerGroup} [layers]
   * Layers. If this is not defined, a map with no layers will be rendered. Note
   * that layers are rendered in the order supplied, so if you want, for example,
   * a vector layer to appear on top of a tile layer, it must come after the tile
   * layer.
   * @property {number} [maxTilesLoading=16] Maximum number tiles to load
   * simultaneously.
   * @property {boolean} [loadTilesWhileAnimating=false] When set to `true`, tiles
   * will be loaded during animations. This may improve the user experience, but
   * can also make animations stutter on devices with slow memory.
   * @property {boolean} [loadTilesWhileInteracting=false] When set to `true`,
   * tiles will be loaded while interacting with the map. This may improve the
   * user experience, but can also make map panning and zooming choppy on devices
   * with slow memory.
   * @property {number} [moveTolerance=1] The minimum distance in pixels the
   * cursor must move to be detected as a map move event instead of a click.
   * Increasing this value can make it easier to click on the map.
   * @property {Collection<import("./Overlay.js").default>|Array<import("./Overlay.js").default>} [overlays]
   * Overlays initially added to the map. By default, no overlays are added.
   * @property {HTMLElement|string} [target] The container for the map, either the
   * element itself or the `id` of the element. If not specified at construction
   * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
   * rendered.
   * @property {View} [view] The map's view.  No layer sources will be
   * fetched unless this is specified at construction time or through
   * {@link module:ol/Map~Map#setView}.
   */


  /**
   * @fires import("./MapBrowserEvent.js").MapBrowserEvent
   * @fires import("./MapEvent.js").MapEvent
   * @fires module:ol/render/Event~RenderEvent#postcompose
   * @fires module:ol/render/Event~RenderEvent#precompose
   * @fires module:ol/render/Event~RenderEvent#rendercomplete
   * @api
   */
  var PluggableMap = /*@__PURE__*/(function (BaseObject$$1) {
    function PluggableMap(options) {

      BaseObject$$1.call(this);

      var optionsInternal = createOptionsInternal(options);

      /**
       * @type {number}
       * @private
       */
      this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;

      /**
       * @type {boolean}
       * @private
       */
      this.loadTilesWhileAnimating_ =
          options.loadTilesWhileAnimating !== undefined ?
            options.loadTilesWhileAnimating : false;

      /**
       * @type {boolean}
       * @private
       */
      this.loadTilesWhileInteracting_ =
          options.loadTilesWhileInteracting !== undefined ?
            options.loadTilesWhileInteracting : false;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = options.pixelRatio !== undefined ?
        options.pixelRatio : DEVICE_PIXEL_RATIO;

      /**
       * @private
       * @type {number|undefined}
       */
      this.animationDelayKey_;

      /**
       * @private
       */
      this.animationDelay_ = function() {
        this.animationDelayKey_ = undefined;
        this.renderFrame_.call(this, Date.now());
      }.bind(this);

      /**
       * @private
       * @type {import("./transform.js").Transform}
       */
      this.coordinateToPixelTransform_ = create();

      /**
       * @private
       * @type {import("./transform.js").Transform}
       */
      this.pixelToCoordinateTransform_ = create();

      /**
       * @private
       * @type {number}
       */
      this.frameIndex_ = 0;

      /**
       * @private
       * @type {?FrameState}
       */
      this.frameState_ = null;

      /**
       * The extent at the previous 'moveend' event.
       * @private
       * @type {import("./extent.js").Extent}
       */
      this.previousExtent_ = null;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.viewPropertyListenerKey_ = null;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.viewChangeListenerKey_ = null;

      /**
       * @private
       * @type {Array<import("./events.js").EventsKey>}
       */
      this.layerGroupPropertyListenerKeys_ = null;

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.viewport_ = document.createElement('div');
      this.viewport_.className = 'ol-viewport' + (TOUCH ? ' ol-touch' : '');
      this.viewport_.style.position = 'relative';
      this.viewport_.style.overflow = 'hidden';
      this.viewport_.style.width = '100%';
      this.viewport_.style.height = '100%';
      // prevent page zoom on IE >= 10 browsers
      this.viewport_.style.msTouchAction = 'none';
      this.viewport_.style.touchAction = 'none';

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.overlayContainer_ = document.createElement('div');
      this.overlayContainer_.className = 'ol-overlaycontainer';
      this.viewport_.appendChild(this.overlayContainer_);

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.overlayContainerStopEvent_ = document.createElement('div');
      this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';
      var overlayEvents = [
        EventType.CLICK,
        EventType.DBLCLICK,
        EventType.MOUSEDOWN,
        EventType.TOUCHSTART,
        EventType.MSPOINTERDOWN,
        MapBrowserEventType.POINTERDOWN,
        EventType.MOUSEWHEEL,
        EventType.WHEEL
      ];
      for (var i = 0, ii = overlayEvents.length; i < ii; ++i) {
        listen(this.overlayContainerStopEvent_, overlayEvents[i], stopPropagation);
      }
      this.viewport_.appendChild(this.overlayContainerStopEvent_);

      /**
       * @private
       * @type {MapBrowserEventHandler}
       */
      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, options.moveTolerance);
      for (var key in MapBrowserEventType) {
        listen(this.mapBrowserEventHandler_, MapBrowserEventType[key],
          this.handleMapBrowserEvent, this);
      }

      /**
       * @private
       * @type {HTMLElement|Document}
       */
      this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;

      /**
       * @private
       * @type {Array<import("./events.js").EventsKey>}
       */
      this.keyHandlerKeys_ = null;

      listen(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);
      listen(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);
      listen(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);

      /**
       * @type {Collection<import("./control/Control.js").default>}
       * @protected
       */
      this.controls = optionsInternal.controls || new Collection();

      /**
       * @type {Collection<import("./interaction/Interaction.js").default>}
       * @protected
       */
      this.interactions = optionsInternal.interactions || new Collection();

      /**
       * @type {Collection<import("./Overlay.js").default>}
       * @private
       */
      this.overlays_ = optionsInternal.overlays;

      /**
       * A lookup of overlays by id.
       * @private
       * @type {Object<string, import("./Overlay.js").default>}
       */
      this.overlayIdIndex_ = {};

      /**
       * @type {import("./renderer/Map.js").default}
       * @private
       */
      this.renderer_ = this.createRenderer();

      /**
       * @type {function(Event)|undefined}
       * @private
       */
      this.handleResize_;

      /**
       * @private
       * @type {import("./coordinate.js").Coordinate}
       */
      this.focus_ = null;

      /**
       * @private
       * @type {!Array<PostRenderFunction>}
       */
      this.postRenderFunctions_ = [];

      /**
       * @private
       * @type {TileQueue}
       */
      this.tileQueue_ = new TileQueue(
        this.getTilePriority.bind(this),
        this.handleTileChange_.bind(this));

      /**
       * Uids of features to skip at rendering time.
       * @type {Object<string, boolean>}
       * @private
       */
      this.skippedFeatureUids_ = {};

      listen(
        this, getChangeEventType(MapProperty.LAYERGROUP),
        this.handleLayerGroupChanged_, this);
      listen(this, getChangeEventType(MapProperty.VIEW),
        this.handleViewChanged_, this);
      listen(this, getChangeEventType(MapProperty.SIZE),
        this.handleSizeChanged_, this);
      listen(this, getChangeEventType(MapProperty.TARGET),
        this.handleTargetChanged_, this);

      // setProperties will trigger the rendering of the map if the map
      // is "defined" already.
      this.setProperties(optionsInternal.values);

      this.controls.forEach(
        /**
         * @param {import("./control/Control.js").default} control Control.
         * @this {PluggableMap}
         */
        (function(control) {
          control.setMap(this);
        }).bind(this));

      listen(this.controls, CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          event.element.setMap(this);
        }, this);

      listen(this.controls, CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          event.element.setMap(null);
        }, this);

      this.interactions.forEach(
        /**
         * @param {import("./interaction/Interaction.js").default} interaction Interaction.
         * @this {PluggableMap}
         */
        (function(interaction) {
          interaction.setMap(this);
        }).bind(this));

      listen(this.interactions, CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          event.element.setMap(this);
        }, this);

      listen(this.interactions, CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          event.element.setMap(null);
        }, this);

      this.overlays_.forEach(this.addOverlayInternal_.bind(this));

      listen(this.overlays_, CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          this.addOverlayInternal_(/** @type {import("./Overlay.js").default} */ (event.element));
        }, this);

      listen(this.overlays_, CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */
        function(event) {
          var overlay = /** @type {import("./Overlay.js").default} */ (event.element);
          var id = overlay.getId();
          if (id !== undefined) {
            delete this.overlayIdIndex_[id.toString()];
          }
          event.element.setMap(null);
        }, this);

    }

    if ( BaseObject$$1 ) PluggableMap.__proto__ = BaseObject$$1;
    PluggableMap.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    PluggableMap.prototype.constructor = PluggableMap;

    /**
     * @abstract
     * @return {import("./renderer/Map.js").default} The map renderer
     */
    PluggableMap.prototype.createRenderer = function createRenderer () {
      throw new Error('Use a map type that has a createRenderer method');
    };

    /**
     * Add the given control to the map.
     * @param {import("./control/Control.js").default} control Control.
     * @api
     */
    PluggableMap.prototype.addControl = function addControl (control) {
      this.getControls().push(control);
    };

    /**
     * Add the given interaction to the map.
     * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
     * @api
     */
    PluggableMap.prototype.addInteraction = function addInteraction (interaction) {
      this.getInteractions().push(interaction);
    };

    /**
     * Adds the given layer to the top of this map. If you want to add a layer
     * elsewhere in the stack, use `getLayers()` and the methods available on
     * {@link module:ol/Collection~Collection}.
     * @param {import("./layer/Base.js").default} layer Layer.
     * @api
     */
    PluggableMap.prototype.addLayer = function addLayer (layer) {
      var layers = this.getLayerGroup().getLayers();
      layers.push(layer);
    };

    /**
     * Add the given overlay to the map.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @api
     */
    PluggableMap.prototype.addOverlay = function addOverlay (overlay) {
      this.getOverlays().push(overlay);
    };

    /**
     * This deals with map's overlay collection changes.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @private
     */
    PluggableMap.prototype.addOverlayInternal_ = function addOverlayInternal_ (overlay) {
      var id = overlay.getId();
      if (id !== undefined) {
        this.overlayIdIndex_[id.toString()] = overlay;
      }
      overlay.setMap(this);
    };

    /**
     *
     * @inheritDoc
     */
    PluggableMap.prototype.disposeInternal = function disposeInternal () {
      this.mapBrowserEventHandler_.dispose();
      unlisten(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);
      unlisten(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);
      unlisten(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);
      if (this.handleResize_ !== undefined) {
        removeEventListener(EventType.RESIZE, this.handleResize_, false);
        this.handleResize_ = undefined;
      }
      if (this.animationDelayKey_) {
        cancelAnimationFrame(this.animationDelayKey_);
        this.animationDelayKey_ = undefined;
      }
      this.setTarget(null);
      BaseObject$$1.prototype.disposeInternal.call(this);
    };

    /**
     * Detect features that intersect a pixel on the viewport, and execute a
     * callback with each intersecting feature. Layers included in the detection can
     * be configured through the `layerFilter` option in `opt_options`.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {function(this: S, import("./Feature.js").FeatureLike,
     *     import("./layer/Layer.js").default): T} callback Feature callback. The callback will be
     *     called with two arguments. The first argument is one
     *     {@link module:ol/Feature feature} or
     *     {@link module:ol/render/Feature render feature} at the pixel, the second is
     *     the {@link module:ol/layer/Layer layer} of the feature and will be null for
     *     unmanaged layers. To stop detection, callback functions can return a
     *     truthy value.
     * @param {AtPixelOptions=} opt_options Optional options.
     * @return {T|undefined} Callback result, i.e. the return value of last
     * callback execution, or the first truthy callback return value.
     * @template S,T
     * @api
     */
    PluggableMap.prototype.forEachFeatureAtPixel = function forEachFeatureAtPixel (pixel, callback, opt_options) {
      if (!this.frameState_) {
        return;
      }
      var coordinate = this.getCoordinateFromPixel(pixel);
      opt_options = opt_options !== undefined ? opt_options :
        /** @type {AtPixelOptions} */ ({});
      var hitTolerance = opt_options.hitTolerance !== undefined ?
        opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
      var layerFilter = opt_options.layerFilter !== undefined ?
        opt_options.layerFilter : TRUE;
      return this.renderer_.forEachFeatureAtCoordinate(
        coordinate, this.frameState_, hitTolerance, callback, null,
        layerFilter, null);
    };

    /**
     * Get all features that intersect a pixel on the viewport.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {AtPixelOptions=} opt_options Optional options.
     * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
     * `null` if none were found.
     * @api
     */
    PluggableMap.prototype.getFeaturesAtPixel = function getFeaturesAtPixel (pixel, opt_options) {
      var features = null;
      this.forEachFeatureAtPixel(pixel, function(feature) {
        if (!features) {
          features = [];
        }
        features.push(feature);
      }, opt_options);
      return features;
    };

    /**
     * Detect layers that have a color value at a pixel on the viewport, and
     * execute a callback with each matching layer. Layers included in the
     * detection can be configured through `opt_layerFilter`.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {function(this: S, import("./layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback
     *     Layer callback. This callback will receive two arguments: first is the
     *     {@link module:ol/layer/Layer layer}, second argument is an array representing
     *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types
     *     that do not currently support this argument. To stop detection, callback
     *     functions can return a truthy value.
     * @param {AtPixelOptions=} opt_options Configuration options.
     * @return {T|undefined} Callback result, i.e. the return value of last
     * callback execution, or the first truthy callback return value.
     * @template S,T
     * @api
     */
    PluggableMap.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, callback, opt_options) {
      if (!this.frameState_) {
        return;
      }
      var options = opt_options || /** @type {AtPixelOptions} */ ({});
      var hitTolerance = options.hitTolerance !== undefined ?
        opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
      var layerFilter = options.layerFilter || TRUE;
      return this.renderer_.forEachLayerAtPixel(
        pixel, this.frameState_, hitTolerance, callback, null, layerFilter, null);
    };

    /**
     * Detect if features intersect a pixel on the viewport. Layers included in the
     * detection can be configured through `opt_layerFilter`.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {AtPixelOptions=} opt_options Optional options.
     * @return {boolean} Is there a feature at the given pixel?
     * @template U
     * @api
     */
    PluggableMap.prototype.hasFeatureAtPixel = function hasFeatureAtPixel (pixel, opt_options) {
      if (!this.frameState_) {
        return false;
      }
      var coordinate = this.getCoordinateFromPixel(pixel);
      opt_options = opt_options !== undefined ? opt_options :
        /** @type {AtPixelOptions} */ ({});
      var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;
      var hitTolerance = opt_options.hitTolerance !== undefined ?
        opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
      return this.renderer_.hasFeatureAtCoordinate(
        coordinate, this.frameState_, hitTolerance, layerFilter, null);
    };

    /**
     * Returns the coordinate in view projection for a browser event.
     * @param {Event} event Event.
     * @return {import("./coordinate.js").Coordinate} Coordinate.
     * @api
     */
    PluggableMap.prototype.getEventCoordinate = function getEventCoordinate (event) {
      return this.getCoordinateFromPixel(this.getEventPixel(event));
    };

    /**
     * Returns the map pixel position for a browser event relative to the viewport.
     * @param {Event|TouchEvent} event Event.
     * @return {import("./pixel.js").Pixel} Pixel.
     * @api
     */
    PluggableMap.prototype.getEventPixel = function getEventPixel (event) {
      var viewportPosition = this.viewport_.getBoundingClientRect();
      var eventPosition = 'changedTouches' in event ?
        /** @type {TouchEvent} */ (event).changedTouches[0] :
        /** @type {MouseEvent} */ (event);

      return [
        eventPosition.clientX - viewportPosition.left,
        eventPosition.clientY - viewportPosition.top
      ];
    };

    /**
     * Get the target in which this map is rendered.
     * Note that this returns what is entered as an option or in setTarget:
     * if that was an element, it returns an element; if a string, it returns that.
     * @return {HTMLElement|string|undefined} The Element or id of the Element that the
     *     map is rendered in.
     * @observable
     * @api
     */
    PluggableMap.prototype.getTarget = function getTarget () {
      return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty.TARGET));
    };

    /**
     * Get the DOM element into which this map is rendered. In contrast to
     * `getTarget` this method always return an `Element`, or `null` if the
     * map has no target.
     * @return {HTMLElement} The element that the map is rendered in.
     * @api
     */
    PluggableMap.prototype.getTargetElement = function getTargetElement () {
      var target = this.getTarget();
      if (target !== undefined) {
        return typeof target === 'string' ? document.getElementById(target) : target;
      } else {
        return null;
      }
    };

    /**
     * Get the coordinate for a given pixel.  This returns a coordinate in the
     * map view projection.
     * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
     * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
     * @api
     */
    PluggableMap.prototype.getCoordinateFromPixel = function getCoordinateFromPixel (pixel) {
      var frameState = this.frameState_;
      if (!frameState) {
        return null;
      } else {
        return apply(frameState.pixelToCoordinateTransform, pixel.slice());
      }
    };

    /**
     * Get the map controls. Modifying this collection changes the controls
     * associated with the map.
     * @return {Collection<import("./control/Control.js").default>} Controls.
     * @api
     */
    PluggableMap.prototype.getControls = function getControls () {
      return this.controls;
    };

    /**
     * Get the map overlays. Modifying this collection changes the overlays
     * associated with the map.
     * @return {Collection<import("./Overlay.js").default>} Overlays.
     * @api
     */
    PluggableMap.prototype.getOverlays = function getOverlays () {
      return this.overlays_;
    };

    /**
     * Get an overlay by its identifier (the value returned by overlay.getId()).
     * Note that the index treats string and numeric identifiers as the same. So
     * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
     * @param {string|number} id Overlay identifier.
     * @return {import("./Overlay.js").default} Overlay.
     * @api
     */
    PluggableMap.prototype.getOverlayById = function getOverlayById (id) {
      var overlay = this.overlayIdIndex_[id.toString()];
      return overlay !== undefined ? overlay : null;
    };

    /**
     * Get the map interactions. Modifying this collection changes the interactions
     * associated with the map.
     *
     * Interactions are used for e.g. pan, zoom and rotate.
     * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
     * @api
     */
    PluggableMap.prototype.getInteractions = function getInteractions () {
      return this.interactions;
    };

    /**
     * Get the layergroup associated with this map.
     * @return {LayerGroup} A layer group containing the layers in this map.
     * @observable
     * @api
     */
    PluggableMap.prototype.getLayerGroup = function getLayerGroup () {
      return (
        /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP))
      );
    };

    /**
     * Get the collection of layers associated with this map.
     * @return {!Collection<import("./layer/Base.js").default>} Layers.
     * @api
     */
    PluggableMap.prototype.getLayers = function getLayers () {
      var layers = this.getLayerGroup().getLayers();
      return layers;
    };

    /**
     * Get the pixel for a coordinate.  This takes a coordinate in the map view
     * projection and returns the corresponding pixel.
     * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
     * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
     * @api
     */
    PluggableMap.prototype.getPixelFromCoordinate = function getPixelFromCoordinate (coordinate) {
      var frameState = this.frameState_;
      if (!frameState) {
        return null;
      } else {
        return apply(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));
      }
    };

    /**
     * Get the map renderer.
     * @return {import("./renderer/Map.js").default} Renderer
     */
    PluggableMap.prototype.getRenderer = function getRenderer () {
      return this.renderer_;
    };

    /**
     * Get the size of this map.
     * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
     * @observable
     * @api
     */
    PluggableMap.prototype.getSize = function getSize$$1 () {
      return (
        /** @type {import("./size.js").Size|undefined} */ (this.get(MapProperty.SIZE))
      );
    };

    /**
     * Get the view associated with this map. A view manages properties such as
     * center and resolution.
     * @return {View} The view that controls this map.
     * @observable
     * @api
     */
    PluggableMap.prototype.getView = function getView () {
      return (
        /** @type {View} */ (this.get(MapProperty.VIEW))
      );
    };

    /**
     * Get the element that serves as the map viewport.
     * @return {HTMLElement} Viewport.
     * @api
     */
    PluggableMap.prototype.getViewport = function getViewport () {
      return this.viewport_;
    };

    /**
     * Get the element that serves as the container for overlays.  Elements added to
     * this container will let mousedown and touchstart events through to the map,
     * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
     * events.
     * @return {!HTMLElement} The map's overlay container.
     */
    PluggableMap.prototype.getOverlayContainer = function getOverlayContainer () {
      return this.overlayContainer_;
    };

    /**
     * Get the element that serves as a container for overlays that don't allow
     * event propagation. Elements added to this container won't let mousedown and
     * touchstart events through to the map, so clicks and gestures on an overlay
     * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
     * @return {!HTMLElement} The map's overlay container that stops events.
     */
    PluggableMap.prototype.getOverlayContainerStopEvent = function getOverlayContainerStopEvent () {
      return this.overlayContainerStopEvent_;
    };

    /**
     * @param {import("./Tile.js").default} tile Tile.
     * @param {string} tileSourceKey Tile source key.
     * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
     * @param {number} tileResolution Tile resolution.
     * @return {number} Tile priority.
     */
    PluggableMap.prototype.getTilePriority = function getTilePriority (tile, tileSourceKey, tileCenter, tileResolution) {
      // Filter out tiles at higher zoom levels than the current zoom level, or that
      // are outside the visible extent.
      var frameState = this.frameState_;
      if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {
        return DROP;
      }
      if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {
        return DROP;
      }
      // Prioritize the highest zoom level tiles closest to the focus.
      // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
      // Within a zoom level, tiles are prioritized by the distance in pixels
      // between the center of the tile and the focus.  The factor of 65536 means
      // that the prioritization should behave as desired for tiles up to
      // 65536 * Math.log(2) = 45426 pixels from the focus.
      var deltaX = tileCenter[0] - frameState.focus[0];
      var deltaY = tileCenter[1] - frameState.focus[1];
      return 65536 * Math.log(tileResolution) +
          Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;
    };

    /**
     * @param {Event} browserEvent Browser event.
     * @param {string=} opt_type Type.
     */
    PluggableMap.prototype.handleBrowserEvent = function handleBrowserEvent (browserEvent, opt_type) {
      var type = opt_type || browserEvent.type;
      var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);
      this.handleMapBrowserEvent(mapBrowserEvent);
    };

    /**
     * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
     */
    PluggableMap.prototype.handleMapBrowserEvent = function handleMapBrowserEvent (mapBrowserEvent) {
      if (!this.frameState_) {
        // With no view defined, we cannot translate pixels into geographical
        // coordinates so interactions cannot be used.
        return;
      }
      this.focus_ = mapBrowserEvent.coordinate;
      mapBrowserEvent.frameState = this.frameState_;
      var interactionsArray = this.getInteractions().getArray();
      if (this.dispatchEvent(mapBrowserEvent) !== false) {
        for (var i = interactionsArray.length - 1; i >= 0; i--) {
          var interaction = interactionsArray[i];
          if (!interaction.getActive()) {
            continue;
          }
          var cont = interaction.handleEvent(mapBrowserEvent);
          if (!cont) {
            break;
          }
        }
      }
    };

    /**
     * @protected
     */
    PluggableMap.prototype.handlePostRender = function handlePostRender () {

      var frameState = this.frameState_;

      // Manage the tile queue
      // Image loads are expensive and a limited resource, so try to use them
      // efficiently:
      // * When the view is static we allow a large number of parallel tile loads
      //   to complete the frame as quickly as possible.
      // * When animating or interacting, image loads can cause janks, so we reduce
      //   the maximum number of loads per frame and limit the number of parallel
      //   tile loads to remain reactive to view changes and to reduce the chance of
      //   loading tiles that will quickly disappear from view.
      var tileQueue = this.tileQueue_;
      if (!tileQueue.isEmpty()) {
        var maxTotalLoading = this.maxTilesLoading_;
        var maxNewLoads = maxTotalLoading;
        if (frameState) {
          var hints = frameState.viewHints;
          if (hints[ViewHint.ANIMATING]) {
            maxTotalLoading = this.loadTilesWhileAnimating_ ? 8 : 0;
            maxNewLoads = 2;
          }
          if (hints[ViewHint.INTERACTING]) {
            maxTotalLoading = this.loadTilesWhileInteracting_ ? 8 : 0;
            maxNewLoads = 2;
          }
        }
        if (tileQueue.getTilesLoading() < maxTotalLoading) {
          tileQueue.reprioritize(); // FIXME only call if view has changed
          tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
        }
      }
      if (frameState && this.hasListener(RenderEventType.RENDERCOMPLETE) && !frameState.animate &&
          !this.tileQueue_.getTilesLoading() && !getLoading(this.getLayers().getArray())) {
        this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);
      }

      var postRenderFunctions = this.postRenderFunctions_;
      for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {
        postRenderFunctions[i](this, frameState);
      }
      postRenderFunctions.length = 0;
    };

    /**
     * @private
     */
    PluggableMap.prototype.handleSizeChanged_ = function handleSizeChanged_ () {
      this.render();
    };

    /**
     * @private
     */
    PluggableMap.prototype.handleTargetChanged_ = function handleTargetChanged_ () {
      // target may be undefined, null, a string or an Element.
      // If it's a string we convert it to an Element before proceeding.
      // If it's not now an Element we remove the viewport from the DOM.
      // If it's an Element we append the viewport element to it.

      var targetElement;
      if (this.getTarget()) {
        targetElement = this.getTargetElement();
      }

      if (this.keyHandlerKeys_) {
        for (var i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {
          unlistenByKey(this.keyHandlerKeys_[i]);
        }
        this.keyHandlerKeys_ = null;
      }

      if (!targetElement) {
        this.renderer_.removeLayerRenderers();
        removeNode(this.viewport_);
        if (this.handleResize_ !== undefined) {
          removeEventListener(EventType.RESIZE, this.handleResize_, false);
          this.handleResize_ = undefined;
        }
      } else {
        targetElement.appendChild(this.viewport_);

        var keyboardEventTarget = !this.keyboardEventTarget_ ?
          targetElement : this.keyboardEventTarget_;
        this.keyHandlerKeys_ = [
          listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this),
          listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)
        ];

        if (!this.handleResize_) {
          this.handleResize_ = this.updateSize.bind(this);
          addEventListener(EventType.RESIZE, this.handleResize_, false);
        }
      }

      this.updateSize();
      // updateSize calls setSize, so no need to call this.render
      // ourselves here.
    };

    /**
     * @private
     */
    PluggableMap.prototype.handleTileChange_ = function handleTileChange_ () {
      this.render();
    };

    /**
     * @private
     */
    PluggableMap.prototype.handleViewPropertyChanged_ = function handleViewPropertyChanged_ () {
      this.render();
    };

    /**
     * @private
     */
    PluggableMap.prototype.handleViewChanged_ = function handleViewChanged_ () {
      if (this.viewPropertyListenerKey_) {
        unlistenByKey(this.viewPropertyListenerKey_);
        this.viewPropertyListenerKey_ = null;
      }
      if (this.viewChangeListenerKey_) {
        unlistenByKey(this.viewChangeListenerKey_);
        this.viewChangeListenerKey_ = null;
      }
      var view = this.getView();
      if (view) {
        this.viewport_.setAttribute('data-view', getUid(view));
        this.viewPropertyListenerKey_ = listen(
          view, ObjectEventType.PROPERTYCHANGE,
          this.handleViewPropertyChanged_, this);
        this.viewChangeListenerKey_ = listen(
          view, EventType.CHANGE,
          this.handleViewPropertyChanged_, this);
      }
      this.render();
    };

    /**
     * @private
     */
    PluggableMap.prototype.handleLayerGroupChanged_ = function handleLayerGroupChanged_ () {
      if (this.layerGroupPropertyListenerKeys_) {
        this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);
        this.layerGroupPropertyListenerKeys_ = null;
      }
      var layerGroup = this.getLayerGroup();
      if (layerGroup) {
        this.layerGroupPropertyListenerKeys_ = [
          listen(
            layerGroup, ObjectEventType.PROPERTYCHANGE,
            this.render, this),
          listen(
            layerGroup, EventType.CHANGE,
            this.render, this)
        ];
      }
      this.render();
    };

    /**
     * @return {boolean} Is rendered.
     */
    PluggableMap.prototype.isRendered = function isRendered () {
      return !!this.frameState_;
    };

    /**
     * Requests an immediate render in a synchronous manner.
     * @api
     */
    PluggableMap.prototype.renderSync = function renderSync () {
      if (this.animationDelayKey_) {
        cancelAnimationFrame(this.animationDelayKey_);
      }
      this.animationDelay_();
    };

    /**
     * Request a map rendering (at the next animation frame).
     * @api
     */
    PluggableMap.prototype.render = function render () {
      if (this.animationDelayKey_ === undefined) {
        this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
      }
    };

    /**
     * Remove the given control from the map.
     * @param {import("./control/Control.js").default} control Control.
     * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
     *     if the control was not found).
     * @api
     */
    PluggableMap.prototype.removeControl = function removeControl (control) {
      return this.getControls().remove(control);
    };

    /**
     * Remove the given interaction from the map.
     * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
     * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
     *     undefined if the interaction was not found).
     * @api
     */
    PluggableMap.prototype.removeInteraction = function removeInteraction (interaction) {
      return this.getInteractions().remove(interaction);
    };

    /**
     * Removes the given layer from the map.
     * @param {import("./layer/Base.js").default} layer Layer.
     * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
     *     layer was not found).
     * @api
     */
    PluggableMap.prototype.removeLayer = function removeLayer (layer) {
      var layers = this.getLayerGroup().getLayers();
      return layers.remove(layer);
    };

    /**
     * Remove the given overlay from the map.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
     *     if the overlay was not found).
     * @api
     */
    PluggableMap.prototype.removeOverlay = function removeOverlay (overlay) {
      return this.getOverlays().remove(overlay);
    };

    /**
     * @param {number} time Time.
     * @private
     */
    PluggableMap.prototype.renderFrame_ = function renderFrame_ (time) {
      var viewState;

      var size = this.getSize();
      var view = this.getView();
      var extent = createEmpty();
      var previousFrameState = this.frameState_;
      /** @type {?FrameState} */
      var frameState = null;
      if (size !== undefined && hasArea(size) && view && view.isDef()) {
        var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);
        var layerStatesArray = this.getLayerGroup().getLayerStatesArray();
        var layerStates = {};
        for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
          layerStates[getUid(layerStatesArray[i].layer)] = layerStatesArray[i];
        }
        viewState = view.getState(this.pixelRatio_);
        frameState = /** @type {FrameState} */ ({
          animate: false,
          coordinateToPixelTransform: this.coordinateToPixelTransform_,
          extent: extent,
          focus: this.focus_ ? this.focus_ : viewState.center,
          index: this.frameIndex_++,
          layerStates: layerStates,
          layerStatesArray: layerStatesArray,
          pixelRatio: this.pixelRatio_,
          pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
          postRenderFunctions: [],
          size: size,
          skippedFeatureUids: this.skippedFeatureUids_,
          tileQueue: this.tileQueue_,
          time: time,
          usedTiles: {},
          viewState: viewState,
          viewHints: viewHints,
          wantedTiles: {}
        });
      }

      if (frameState) {
        frameState.extent = getForViewAndSize(viewState.center,
          viewState.resolution, viewState.rotation, frameState.size, extent);
      }

      this.frameState_ = frameState;
      this.renderer_.renderFrame(frameState);

      if (frameState) {
        if (frameState.animate) {
          this.render();
        }
        Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);

        if (previousFrameState) {
          var moveStart = !this.previousExtent_ ||
                      (!isEmpty$1(this.previousExtent_) &&
                      !equals$2(frameState.extent, this.previousExtent_));
          if (moveStart) {
            this.dispatchEvent(
              new MapEvent(MapEventType.MOVESTART, this, previousFrameState));
            this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);
          }
        }

        var idle = this.previousExtent_ &&
            !frameState.viewHints[ViewHint.ANIMATING] &&
            !frameState.viewHints[ViewHint.INTERACTING] &&
            !equals$2(frameState.extent, this.previousExtent_);

        if (idle) {
          this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));
          clone(frameState.extent, this.previousExtent_);
        }
      }

      this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));

      setTimeout(this.handlePostRender.bind(this), 0);

    };

    /**
     * Sets the layergroup of this map.
     * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
     * @observable
     * @api
     */
    PluggableMap.prototype.setLayerGroup = function setLayerGroup (layerGroup) {
      this.set(MapProperty.LAYERGROUP, layerGroup);
    };

    /**
     * Set the size of this map.
     * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
     * @observable
     * @api
     */
    PluggableMap.prototype.setSize = function setSize (size) {
      this.set(MapProperty.SIZE, size);
    };

    /**
     * Set the target element to render this map into.
     * @param {HTMLElement|string|undefined} target The Element or id of the Element
     *     that the map is rendered in.
     * @observable
     * @api
     */
    PluggableMap.prototype.setTarget = function setTarget (target) {
      this.set(MapProperty.TARGET, target);
    };

    /**
     * Set the view for this map.
     * @param {View} view The view that controls this map.
     * @observable
     * @api
     */
    PluggableMap.prototype.setView = function setView (view) {
      this.set(MapProperty.VIEW, view);
    };

    /**
     * @param {import("./Feature.js").default} feature Feature.
     */
    PluggableMap.prototype.skipFeature = function skipFeature (feature) {
      this.skippedFeatureUids_[getUid(feature)] = true;
      this.render();
    };

    /**
     * Force a recalculation of the map viewport size.  This should be called when
     * third-party code changes the size of the map viewport.
     * @api
     */
    PluggableMap.prototype.updateSize = function updateSize () {
      var targetElement = this.getTargetElement();

      if (!targetElement) {
        this.setSize(undefined);
      } else {
        var computedStyle = getComputedStyle(targetElement);
        this.setSize([
          targetElement.offsetWidth -
              parseFloat(computedStyle['borderLeftWidth']) -
              parseFloat(computedStyle['paddingLeft']) -
              parseFloat(computedStyle['paddingRight']) -
              parseFloat(computedStyle['borderRightWidth']),
          targetElement.offsetHeight -
              parseFloat(computedStyle['borderTopWidth']) -
              parseFloat(computedStyle['paddingTop']) -
              parseFloat(computedStyle['paddingBottom']) -
              parseFloat(computedStyle['borderBottomWidth'])
        ]);
      }
    };

    /**
     * @param {import("./Feature.js").default} feature Feature.
     */
    PluggableMap.prototype.unskipFeature = function unskipFeature (feature) {
      delete this.skippedFeatureUids_[getUid(feature)];
      this.render();
    };

    return PluggableMap;
  }(BaseObject));


  /**
   * @param {MapOptions} options Map options.
   * @return {MapOptionsInternal} Internal map options.
   */
  function createOptionsInternal(options) {

    /**
     * @type {HTMLElement|Document}
     */
    var keyboardEventTarget = null;
    if (options.keyboardEventTarget !== undefined) {
      keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ?
        document.getElementById(options.keyboardEventTarget) :
        options.keyboardEventTarget;
    }

    /**
     * @type {Object<string, *>}
     */
    var values = {};

    var layerGroup = options.layers && typeof /** @type {?} */ (options.layers).getLayers === 'function' ?
      /** @type {LayerGroup} */ (options.layers) : new LayerGroup({layers: /** @type {Collection} */ (options.layers)});
    values[MapProperty.LAYERGROUP] = layerGroup;

    values[MapProperty.TARGET] = options.target;

    values[MapProperty.VIEW] = options.view !== undefined ?
      options.view : new View();

    var controls;
    if (options.controls !== undefined) {
      if (Array.isArray(options.controls)) {
        controls = new Collection(options.controls.slice());
      } else {
        assert(typeof /** @type {?} */ (options.controls).getArray === 'function',
          47); // Expected `controls` to be an array or an `import("./Collection.js").Collection`
        controls = /** @type {Collection} */ (options.controls);
      }
    }

    var interactions;
    if (options.interactions !== undefined) {
      if (Array.isArray(options.interactions)) {
        interactions = new Collection(options.interactions.slice());
      } else {
        assert(typeof /** @type {?} */ (options.interactions).getArray === 'function',
          48); // Expected `interactions` to be an array or an `import("./Collection.js").Collection`
        interactions = /** @type {Collection} */ (options.interactions);
      }
    }

    var overlays;
    if (options.overlays !== undefined) {
      if (Array.isArray(options.overlays)) {
        overlays = new Collection(options.overlays.slice());
      } else {
        assert(typeof /** @type {?} */ (options.overlays).getArray === 'function',
          49); // Expected `overlays` to be an array or an `import("./Collection.js").Collection`
        overlays = options.overlays;
      }
    } else {
      overlays = new Collection();
    }

    return {
      controls: controls,
      interactions: interactions,
      keyboardEventTarget: keyboardEventTarget,
      overlays: overlays,
      values: values
    };

  }

  /**
   * @param  {Array<import("./layer/Base.js").default>} layers Layers.
   * @return {boolean} Layers have sources that are still loading.
   */
  function getLoading(layers) {
    for (var i = 0, ii = layers.length; i < ii; ++i) {
      var layer = layers[i];
      if (typeof /** @type {?} */ (layer).getLayers === 'function') {
        return getLoading(/** @type {LayerGroup} */ (layer).getLayers().getArray());
      } else {
        var source = /** @type {import("./layer/Layer.js").default} */ (
          layer).getSource();
        if (source && source.loading) {
          return true;
        }
      }
    }
    return false;
  }

  /**
   * @module ol/control/Control
   */


  /**
   * @typedef {Object} Options
   * @property {HTMLElement} [element] The element is the control's
   * container element. This only needs to be specified if you're developing
   * a custom control.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when
   * the control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   * @property {HTMLElement|string} [target] Specify a target if you want
   * the control to be rendered outside of the map's viewport.
   */


  /**
   * @classdesc
   * A control is a visible widget with a DOM element in a fixed position on the
   * screen. They can involve user input (buttons), or be informational only;
   * the position is determined using CSS. By default these are placed in the
   * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
   * any outside DOM element.
   *
   * This is the base class for controls. You can use it for simple custom
   * controls by creating the element with listeners, creating an instance:
   * ```js
   * var myControl = new Control({element: myElement});
   * ```
   * and then adding this to the map.
   *
   * The main advantage of having this as a control rather than a simple separate
   * DOM element is that preventing propagation is handled for you. Controls
   * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
   *
   * You can also extend this base for your own control class. See
   * examples/custom-controls for an example of how to do this.
   *
   * @api
   */
  var Control = /*@__PURE__*/(function (BaseObject$$1) {
    function Control(options) {

      BaseObject$$1.call(this);

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.element = options.element ? options.element : null;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.target_ = null;

      /**
       * @private
       * @type {import("../PluggableMap.js").default}
       */
      this.map_ = null;

      /**
       * @protected
       * @type {!Array<import("../events.js").EventsKey>}
       */
      this.listenerKeys = [];

      /**
       * @type {function(import("../MapEvent.js").default)}
       */
      this.render = options.render ? options.render : VOID;

      if (options.target) {
        this.setTarget(options.target);
      }

    }

    if ( BaseObject$$1 ) Control.__proto__ = BaseObject$$1;
    Control.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Control.prototype.constructor = Control;

    /**
     * @inheritDoc
     */
    Control.prototype.disposeInternal = function disposeInternal () {
      removeNode(this.element);
      BaseObject$$1.prototype.disposeInternal.call(this);
    };

    /**
     * Get the map associated with this control.
     * @return {import("../PluggableMap.js").default} Map.
     * @api
     */
    Control.prototype.getMap = function getMap () {
      return this.map_;
    };

    /**
     * Remove the control from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default} map Map.
     * @api
     */
    Control.prototype.setMap = function setMap (map) {
      if (this.map_) {
        removeNode(this.element);
      }
      for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {
        unlistenByKey(this.listenerKeys[i]);
      }
      this.listenerKeys.length = 0;
      this.map_ = map;
      if (this.map_) {
        var target = this.target_ ?
          this.target_ : map.getOverlayContainerStopEvent();
        target.appendChild(this.element);
        if (this.render !== VOID) {
          this.listenerKeys.push(listen(map,
            MapEventType.POSTRENDER, this.render, this));
        }
        map.render();
      }
    };

    /**
     * This function is used to set a target element for the control. It has no
     * effect if it is called after the control has been added to the map (i.e.
     * after `setMap` is called on the control). If no `target` is set in the
     * options passed to the control constructor and if `setTarget` is not called
     * then the control is added to the map's overlay container.
     * @param {HTMLElement|string} target Target.
     * @api
     */
    Control.prototype.setTarget = function setTarget (target) {
      this.target_ = typeof target === 'string' ?
        document.getElementById(target) :
        target;
    };

    return Control;
  }(BaseObject));

  /**
   * @module ol/css
   */


  /**
   * The CSS class for hidden feature.
   *
   * @const
   * @type {string}
   */
  var CLASS_HIDDEN = 'ol-hidden';


  /**
   * The CSS class that we'll give the DOM elements to have them selectable.
   *
   * @const
   * @type {string}
   */
  var CLASS_SELECTABLE = 'ol-selectable';


  /**
   * The CSS class that we'll give the DOM elements to have them unselectable.
   *
   * @const
   * @type {string}
   */
  var CLASS_UNSELECTABLE = 'ol-unselectable';


  /**
   * The CSS class for unsupported feature.
   *
   * @const
   * @type {string}
   */
  var CLASS_UNSUPPORTED = 'ol-unsupported';


  /**
   * The CSS class for controls.
   *
   * @const
   * @type {string}
   */
  var CLASS_CONTROL = 'ol-control';


  /**
   * The CSS class that we'll give the DOM elements that are collapsed, i.e.
   * to those elements which usually can be expanded.
   *
   * @const
   * @type {string}
   */
  var CLASS_COLLAPSED = 'ol-collapsed';


  /**
   * Get the list of font families from a font spec.  Note that this doesn't work
   * for font families that have commas in them.
   * @param {string} The CSS font property.
   * @return {Object<string>} The font families (or null if the input spec is invalid).
   */
  var getFontFamilies = (function() {
    var style;
    var cache = {};
    return function(font) {
      if (!style) {
        style = document.createElement('div').style;
      }
      if (!(font in cache)) {
        style.font = font;
        var family = style.fontFamily;
        style.font = '';
        if (!family) {
          return null;
        }
        cache[font] = family.split(/,\s?/);
      }
      return cache[font];
    };
  })();

  /**
   * @module ol/layer/Layer
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {import("../source/Source.js").default} [source] Source for this layer.  If not provided to the constructor,
   * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after
   * construction.
   * @property {import("../PluggableMap.js").default} [map] Map.
   */


  /**
   * @typedef {Object} State
   * @property {import("./Base.js").default} layer
   * @property {number} opacity
   * @property {SourceState} sourceState
   * @property {boolean} visible
   * @property {boolean} managed
   * @property {import("../extent.js").Extent} [extent]
   * @property {number} zIndex
   * @property {number} maxResolution
   * @property {number} minResolution
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * A visual representation of raster or vector map data.
   * Layers group together those properties that pertain to how the data is to be
   * displayed, irrespective of the source of that data.
   *
   * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components
   * like {@link module:ol/interaction/Select~Select} use unmanaged layers
   * internally. These unmanaged layers are associated with the map using
   * {@link module:ol/layer/Layer~Layer#setMap} instead.
   *
   * A generic `change` event is fired when the state of the source changes.
   *
   * @fires import("../render/Event.js").RenderEvent
   */
  var Layer = /*@__PURE__*/(function (BaseLayer$$1) {
    function Layer(options) {

      var baseOptions = assign({}, options);
      delete baseOptions.source;

      BaseLayer$$1.call(this, baseOptions);

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.mapPrecomposeKey_ = null;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.mapRenderKey_ = null;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.sourceChangeKey_ = null;

      if (options.map) {
        this.setMap(options.map);
      }

      listen(this,
        getChangeEventType(LayerProperty.SOURCE),
        this.handleSourcePropertyChange_, this);

      var source = options.source ? options.source : null;
      this.setSource(source);
    }

    if ( BaseLayer$$1 ) Layer.__proto__ = BaseLayer$$1;
    Layer.prototype = Object.create( BaseLayer$$1 && BaseLayer$$1.prototype );
    Layer.prototype.constructor = Layer;

    /**
     * @inheritDoc
     */
    Layer.prototype.getLayersArray = function getLayersArray (opt_array) {
      var array = opt_array ? opt_array : [];
      array.push(this);
      return array;
    };

    /**
     * @inheritDoc
     */
    Layer.prototype.getLayerStatesArray = function getLayerStatesArray (opt_states) {
      var states = opt_states ? opt_states : [];
      states.push(this.getLayerState());
      return states;
    };

    /**
     * Get the layer source.
     * @return {import("../source/Source.js").default} The layer source (or `null` if not yet set).
     * @observable
     * @api
     */
    Layer.prototype.getSource = function getSource () {
      var source = this.get(LayerProperty.SOURCE);
      return (
        /** @type {import("../source/Source.js").default} */ (source) || null
      );
    };

    /**
      * @inheritDoc
      */
    Layer.prototype.getSourceState = function getSourceState () {
      var source = this.getSource();
      return !source ? SourceState.UNDEFINED : source.getState();
    };

    /**
     * @private
     */
    Layer.prototype.handleSourceChange_ = function handleSourceChange_ () {
      this.changed();
    };

    /**
     * @private
     */
    Layer.prototype.handleSourcePropertyChange_ = function handleSourcePropertyChange_ () {
      if (this.sourceChangeKey_) {
        unlistenByKey(this.sourceChangeKey_);
        this.sourceChangeKey_ = null;
      }
      var source = this.getSource();
      if (source) {
        this.sourceChangeKey_ = listen(source,
          EventType.CHANGE, this.handleSourceChange_, this);
      }
      this.changed();
    };

    /**
     * Sets the layer to be rendered on top of other layers on a map. The map will
     * not manage this layer in its layers collection, and the callback in
     * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This
     * is useful for temporary layers. To remove an unmanaged layer from the map,
     * use `#setMap(null)`.
     *
     * To add the layer to a map and have it managed by the map, use
     * {@link module:ol/Map#addLayer} instead.
     * @param {import("../PluggableMap.js").default} map Map.
     * @api
     */
    Layer.prototype.setMap = function setMap (map) {
      if (this.mapPrecomposeKey_) {
        unlistenByKey(this.mapPrecomposeKey_);
        this.mapPrecomposeKey_ = null;
      }
      if (!map) {
        this.changed();
      }
      if (this.mapRenderKey_) {
        unlistenByKey(this.mapRenderKey_);
        this.mapRenderKey_ = null;
      }
      if (map) {
        this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function(evt) {
          var renderEvent = /** @type {import("../render/Event.js").default} */ (evt);
          var layerState = this.getLayerState();
          layerState.managed = false;
          if (this.getZIndex() === undefined) {
            layerState.zIndex = Infinity;
          }
          renderEvent.frameState.layerStatesArray.push(layerState);
          renderEvent.frameState.layerStates[getUid(this)] = layerState;
        }, this);
        this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);
        this.changed();
      }
    };

    /**
     * Set the layer source.
     * @param {import("../source/Source.js").default} source The layer source.
     * @observable
     * @api
     */
    Layer.prototype.setSource = function setSource (source) {
      this.set(LayerProperty.SOURCE, source);
    };

    return Layer;
  }(BaseLayer));


  /**
   * Return `true` if the layer is visible, and if the passed resolution is
   * between the layer's minResolution and maxResolution. The comparison is
   * inclusive for `minResolution` and exclusive for `maxResolution`.
   * @param {State} layerState Layer state.
   * @param {number} resolution Resolution.
   * @return {boolean} The layer is visible at the given resolution.
   */
  function visibleAtResolution(layerState, resolution) {
    return layerState.visible && resolution >= layerState.minResolution &&
        resolution < layerState.maxResolution;
  }

  /**
   * @module ol/control/Attribution
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-attribution'] CSS class name.
   * @property {HTMLElement|string} [target] Specify a target if you
   * want the control to be rendered outside of the map's
   * viewport.
   * @property {boolean} [collapsible] Specify if attributions can
   * be collapsed. If not specified, sources control this behavior with their
   * `attributionsCollapsible` setting.
   * @property {boolean} [collapsed=true] Specify if attributions should
   * be collapsed at startup.
   * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
   * @property {string} [label='i'] Text label to use for the
   * collapsed attributions button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|HTMLElement} [collapseLabel='»'] Text label to use
   * for the expanded attributions button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when
   * the control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   */


  /**
   * @classdesc
   * Control to show all the attributions associated with the layer sources
   * in the map. This control is one of the default controls included in maps.
   * By default it will show in the bottom right portion of the map, but this can
   * be changed by using a css selector for `.ol-attribution`.
   *
   * @api
   */
  var Attribution = /*@__PURE__*/(function (Control$$1) {
    function Attribution(opt_options) {

      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        render: options.render || render,
        target: options.target
      });

      /**
       * @private
       * @type {HTMLElement}
       */
      this.ulElement_ = document.createElement('ul');

      /**
       * @private
       * @type {boolean}
       */
      this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;

      /**
       * @private
       * @type {boolean}
       */
      this.overrideCollapsible_ = options.collapsible !== undefined;

      /**
       * @private
       * @type {boolean}
       */
      this.collapsible_ = options.collapsible !== undefined ?
        options.collapsible : true;

      if (!this.collapsible_) {
        this.collapsed_ = false;
      }

      var className = options.className !== undefined ? options.className : 'ol-attribution';

      var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';

      var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00BB';

      if (typeof collapseLabel === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.collapseLabel_ = document.createElement('span');
        this.collapseLabel_.textContent = collapseLabel;
      } else {
        this.collapseLabel_ = collapseLabel;
      }

      var label = options.label !== undefined ? options.label : 'i';

      if (typeof label === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.label_ = document.createElement('span');
        this.label_.textContent = label;
      } else {
        this.label_ = label;
      }


      var activeLabel = (this.collapsible_ && !this.collapsed_) ?
        this.collapseLabel_ : this.label_;
      var button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(activeLabel);

      listen(button, EventType.CLICK, this.handleClick_, this);

      var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +
          (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
          (this.collapsible_ ? '' : ' ol-uncollapsible');
      var element = this.element;
      element.className = cssClasses;
      element.appendChild(this.ulElement_);
      element.appendChild(button);

      /**
       * A list of currently rendered resolutions.
       * @type {Array<string>}
       * @private
       */
      this.renderedAttributions_ = [];

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = true;

    }

    if ( Control$$1 ) Attribution.__proto__ = Control$$1;
    Attribution.prototype = Object.create( Control$$1 && Control$$1.prototype );
    Attribution.prototype.constructor = Attribution;

    /**
     * Collect a list of visible attributions and set the collapsible state.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @return {Array<string>} Attributions.
     * @private
     */
    Attribution.prototype.collectSourceAttributions_ = function collectSourceAttributions_ (frameState) {
      /**
       * Used to determine if an attribution already exists.
       * @type {!Object<string, boolean>}
       */
      var lookup = {};

      /**
       * A list of visible attributions.
       * @type {Array<string>}
       */
      var visibleAttributions = [];

      var layerStatesArray = frameState.layerStatesArray;
      var resolution = frameState.viewState.resolution;
      for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        var layerState = layerStatesArray[i];
        if (!visibleAtResolution(layerState, resolution)) {
          continue;
        }

        var source = /** @type {import("../layer/Layer.js").default} */ (layerState.layer).getSource();
        if (!source) {
          continue;
        }

        var attributionGetter = source.getAttributions();
        if (!attributionGetter) {
          continue;
        }

        var attributions = attributionGetter(frameState);
        if (!attributions) {
          continue;
        }

        if (!this.overrideCollapsible_ && source.getAttributionsCollapsible() === false) {
          this.setCollapsible(false);
        }

        if (Array.isArray(attributions)) {
          for (var j = 0, jj = attributions.length; j < jj; ++j) {
            if (!(attributions[j] in lookup)) {
              visibleAttributions.push(attributions[j]);
              lookup[attributions[j]] = true;
            }
          }
        } else {
          if (!(attributions in lookup)) {
            visibleAttributions.push(attributions);
            lookup[attributions] = true;
          }
        }
      }
      return visibleAttributions;
    };

    /**
     * @private
     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    Attribution.prototype.updateElement_ = function updateElement_ (frameState) {
      if (!frameState) {
        if (this.renderedVisible_) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      var attributions = this.collectSourceAttributions_(frameState);

      var visible = attributions.length > 0;
      if (this.renderedVisible_ != visible) {
        this.element.style.display = visible ? '' : 'none';
        this.renderedVisible_ = visible;
      }

      if (equals(attributions, this.renderedAttributions_)) {
        return;
      }

      removeChildren(this.ulElement_);

      // append the attributions
      for (var i = 0, ii = attributions.length; i < ii; ++i) {
        var element = document.createElement('li');
        element.innerHTML = attributions[i];
        this.ulElement_.appendChild(element);
      }

      this.renderedAttributions_ = attributions;
    };

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    Attribution.prototype.handleClick_ = function handleClick_ (event) {
      event.preventDefault();
      this.handleToggle_();
    };

    /**
     * @private
     */
    Attribution.prototype.handleToggle_ = function handleToggle_ () {
      this.element.classList.toggle(CLASS_COLLAPSED);
      if (this.collapsed_) {
        replaceNode(this.collapseLabel_, this.label_);
      } else {
        replaceNode(this.label_, this.collapseLabel_);
      }
      this.collapsed_ = !this.collapsed_;
    };

    /**
     * Return `true` if the attribution is collapsible, `false` otherwise.
     * @return {boolean} True if the widget is collapsible.
     * @api
     */
    Attribution.prototype.getCollapsible = function getCollapsible () {
      return this.collapsible_;
    };

    /**
     * Set whether the attribution should be collapsible.
     * @param {boolean} collapsible True if the widget is collapsible.
     * @api
     */
    Attribution.prototype.setCollapsible = function setCollapsible (collapsible) {
      if (this.collapsible_ === collapsible) {
        return;
      }
      this.collapsible_ = collapsible;
      this.element.classList.toggle('ol-uncollapsible');
      if (!collapsible && this.collapsed_) {
        this.handleToggle_();
      }
    };

    /**
     * Collapse or expand the attribution according to the passed parameter. Will
     * not do anything if the attribution isn't collapsible or if the current
     * collapsed state is already the one requested.
     * @param {boolean} collapsed True if the widget is collapsed.
     * @api
     */
    Attribution.prototype.setCollapsed = function setCollapsed (collapsed) {
      if (!this.collapsible_ || this.collapsed_ === collapsed) {
        return;
      }
      this.handleToggle_();
    };

    /**
     * Return `true` when the attribution is currently collapsed or `false`
     * otherwise.
     * @return {boolean} True if the widget is collapsed.
     * @api
     */
    Attribution.prototype.getCollapsed = function getCollapsed () {
      return this.collapsed_;
    };

    return Attribution;
  }(Control));


  /**
   * Update the attribution element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {Attribution}
   * @api
   */
  function render(mapEvent) {
    this.updateElement_(mapEvent.frameState);
  }

  /**
   * @module ol/control/FullScreen
   */


  /**
   * @return {string} Change type.
   */
  var getChangeType = (function() {
    var changeType;
    return function() {
      if (!changeType) {
        var body = document.body;
        if (body.webkitRequestFullscreen) {
          changeType = 'webkitfullscreenchange';
        } else if (body.mozRequestFullScreen) {
          changeType = 'mozfullscreenchange';
        } else if (body.msRequestFullscreen) {
          changeType = 'MSFullscreenChange';
        } else if (body.requestFullscreen) {
          changeType = 'fullscreenchange';
        }
      }
      return changeType;
    };
  })();


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-full-screen'] CSS class name.
   * @property {string|Text} [label='\u2922'] Text label to use for the button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|Text} [labelActive='\u00d7'] Text label to use for the
   * button when full-screen is active.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.
   * @property {boolean} [keys=false] Full keyboard access.
   * @property {HTMLElement|string} [target] Specify a target if you want the
   * control to be rendered outside of the map's viewport.
   * @property {HTMLElement|string} [source] The element to be displayed
   * fullscreen. When not provided, the element containing the map viewport will
   * be displayed fullscreen.
   */


  /**
   * @classdesc
   * Provides a button that when clicked fills up the full screen with the map.
   * The full screen source element is by default the element containing the map viewport unless
   * overridden by providing the `source` option. In which case, the dom
   * element introduced using this parameter will be displayed in full screen.
   *
   * When in full screen mode, a close button is shown to exit full screen mode.
   * The [Fullscreen API](http://www.w3.org/TR/fullscreen/) is used to
   * toggle the map in full screen mode.
   *
   * @api
   */
  var FullScreen = /*@__PURE__*/(function (Control$$1) {
    function FullScreen(opt_options) {

      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        target: options.target
      });

      /**
       * @private
       * @type {string}
       */
      this.cssClassName_ = options.className !== undefined ? options.className :
        'ol-full-screen';

      var label = options.label !== undefined ? options.label : '\u2922';

      /**
       * @private
       * @type {Text}
       */
      this.labelNode_ = typeof label === 'string' ?
        document.createTextNode(label) : label;

      var labelActive = options.labelActive !== undefined ? options.labelActive : '\u00d7';

      /**
       * @private
       * @type {Text}
       */
      this.labelActiveNode_ = typeof labelActive === 'string' ?
        document.createTextNode(labelActive) : labelActive;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.button_ = document.createElement('button');

      var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';
      this.setClassName_(this.button_, isFullScreen());
      this.button_.setAttribute('type', 'button');
      this.button_.title = tipLabel;
      this.button_.appendChild(this.labelNode_);

      listen(this.button_, EventType.CLICK,
        this.handleClick_, this);

      var cssClasses = this.cssClassName_ + ' ' + CLASS_UNSELECTABLE +
          ' ' + CLASS_CONTROL + ' ' +
          (!isFullScreenSupported() ? CLASS_UNSUPPORTED : '');
      var element = this.element;
      element.className = cssClasses;
      element.appendChild(this.button_);

      /**
       * @private
       * @type {boolean}
       */
      this.keys_ = options.keys !== undefined ? options.keys : false;

      /**
       * @private
       * @type {HTMLElement|string|undefined}
       */
      this.source_ = options.source;

    }

    if ( Control$$1 ) FullScreen.__proto__ = Control$$1;
    FullScreen.prototype = Object.create( Control$$1 && Control$$1.prototype );
    FullScreen.prototype.constructor = FullScreen;

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    FullScreen.prototype.handleClick_ = function handleClick_ (event) {
      event.preventDefault();
      this.handleFullScreen_();
    };

    /**
     * @private
     */
    FullScreen.prototype.handleFullScreen_ = function handleFullScreen_ () {
      if (!isFullScreenSupported()) {
        return;
      }
      var map = this.getMap();
      if (!map) {
        return;
      }
      if (isFullScreen()) {
        exitFullScreen();
      } else {
        var element;
        if (this.source_) {
          element = typeof this.source_ === 'string' ?
            document.getElementById(this.source_) :
            this.source_;
        } else {
          element = map.getTargetElement();
        }
        if (this.keys_) {
          requestFullScreenWithKeys(element);

        } else {
          requestFullScreen(element);
        }
      }
    };

    /**
     * @private
     */
    FullScreen.prototype.handleFullScreenChange_ = function handleFullScreenChange_ () {
      var map = this.getMap();
      if (isFullScreen()) {
        this.setClassName_(this.button_, true);
        replaceNode(this.labelActiveNode_, this.labelNode_);
      } else {
        this.setClassName_(this.button_, false);
        replaceNode(this.labelNode_, this.labelActiveNode_);
      }
      if (map) {
        map.updateSize();
      }
    };

    /**
     * @param {HTMLElement} element Target element
     * @param {boolean} fullscreen True if fullscreen class name should be active
     * @private
     */
    FullScreen.prototype.setClassName_ = function setClassName_ (element, fullscreen) {
      var activeClassName = this.cssClassName_ + '-true';
      var inactiveClassName = this.cssClassName_ + '-false';
      var nextClassName = fullscreen ? activeClassName : inactiveClassName;
      element.classList.remove(activeClassName);
      element.classList.remove(inactiveClassName);
      element.classList.add(nextClassName);
    };

    /**
     * @inheritDoc
     * @api
     */
    FullScreen.prototype.setMap = function setMap (map) {
      Control$$1.prototype.setMap.call(this, map);
      if (map) {
        this.listenerKeys.push(listen(document,
          getChangeType(),
          this.handleFullScreenChange_, this)
        );
      }
    };

    return FullScreen;
  }(Control));


  /**
   * @return {boolean} Fullscreen is supported by the current platform.
   */
  function isFullScreenSupported() {
    var body = document.body;
    return !!(
      body.webkitRequestFullscreen ||
      (body.mozRequestFullScreen && document.mozFullScreenEnabled) ||
      (body.msRequestFullscreen && document.msFullscreenEnabled) ||
      (body.requestFullscreen && document.fullscreenEnabled)
    );
  }

  /**
   * @return {boolean} Element is currently in fullscreen.
   */
  function isFullScreen() {
    return !!(
      document.webkitIsFullScreen || document.mozFullScreen ||
      document.msFullscreenElement || document.fullscreenElement
    );
  }

  /**
   * Request to fullscreen an element.
   * @param {HTMLElement} element Element to request fullscreen
   */
  function requestFullScreen(element) {
    if (element.requestFullscreen) {
      element.requestFullscreen();
    } else if (element.msRequestFullscreen) {
      element.msRequestFullscreen();
    } else if (element.mozRequestFullScreen) {
      element.mozRequestFullScreen();
    } else if (element.webkitRequestFullscreen) {
      element.webkitRequestFullscreen();
    }
  }

  /**
   * Request to fullscreen an element with keyboard input.
   * @param {HTMLElement} element Element to request fullscreen
   */
  function requestFullScreenWithKeys(element) {
    if (element.mozRequestFullScreenWithKeys) {
      element.mozRequestFullScreenWithKeys();
    } else if (element.webkitRequestFullscreen) {
      element.webkitRequestFullscreen();
    } else {
      requestFullScreen(element);
    }
  }

  /**
   * Exit fullscreen.
   */
  function exitFullScreen() {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.msExitFullscreen) {
      document.msExitFullscreen();
    } else if (document.mozCancelFullScreen) {
      document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) {
      document.webkitExitFullscreen();
    }
  }

  /**
   * @module ol/control/MousePosition
   */


  /**
   * @type {string}
   */
  var PROJECTION = 'projection';

  /**
   * @type {string}
   */
  var COORDINATE_FORMAT = 'coordinateFormat';


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-mouse-position'] CSS class name.
   * @property {import("../coordinate.js").CoordinateFormat} [coordinateFormat] Coordinate format.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the
   * control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the
   * control to be rendered outside of the map's viewport.
   * @property {string} [undefinedHTML='&#160;'] Markup to show when coordinates are not
   * available (e.g. when the pointer leaves the map viewport).  By default, the last position
   * will be replaced with `'&#160;'` (`&nbsp;`) when the pointer leaves the viewport.  To
   * retain the last rendered position, set this option to something falsey (like an empty
   * string `''`).
   */


  /**
   * @classdesc
   * A control to show the 2D coordinates of the mouse cursor. By default, these
   * are in the view projection, but can be in any supported projection.
   * By default the control is shown in the top right corner of the map, but this
   * can be changed by using the css selector `.ol-mouse-position`.
   *
   * On touch devices, which usually do not have a mouse cursor, the coordinates
   * of the currently touched position are shown.
   *
   * @api
   */
  var MousePosition = /*@__PURE__*/(function (Control$$1) {
    function MousePosition(opt_options) {

      var options = opt_options ? opt_options : {};

      var element = document.createElement('div');
      element.className = options.className !== undefined ? options.className : 'ol-mouse-position';

      Control$$1.call(this, {
        element: element,
        render: options.render || render$1,
        target: options.target
      });

      listen(this,
        getChangeEventType(PROJECTION),
        this.handleProjectionChanged_, this);

      if (options.coordinateFormat) {
        this.setCoordinateFormat(options.coordinateFormat);
      }
      if (options.projection) {
        this.setProjection(options.projection);
      }

      /**
       * @private
       * @type {string}
       */
      this.undefinedHTML_ = options.undefinedHTML !== undefined ? options.undefinedHTML : '&#160;';

      /**
       * @private
       * @type {boolean}
       */
      this.renderOnMouseOut_ = !!this.undefinedHTML_;

      /**
       * @private
       * @type {string}
       */
      this.renderedHTML_ = element.innerHTML;

      /**
       * @private
       * @type {import("../proj/Projection.js").default}
       */
      this.mapProjection_ = null;

      /**
       * @private
       * @type {?import("../proj.js").TransformFunction}
       */
      this.transform_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.lastMouseMovePixel_ = null;

    }

    if ( Control$$1 ) MousePosition.__proto__ = Control$$1;
    MousePosition.prototype = Object.create( Control$$1 && Control$$1.prototype );
    MousePosition.prototype.constructor = MousePosition;

    /**
     * @private
     */
    MousePosition.prototype.handleProjectionChanged_ = function handleProjectionChanged_ () {
      this.transform_ = null;
    };

    /**
     * Return the coordinate format type used to render the current position or
     * undefined.
     * @return {import("../coordinate.js").CoordinateFormat|undefined} The format to render the current
     *     position in.
     * @observable
     * @api
     */
    MousePosition.prototype.getCoordinateFormat = function getCoordinateFormat () {
      return (
        /** @type {import("../coordinate.js").CoordinateFormat|undefined} */ (this.get(COORDINATE_FORMAT))
      );
    };

    /**
     * Return the projection that is used to report the mouse position.
     * @return {import("../proj/Projection.js").default|undefined} The projection to report mouse
     *     position in.
     * @observable
     * @api
     */
    MousePosition.prototype.getProjection = function getProjection () {
      return (
        /** @type {import("../proj/Projection.js").default|undefined} */ (this.get(PROJECTION))
      );
    };

    /**
     * @param {Event} event Browser event.
     * @protected
     */
    MousePosition.prototype.handleMouseMove = function handleMouseMove (event) {
      var map = this.getMap();
      this.lastMouseMovePixel_ = map.getEventPixel(event);
      this.updateHTML_(this.lastMouseMovePixel_);
    };

    /**
     * @param {Event} event Browser event.
     * @protected
     */
    MousePosition.prototype.handleMouseOut = function handleMouseOut (event) {
      this.updateHTML_(null);
      this.lastMouseMovePixel_ = null;
    };

    /**
     * @inheritDoc
     * @api
     */
    MousePosition.prototype.setMap = function setMap (map) {
      Control$$1.prototype.setMap.call(this, map);
      if (map) {
        var viewport = map.getViewport();
        this.listenerKeys.push(
          listen(viewport, EventType.MOUSEMOVE, this.handleMouseMove, this),
          listen(viewport, EventType.TOUCHSTART, this.handleMouseMove, this)
        );
        if (this.renderOnMouseOut_) {
          this.listenerKeys.push(
            listen(viewport, EventType.MOUSEOUT, this.handleMouseOut, this),
            listen(viewport, EventType.TOUCHEND, this.handleMouseOut, this)
          );
        }
      }
    };

    /**
     * Set the coordinate format type used to render the current position.
     * @param {import("../coordinate.js").CoordinateFormat} format The format to render the current
     *     position in.
     * @observable
     * @api
     */
    MousePosition.prototype.setCoordinateFormat = function setCoordinateFormat (format) {
      this.set(COORDINATE_FORMAT, format);
    };

    /**
     * Set the projection that is used to report the mouse position.
     * @param {import("../proj.js").ProjectionLike} projection The projection to report mouse
     *     position in.
     * @observable
     * @api
     */
    MousePosition.prototype.setProjection = function setProjection (projection) {
      this.set(PROJECTION, get$2(projection));
    };

    /**
     * @param {?import("../pixel.js").Pixel} pixel Pixel.
     * @private
     */
    MousePosition.prototype.updateHTML_ = function updateHTML_ (pixel) {
      var html = this.undefinedHTML_;
      if (pixel && this.mapProjection_) {
        if (!this.transform_) {
          var projection = this.getProjection();
          if (projection) {
            this.transform_ = getTransformFromProjections(
              this.mapProjection_, projection);
          } else {
            this.transform_ = identityTransform;
          }
        }
        var map = this.getMap();
        var coordinate = map.getCoordinateFromPixel(pixel);
        if (coordinate) {
          this.transform_(coordinate, coordinate);
          var coordinateFormat = this.getCoordinateFormat();
          if (coordinateFormat) {
            html = coordinateFormat(coordinate);
          } else {
            html = coordinate.toString();
          }
        }
      }
      if (!this.renderedHTML_ || html !== this.renderedHTML_) {
        this.element.innerHTML = html;
        this.renderedHTML_ = html;
      }
    };

    return MousePosition;
  }(Control));


  /**
   * Update the projection. Rendering of the coordinates is done in
   * `handleMouseMove` and `handleMouseUp`.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {MousePosition}
   * @api
   */
  function render$1(mapEvent) {
    var frameState = mapEvent.frameState;
    if (!frameState) {
      this.mapProjection_ = null;
    } else {
      if (this.mapProjection_ != frameState.viewState.projection) {
        this.mapProjection_ = frameState.viewState.projection;
        this.transform_ = null;
      }
    }
  }

  /**
   * @module ol/control/Rotate
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-rotate'] CSS class name.
   * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control should
   * be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {function()} [resetNorth] Function called when the control is clicked.
   * This will override the default `resetNorth`.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */


  /**
   * @classdesc
   * A button control to reset rotation to 0.
   * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
   * selector is added to the button when the rotation is 0.
   *
   * @api
   */
  var Rotate = /*@__PURE__*/(function (Control$$1) {
    function Rotate(opt_options) {

      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        render: options.render || render$2,
        target: options.target
      });

      var className = options.className !== undefined ? options.className : 'ol-rotate';

      var label = options.label !== undefined ? options.label : '\u21E7';

      /**
       * @type {HTMLElement}
       * @private
       */
      this.label_ = null;

      if (typeof label === 'string') {
        this.label_ = document.createElement('span');
        this.label_.className = 'ol-compass';
        this.label_.textContent = label;
      } else {
        this.label_ = label;
        this.label_.classList.add('ol-compass');
      }

      var tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';

      var button = document.createElement('button');
      button.className = className + '-reset';
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(this.label_);

      listen(button, EventType.CLICK, this.handleClick_, this);

      var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      var element = this.element;
      element.className = cssClasses;
      element.appendChild(button);

      this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

      /**
       * @type {boolean}
       * @private
       */
      this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = undefined;

      if (this.autoHide_) {
        this.element.classList.add(CLASS_HIDDEN);
      }

    }

    if ( Control$$1 ) Rotate.__proto__ = Control$$1;
    Rotate.prototype = Object.create( Control$$1 && Control$$1.prototype );
    Rotate.prototype.constructor = Rotate;

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    Rotate.prototype.handleClick_ = function handleClick_ (event) {
      event.preventDefault();
      if (this.callResetNorth_ !== undefined) {
        this.callResetNorth_();
      } else {
        this.resetNorth_();
      }
    };

    /**
     * @private
     */
    Rotate.prototype.resetNorth_ = function resetNorth_ () {
      var map = this.getMap();
      var view = map.getView();
      if (!view) {
        // the map does not have a view, so we can't act
        // upon it
        return;
      }
      if (view.getRotation() !== undefined) {
        if (this.duration_ > 0) {
          view.animate({
            rotation: 0,
            duration: this.duration_,
            easing: easeOut
          });
        } else {
          view.setRotation(0);
        }
      }
    };

    return Rotate;
  }(Control));


  /**
   * Update the rotate control element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {Rotate}
   * @api
   */
  function render$2(mapEvent) {
    var frameState = mapEvent.frameState;
    if (!frameState) {
      return;
    }
    var rotation = frameState.viewState.rotation;
    if (rotation != this.rotation_) {
      var transform = 'rotate(' + rotation + 'rad)';
      if (this.autoHide_) {
        var contains = this.element.classList.contains(CLASS_HIDDEN);
        if (!contains && rotation === 0) {
          this.element.classList.add(CLASS_HIDDEN);
        } else if (contains && rotation !== 0) {
          this.element.classList.remove(CLASS_HIDDEN);
        }
      }
      this.label_.style.msTransform = transform;
      this.label_.style.webkitTransform = transform;
      this.label_.style.transform = transform;
    }
    this.rotation_ = rotation;
  }

  /**
   * @module ol/control/Zoom
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {string} [className='ol-zoom'] CSS class name.
   * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in
   * button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|HTMLElement} [zoomOutLabel='-'] Text label to use for the zoom-out button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
   * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
   * @property {number} [delta=1] The zoom delta applied on each click.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */


  /**
   * @classdesc
   * A control with 2 buttons, one for zoom in and one for zoom out.
   * This control is one of the default controls of a map. To style this control
   * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
   *
   * @api
   */
  var Zoom = /*@__PURE__*/(function (Control$$1) {
    function Zoom(opt_options) {

      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        target: options.target
      });

      var className = options.className !== undefined ? options.className : 'ol-zoom';

      var delta = options.delta !== undefined ? options.delta : 1;

      var zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : '+';
      var zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\u2212';

      var zoomInTipLabel = options.zoomInTipLabel !== undefined ?
        options.zoomInTipLabel : 'Zoom in';
      var zoomOutTipLabel = options.zoomOutTipLabel !== undefined ?
        options.zoomOutTipLabel : 'Zoom out';

      var inElement = document.createElement('button');
      inElement.className = className + '-in';
      inElement.setAttribute('type', 'button');
      inElement.title = zoomInTipLabel;
      inElement.appendChild(
        typeof zoomInLabel === 'string' ? document.createTextNode(zoomInLabel) : zoomInLabel
      );

      listen(inElement, EventType.CLICK, this.handleClick_.bind(this, delta));

      var outElement = document.createElement('button');
      outElement.className = className + '-out';
      outElement.setAttribute('type', 'button');
      outElement.title = zoomOutTipLabel;
      outElement.appendChild(
        typeof zoomOutLabel === 'string' ? document.createTextNode(zoomOutLabel) : zoomOutLabel
      );

      listen(outElement, EventType.CLICK, this.handleClick_.bind(this, -delta));

      var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      var element = this.element;
      element.className = cssClasses;
      element.appendChild(inElement);
      element.appendChild(outElement);

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

    }

    if ( Control$$1 ) Zoom.__proto__ = Control$$1;
    Zoom.prototype = Object.create( Control$$1 && Control$$1.prototype );
    Zoom.prototype.constructor = Zoom;

    /**
     * @param {number} delta Zoom delta.
     * @param {MouseEvent} event The event to handle
     * @private
     */
    Zoom.prototype.handleClick_ = function handleClick_ (delta, event) {
      event.preventDefault();
      this.zoomByDelta_(delta);
    };

    /**
     * @param {number} delta Zoom delta.
     * @private
     */
    Zoom.prototype.zoomByDelta_ = function zoomByDelta_ (delta) {
      var map = this.getMap();
      var view = map.getView();
      if (!view) {
        // the map does not have a view, so we can't act
        // upon it
        return;
      }
      var currentResolution = view.getResolution();
      if (currentResolution) {
        var newResolution = view.constrainResolution(currentResolution, delta);
        if (this.duration_ > 0) {
          if (view.getAnimating()) {
            view.cancelAnimations();
          }
          view.animate({
            resolution: newResolution,
            duration: this.duration_,
            easing: easeOut
          });
        } else {
          view.setResolution(newResolution);
        }
      }
    };

    return Zoom;
  }(Control));

  /**
   * @module ol/control/util
   */


  /**
   * @typedef {Object} DefaultsOptions
   * @property {boolean} [attribution=true] Include
   * {@link module:ol/control/Attribution~Attribution}.
   * @property {import("./Attribution.js").Options} [attributionOptions]
   * Options for {@link module:ol/control/Attribution~Attribution}.
   * @property {boolean} [rotate=true] Include
   * {@link module:ol/control/Rotate~Rotate}.
   * @property {import("./Rotate.js").Options} [rotateOptions] Options
   * for {@link module:ol/control/Rotate~Rotate}.
   * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.
   * @property {import("./Zoom.js").Options} [zoomOptions] Options for
   * {@link module:ol/control/Zoom~Zoom}.
   * @api
   */


  /**
   * Set of controls included in maps by default. Unless configured otherwise,
   * this returns a collection containing an instance of each of the following
   * controls:
   * * {@link module:ol/control/Zoom~Zoom}
   * * {@link module:ol/control/Rotate~Rotate}
   * * {@link module:ol/control/Attribution~Attribution}
   *
   * @param {DefaultsOptions=} opt_options
   * Defaults options.
   * @return {Collection<import("./Control.js").default>}
   * Controls.
   * @function module:ol/control.defaults
   * @api
   */
  function defaults(opt_options) {

    var options = opt_options ? opt_options : {};

    var controls = new Collection();

    var zoomControl = options.zoom !== undefined ? options.zoom : true;
    if (zoomControl) {
      controls.push(new Zoom(options.zoomOptions));
    }

    var rotateControl = options.rotate !== undefined ? options.rotate : true;
    if (rotateControl) {
      controls.push(new Rotate(options.rotateOptions));
    }

    var attributionControl = options.attribution !== undefined ?
      options.attribution : true;
    if (attributionControl) {
      controls.push(new Attribution(options.attributionOptions));
    }

    return controls;
  }

  /**
   * @module ol/Kinetic
   */

  /**
   * @classdesc
   * Implementation of inertial deceleration for map movement.
   *
   * @api
   */
  var Kinetic = function Kinetic(decay, minVelocity, delay) {

    /**
     * @private
     * @type {number}
     */
    this.decay_ = decay;

    /**
     * @private
     * @type {number}
     */
    this.minVelocity_ = minVelocity;

    /**
     * @private
     * @type {number}
     */
    this.delay_ = delay;

    /**
     * @private
     * @type {Array<number>}
     */
    this.points_ = [];

    /**
     * @private
     * @type {number}
     */
    this.angle_ = 0;

    /**
     * @private
     * @type {number}
     */
    this.initialVelocity_ = 0;
  };

  /**
   * FIXME empty description for jsdoc
   */
  Kinetic.prototype.begin = function begin () {
    this.points_.length = 0;
    this.angle_ = 0;
    this.initialVelocity_ = 0;
  };

  /**
   * @param {number} x X.
   * @param {number} y Y.
   */
  Kinetic.prototype.update = function update (x, y) {
    this.points_.push(x, y, Date.now());
  };

  /**
   * @return {boolean} Whether we should do kinetic animation.
   */
  Kinetic.prototype.end = function end () {
    if (this.points_.length < 6) {
      // at least 2 points are required (i.e. there must be at least 6 elements
      // in the array)
      return false;
    }
    var delay = Date.now() - this.delay_;
    var lastIndex = this.points_.length - 3;
    if (this.points_[lastIndex + 2] < delay) {
      // the last tracked point is too old, which means that the user stopped
      // panning before releasing the map
      return false;
    }

    // get the first point which still falls into the delay time
    var firstIndex = lastIndex - 3;
    while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {
      firstIndex -= 3;
    }

    var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
    // we don't want a duration of 0 (divide by zero)
    // we also make sure the user panned for a duration of at least one frame
    // (1/60s) to compute sane displacement values
    if (duration < 1000 / 60) {
      return false;
    }

    var dx = this.points_[lastIndex] - this.points_[firstIndex];
    var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
    this.angle_ = Math.atan2(dy, dx);
    this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
    return this.initialVelocity_ > this.minVelocity_;
  };

  /**
   * @return {number} Total distance travelled (pixels).
   */
  Kinetic.prototype.getDistance = function getDistance () {
    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
  };

  /**
   * @return {number} Angle of the kinetic panning animation (radians).
   */
  Kinetic.prototype.getAngle = function getAngle () {
    return this.angle_;
  };

  /**
   * @module ol/interaction/Property
   */

  /**
   * @enum {string}
   */
  var InteractionProperty = {
    ACTIVE: 'active'
  };

  /**
   * @module ol/interaction/Interaction
   */


  /**
   * Object literal with config options for interactions.
   * @typedef {Object} InteractionOptions
   * @property {function(import("../MapBrowserEvent.js").default):boolean} handleEvent
   * Method called by the map to notify the interaction that a browser event was
   * dispatched to the map. If the function returns a falsy value, propagation of
   * the event to other interactions in the map's interactions chain will be
   * prevented (this includes functions with no explicit return).
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * User actions that change the state of the map. Some are similar to controls,
   * but are not associated with a DOM element.
   * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
   * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
   * by a keyboard event not a button element event.
   * Although interactions do not have a DOM element, some of them do render
   * vectors and so are visible on the screen.
   * @api
   */
  var Interaction = /*@__PURE__*/(function (BaseObject$$1) {
    function Interaction(options) {
      BaseObject$$1.call(this);

      if (options.handleEvent) {
        this.handleEvent = options.handleEvent;
      }

      /**
       * @private
       * @type {import("../PluggableMap.js").default}
       */
      this.map_ = null;

      this.setActive(true);
    }

    if ( BaseObject$$1 ) Interaction.__proto__ = BaseObject$$1;
    Interaction.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Interaction.prototype.constructor = Interaction;

    /**
     * Return whether the interaction is currently active.
     * @return {boolean} `true` if the interaction is active, `false` otherwise.
     * @observable
     * @api
     */
    Interaction.prototype.getActive = function getActive () {
      return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));
    };

    /**
     * Get the map associated with this interaction.
     * @return {import("../PluggableMap.js").default} Map.
     * @api
     */
    Interaction.prototype.getMap = function getMap () {
      return this.map_;
    };

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event}.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     */
    Interaction.prototype.handleEvent = function handleEvent (mapBrowserEvent) {
      return true;
    };

    /**
     * Activate or deactivate the interaction.
     * @param {boolean} active Active.
     * @observable
     * @api
     */
    Interaction.prototype.setActive = function setActive (active) {
      this.set(InteractionProperty.ACTIVE, active);
    };

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default} map Map.
     */
    Interaction.prototype.setMap = function setMap (map) {
      this.map_ = map;
    };

    return Interaction;
  }(BaseObject));


  /**
   * @param {import("../View.js").default} view View.
   * @param {import("../coordinate.js").Coordinate} delta Delta.
   * @param {number=} opt_duration Duration.
   */
  function pan(view, delta, opt_duration) {
    var currentCenter = view.getCenter();
    if (currentCenter) {
      var center = view.constrainCenter(
        [currentCenter[0] + delta[0], currentCenter[1] + delta[1]]);
      if (opt_duration) {
        view.animate({
          duration: opt_duration,
          easing: linear,
          center: center
        });
      } else {
        view.setCenter(center);
      }
    }
  }


  /**
   * @param {import("../View.js").default} view View.
   * @param {number|undefined} rotation Rotation.
   * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate.
   * @param {number=} opt_duration Duration.
   */
  function rotate$3(view, rotation, opt_anchor, opt_duration) {
    rotation = view.constrainRotation(rotation, 0);
    rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration);
  }


  /**
   * @param {import("../View.js").default} view View.
   * @param {number|undefined} rotation Rotation.
   * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate.
   * @param {number=} opt_duration Duration.
   */
  function rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration) {
    if (rotation !== undefined) {
      var currentRotation = view.getRotation();
      var currentCenter = view.getCenter();
      if (currentRotation !== undefined && currentCenter && opt_duration > 0) {
        view.animate({
          rotation: rotation,
          anchor: opt_anchor,
          duration: opt_duration,
          easing: easeOut
        });
      } else {
        view.rotate(rotation, opt_anchor);
      }
    }
  }


  /**
   * @param {import("../View.js").default} view View.
   * @param {number|undefined} resolution Resolution to go to.
   * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate.
   * @param {number=} opt_duration Duration.
   * @param {number=} opt_direction Zooming direction; > 0 indicates
   *     zooming out, in which case the constraints system will select
   *     the largest nearest resolution; < 0 indicates zooming in, in
   *     which case the constraints system will select the smallest
   *     nearest resolution; == 0 indicates that the zooming direction
   *     is unknown/not relevant, in which case the constraints system
   *     will select the nearest resolution. If not defined 0 is
   *     assumed.
   */
  function zoom(view, resolution, opt_anchor, opt_duration, opt_direction) {
    resolution = view.constrainResolution(resolution, 0, opt_direction);
    zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);
  }


  /**
   * @param {import("../View.js").default} view View.
   * @param {number} delta Delta from previous zoom level.
   * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate.
   * @param {number=} opt_duration Duration.
   */
  function zoomByDelta(view, delta, opt_anchor, opt_duration) {
    var currentResolution = view.getResolution();
    var resolution = view.constrainResolution(currentResolution, delta, 0);

    if (resolution !== undefined) {
      var resolutions = view.getResolutions();
      resolution = clamp(
        resolution,
        view.getMinResolution() || resolutions[resolutions.length - 1],
        view.getMaxResolution() || resolutions[0]);
    }

    // If we have a constraint on center, we need to change the anchor so that the
    // new center is within the extent. We first calculate the new center, apply
    // the constraint to it, and then calculate back the anchor
    if (opt_anchor && resolution !== undefined && resolution !== currentResolution) {
      var currentCenter = view.getCenter();
      var center = view.calculateCenterZoom(resolution, opt_anchor);
      center = view.constrainCenter(center);

      opt_anchor = [
        (resolution * currentCenter[0] - currentResolution * center[0]) /
            (resolution - currentResolution),
        (resolution * currentCenter[1] - currentResolution * center[1]) /
            (resolution - currentResolution)
      ];
    }

    zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);
  }


  /**
   * @param {import("../View.js").default} view View.
   * @param {number|undefined} resolution Resolution to go to.
   * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate.
   * @param {number=} opt_duration Duration.
   */
  function zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration) {
    if (resolution) {
      var currentResolution = view.getResolution();
      var currentCenter = view.getCenter();
      if (currentResolution !== undefined && currentCenter &&
          resolution !== currentResolution && opt_duration) {
        view.animate({
          resolution: resolution,
          anchor: opt_anchor,
          duration: opt_duration,
          easing: easeOut
        });
      } else {
        if (opt_anchor) {
          var center = view.calculateCenterZoom(resolution, opt_anchor);
          view.setCenter(center);
        }
        view.setResolution(resolution);
      }
    }
  }

  /**
   * @module ol/interaction/DoubleClickZoom
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {number} [delta=1] The zoom delta applied on each double click.
   */


  /**
   * @classdesc
   * Allows the user to zoom by double-clicking on the map.
   * @api
   */
  var DoubleClickZoom = /*@__PURE__*/(function (Interaction$$1) {
    function DoubleClickZoom(opt_options) {
      Interaction$$1.call(this, {
        handleEvent: handleEvent
      });

      var options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {number}
       */
      this.delta_ = options.delta ? options.delta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

    }

    if ( Interaction$$1 ) DoubleClickZoom.__proto__ = Interaction$$1;
    DoubleClickZoom.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    DoubleClickZoom.prototype.constructor = DoubleClickZoom;

    return DoubleClickZoom;
  }(Interaction));


  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a
   * doubleclick) and eventually zooms the map.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {DoubleClickZoom}
   */
  function handleEvent(mapBrowserEvent) {
    var stopEvent = false;
    if (mapBrowserEvent.type == MapBrowserEventType.DBLCLICK) {
      var browserEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
      var map = mapBrowserEvent.map;
      var anchor = mapBrowserEvent.coordinate;
      var delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
      var view = map.getView();
      zoomByDelta(view, delta, anchor, this.duration_);
      mapBrowserEvent.preventDefault();
      stopEvent = true;
    }
    return !stopEvent;
  }

  /**
   * @module ol/events/condition
   */


  /**
   * A function that takes an {@link module:ol/MapBrowserEvent} and returns a
   * `{boolean}`. If the condition is met, true should be returned.
   *
   * @typedef {function(this: ?, import("../MapBrowserEvent.js").default): boolean} Condition
   */


  /**
   * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when
   * additionally the shift-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the alt key is pressed.
   * @api
   */
  var altKeyOnly = function(mapBrowserEvent) {
    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
    return (
      originalEvent.altKey &&
        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
        !originalEvent.shiftKey);
  };


  /**
   * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise
   * (e.g. when additionally the platform-modifier-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the alt and shift keys are pressed.
   * @api
   */
  var altShiftKeysOnly = function(mapBrowserEvent) {
    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
    return (
      originalEvent.altKey &&
        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
        originalEvent.shiftKey);
  };


  /**
   * Return `true` if the map has the focus. This condition requires a map target
   * element with a `tabindex` attribute, e.g. `<div id="map" tabindex="1">`.
   *
   * @param {import("../MapBrowserEvent.js").default} event Map browser event.
   * @return {boolean} The map has the focus.
   * @api
   */
  var focus = function(event) {
    return event.target.getTargetElement() === document.activeElement;
  };


  /**
   * Return always true.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True.
   * @api
   */
  var always = TRUE;


  /**
   * Return `true` if the event has an "action"-producing mouse button.
   *
   * By definition, this includes left-click on windows/linux, and left-click
   * without the ctrl key on Macs.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} The result.
   */
  var mouseActionButton = function(mapBrowserEvent) {
    var originalEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
    return originalEvent.button == 0 &&
        !(WEBKIT && MAC && originalEvent.ctrlKey);
  };


  /**
   * Return always false.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} False.
   * @api
   */
  var never = FALSE;


  /**
   * Return `true` if the browser event is a `pointermove` event, `false`
   * otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the browser event is a `pointermove` event.
   * @api
   */
  var pointerMove$1 = function(mapBrowserEvent) {
    return mapBrowserEvent.type == 'pointermove';
  };


  /**
   * Return `true` if the event is a map `singleclick` event, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event is a map `singleclick` event.
   * @api
   */
  var singleClick = function(mapBrowserEvent) {
    return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;
  };


  /**
   * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is
   * pressed.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True only if there no modifier keys are pressed.
   * @api
   */
  var noModifierKeys = function(mapBrowserEvent) {
    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
    return (
      !originalEvent.altKey &&
        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
        !originalEvent.shiftKey);
  };


  /**
   * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when
   * additionally the alt-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the shift key is pressed.
   * @api
   */
  var shiftKeyOnly = function(mapBrowserEvent) {
    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
    return (
      !originalEvent.altKey &&
        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
        originalEvent.shiftKey);
  };


  /**
   * Return `true` if the target element is not editable, i.e. not a `<input>`-,
   * `<select>`- or `<textarea>`-element, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True only if the target element is not editable.
   * @api
   */
  var targetNotEditable = function(mapBrowserEvent) {
    var target = mapBrowserEvent.originalEvent.target;
    var tagName = /** @type {Element} */ (target).tagName;
    return (
      tagName !== 'INPUT' &&
        tagName !== 'SELECT' &&
        tagName !== 'TEXTAREA');
  };


  /**
   * Return `true` if the event originates from a mouse device.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a mouse device.
   * @api
   */
  var mouseOnly = function(mapBrowserEvent) {
    var pointerEvent = /** @type {import("../MapBrowserPointerEvent").default} */ (mapBrowserEvent).pointerEvent;
    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvent.pointerType == 'mouse';
  };


  /**
   * Return `true` if the event originates from a primary pointer in
   * contact with the surface or if the left mouse button is pressed.
   * See http://www.w3.org/TR/pointerevents/#button-states.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a primary pointer.
   * @api
   */
  var primaryAction = function(mapBrowserEvent) {
    var pointerEvent = /** @type {import("../MapBrowserPointerEvent").default} */ (mapBrowserEvent).pointerEvent;
    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    return pointerEvent.isPrimary && pointerEvent.button === 0;
  };

  /**
   * @module ol/interaction/Pointer
   */


  /**
   * @typedef {Object} Options
   * @property {function(import("../MapBrowserPointerEvent.js").default):boolean} [handleDownEvent]
   * Function handling "down" events. If the function returns `true` then a drag
   * sequence is started.
   * @property {function(import("../MapBrowserPointerEvent.js").default)} [handleDragEvent]
   * Function handling "drag" events. This function is called on "move" events
   * during a drag sequence.
   * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
   * Method called by the map to notify the interaction that a browser event was
   * dispatched to the map. The function may return `false` to prevent the
   * propagation of the event to other interactions in the map's interactions
   * chain.
   * @property {function(import("../MapBrowserPointerEvent.js").default)} [handleMoveEvent]
   * Function handling "move" events. This function is called on "move" events,
   * also during a drag sequence (so during a drag sequence both the
   * `handleDragEvent` function and this function are called).
   * @property {function(import("../MapBrowserPointerEvent.js").default):boolean} [handleUpEvent]
   *  Function handling "up" events. If the function returns `false` then the
   * current drag sequence is stopped.
   * @property {function(boolean):boolean} [stopDown]
   * Should the down event be propagated to other interactions, or should be
   * stopped?
   */


  /**
   * @classdesc
   * Base class that calls user-defined functions on `down`, `move` and `up`
   * events. This class also manages "drag sequences".
   *
   * When the `handleDownEvent` user function returns `true` a drag sequence is
   * started. During a drag sequence the `handleDragEvent` user function is
   * called on `move` events. The drag sequence ends when the `handleUpEvent`
   * user function is called and returns `false`.
   * @api
   */
  var PointerInteraction = /*@__PURE__*/(function (Interaction$$1) {
    function PointerInteraction(opt_options) {

      var options = opt_options ? opt_options : {};

      Interaction$$1.call(/** @type {import("./Interaction.js").InteractionOptions} */ this, (options));

      if (options.handleDownEvent) {
        this.handleDownEvent = options.handleDownEvent;
      }

      if (options.handleDragEvent) {
        this.handleDragEvent = options.handleDragEvent;
      }

      if (options.handleMoveEvent) {
        this.handleMoveEvent = options.handleMoveEvent;
      }

      if (options.handleUpEvent) {
        this.handleUpEvent = options.handleUpEvent;
      }

      if (options.stopDown) {
        this.stopDown = options.stopDown;
      }

      /**
       * @type {boolean}
       * @protected
       */
      this.handlingDownUpSequence = false;

      /**
       * @type {!Object<string, import("../pointer/PointerEvent.js").default>}
       * @private
       */
      this.trackedPointers_ = {};

      /**
       * @type {Array<import("../pointer/PointerEvent.js").default>}
       * @protected
       */
      this.targetPointers = [];

    }

    if ( Interaction$$1 ) PointerInteraction.__proto__ = Interaction$$1;
    PointerInteraction.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    PointerInteraction.prototype.constructor = PointerInteraction;

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @protected
     */
    PointerInteraction.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      return false;
    };

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @protected
     */
    PointerInteraction.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {};

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into
     * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
     * detected.
     * @override
     * @api
     */
    PointerInteraction.prototype.handleEvent = function handleEvent (mapBrowserEvent) {
      if (!(/** @type {import("../MapBrowserPointerEvent.js").default} */ (mapBrowserEvent).pointerEvent)) {
        return true;
      }

      var stopEvent = false;
      this.updateTrackedPointers_(mapBrowserEvent);
      if (this.handlingDownUpSequence) {
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {
          this.handleDragEvent(mapBrowserEvent);
        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
          var handledUp = this.handleUpEvent(mapBrowserEvent);
          this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;
        }
      } else {
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {
          var handled = this.handleDownEvent(mapBrowserEvent);
          if (handled) {
            mapBrowserEvent.preventDefault();
          }
          this.handlingDownUpSequence = handled;
          stopEvent = this.stopDown(handled);
        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {
          this.handleMoveEvent(mapBrowserEvent);
        }
      }
      return !stopEvent;
    };

    /**
     * Handle pointer move events.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @protected
     */
    PointerInteraction.prototype.handleMoveEvent = function handleMoveEvent (mapBrowserEvent) {};

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @protected
     */
    PointerInteraction.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      return false;
    };

    /**
     * This function is used to determine if "down" events should be propagated
     * to other interactions or should be stopped.
     * @param {boolean} handled Was the event handled by the interaction?
     * @return {boolean} Should the `down` event be stopped?
     */
    PointerInteraction.prototype.stopDown = function stopDown (handled) {
      return handled;
    };

    /**
     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
     * @private
     */
    PointerInteraction.prototype.updateTrackedPointers_ = function updateTrackedPointers_ (mapBrowserEvent) {
      if (isPointerDraggingEvent(mapBrowserEvent)) {
        var event = mapBrowserEvent.pointerEvent;

        var id = event.pointerId.toString();
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
          delete this.trackedPointers_[id];
        } else if (mapBrowserEvent.type ==
            MapBrowserEventType.POINTERDOWN) {
          this.trackedPointers_[id] = event;
        } else if (id in this.trackedPointers_) {
          // update only when there was a pointerdown event for this pointer
          this.trackedPointers_[id] = event;
        }
        this.targetPointers = getValues(this.trackedPointers_);
      }
    };

    return PointerInteraction;
  }(Interaction));


  /**
   * @param {Array<import("../pointer/PointerEvent.js").default>} pointerEvents List of events.
   * @return {import("../pixel.js").Pixel} Centroid pixel.
   */
  function centroid(pointerEvents) {
    var length = pointerEvents.length;
    var clientX = 0;
    var clientY = 0;
    for (var i = 0; i < length; i++) {
      clientX += pointerEvents[i].clientX;
      clientY += pointerEvents[i].clientY;
    }
    return [clientX / length, clientY / length];
  }


  /**
   * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} Whether the event is a pointerdown, pointerdrag
   *     or pointerup event.
   */
  function isPointerDraggingEvent(mapBrowserEvent) {
    var type = mapBrowserEvent.type;
    return type === MapBrowserEventType.POINTERDOWN ||
      type === MapBrowserEventType.POINTERDRAG ||
      type === MapBrowserEventType.POINTERUP;
  }

  /**
   * @module ol/interaction/DragPan
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~noModifierKeys}.
   * @property {import("../Kinetic.js").default} [kinetic] Kinetic inertia to apply to the pan.
   */


  /**
   * @classdesc
   * Allows the user to pan the map by dragging the map.
   * @api
   */
  var DragPan = /*@__PURE__*/(function (PointerInteraction$$1) {
    function DragPan(opt_options) {

      PointerInteraction$$1.call(this, {
        stopDown: FALSE
      });

      var options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {import("../Kinetic.js").default|undefined}
       */
      this.kinetic_ = options.kinetic;

      /**
       * @type {import("../pixel.js").Pixel}
       */
      this.lastCentroid = null;

      /**
       * @type {number}
       */
      this.lastPointersCount_;

      /**
       * @type {boolean}
       */
      this.panning_ = false;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : noModifierKeys;

      /**
       * @private
       * @type {boolean}
       */
      this.noKinetic_ = false;

    }

    if ( PointerInteraction$$1 ) DragPan.__proto__ = PointerInteraction$$1;
    DragPan.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    DragPan.prototype.constructor = DragPan;

    /**
     * @inheritDoc
     */
    DragPan.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      if (!this.panning_) {
        this.panning_ = true;
        this.getMap().getView().setHint(ViewHint.INTERACTING, 1);
      }
      var targetPointers = this.targetPointers;
      var centroid$$1 = centroid(targetPointers);
      if (targetPointers.length == this.lastPointersCount_) {
        if (this.kinetic_) {
          this.kinetic_.update(centroid$$1[0], centroid$$1[1]);
        }
        if (this.lastCentroid) {
          var deltaX = this.lastCentroid[0] - centroid$$1[0];
          var deltaY = centroid$$1[1] - this.lastCentroid[1];
          var map = mapBrowserEvent.map;
          var view = map.getView();
          var center = [deltaX, deltaY];
          scale(center, view.getResolution());
          rotate(center, view.getRotation());
          add(center, view.getCenter());
          center = view.constrainCenter(center);
          view.setCenter(center);
        }
      } else if (this.kinetic_) {
        // reset so we don't overestimate the kinetic energy after
        // after one finger down, tiny drag, second finger down
        this.kinetic_.begin();
      }
      this.lastCentroid = centroid$$1;
      this.lastPointersCount_ = targetPointers.length;
    };

    /**
     * @inheritDoc
     */
    DragPan.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      var map = mapBrowserEvent.map;
      var view = map.getView();
      if (this.targetPointers.length === 0) {
        if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
          var distance$$1 = this.kinetic_.getDistance();
          var angle = this.kinetic_.getAngle();
          var center = /** @type {!import("../coordinate.js").Coordinate} */ (view.getCenter());
          var centerpx = map.getPixelFromCoordinate(center);
          var dest = map.getCoordinateFromPixel([
            centerpx[0] - distance$$1 * Math.cos(angle),
            centerpx[1] - distance$$1 * Math.sin(angle)
          ]);
          view.animate({
            center: view.constrainCenter(dest),
            duration: 500,
            easing: easeOut
          });
        }
        if (this.panning_) {
          this.panning_ = false;
          view.setHint(ViewHint.INTERACTING, -1);
        }
        return false;
      } else {
        if (this.kinetic_) {
          // reset so we don't overestimate the kinetic energy after
          // after one finger up, tiny drag, second finger up
          this.kinetic_.begin();
        }
        this.lastCentroid = null;
        return true;
      }
    };

    /**
     * @inheritDoc
     */
    DragPan.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {
        var map = mapBrowserEvent.map;
        var view = map.getView();
        this.lastCentroid = null;
        // stop any current animation
        if (view.getAnimating()) {
          view.setCenter(mapBrowserEvent.frameState.viewState.center);
        }
        if (this.kinetic_) {
          this.kinetic_.begin();
        }
        // No kinetic as soon as more than one pointer on the screen is
        // detected. This is to prevent nasty pans after pinch.
        this.noKinetic_ = this.targetPointers.length > 1;
        return true;
      } else {
        return false;
      }
    };

    return DragPan;
  }(PointerInteraction));

  /**
   * @module ol/interaction/DragRotate
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an
   * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~altShiftKeysOnly}.
   * @property {number} [duration=250] Animation duration in milliseconds.
   */


  /**
   * @classdesc
   * Allows the user to rotate the map by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when the alt and shift keys are held down.
   *
   * This interaction is only supported for mouse devices.
   * @api
   */
  var DragRotate = /*@__PURE__*/(function (PointerInteraction$$1) {
    function DragRotate(opt_options) {

      var options = opt_options ? opt_options : {};

      PointerInteraction$$1.call(this, {
        stopDown: FALSE
      });

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : altShiftKeysOnly;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

    }

    if ( PointerInteraction$$1 ) DragRotate.__proto__ = PointerInteraction$$1;
    DragRotate.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    DragRotate.prototype.constructor = DragRotate;

    /**
     * @inheritDoc
     */
    DragRotate.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return;
      }

      var map = mapBrowserEvent.map;
      var view = map.getView();
      if (view.getConstraints().rotation === disable) {
        return;
      }
      var size = map.getSize();
      var offset = mapBrowserEvent.pixel;
      var theta =
          Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);
      if (this.lastAngle_ !== undefined) {
        var delta = theta - this.lastAngle_;
        var rotation = view.getRotation();
        rotateWithoutConstraints(view, rotation - delta);
      }
      this.lastAngle_ = theta;
    };


    /**
     * @inheritDoc
     */
    DragRotate.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return true;
      }

      var map = mapBrowserEvent.map;
      var view = map.getView();
      view.setHint(ViewHint.INTERACTING, -1);
      var rotation = view.getRotation();
      rotate$3(view, rotation, undefined, this.duration_);
      return false;
    };


    /**
     * @inheritDoc
     */
    DragRotate.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return false;
      }

      if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {
        var map = mapBrowserEvent.map;
        map.getView().setHint(ViewHint.INTERACTING, 1);
        this.lastAngle_ = undefined;
        return true;
      } else {
        return false;
      }
    };

    return DragRotate;
  }(PointerInteraction));

  /**
   * @module ol/render/Box
   */

  var RenderBox = /*@__PURE__*/(function (Disposable$$1) {
    function RenderBox(className) {
      Disposable$$1.call(this);

      /**
       * @type {import("../geom/Polygon.js").default}
       * @private
       */
      this.geometry_ = null;

      /**
       * @type {HTMLDivElement}
       * @private
       */
      this.element_ = /** @type {HTMLDivElement} */ (document.createElement('div'));
      this.element_.style.position = 'absolute';
      this.element_.className = 'ol-box ' + className;

      /**
       * @private
       * @type {import("../PluggableMap.js").default}
       */
      this.map_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.startPixel_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.endPixel_ = null;

    }

    if ( Disposable$$1 ) RenderBox.__proto__ = Disposable$$1;
    RenderBox.prototype = Object.create( Disposable$$1 && Disposable$$1.prototype );
    RenderBox.prototype.constructor = RenderBox;

    /**
     * @inheritDoc
     */
    RenderBox.prototype.disposeInternal = function disposeInternal () {
      this.setMap(null);
    };

    /**
     * @private
     */
    RenderBox.prototype.render_ = function render_ () {
      var startPixel = this.startPixel_;
      var endPixel = this.endPixel_;
      var px = 'px';
      var style = this.element_.style;
      style.left = Math.min(startPixel[0], endPixel[0]) + px;
      style.top = Math.min(startPixel[1], endPixel[1]) + px;
      style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
      style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
    };

    /**
     * @param {import("../PluggableMap.js").default} map Map.
     */
    RenderBox.prototype.setMap = function setMap (map) {
      if (this.map_) {
        this.map_.getOverlayContainer().removeChild(this.element_);
        var style = this.element_.style;
        style.left = style.top = style.width = style.height = 'inherit';
      }
      this.map_ = map;
      if (this.map_) {
        this.map_.getOverlayContainer().appendChild(this.element_);
      }
    };

    /**
     * @param {import("../pixel.js").Pixel} startPixel Start pixel.
     * @param {import("../pixel.js").Pixel} endPixel End pixel.
     */
    RenderBox.prototype.setPixels = function setPixels (startPixel, endPixel) {
      this.startPixel_ = startPixel;
      this.endPixel_ = endPixel;
      this.createOrUpdateGeometry();
      this.render_();
    };

    /**
     * Creates or updates the cached geometry.
     */
    RenderBox.prototype.createOrUpdateGeometry = function createOrUpdateGeometry () {
      var startPixel = this.startPixel_;
      var endPixel = this.endPixel_;
      var pixels = [
        startPixel,
        [startPixel[0], endPixel[1]],
        endPixel,
        [endPixel[0], startPixel[1]]
      ];
      var coordinates = pixels.map(this.map_.getCoordinateFromPixel, this.map_);
      // close the polygon
      coordinates[4] = coordinates[0].slice();
      if (!this.geometry_) {
        this.geometry_ = new Polygon([coordinates]);
      } else {
        this.geometry_.setCoordinates([coordinates]);
      }
    };

    /**
     * @return {import("../geom/Polygon.js").default} Geometry.
     */
    RenderBox.prototype.getGeometry = function getGeometry () {
      return this.geometry_;
    };

    return RenderBox;
  }(Disposable));

  /**
   * @module ol/interaction/DragBox
   */


  /**
   * A function that takes a {@link module:ol/MapBrowserEvent} and two
   * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,
   * true should be returned.
   * @typedef {function(this: ?, import("../MapBrowserEvent.js").default, import("../pixel.js").Pixel, import("../pixel.js").Pixel):boolean} EndCondition
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link ol/events/condition~always}.
   * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
   * `boxEndCondition` function.
   * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
   * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.
   * Default is `true` if the area of the box is bigger than the `minArea` option.
   * @property {function(this:DragBox, import("../MapBrowserEvent.js").default)} onBoxEnd Code to execute just
   * before `boxend` is fired.
   */


  /**
   * @enum {string}
   */
  var DragBoxEventType = {
    /**
     * Triggered upon drag box start.
     * @event DragBoxEvent#boxstart
     * @api
     */
    BOXSTART: 'boxstart',

    /**
     * Triggered on drag when box is active.
     * @event DragBoxEvent#boxdrag
     * @api
     */
    BOXDRAG: 'boxdrag',

    /**
     * Triggered upon drag box end.
     * @event DragBoxEvent#boxend
     * @api
     */
    BOXEND: 'boxend'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of
   * this type.
   */
  var DragBoxEvent = /*@__PURE__*/(function (Event$$1) {
    function DragBoxEvent(type, coordinate, mapBrowserEvent) {
      Event$$1.call(this, type);

      /**
       * The coordinate of the drag event.
       * @const
       * @type {import("../coordinate.js").Coordinate}
       * @api
       */
      this.coordinate = coordinate;

      /**
       * @const
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;

    }

    if ( Event$$1 ) DragBoxEvent.__proto__ = Event$$1;
    DragBoxEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    DragBoxEvent.prototype.constructor = DragBoxEvent;

    return DragBoxEvent;
  }(Event));


  /**
   * @classdesc
   * Allows the user to draw a vector box by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when the shift or other key is held down. This is used, for example,
   * for zooming to a specific area of the map
   * (see {@link module:ol/interaction/DragZoom~DragZoom} and
   * {@link module:ol/interaction/DragRotateAndZoom}).
   *
   * This interaction is only supported for mouse devices.
   *
   * @fires DragBoxEvent
   * @api
   */
  var DragBox = /*@__PURE__*/(function (PointerInteraction$$1) {
    function DragBox(opt_options) {

      PointerInteraction$$1.call(this);

      var options = opt_options ? opt_options : {};

      /**
      * @type {import("../render/Box.js").default}
      * @private
      */
      this.box_ = new RenderBox(options.className || 'ol-dragbox');

      /**
      * @type {number}
      * @private
      */
      this.minArea_ = options.minArea !== undefined ? options.minArea : 64;

      /**
       * Function to execute just before `onboxend` is fired
       * @type {function(this:DragBox, import("../MapBrowserEvent.js").default)}
       * @private
       */
      this.onBoxEnd_ = options.onBoxEnd ? options.onBoxEnd : VOID;

      /**
      * @type {import("../pixel.js").Pixel}
      * @private
      */
      this.startPixel_ = null;

      /**
      * @private
      * @type {import("../events/condition.js").Condition}
      */
      this.condition_ = options.condition ? options.condition : always;

      /**
      * @private
      * @type {EndCondition}
      */
      this.boxEndCondition_ = options.boxEndCondition ?
        options.boxEndCondition : this.defaultBoxEndCondition;
    }

    if ( PointerInteraction$$1 ) DragBox.__proto__ = PointerInteraction$$1;
    DragBox.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    DragBox.prototype.constructor = DragBox;

    /**
     * The default condition for determining whether the boxend event
     * should fire.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
     *     leading to the box end.
     * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
     * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
     * @return {boolean} Whether or not the boxend condition should be fired.
     */
    DragBox.prototype.defaultBoxEndCondition = function defaultBoxEndCondition (mapBrowserEvent, startPixel, endPixel) {
      var width = endPixel[0] - startPixel[0];
      var height = endPixel[1] - startPixel[1];
      return width * width + height * height >= this.minArea_;
    };

    /**
    * Returns geometry of last drawn box.
    * @return {import("../geom/Polygon.js").default} Geometry.
    * @api
    */
    DragBox.prototype.getGeometry = function getGeometry () {
      return this.box_.getGeometry();
    };

    /**
     * @inheritDoc
     */
    DragBox.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return;
      }

      this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);

      this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG,
        mapBrowserEvent.coordinate, mapBrowserEvent));
    };

    /**
     * @inheritDoc
     */
    DragBox.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return true;
      }

      this.box_.setMap(null);

      if (this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel)) {
        this.onBoxEnd_(mapBrowserEvent);
        this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXEND,
          mapBrowserEvent.coordinate, mapBrowserEvent));
      }
      return false;
    };

    /**
     * @inheritDoc
     */
    DragBox.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return false;
      }

      if (mouseActionButton(mapBrowserEvent) &&
          this.condition_(mapBrowserEvent)) {
        this.startPixel_ = mapBrowserEvent.pixel;
        this.box_.setMap(mapBrowserEvent.map);
        this.box_.setPixels(this.startPixel_, this.startPixel_);
        this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART,
          mapBrowserEvent.coordinate, mapBrowserEvent));
        return true;
      } else {
        return false;
      }
    };

    return DragBox;
  }(PointerInteraction));

  /**
   * @module ol/interaction/DragZoom
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-dragzoom'] CSS class name for styling the
   * box.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~shiftKeyOnly}.
   * @property {number} [duration=200] Animation duration in milliseconds.
   * @property {boolean} [out=false] Use interaction for zooming out.
   */


  /**
   * @classdesc
   * Allows the user to zoom the map by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when a key, shift by default, is held down.
   *
   * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
   * your custom one configured with `className`.
   * @api
   */
  var DragZoom = /*@__PURE__*/(function (DragBox$$1) {
    function DragZoom(opt_options) {
      var options = opt_options ? opt_options : {};

      var condition = options.condition ? options.condition : shiftKeyOnly;

      DragBox$$1.call(this, {
        condition: condition,
        className: options.className || 'ol-dragzoom',
        onBoxEnd: onBoxEnd
      });

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 200;

      /**
       * @private
       * @type {boolean}
       */
      this.out_ = options.out !== undefined ? options.out : false;
    }

    if ( DragBox$$1 ) DragZoom.__proto__ = DragBox$$1;
    DragZoom.prototype = Object.create( DragBox$$1 && DragBox$$1.prototype );
    DragZoom.prototype.constructor = DragZoom;

    return DragZoom;
  }(DragBox));


  /**
   * @this {DragZoom}
   */
  function onBoxEnd() {
    var map = this.getMap();
    var view = /** @type {!import("../View.js").default} */ (map.getView());
    var size = /** @type {!import("../size.js").Size} */ (map.getSize());
    var extent = this.getGeometry().getExtent();

    if (this.out_) {
      var mapExtent = view.calculateExtent(size);
      var boxPixelExtent = createOrUpdateFromCoordinates([
        map.getPixelFromCoordinate(getBottomLeft(extent)),
        map.getPixelFromCoordinate(getTopRight(extent))]);
      var factor = view.getResolutionForExtent(boxPixelExtent, size);

      scaleFromCenter(mapExtent, 1 / factor);
      extent = mapExtent;
    }

    var resolution = view.constrainResolution(
      view.getResolutionForExtent(extent, size));

    var center = getCenter(extent);
    center = view.constrainCenter(center);

    view.animate({
      resolution: resolution,
      center: center,
      duration: this.duration_,
      easing: easeOut
    });
  }

  /**
   * @module ol/events/KeyCode
   */

  /**
   * @enum {number}
   * @const
   */
  var KeyCode = {
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40
  };

  /**
   * @module ol/interaction/KeyboardPan
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition~noModifierKeys} and
   * {@link module:ol/events/condition~targetNotEditable}.
   * @property {number} [duration=100] Animation duration in milliseconds.
   * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
   * press.
   */


  /**
   * @classdesc
   * Allows the user to pan the map using keyboard arrows.
   * Note that, although this interaction is by default included in maps,
   * the keys can only be used when browser focus is on the element to which
   * the keyboard events are attached. By default, this is the map div,
   * though you can change this with the `keyboardEventTarget` in
   * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
   * element, focus will have to be on, and returned to, this element if the keys
   * are to function.
   * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
   * @api
   */
  var KeyboardPan = /*@__PURE__*/(function (Interaction$$1) {
    function KeyboardPan(opt_options) {

      Interaction$$1.call(this, {
        handleEvent: handleEvent$1
      });

      var options = opt_options || {};

      /**
       * @private
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
       * @return {boolean} Combined condition result.
       */
      this.defaultCondition_ = function(mapBrowserEvent) {
        return noModifierKeys(mapBrowserEvent) &&
          targetNotEditable(mapBrowserEvent);
      };

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition !== undefined ?
        options.condition : this.defaultCondition_;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 100;

      /**
       * @private
       * @type {number}
       */
      this.pixelDelta_ = options.pixelDelta !== undefined ?
        options.pixelDelta : 128;

    }

    if ( Interaction$$1 ) KeyboardPan.__proto__ = Interaction$$1;
    KeyboardPan.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    KeyboardPan.prototype.constructor = KeyboardPan;

    return KeyboardPan;
  }(Interaction));


  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
   * `KeyEvent`, and decides the direction to pan to (if an arrow key was
   * pressed).
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {KeyboardPan}
   */
  function handleEvent$1(mapBrowserEvent) {
    var stopEvent = false;
    if (mapBrowserEvent.type == EventType.KEYDOWN) {
      var keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
      var keyCode = keyEvent.keyCode;
      if (this.condition_(mapBrowserEvent) &&
          (keyCode == KeyCode.DOWN ||
          keyCode == KeyCode.LEFT ||
          keyCode == KeyCode.RIGHT ||
          keyCode == KeyCode.UP)) {
        var map = mapBrowserEvent.map;
        var view = map.getView();
        var mapUnitsDelta = view.getResolution() * this.pixelDelta_;
        var deltaX = 0, deltaY = 0;
        if (keyCode == KeyCode.DOWN) {
          deltaY = -mapUnitsDelta;
        } else if (keyCode == KeyCode.LEFT) {
          deltaX = -mapUnitsDelta;
        } else if (keyCode == KeyCode.RIGHT) {
          deltaX = mapUnitsDelta;
        } else {
          deltaY = mapUnitsDelta;
        }
        var delta = [deltaX, deltaY];
        rotate(delta, view.getRotation());
        pan(view, delta, this.duration_);
        mapBrowserEvent.preventDefault();
        stopEvent = true;
      }
    }
    return !stopEvent;
  }

  /**
   * @module ol/interaction/KeyboardZoom
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=100] Animation duration in milliseconds.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition~targetNotEditable}.
   * @property {number} [delta=1] The zoom level delta on each key press.
   */


  /**
   * @classdesc
   * Allows the user to zoom the map using keyboard + and -.
   * Note that, although this interaction is by default included in maps,
   * the keys can only be used when browser focus is on the element to which
   * the keyboard events are attached. By default, this is the map div,
   * though you can change this with the `keyboardEventTarget` in
   * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
   * element, focus will have to be on, and returned to, this element if the keys
   * are to function.
   * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.
   * @api
   */
  var KeyboardZoom = /*@__PURE__*/(function (Interaction$$1) {
    function KeyboardZoom(opt_options) {

      Interaction$$1.call(this, {
        handleEvent: handleEvent$2
      });

      var options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : targetNotEditable;

      /**
       * @private
       * @type {number}
       */
      this.delta_ = options.delta ? options.delta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 100;

    }

    if ( Interaction$$1 ) KeyboardZoom.__proto__ = Interaction$$1;
    KeyboardZoom.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    KeyboardZoom.prototype.constructor = KeyboardZoom;

    return KeyboardZoom;
  }(Interaction));


  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
   * key pressed was '+' or '-').
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {KeyboardZoom}
   */
  function handleEvent$2(mapBrowserEvent) {
    var stopEvent = false;
    if (mapBrowserEvent.type == EventType.KEYDOWN ||
        mapBrowserEvent.type == EventType.KEYPRESS) {
      var keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
      var charCode = keyEvent.charCode;
      if (this.condition_(mapBrowserEvent) &&
          (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {
        var map = mapBrowserEvent.map;
        var delta = (charCode == '+'.charCodeAt(0)) ? this.delta_ : -this.delta_;
        var view = map.getView();
        zoomByDelta(view, delta, undefined, this.duration_);
        mapBrowserEvent.preventDefault();
        stopEvent = true;
      }
    }
    return !stopEvent;
  }

  /**
   * @module ol/interaction/MouseWheelZoom
   */


  /**
   * Maximum mouse wheel delta.
   * @type {number}
   */
  var MAX_DELTA = 1;


  /**
   * @enum {string}
   */
  var Mode = {
    TRACKPAD: 'trackpad',
    WHEEL: 'wheel'
  };


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition~always}.
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
   * @property {boolean} [constrainResolution=false] When using a trackpad or
   * magic mouse, zoom to the closest integer zoom level after the scroll gesture
   * ends.
   * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
   * location as the anchor. When set to `false`, zooming in and out will zoom to
   * the center of the screen instead of zooming on the mouse's location.
   */


  /**
   * @classdesc
   * Allows the user to zoom the map by scrolling the mouse wheel.
   * @api
   */
  var MouseWheelZoom = /*@__PURE__*/(function (Interaction$$1) {
    function MouseWheelZoom(opt_options) {

      var options = opt_options ? opt_options : {};

      Interaction$$1.call(/** @type {import("./Interaction.js").InteractionOptions} */ this, (options));

      /**
       * @private
       * @type {number}
       */
      this.delta_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

      /**
       * @private
       * @type {number}
       */
      this.timeout_ = options.timeout !== undefined ? options.timeout : 80;

      /**
       * @private
       * @type {boolean}
       */
      this.useAnchor_ = options.useAnchor !== undefined ? options.useAnchor : true;

      /**
       * @private
       * @type {boolean}
       */
      this.constrainResolution_ = options.constrainResolution || false;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : always;

      /**
       * @private
       * @type {?import("../coordinate.js").Coordinate}
       */
      this.lastAnchor_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.startTime_ = undefined;

      /**
       * @private
       * @type {?}
       */
      this.timeoutId_;

      /**
       * @private
       * @type {Mode|undefined}
       */
      this.mode_ = undefined;

      /**
       * Trackpad events separated by this delay will be considered separate
       * interactions.
       * @type {number}
       */
      this.trackpadEventGap_ = 400;

      /**
       * @type {?}
       */
      this.trackpadTimeoutId_;

      /**
       * The number of delta values per zoom level
       * @private
       * @type {number}
       */
      this.trackpadDeltaPerZoom_ = 300;

      /**
       * The zoom factor by which scroll zooming is allowed to exceed the limits.
       * @private
       * @type {number}
       */
      this.trackpadZoomBuffer_ = 1.5;

    }

    if ( Interaction$$1 ) MouseWheelZoom.__proto__ = Interaction$$1;
    MouseWheelZoom.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    MouseWheelZoom.prototype.constructor = MouseWheelZoom;

    /**
     * @private
     */
    MouseWheelZoom.prototype.decrementInteractingHint_ = function decrementInteractingHint_ () {
      this.trackpadTimeoutId_ = undefined;
      var view = this.getMap().getView();
      view.setHint(ViewHint.INTERACTING, -1);
    };

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
     * zooms the map.
     * @override
     */
    MouseWheelZoom.prototype.handleEvent = function handleEvent (mapBrowserEvent) {
      if (!this.condition_(mapBrowserEvent)) {
        return true;
      }
      var type = mapBrowserEvent.type;
      if (type !== EventType.WHEEL && type !== EventType.MOUSEWHEEL) {
        return true;
      }

      mapBrowserEvent.preventDefault();

      var map = mapBrowserEvent.map;
      var wheelEvent = /** @type {WheelEvent} */ (mapBrowserEvent.originalEvent);

      if (this.useAnchor_) {
        this.lastAnchor_ = mapBrowserEvent.coordinate;
      }

      // Delta normalisation inspired by
      // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
      var delta;
      if (mapBrowserEvent.type == EventType.WHEEL) {
        delta = wheelEvent.deltaY;
        if (FIREFOX &&
            wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
          delta /= DEVICE_PIXEL_RATIO;
        }
        if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {
          delta *= 40;
        }
      } else if (mapBrowserEvent.type == EventType.MOUSEWHEEL) {
        delta = -wheelEvent.wheelDeltaY;
        if (SAFARI) {
          delta /= 3;
        }
      }

      if (delta === 0) {
        return false;
      }

      var now = Date.now();

      if (this.startTime_ === undefined) {
        this.startTime_ = now;
      }

      if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {
        this.mode_ = Math.abs(delta) < 4 ?
          Mode.TRACKPAD :
          Mode.WHEEL;
      }

      if (this.mode_ === Mode.TRACKPAD) {
        var view = map.getView();
        if (this.trackpadTimeoutId_) {
          clearTimeout(this.trackpadTimeoutId_);
        } else {
          view.setHint(ViewHint.INTERACTING, 1);
        }
        this.trackpadTimeoutId_ = setTimeout(this.decrementInteractingHint_.bind(this), this.trackpadEventGap_);
        var resolution = view.getResolution() * Math.pow(2, delta / this.trackpadDeltaPerZoom_);
        var minResolution = view.getMinResolution();
        var maxResolution = view.getMaxResolution();
        var rebound = 0;
        if (resolution < minResolution) {
          resolution = Math.max(resolution, minResolution / this.trackpadZoomBuffer_);
          rebound = 1;
        } else if (resolution > maxResolution) {
          resolution = Math.min(resolution, maxResolution * this.trackpadZoomBuffer_);
          rebound = -1;
        }
        if (this.lastAnchor_) {
          var center = view.calculateCenterZoom(resolution, this.lastAnchor_);
          view.setCenter(view.constrainCenter(center));
        }
        view.setResolution(resolution);

        if (rebound === 0 && this.constrainResolution_) {
          view.animate({
            resolution: view.constrainResolution(resolution, delta > 0 ? -1 : 1),
            easing: easeOut,
            anchor: this.lastAnchor_,
            duration: this.duration_
          });
        }

        if (rebound > 0) {
          view.animate({
            resolution: minResolution,
            easing: easeOut,
            anchor: this.lastAnchor_,
            duration: 500
          });
        } else if (rebound < 0) {
          view.animate({
            resolution: maxResolution,
            easing: easeOut,
            anchor: this.lastAnchor_,
            duration: 500
          });
        }
        this.startTime_ = now;
        return false;
      }

      this.delta_ += delta;

      var timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);

      clearTimeout(this.timeoutId_);
      this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);

      return false;
    };

    /**
     * @private
     * @param {import("../PluggableMap.js").default} map Map.
     */
    MouseWheelZoom.prototype.handleWheelZoom_ = function handleWheelZoom_ (map) {
      var view = map.getView();
      if (view.getAnimating()) {
        view.cancelAnimations();
      }
      var maxDelta = MAX_DELTA;
      var delta = clamp(this.delta_, -maxDelta, maxDelta);
      zoomByDelta(view, -delta, this.lastAnchor_, this.duration_);
      this.mode_ = undefined;
      this.delta_ = 0;
      this.lastAnchor_ = null;
      this.startTime_ = undefined;
      this.timeoutId_ = undefined;
    };

    /**
     * Enable or disable using the mouse's location as an anchor when zooming
     * @param {boolean} useAnchor true to zoom to the mouse's location, false
     * to zoom to the center of the map
     * @api
     */
    MouseWheelZoom.prototype.setMouseAnchor = function setMouseAnchor (useAnchor) {
      this.useAnchor_ = useAnchor;
      if (!useAnchor) {
        this.lastAnchor_ = null;
      }
    };

    return MouseWheelZoom;
  }(Interaction));

  /**
   * @module ol/interaction/PinchRotate
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] The duration of the animation in
   * milliseconds.
   * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
   */


  /**
   * @classdesc
   * Allows the user to rotate the map by twisting with two fingers
   * on a touch screen.
   * @api
   */
  var PinchRotate = /*@__PURE__*/(function (PointerInteraction$$1) {
    function PinchRotate(opt_options) {

      var options = opt_options ? opt_options : {};

      var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      PointerInteraction$$1.call(this, pointerOptions);

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {boolean}
       */
      this.rotating_ = false;

      /**
       * @private
       * @type {number}
       */
      this.rotationDelta_ = 0.0;

      /**
       * @private
       * @type {number}
       */
      this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

    }

    if ( PointerInteraction$$1 ) PinchRotate.__proto__ = PointerInteraction$$1;
    PinchRotate.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    PinchRotate.prototype.constructor = PinchRotate;

    /**
     * @inheritDoc
     */
    PinchRotate.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      var rotationDelta = 0.0;

      var touch0 = this.targetPointers[0];
      var touch1 = this.targetPointers[1];

      // angle between touches
      var angle = Math.atan2(
        touch1.clientY - touch0.clientY,
        touch1.clientX - touch0.clientX);

      if (this.lastAngle_ !== undefined) {
        var delta = angle - this.lastAngle_;
        this.rotationDelta_ += delta;
        if (!this.rotating_ &&
            Math.abs(this.rotationDelta_) > this.threshold_) {
          this.rotating_ = true;
        }
        rotationDelta = delta;
      }
      this.lastAngle_ = angle;

      var map = mapBrowserEvent.map;
      var view = map.getView();
      if (view.getConstraints().rotation === disable) {
        return;
      }

      // rotate anchor point.
      // FIXME: should be the intersection point between the lines:
      //     touch0,touch1 and previousTouch0,previousTouch1
      var viewportPosition = map.getViewport().getBoundingClientRect();
      var centroid$$1 = centroid(this.targetPointers);
      centroid$$1[0] -= viewportPosition.left;
      centroid$$1[1] -= viewportPosition.top;
      this.anchor_ = map.getCoordinateFromPixel(centroid$$1);

      // rotate
      if (this.rotating_) {
        var rotation = view.getRotation();
        map.render();
        rotateWithoutConstraints(view, rotation + rotationDelta, this.anchor_);
      }
    };

    /**
     * @inheritDoc
     */
    PinchRotate.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      if (this.targetPointers.length < 2) {
        var map = mapBrowserEvent.map;
        var view = map.getView();
        view.setHint(ViewHint.INTERACTING, -1);
        if (this.rotating_) {
          var rotation = view.getRotation();
          rotate$3(view, rotation, this.anchor_, this.duration_);
        }
        return false;
      } else {
        return true;
      }
    };

    /**
     * @inheritDoc
     */
    PinchRotate.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      if (this.targetPointers.length >= 2) {
        var map = mapBrowserEvent.map;
        this.anchor_ = null;
        this.lastAngle_ = undefined;
        this.rotating_ = false;
        this.rotationDelta_ = 0.0;
        if (!this.handlingDownUpSequence) {
          map.getView().setHint(ViewHint.INTERACTING, 1);
        }
        return true;
      } else {
        return false;
      }
    };

    return PinchRotate;
  }(PointerInteraction));

  /**
   * @module ol/interaction/PinchZoom
   */


  /**
   * @typedef {Object} Options
   * @property {number} [duration=400] Animation duration in milliseconds.
   * @property {boolean} [constrainResolution=false] Zoom to the closest integer
   * zoom level after the pinch gesture ends.
   */


  /**
   * @classdesc
   * Allows the user to zoom the map by pinching with two fingers
   * on a touch screen.
   * @api
   */
  var PinchZoom = /*@__PURE__*/(function (PointerInteraction$$1) {
    function PinchZoom(opt_options) {

      var options = opt_options ? opt_options : {};

      var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      PointerInteraction$$1.call(this, pointerOptions);

      /**
       * @private
       * @type {boolean}
       */
      this.constrainResolution_ = options.constrainResolution || false;

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 400;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastDistance_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.lastScaleDelta_ = 1;

    }

    if ( PointerInteraction$$1 ) PinchZoom.__proto__ = PointerInteraction$$1;
    PinchZoom.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    PinchZoom.prototype.constructor = PinchZoom;

    /**
     * @inheritDoc
     */
    PinchZoom.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      var scaleDelta = 1.0;

      var touch0 = this.targetPointers[0];
      var touch1 = this.targetPointers[1];
      var dx = touch0.clientX - touch1.clientX;
      var dy = touch0.clientY - touch1.clientY;

      // distance between touches
      var distance = Math.sqrt(dx * dx + dy * dy);

      if (this.lastDistance_ !== undefined) {
        scaleDelta = this.lastDistance_ / distance;
      }
      this.lastDistance_ = distance;


      var map = mapBrowserEvent.map;
      var view = map.getView();
      var resolution = view.getResolution();
      var maxResolution = view.getMaxResolution();
      var minResolution = view.getMinResolution();
      var newResolution = resolution * scaleDelta;
      if (newResolution > maxResolution) {
        scaleDelta = maxResolution / resolution;
        newResolution = maxResolution;
      } else if (newResolution < minResolution) {
        scaleDelta = minResolution / resolution;
        newResolution = minResolution;
      }

      if (scaleDelta != 1.0) {
        this.lastScaleDelta_ = scaleDelta;
      }

      // scale anchor point.
      var viewportPosition = map.getViewport().getBoundingClientRect();
      var centroid$$1 = centroid(this.targetPointers);
      centroid$$1[0] -= viewportPosition.left;
      centroid$$1[1] -= viewportPosition.top;
      this.anchor_ = map.getCoordinateFromPixel(centroid$$1);

      // scale, bypass the resolution constraint
      map.render();
      zoomWithoutConstraints(view, newResolution, this.anchor_);
    };

    /**
     * @inheritDoc
     */
    PinchZoom.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      if (this.targetPointers.length < 2) {
        var map = mapBrowserEvent.map;
        var view = map.getView();
        view.setHint(ViewHint.INTERACTING, -1);
        var resolution = view.getResolution();
        if (this.constrainResolution_ ||
            resolution < view.getMinResolution() ||
            resolution > view.getMaxResolution()) {
          // Zoom to final resolution, with an animation, and provide a
          // direction not to zoom out/in if user was pinching in/out.
          // Direction is > 0 if pinching out, and < 0 if pinching in.
          var direction = this.lastScaleDelta_ - 1;
          zoom(view, resolution, this.anchor_, this.duration_, direction);
        }
        return false;
      } else {
        return true;
      }
    };

    /**
     * @inheritDoc
     */
    PinchZoom.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      if (this.targetPointers.length >= 2) {
        var map = mapBrowserEvent.map;
        this.anchor_ = null;
        this.lastDistance_ = undefined;
        this.lastScaleDelta_ = 1;
        if (!this.handlingDownUpSequence) {
          map.getView().setHint(ViewHint.INTERACTING, 1);
        }
        return true;
      } else {
        return false;
      }
    };

    return PinchZoom;
  }(PointerInteraction));

  /**
   * @module ol/interaction/DragAndDrop
   */


  /**
   * @typedef {Object} Options
   * @property {Array<typeof import("../format/Feature.js").default>} [formatConstructors] Format constructors.
   * @property {import("../source/Vector.js").default} [source] Optional vector source where features will be added.  If a source is provided
   * all existing features will be removed and new features will be added when
   * they are dropped on the target.  If you want to add features to a vector
   * source without removing the existing features (append only), instead of
   * providing the source option listen for the "addfeatures" event.
   * @property {import("../proj.js").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.
   * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.
   */


  /**
   * @enum {string}
   */
  var DragAndDropEventType = {
    /**
     * Triggered when features are added
     * @event DragAndDropEvent#addfeatures
     * @api
     */
    ADD_FEATURES: 'addfeatures'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances
   * of this type.
   */
  var DragAndDropEvent = /*@__PURE__*/(function (Event$$1) {
    function DragAndDropEvent(type, file, opt_features, opt_projection) {

      Event$$1.call(this, type);

      /**
       * The features parsed from dropped data.
       * @type {Array<import("../Feature.js").FeatureLike>|undefined}
       * @api
       */
      this.features = opt_features;

      /**
       * The dropped file.
       * @type {File}
       * @api
       */
      this.file = file;

      /**
       * The feature projection.
       * @type {import("../proj/Projection.js").default|undefined}
       * @api
       */
      this.projection = opt_projection;

    }

    if ( Event$$1 ) DragAndDropEvent.__proto__ = Event$$1;
    DragAndDropEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    DragAndDropEvent.prototype.constructor = DragAndDropEvent;

    return DragAndDropEvent;
  }(Event));


  /**
   * @classdesc
   * Handles input of vector data by drag and drop.
   * @api
   *
   * @fires DragAndDropEvent
   */
  var DragAndDrop = /*@__PURE__*/(function (Interaction$$1) {
    function DragAndDrop(opt_options) {

      var options = opt_options ? opt_options : {};

      Interaction$$1.call(this, {
        handleEvent: TRUE
      });

      /**
       * @private
       * @type {Array<typeof import("../format/Feature.js").default>}
       */
      this.formatConstructors_ = options.formatConstructors ?
        options.formatConstructors : [];

      /**
       * @private
       * @type {import("../proj/Projection.js").default}
       */
      this.projection_ = options.projection ?
        get$2(options.projection) : null;

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.dropListenKeys_ = null;

      /**
       * @private
       * @type {import("../source/Vector.js").default}
       */
      this.source_ = options.source || null;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.target = options.target ? options.target : null;

    }

    if ( Interaction$$1 ) DragAndDrop.__proto__ = Interaction$$1;
    DragAndDrop.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    DragAndDrop.prototype.constructor = DragAndDrop;

    /**
     * @param {File} file File.
     * @param {Event} event Load event.
     * @private
     */
    DragAndDrop.prototype.handleResult_ = function handleResult_ (file, event) {
      var result = event.target.result;
      var map = this.getMap();
      var projection = this.projection_;
      if (!projection) {
        var view = map.getView();
        projection = view.getProjection();
      }

      var formatConstructors = this.formatConstructors_;
      var features = [];
      for (var i = 0, ii = formatConstructors.length; i < ii; ++i) {
        var format = new formatConstructors[i]();
        features = this.tryReadFeatures_(format, result, {
          featureProjection: projection
        });
        if (features && features.length > 0) {
          break;
        }
      }
      if (this.source_) {
        this.source_.clear();
        this.source_.addFeatures(features);
      }
      this.dispatchEvent(
        new DragAndDropEvent(
          DragAndDropEventType.ADD_FEATURES, file,
          features, projection));
    };

    /**
     * @private
     */
    DragAndDrop.prototype.registerListeners_ = function registerListeners_ () {
      var map = this.getMap();
      if (map) {
        var dropArea = this.target ? this.target : map.getViewport();
        this.dropListenKeys_ = [
          listen(dropArea, EventType.DROP, handleDrop, this),
          listen(dropArea, EventType.DRAGENTER, handleStop, this),
          listen(dropArea, EventType.DRAGOVER, handleStop, this),
          listen(dropArea, EventType.DROP, handleStop, this)
        ];
      }
    };

    /**
     * @inheritDoc
     */
    DragAndDrop.prototype.setActive = function setActive (active) {
      Interaction$$1.prototype.setActive.call(this, active);
      if (active) {
        this.registerListeners_();
      } else {
        this.unregisterListeners_();
      }
    };

    /**
     * @inheritDoc
     */
    DragAndDrop.prototype.setMap = function setMap (map) {
      this.unregisterListeners_();
      Interaction$$1.prototype.setMap.call(this, map);
      if (this.getActive()) {
        this.registerListeners_();
      }
    };

    /**
     * @param {import("../format/Feature.js").default} format Format.
     * @param {string} text Text.
     * @param {import("../format/Feature.js").ReadOptions} options Read options.
     * @private
     * @return {Array<import("../Feature.js").FeatureLike>} Features.
     */
    DragAndDrop.prototype.tryReadFeatures_ = function tryReadFeatures_ (format, text, options) {
      try {
        return format.readFeatures(text, options);
      } catch (e) {
        return null;
      }
    };

    /**
     * @private
     */
    DragAndDrop.prototype.unregisterListeners_ = function unregisterListeners_ () {
      if (this.dropListenKeys_) {
        this.dropListenKeys_.forEach(unlistenByKey);
        this.dropListenKeys_ = null;
      }
    };

    return DragAndDrop;
  }(Interaction));


  /**
   * @param {DragEvent} event Event.
   * @this {DragAndDrop}
   */
  function handleDrop(event) {
    var files = event.dataTransfer.files;
    for (var i = 0, ii = files.length; i < ii; ++i) {
      var file = files.item(i);
      var reader = new FileReader();
      reader.addEventListener(EventType.LOAD, this.handleResult_.bind(this, file));
      reader.readAsText(file);
    }
  }


  /**
   * @param {DragEvent} event Event.
   */
  function handleStop(event) {
    event.stopPropagation();
    event.preventDefault();
    event.dataTransfer.dropEffect = 'copy';
  }

  /**
   * @module ol/interaction/DragRotateAndZoom
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~shiftKeyOnly}.
   * @property {number} [duration=400] Animation duration in milliseconds.
   */


  /**
   * @classdesc
   * Allows the user to zoom and rotate the map by clicking and dragging
   * on the map.  By default, this interaction is limited to when the shift
   * key is held down.
   *
   * This interaction is only supported for mouse devices.
   *
   * And this interaction is not included in the default interactions.
   * @api
   */
  var DragRotateAndZoom = /*@__PURE__*/(function (PointerInteraction$$1) {
    function DragRotateAndZoom(opt_options) {

      var options = opt_options ? opt_options : {};

      PointerInteraction$$1.call(/** @type {import("./Pointer.js").Options} */ this, (options));

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : shiftKeyOnly;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastMagnitude_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.lastScaleDelta_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 400;

    }

    if ( PointerInteraction$$1 ) DragRotateAndZoom.__proto__ = PointerInteraction$$1;
    DragRotateAndZoom.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    DragRotateAndZoom.prototype.constructor = DragRotateAndZoom;

    /**
     * @inheritDoc
     */
    DragRotateAndZoom.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return;
      }

      var map = mapBrowserEvent.map;
      var size = map.getSize();
      var offset = mapBrowserEvent.pixel;
      var deltaX = offset[0] - size[0] / 2;
      var deltaY = size[1] / 2 - offset[1];
      var theta = Math.atan2(deltaY, deltaX);
      var magnitude = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      var view = map.getView();
      if (view.getConstraints().rotation !== disable && this.lastAngle_ !== undefined) {
        var angleDelta = theta - this.lastAngle_;
        rotateWithoutConstraints(view, view.getRotation() - angleDelta);
      }
      this.lastAngle_ = theta;
      if (this.lastMagnitude_ !== undefined) {
        var resolution = this.lastMagnitude_ * (view.getResolution() / magnitude);
        zoomWithoutConstraints(view, resolution);
      }
      if (this.lastMagnitude_ !== undefined) {
        this.lastScaleDelta_ = this.lastMagnitude_ / magnitude;
      }
      this.lastMagnitude_ = magnitude;
    };

    /**
     * @inheritDoc
     */
    DragRotateAndZoom.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return true;
      }

      var map = mapBrowserEvent.map;
      var view = map.getView();
      view.setHint(ViewHint.INTERACTING, -1);
      var direction = this.lastScaleDelta_ - 1;
      rotate$3(view, view.getRotation());
      zoom(view, view.getResolution(), undefined, this.duration_, direction);
      this.lastScaleDelta_ = 0;
      return false;
    };

    /**
     * @inheritDoc
     */
    DragRotateAndZoom.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return false;
      }

      if (this.condition_(mapBrowserEvent)) {
        mapBrowserEvent.map.getView().setHint(ViewHint.INTERACTING, 1);
        this.lastAngle_ = undefined;
        this.lastMagnitude_ = undefined;
        return true;
      } else {
        return false;
      }
    };

    return DragRotateAndZoom;
  }(PointerInteraction));

  /**
   * @module ol/Feature
   */

  /**
   * @typedef {typeof Feature|typeof import("./render/Feature.js").default} FeatureClass
   */

  /**
   * @typedef {Feature|import("./render/Feature.js").default} FeatureLike
   */

  /**
   * @classdesc
   * A vector object for geographic features with a geometry and other
   * attribute properties, similar to the features in vector file formats like
   * GeoJSON.
   *
   * Features can be styled individually with `setStyle`; otherwise they use the
   * style of their vector layer.
   *
   * Note that attribute properties are set as {@link module:ol/Object} properties on
   * the feature object, so they are observable, and have get/set accessors.
   *
   * Typically, a feature has a single geometry property. You can set the
   * geometry using the `setGeometry` method and get it with `getGeometry`.
   * It is possible to store more than one geometry on a feature using attribute
   * properties. By default, the geometry used for rendering is identified by
   * the property name `geometry`. If you want to use another geometry property
   * for rendering, use the `setGeometryName` method to change the attribute
   * property associated with the geometry for the feature.  For example:
   *
   * ```js
   *
   * import Feature from 'ol/Feature';
   * import Polygon from 'ol/geom/Polygon';
   * import Point from 'ol/geom/Point';
   *
   * var feature = new Feature({
   *   geometry: new Polygon(polyCoords),
   *   labelPoint: new Point(labelCoords),
   *   name: 'My Polygon'
   * });
   *
   * // get the polygon geometry
   * var poly = feature.getGeometry();
   *
   * // Render the feature as a point using the coordinates from labelPoint
   * feature.setGeometryName('labelPoint');
   *
   * // get the point geometry
   * var point = feature.getGeometry();
   * ```
   *
   * @api
   */
  var Feature = /*@__PURE__*/(function (BaseObject$$1) {
    function Feature(opt_geometryOrProperties) {

      BaseObject$$1.call(this);

      /**
       * @private
       * @type {number|string|undefined}
       */
      this.id_ = undefined;

      /**
       * @type {string}
       * @private
       */
      this.geometryName_ = 'geometry';

      /**
       * User provided style.
       * @private
       * @type {import("./style/Style.js").StyleLike}
       */
      this.style_ = null;

      /**
       * @private
       * @type {import("./style/Style.js").StyleFunction|undefined}
       */
      this.styleFunction_ = undefined;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.geometryChangeKey_ = null;

      listen(
        this, getChangeEventType(this.geometryName_),
        this.handleGeometryChanged_, this);

      if (opt_geometryOrProperties) {
        if (typeof /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry === 'function') {
          var geometry = /** @type {import("./geom/Geometry.js").default} */ (opt_geometryOrProperties);
          this.setGeometry(geometry);
        } else {
          /** @type {Object<string, *>} */
          var properties = opt_geometryOrProperties;
          this.setProperties(properties);
        }
      }
    }

    if ( BaseObject$$1 ) Feature.__proto__ = BaseObject$$1;
    Feature.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Feature.prototype.constructor = Feature;

    /**
     * Clone this feature. If the original feature has a geometry it
     * is also cloned. The feature id is not set in the clone.
     * @return {Feature} The clone.
     * @api
     */
    Feature.prototype.clone = function clone () {
      var clone = new Feature(this.getProperties());
      clone.setGeometryName(this.getGeometryName());
      var geometry = this.getGeometry();
      if (geometry) {
        clone.setGeometry(geometry.clone());
      }
      var style = this.getStyle();
      if (style) {
        clone.setStyle(style);
      }
      return clone;
    };

    /**
     * Get the feature's default geometry.  A feature may have any number of named
     * geometries.  The "default" geometry (the one that is rendered by default) is
     * set when calling {@link module:ol/Feature~Feature#setGeometry}.
     * @return {import("./geom/Geometry.js").default|undefined} The default geometry for the feature.
     * @api
     * @observable
     */
    Feature.prototype.getGeometry = function getGeometry () {
      return (
        /** @type {import("./geom/Geometry.js").default|undefined} */ (this.get(this.geometryName_))
      );
    };

    /**
     * Get the feature identifier.  This is a stable identifier for the feature and
     * is either set when reading data from a remote source or set explicitly by
     * calling {@link module:ol/Feature~Feature#setId}.
     * @return {number|string|undefined} Id.
     * @api
     */
    Feature.prototype.getId = function getId () {
      return this.id_;
    };

    /**
     * Get the name of the feature's default geometry.  By default, the default
     * geometry is named `geometry`.
     * @return {string} Get the property name associated with the default geometry
     *     for this feature.
     * @api
     */
    Feature.prototype.getGeometryName = function getGeometryName () {
      return this.geometryName_;
    };

    /**
     * Get the feature's style. Will return what was provided to the
     * {@link module:ol/Feature~Feature#setStyle} method.
     * @return {import("./style/Style.js").StyleLike} The feature style.
     * @api
     */
    Feature.prototype.getStyle = function getStyle () {
      return this.style_;
    };

    /**
     * Get the feature's style function.
     * @return {import("./style/Style.js").StyleFunction|undefined} Return a function
     * representing the current style of this feature.
     * @api
     */
    Feature.prototype.getStyleFunction = function getStyleFunction () {
      return this.styleFunction_;
    };

    /**
     * @private
     */
    Feature.prototype.handleGeometryChange_ = function handleGeometryChange_ () {
      this.changed();
    };

    /**
     * @private
     */
    Feature.prototype.handleGeometryChanged_ = function handleGeometryChanged_ () {
      if (this.geometryChangeKey_) {
        unlistenByKey(this.geometryChangeKey_);
        this.geometryChangeKey_ = null;
      }
      var geometry = this.getGeometry();
      if (geometry) {
        this.geometryChangeKey_ = listen(geometry,
          EventType.CHANGE, this.handleGeometryChange_, this);
      }
      this.changed();
    };

    /**
     * Set the default geometry for the feature.  This will update the property
     * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
     * @param {import("./geom/Geometry.js").default|undefined} geometry The new geometry.
     * @api
     * @observable
     */
    Feature.prototype.setGeometry = function setGeometry (geometry) {
      this.set(this.geometryName_, geometry);
    };

    /**
     * Set the style for the feature.  This can be a single style object, an array
     * of styles, or a function that takes a resolution and returns an array of
     * styles. If it is `null` the feature has no style (a `null` style).
     * @param {import("./style/Style.js").StyleLike} style Style for this feature.
     * @api
     * @fires module:ol/events/Event~Event#event:change
     */
    Feature.prototype.setStyle = function setStyle (style) {
      this.style_ = style;
      this.styleFunction_ = !style ? undefined : createStyleFunction(style);
      this.changed();
    };

    /**
     * Set the feature id.  The feature id is considered stable and may be used when
     * requesting features or comparing identifiers returned from a remote source.
     * The feature id can be used with the
     * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
     * @param {number|string|undefined} id The feature id.
     * @api
     * @fires module:ol/events/Event~Event#event:change
     */
    Feature.prototype.setId = function setId (id) {
      this.id_ = id;
      this.changed();
    };

    /**
     * Set the property name to be used when getting the feature's default geometry.
     * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
     * this name will be returned.
     * @param {string} name The property name of the default geometry.
     * @api
     */
    Feature.prototype.setGeometryName = function setGeometryName (name) {
      unlisten(
        this, getChangeEventType(this.geometryName_),
        this.handleGeometryChanged_, this);
      this.geometryName_ = name;
      listen(
        this, getChangeEventType(this.geometryName_),
        this.handleGeometryChanged_, this);
      this.handleGeometryChanged_();
    };

    return Feature;
  }(BaseObject));


  /**
   * Convert the provided object into a feature style function.  Functions passed
   * through unchanged.  Arrays of Style or single style objects wrapped
   * in a new feature style function.
   * @param {!import("./style/Style.js").StyleFunction|!Array<import("./style/Style.js").default>|!import("./style/Style.js").default} obj
   *     A feature style function, a single style, or an array of styles.
   * @return {import("./style/Style.js").StyleFunction} A style function.
   */
  function createStyleFunction(obj) {
    if (typeof obj === 'function') {
      return obj;
    } else {
      /**
       * @type {Array<import("./style/Style.js").default>}
       */
      var styles;
      if (Array.isArray(obj)) {
        styles = obj;
      } else {
        assert(typeof /** @type {?} */ (obj).getZIndex === 'function',
          41); // Expected an `import("./style/Style.js").Style` or an array of `import("./style/Style.js").Style`
        var style = /** @type {import("./style/Style.js").default} */ (obj);
        styles = [style];
      }
      return function() {
        return styles;
      };
    }
  }

  /**
   * @module ol/geom/Circle
   */

  /**
   * @classdesc
   * Circle geometry.
   *
   * @api
   */
  var Circle = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function Circle(center, opt_radius, opt_layout) {
      SimpleGeometry$$1.call(this);
      if (opt_layout !== undefined && opt_radius === undefined) {
        this.setFlatCoordinates(opt_layout, center);
      } else {
        var radius = opt_radius ? opt_radius : 0;
        this.setCenterAndRadius(center, radius, opt_layout);
      }
    }

    if ( SimpleGeometry$$1 ) Circle.__proto__ = SimpleGeometry$$1;
    Circle.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    Circle.prototype.constructor = Circle;

    /**
     * Make a complete copy of the geometry.
     * @return {!Circle} Clone.
     * @override
     * @api
     */
    Circle.prototype.clone = function clone$$1 () {
      return new Circle(this.flatCoordinates.slice(), undefined, this.layout);
    };

    /**
     * @inheritDoc
     */
    Circle.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      var flatCoordinates = this.flatCoordinates;
      var dx = x - flatCoordinates[0];
      var dy = y - flatCoordinates[1];
      var squaredDistance = dx * dx + dy * dy;
      if (squaredDistance < minSquaredDistance) {
        if (squaredDistance === 0) {
          for (var i = 0; i < this.stride; ++i) {
            closestPoint[i] = flatCoordinates[i];
          }
        } else {
          var delta = this.getRadius() / Math.sqrt(squaredDistance);
          closestPoint[0] = flatCoordinates[0] + delta * dx;
          closestPoint[1] = flatCoordinates[1] + delta * dy;
          for (var i$1 = 2; i$1 < this.stride; ++i$1) {
            closestPoint[i$1] = flatCoordinates[i$1];
          }
        }
        closestPoint.length = this.stride;
        return squaredDistance;
      } else {
        return minSquaredDistance;
      }
    };

    /**
     * @inheritDoc
     */
    Circle.prototype.containsXY = function containsXY$$1 (x, y) {
      var flatCoordinates = this.flatCoordinates;
      var dx = x - flatCoordinates[0];
      var dy = y - flatCoordinates[1];
      return dx * dx + dy * dy <= this.getRadiusSquared_();
    };

    /**
     * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
     * @return {import("../coordinate.js").Coordinate} Center.
     * @api
     */
    Circle.prototype.getCenter = function getCenter$$1 () {
      return this.flatCoordinates.slice(0, this.stride);
    };

    /**
     * @inheritDoc
     */
    Circle.prototype.computeExtent = function computeExtent (extent) {
      var flatCoordinates = this.flatCoordinates;
      var radius = flatCoordinates[this.stride] - flatCoordinates[0];
      return createOrUpdate(
        flatCoordinates[0] - radius, flatCoordinates[1] - radius,
        flatCoordinates[0] + radius, flatCoordinates[1] + radius,
        extent);
    };

    /**
     * Return the radius of the circle.
     * @return {number} Radius.
     * @api
     */
    Circle.prototype.getRadius = function getRadius () {
      return Math.sqrt(this.getRadiusSquared_());
    };

    /**
     * @private
     * @return {number} Radius squared.
     */
    Circle.prototype.getRadiusSquared_ = function getRadiusSquared_ () {
      var dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];
      var dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];
      return dx * dx + dy * dy;
    };

    /**
     * @inheritDoc
     * @api
     */
    Circle.prototype.getType = function getType () {
      return GeometryType.CIRCLE;
    };

    /**
     * @inheritDoc
     * @api
     */
    Circle.prototype.intersectsExtent = function intersectsExtent (extent) {
      var circleExtent = this.getExtent();
      if (intersects(extent, circleExtent)) {
        var center = this.getCenter();

        if (extent[0] <= center[0] && extent[2] >= center[0]) {
          return true;
        }
        if (extent[1] <= center[1] && extent[3] >= center[1]) {
          return true;
        }

        return forEachCorner(extent, this.intersectsCoordinate, this);
      }
      return false;

    };

    /**
     * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
     * @param {import("../coordinate.js").Coordinate} center Center.
     * @api
     */
    Circle.prototype.setCenter = function setCenter (center) {
      var stride = this.stride;
      var radius = this.flatCoordinates[stride] - this.flatCoordinates[0];
      var flatCoordinates = center.slice();
      flatCoordinates[stride] = flatCoordinates[0] + radius;
      for (var i = 1; i < stride; ++i) {
        flatCoordinates[stride + i] = center[i];
      }
      this.setFlatCoordinates(this.layout, flatCoordinates);
      this.changed();
    };

    /**
     * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as
     * number) of the circle.
     * @param {!import("../coordinate.js").Coordinate} center Center.
     * @param {number} radius Radius.
     * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
     * @api
     */
    Circle.prototype.setCenterAndRadius = function setCenterAndRadius (center, radius, opt_layout) {
      this.setLayout(opt_layout, center, 0);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      /** @type {Array<number>} */
      var flatCoordinates = this.flatCoordinates;
      var offset = deflateCoordinate(
        flatCoordinates, 0, center, this.stride);
      flatCoordinates[offset++] = flatCoordinates[0] + radius;
      for (var i = 1, ii = this.stride; i < ii; ++i) {
        flatCoordinates[offset++] = flatCoordinates[i];
      }
      flatCoordinates.length = offset;
      this.changed();
    };

    /**
     * @inheritDoc
     */
    Circle.prototype.getCoordinates = function getCoordinates () {
      return null;
    };

    /**
     * @inheritDoc
     */
    Circle.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {};

    /**
     * Set the radius of the circle. The radius is in the units of the projection.
     * @param {number} radius Radius.
     * @api
     */
    Circle.prototype.setRadius = function setRadius (radius) {
      this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;
      this.changed();
    };

    return Circle;
  }(SimpleGeometry));


  /**
   * Transform each coordinate of the circle from one coordinate reference system
   * to another. The geometry is modified in place.
   * If you do not want the geometry modified in place, first clone() it and
   * then use this function on the clone.
   *
   * Internally a circle is currently represented by two points: the center of
   * the circle `[cx, cy]`, and the point to the right of the circle
   * `[cx + r, cy]`. This `transform` function just transforms these two points.
   * So the resulting geometry is also a circle, and that circle does not
   * correspond to the shape that would be obtained by transforming every point
   * of the original circle.
   *
   * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @return {Circle} This geometry.  Note that original geometry is
   *     modified in place.
   * @function
   * @api
   */
  Circle.prototype.transform;

  /**
   * @module ol/geom/flat/interpolate
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} fraction Fraction.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Destination.
   */
  function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest) {
    var pointX = NaN;
    var pointY = NaN;
    var n = (end - offset) / stride;
    if (n === 1) {
      pointX = flatCoordinates[offset];
      pointY = flatCoordinates[offset + 1];
    } else if (n == 2) {
      pointX = (1 - fraction) * flatCoordinates[offset] +
          fraction * flatCoordinates[offset + stride];
      pointY = (1 - fraction) * flatCoordinates[offset + 1] +
          fraction * flatCoordinates[offset + stride + 1];
    } else if (n !== 0) {
      var x1 = flatCoordinates[offset];
      var y1 = flatCoordinates[offset + 1];
      var length = 0;
      var cumulativeLengths = [0];
      for (var i = offset + stride; i < end; i += stride) {
        var x2 = flatCoordinates[i];
        var y2 = flatCoordinates[i + 1];
        length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        cumulativeLengths.push(length);
        x1 = x2;
        y1 = y2;
      }
      var target = fraction * length;
      var index = binarySearch(cumulativeLengths, target);
      if (index < 0) {
        var t = (target - cumulativeLengths[-index - 2]) /
            (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);
        var o = offset + (-index - 2) * stride;
        pointX = lerp(
          flatCoordinates[o], flatCoordinates[o + stride], t);
        pointY = lerp(
          flatCoordinates[o + 1], flatCoordinates[o + stride + 1], t);
      } else {
        pointX = flatCoordinates[offset + index * stride];
        pointY = flatCoordinates[offset + index * stride + 1];
      }
    }
    if (opt_dest) {
      opt_dest[0] = pointX;
      opt_dest[1] = pointY;
      return opt_dest;
    } else {
      return [pointX, pointY];
    }
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} m M.
   * @param {boolean} extrapolate Extrapolate.
   * @return {import("../../coordinate.js").Coordinate} Coordinate.
   */
  function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {
    if (end == offset) {
      return null;
    }
    var coordinate;
    if (m < flatCoordinates[offset + stride - 1]) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(offset, offset + stride);
        coordinate[stride - 1] = m;
        return coordinate;
      } else {
        return null;
      }
    } else if (flatCoordinates[end - 1] < m) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(end - stride, end);
        coordinate[stride - 1] = m;
        return coordinate;
      } else {
        return null;
      }
    }
    // FIXME use O(1) search
    if (m == flatCoordinates[offset + stride - 1]) {
      return flatCoordinates.slice(offset, offset + stride);
    }
    var lo = offset / stride;
    var hi = end / stride;
    while (lo < hi) {
      var mid = (lo + hi) >> 1;
      if (m < flatCoordinates[(mid + 1) * stride - 1]) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }
    var m0 = flatCoordinates[lo * stride - 1];
    if (m == m0) {
      return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);
    }
    var m1 = flatCoordinates[(lo + 1) * stride - 1];
    var t = (m - m0) / (m1 - m0);
    coordinate = [];
    for (var i = 0; i < stride - 1; ++i) {
      coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i],
        flatCoordinates[lo * stride + i], t));
    }
    coordinate.push(m);
    return coordinate;
  }


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} m M.
   * @param {boolean} extrapolate Extrapolate.
   * @param {boolean} interpolate Interpolate.
   * @return {import("../../coordinate.js").Coordinate} Coordinate.
   */
  function lineStringsCoordinateAtM(
    flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {
    if (interpolate) {
      return lineStringCoordinateAtM(
        flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);
    }
    var coordinate;
    if (m < flatCoordinates[stride - 1]) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(0, stride);
        coordinate[stride - 1] = m;
        return coordinate;
      } else {
        return null;
      }
    }
    if (flatCoordinates[flatCoordinates.length - 1] < m) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(flatCoordinates.length - stride);
        coordinate[stride - 1] = m;
        return coordinate;
      } else {
        return null;
      }
    }
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      if (offset == end) {
        continue;
      }
      if (m < flatCoordinates[offset + stride - 1]) {
        return null;
      } else if (m <= flatCoordinates[end - 1]) {
        return lineStringCoordinateAtM(
          flatCoordinates, offset, end, stride, m, false);
      }
      offset = end;
    }
    return null;
  }

  /**
   * @module ol/geom/flat/length
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {number} Length.
   */
  function lineStringLength(flatCoordinates, offset, end, stride) {
    var x1 = flatCoordinates[offset];
    var y1 = flatCoordinates[offset + 1];
    var length = 0;
    for (var i = offset + stride; i < end; i += stride) {
      var x2 = flatCoordinates[i];
      var y2 = flatCoordinates[i + 1];
      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      x1 = x2;
      y1 = y2;
    }
    return length;
  }

  /**
   * @module ol/geom/LineString
   */

  /**
   * @classdesc
   * Linestring geometry.
   *
   * @api
   */
  var LineString = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function LineString(coordinates, opt_layout) {

      SimpleGeometry$$1.call(this);

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.flatMidpoint_ = null;

      /**
       * @private
       * @type {number}
       */
      this.flatMidpointRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
      } else {
        this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
      }

    }

    if ( SimpleGeometry$$1 ) LineString.__proto__ = SimpleGeometry$$1;
    LineString.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    LineString.prototype.constructor = LineString;

    /**
     * Append the passed coordinate to the coordinates of the linestring.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @api
     */
    LineString.prototype.appendCoordinate = function appendCoordinate (coordinate) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = coordinate.slice();
      } else {
        extend(this.flatCoordinates, coordinate);
      }
      this.changed();
    };

    /**
     * Make a complete copy of the geometry.
     * @return {!LineString} Clone.
     * @override
     * @api
     */
    LineString.prototype.clone = function clone$$1 () {
      return new LineString(this.flatCoordinates.slice(), this.layout);
    };

    /**
     * @inheritDoc
     */
    LineString.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(maxSquaredDelta(
          this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestPoint(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
    };

    /**
     * Iterate over each segment, calling the provided callback.
     * If the callback returns a truthy value the function returns that
     * value immediately. Otherwise the function returns `false`.
     *
     * @param {function(this: S, import("../coordinate.js").Coordinate, import("../coordinate.js").Coordinate): T} callback Function
     *     called for each segment.
     * @return {T|boolean} Value.
     * @template T,S
     * @api
     */
    LineString.prototype.forEachSegment = function forEachSegment$1 (callback) {
      return forEach(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);
    };

    /**
     * Returns the coordinate at `m` using linear interpolation, or `null` if no
     * such coordinate exists.
     *
     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
     * M will return the first coordinate and Ms greater than the last M will
     * return the last coordinate.
     *
     * @param {number} m M.
     * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
     * @return {import("../coordinate.js").Coordinate} Coordinate.
     * @api
     */
    LineString.prototype.getCoordinateAtM = function getCoordinateAtM (m, opt_extrapolate) {
      if (this.layout != GeometryLayout.XYM &&
          this.layout != GeometryLayout.XYZM) {
        return null;
      }
      var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
      return lineStringCoordinateAtM(this.flatCoordinates, 0,
        this.flatCoordinates.length, this.stride, m, extrapolate);
    };

    /**
     * Return the coordinates of the linestring.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @override
     * @api
     */
    LineString.prototype.getCoordinates = function getCoordinates () {
      return inflateCoordinates(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };

    /**
     * Return the coordinate at the provided fraction along the linestring.
     * The `fraction` is a number between 0 and 1, where 0 is the start of the
     * linestring and 1 is the end.
     * @param {number} fraction Fraction.
     * @param {import("../coordinate.js").Coordinate=} opt_dest Optional coordinate whose values will
     *     be modified. If not provided, a new coordinate will be returned.
     * @return {import("../coordinate.js").Coordinate} Coordinate of the interpolated point.
     * @api
     */
    LineString.prototype.getCoordinateAt = function getCoordinateAt (fraction, opt_dest) {
      return interpolatePoint(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        fraction, opt_dest);
    };

    /**
     * Return the length of the linestring on projected plane.
     * @return {number} Length (on projected plane).
     * @api
     */
    LineString.prototype.getLength = function getLength () {
      return lineStringLength(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };

    /**
     * @return {Array<number>} Flat midpoint.
     */
    LineString.prototype.getFlatMidpoint = function getFlatMidpoint () {
      if (this.flatMidpointRevision_ != this.getRevision()) {
        this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);
        this.flatMidpointRevision_ = this.getRevision();
      }
      return this.flatMidpoint_;
    };

    /**
     * @inheritDoc
     */
    LineString.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {
      var simplifiedFlatCoordinates = [];
      simplifiedFlatCoordinates.length = douglasPeucker(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        squaredTolerance, simplifiedFlatCoordinates, 0);
      return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);
    };

    /**
     * @inheritDoc
     * @api
     */
    LineString.prototype.getType = function getType () {
      return GeometryType.LINE_STRING;
    };

    /**
     * @inheritDoc
     * @api
     */
    LineString.prototype.intersectsExtent = function intersectsExtent (extent) {
      return intersectsLineString(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,
        extent);
    };

    /**
     * Set the coordinates of the linestring.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    LineString.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    };

    return LineString;
  }(SimpleGeometry));

  /**
   * @module ol/geom/MultiLineString
   */

  /**
   * @classdesc
   * Multi-linestring geometry.
   *
   * @api
   */
  var MultiLineString = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function MultiLineString(coordinates, opt_layout, opt_ends) {

      SimpleGeometry$$1.call(this);

      /**
       * @type {Array<number>}
       * @private
       */
      this.ends_ = [];

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (Array.isArray(coordinates[0])) {
        this.setCoordinates(/** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
      } else if (opt_layout !== undefined && opt_ends) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
        this.ends_ = opt_ends;
      } else {
        var layout = this.getLayout();
        var lineStrings = /** @type {Array<LineString>} */ (coordinates);
        var flatCoordinates = [];
        var ends = [];
        for (var i = 0, ii = lineStrings.length; i < ii; ++i) {
          var lineString = lineStrings[i];
          if (i === 0) {
            layout = lineString.getLayout();
          }
          extend(flatCoordinates, lineString.getFlatCoordinates());
          ends.push(flatCoordinates.length);
        }
        this.setFlatCoordinates(layout, flatCoordinates);
        this.ends_ = ends;
      }

    }

    if ( SimpleGeometry$$1 ) MultiLineString.__proto__ = SimpleGeometry$$1;
    MultiLineString.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    MultiLineString.prototype.constructor = MultiLineString;

    /**
     * Append the passed linestring to the multilinestring.
     * @param {LineString} lineString LineString.
     * @api
     */
    MultiLineString.prototype.appendLineString = function appendLineString (lineString) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = lineString.getFlatCoordinates().slice();
      } else {
        extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());
      }
      this.ends_.push(this.flatCoordinates.length);
      this.changed();
    };

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiLineString} Clone.
     * @override
     * @api
     */
    MultiLineString.prototype.clone = function clone$$1 () {
      return new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
    };

    /**
     * @inheritDoc
     */
    MultiLineString.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(
          this.flatCoordinates, 0, this.ends_, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestArrayPoint(
        this.flatCoordinates, 0, this.ends_, this.stride,
        this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
    };

    /**
     * Returns the coordinate at `m` using linear interpolation, or `null` if no
     * such coordinate exists.
     *
     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
     * M will return the first coordinate and Ms greater than the last M will
     * return the last coordinate.
     *
     * `opt_interpolate` controls interpolation between consecutive LineStrings
     * within the MultiLineString. If `opt_interpolate` is `true` the coordinates
     * will be linearly interpolated between the last coordinate of one LineString
     * and the first coordinate of the next LineString.  If `opt_interpolate` is
     * `false` then the function will return `null` for Ms falling between
     * LineStrings.
     *
     * @param {number} m M.
     * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
     * @param {boolean=} opt_interpolate Interpolate. Default is `false`.
     * @return {import("../coordinate.js").Coordinate} Coordinate.
     * @api
     */
    MultiLineString.prototype.getCoordinateAtM = function getCoordinateAtM (m, opt_extrapolate, opt_interpolate) {
      if ((this.layout != GeometryLayout.XYM &&
           this.layout != GeometryLayout.XYZM) ||
          this.flatCoordinates.length === 0) {
        return null;
      }
      var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
      var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;
      return lineStringsCoordinateAtM(this.flatCoordinates, 0,
        this.ends_, this.stride, m, extrapolate, interpolate);
    };

    /**
     * Return the coordinates of the multilinestring.
     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
     * @override
     * @api
     */
    MultiLineString.prototype.getCoordinates = function getCoordinates () {
      return inflateCoordinatesArray(
        this.flatCoordinates, 0, this.ends_, this.stride);
    };

    /**
     * @return {Array<number>} Ends.
     */
    MultiLineString.prototype.getEnds = function getEnds () {
      return this.ends_;
    };

    /**
     * Return the linestring at the specified index.
     * @param {number} index Index.
     * @return {LineString} LineString.
     * @api
     */
    MultiLineString.prototype.getLineString = function getLineString (index) {
      if (index < 0 || this.ends_.length <= index) {
        return null;
      }
      return new LineString(this.flatCoordinates.slice(
        index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
    };

    /**
     * Return the linestrings of this multilinestring.
     * @return {Array<LineString>} LineStrings.
     * @api
     */
    MultiLineString.prototype.getLineStrings = function getLineStrings () {
      var flatCoordinates = this.flatCoordinates;
      var ends = this.ends_;
      var layout = this.layout;
      /** @type {Array<LineString>} */
      var lineStrings = [];
      var offset = 0;
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        var end = ends[i];
        var lineString = new LineString(flatCoordinates.slice(offset, end), layout);
        lineStrings.push(lineString);
        offset = end;
      }
      return lineStrings;
    };

    /**
     * @return {Array<number>} Flat midpoints.
     */
    MultiLineString.prototype.getFlatMidpoints = function getFlatMidpoints () {
      var midpoints = [];
      var flatCoordinates = this.flatCoordinates;
      var offset = 0;
      var ends = this.ends_;
      var stride = this.stride;
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        var end = ends[i];
        var midpoint = interpolatePoint(
          flatCoordinates, offset, end, stride, 0.5);
        extend(midpoints, midpoint);
        offset = end;
      }
      return midpoints;
    };

    /**
     * @inheritDoc
     */
    MultiLineString.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {
      var simplifiedFlatCoordinates = [];
      var simplifiedEnds = [];
      simplifiedFlatCoordinates.length = douglasPeuckerArray(
        this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance,
        simplifiedFlatCoordinates, 0, simplifiedEnds);
      return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
    };

    /**
     * @inheritDoc
     * @api
     */
    MultiLineString.prototype.getType = function getType () {
      return GeometryType.MULTI_LINE_STRING;
    };

    /**
     * @inheritDoc
     * @api
     */
    MultiLineString.prototype.intersectsExtent = function intersectsExtent (extent) {
      return intersectsLineStringArray(
        this.flatCoordinates, 0, this.ends_, this.stride, extent);
    };

    /**
     * Set the coordinates of the multilinestring.
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    MultiLineString.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 2);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      var ends = deflateCoordinatesArray(
        this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
      this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
      this.changed();
    };

    return MultiLineString;
  }(SimpleGeometry));

  /**
   * @module ol/geom/MultiPoint
   */

  /**
   * @classdesc
   * Multi-point geometry.
   *
   * @api
   */
  var MultiPoint = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function MultiPoint(coordinates, opt_layout) {
      SimpleGeometry$$1.call(this);
      if (opt_layout && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
      } else {
        this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
      }
    }

    if ( SimpleGeometry$$1 ) MultiPoint.__proto__ = SimpleGeometry$$1;
    MultiPoint.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    MultiPoint.prototype.constructor = MultiPoint;

    /**
     * Append the passed point to this multipoint.
     * @param {Point} point Point.
     * @api
     */
    MultiPoint.prototype.appendPoint = function appendPoint (point) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = point.getFlatCoordinates().slice();
      } else {
        extend(this.flatCoordinates, point.getFlatCoordinates());
      }
      this.changed();
    };

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiPoint} Clone.
     * @override
     * @api
     */
    MultiPoint.prototype.clone = function clone$$1 () {
      var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);
      return multiPoint;
    };

    /**
     * @inheritDoc
     */
    MultiPoint.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      var flatCoordinates = this.flatCoordinates;
      var stride = this.stride;
      for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        var squaredDistance$$1 = squaredDistance(
          x, y, flatCoordinates[i], flatCoordinates[i + 1]);
        if (squaredDistance$$1 < minSquaredDistance) {
          minSquaredDistance = squaredDistance$$1;
          for (var j = 0; j < stride; ++j) {
            closestPoint[j] = flatCoordinates[i + j];
          }
          closestPoint.length = stride;
        }
      }
      return minSquaredDistance;
    };

    /**
     * Return the coordinates of the multipoint.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @override
     * @api
     */
    MultiPoint.prototype.getCoordinates = function getCoordinates () {
      return inflateCoordinates(
        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };

    /**
     * Return the point at the specified index.
     * @param {number} index Index.
     * @return {Point} Point.
     * @api
     */
    MultiPoint.prototype.getPoint = function getPoint (index) {
      var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;
      if (index < 0 || n <= index) {
        return null;
      }
      return new Point(this.flatCoordinates.slice(
        index * this.stride, (index + 1) * this.stride), this.layout);
    };

    /**
     * Return the points of this multipoint.
     * @return {Array<Point>} Points.
     * @api
     */
    MultiPoint.prototype.getPoints = function getPoints () {
      var flatCoordinates = this.flatCoordinates;
      var layout = this.layout;
      var stride = this.stride;
      /** @type {Array<Point>} */
      var points = [];
      for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        var point = new Point(flatCoordinates.slice(i, i + stride), layout);
        points.push(point);
      }
      return points;
    };

    /**
     * @inheritDoc
     * @api
     */
    MultiPoint.prototype.getType = function getType () {
      return GeometryType.MULTI_POINT;
    };

    /**
     * @inheritDoc
     * @api
     */
    MultiPoint.prototype.intersectsExtent = function intersectsExtent (extent) {
      var flatCoordinates = this.flatCoordinates;
      var stride = this.stride;
      for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        var x = flatCoordinates[i];
        var y = flatCoordinates[i + 1];
        if (containsXY(extent, x, y)) {
          return true;
        }
      }
      return false;
    };

    /**
     * Set the coordinates of the multipoint.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
     * @override
     * @api
     */
    MultiPoint.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates, 0, coordinates, this.stride);
      this.changed();
    };

    return MultiPoint;
  }(SimpleGeometry));

  /**
   * @module ol/geom/flat/center
   */


  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @return {Array<number>} Flat centers.
   */
  function linearRingss$1(flatCoordinates, offset, endss, stride) {
    var flatCenters = [];
    var extent = createEmpty();
    for (var i = 0, ii = endss.length; i < ii; ++i) {
      var ends = endss[i];
      extent = createOrUpdateFromFlatCoordinates(flatCoordinates, offset, ends[0], stride);
      flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);
      offset = ends[ends.length - 1];
    }
    return flatCenters;
  }

  /**
   * @module ol/geom/MultiPolygon
   */

  /**
   * @classdesc
   * Multi-polygon geometry.
   *
   * @api
   */
  var MultiPolygon = /*@__PURE__*/(function (SimpleGeometry$$1) {
    function MultiPolygon(coordinates, opt_layout, opt_endss) {

      SimpleGeometry$$1.call(this);

      /**
       * @type {Array<Array<number>>}
       * @private
       */
      this.endss_ = [];

      /**
       * @private
       * @type {number}
       */
      this.flatInteriorPointsRevision_ = -1;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatInteriorPoints_ = null;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.orientedRevision_ = -1;

      /**
       * @private
       * @type {Array<number>}
       */
      this.orientedFlatCoordinates_ = null;

      if (!opt_endss && !Array.isArray(coordinates[0])) {
        var layout = this.getLayout();
        var polygons = /** @type {Array<Polygon>} */ (coordinates);
        var flatCoordinates = [];
        var endss = [];
        for (var i = 0, ii = polygons.length; i < ii; ++i) {
          var polygon = polygons[i];
          if (i === 0) {
            layout = polygon.getLayout();
          }
          var offset = flatCoordinates.length;
          var ends = polygon.getEnds();
          for (var j = 0, jj = ends.length; j < jj; ++j) {
            ends[j] += offset;
          }
          extend(flatCoordinates, polygon.getFlatCoordinates());
          endss.push(ends);
        }
        opt_layout = layout;
        coordinates = flatCoordinates;
        opt_endss = endss;
      }
      if (opt_layout !== undefined && opt_endss) {
        this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
        this.endss_ = opt_endss;
      } else {
        this.setCoordinates(/** @type {Array<Array<Array<import("../coordinate.js").Coordinate>>>} */ (coordinates),
          opt_layout);
      }

    }

    if ( SimpleGeometry$$1 ) MultiPolygon.__proto__ = SimpleGeometry$$1;
    MultiPolygon.prototype = Object.create( SimpleGeometry$$1 && SimpleGeometry$$1.prototype );
    MultiPolygon.prototype.constructor = MultiPolygon;

    /**
     * Append the passed polygon to this multipolygon.
     * @param {Polygon} polygon Polygon.
     * @api
     */
    MultiPolygon.prototype.appendPolygon = function appendPolygon (polygon) {
      /** @type {Array<number>} */
      var ends;
      if (!this.flatCoordinates) {
        this.flatCoordinates = polygon.getFlatCoordinates().slice();
        ends = polygon.getEnds().slice();
        this.endss_.push();
      } else {
        var offset = this.flatCoordinates.length;
        extend(this.flatCoordinates, polygon.getFlatCoordinates());
        ends = polygon.getEnds().slice();
        for (var i = 0, ii = ends.length; i < ii; ++i) {
          ends[i] += offset;
        }
      }
      this.endss_.push(ends);
      this.changed();
    };

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiPolygon} Clone.
     * @override
     * @api
     */
    MultiPolygon.prototype.clone = function clone$$1 () {
      var len = this.endss_.length;
      var newEndss = new Array(len);
      for (var i = 0; i < len; ++i) {
        newEndss[i] = this.endss_[i].slice();
      }

      return new MultiPolygon(
        this.flatCoordinates.slice(), this.layout, newEndss);
    };

    /**
     * @inheritDoc
     */
    MultiPolygon.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(multiArrayMaxSquaredDelta(
          this.flatCoordinates, 0, this.endss_, this.stride, 0));
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestMultiArrayPoint(
        this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,
        this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    };

    /**
     * @inheritDoc
     */
    MultiPolygon.prototype.containsXY = function containsXY$$1 (x, y) {
      return linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);
    };

    /**
     * Return the area of the multipolygon on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    MultiPolygon.prototype.getArea = function getArea$$1 () {
      return linearRingss(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);
    };

    /**
     * Get the coordinate array for this geometry.  This array has the structure
     * of a GeoJSON coordinate array for multi-polygons.
     *
     * @param {boolean=} opt_right Orient coordinates according to the right-hand
     *     rule (counter-clockwise for exterior and clockwise for interior rings).
     *     If `false`, coordinates will be oriented according to the left-hand rule
     *     (clockwise for exterior and counter-clockwise for interior rings).
     *     By default, coordinate orientation will depend on how the geometry was
     *     constructed.
     * @return {Array<Array<Array<import("../coordinate.js").Coordinate>>>} Coordinates.
     * @override
     * @api
     */
    MultiPolygon.prototype.getCoordinates = function getCoordinates (opt_right) {
      var flatCoordinates;
      if (opt_right !== undefined) {
        flatCoordinates = this.getOrientedFlatCoordinates().slice();
        orientLinearRingsArray(
          flatCoordinates, 0, this.endss_, this.stride, opt_right);
      } else {
        flatCoordinates = this.flatCoordinates;
      }

      return inflateMultiCoordinatesArray(
        flatCoordinates, 0, this.endss_, this.stride);
    };

    /**
     * @return {Array<Array<number>>} Endss.
     */
    MultiPolygon.prototype.getEndss = function getEndss () {
      return this.endss_;
    };

    /**
     * @return {Array<number>} Flat interior points.
     */
    MultiPolygon.prototype.getFlatInteriorPoints = function getFlatInteriorPoints () {
      if (this.flatInteriorPointsRevision_ != this.getRevision()) {
        var flatCenters = linearRingss$1(
          this.flatCoordinates, 0, this.endss_, this.stride);
        this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(
          this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,
          flatCenters);
        this.flatInteriorPointsRevision_ = this.getRevision();
      }
      return this.flatInteriorPoints_;
    };

    /**
     * Return the interior points as {@link module:ol/geom/MultiPoint multipoint}.
     * @return {MultiPoint} Interior points as XYM coordinates, where M is
     * the length of the horizontal intersection that the point belongs to.
     * @api
     */
    MultiPolygon.prototype.getInteriorPoints = function getInteriorPoints () {
      return new MultiPoint(this.getFlatInteriorPoints().slice(), GeometryLayout.XYM);
    };

    /**
     * @return {Array<number>} Oriented flat coordinates.
     */
    MultiPolygon.prototype.getOrientedFlatCoordinates = function getOrientedFlatCoordinates () {
      if (this.orientedRevision_ != this.getRevision()) {
        var flatCoordinates = this.flatCoordinates;
        if (linearRingsAreOriented(
          flatCoordinates, 0, this.endss_, this.stride)) {
          this.orientedFlatCoordinates_ = flatCoordinates;
        } else {
          this.orientedFlatCoordinates_ = flatCoordinates.slice();
          this.orientedFlatCoordinates_.length =
              orientLinearRingsArray(
                this.orientedFlatCoordinates_, 0, this.endss_, this.stride);
        }
        this.orientedRevision_ = this.getRevision();
      }
      return this.orientedFlatCoordinates_;
    };

    /**
     * @inheritDoc
     */
    MultiPolygon.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {
      var simplifiedFlatCoordinates = [];
      var simplifiedEndss = [];
      simplifiedFlatCoordinates.length = quantizeMultiArray(
        this.flatCoordinates, 0, this.endss_, this.stride,
        Math.sqrt(squaredTolerance),
        simplifiedFlatCoordinates, 0, simplifiedEndss);
      return new MultiPolygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEndss);
    };

    /**
     * Return the polygon at the specified index.
     * @param {number} index Index.
     * @return {Polygon} Polygon.
     * @api
     */
    MultiPolygon.prototype.getPolygon = function getPolygon (index) {
      if (index < 0 || this.endss_.length <= index) {
        return null;
      }
      var offset;
      if (index === 0) {
        offset = 0;
      } else {
        var prevEnds = this.endss_[index - 1];
        offset = prevEnds[prevEnds.length - 1];
      }
      var ends = this.endss_[index].slice();
      var end = ends[ends.length - 1];
      if (offset !== 0) {
        for (var i = 0, ii = ends.length; i < ii; ++i) {
          ends[i] -= offset;
        }
      }
      return new Polygon(this.flatCoordinates.slice(offset, end), this.layout, ends);
    };

    /**
     * Return the polygons of this multipolygon.
     * @return {Array<Polygon>} Polygons.
     * @api
     */
    MultiPolygon.prototype.getPolygons = function getPolygons () {
      var layout = this.layout;
      var flatCoordinates = this.flatCoordinates;
      var endss = this.endss_;
      var polygons = [];
      var offset = 0;
      for (var i = 0, ii = endss.length; i < ii; ++i) {
        var ends = endss[i].slice();
        var end = ends[ends.length - 1];
        if (offset !== 0) {
          for (var j = 0, jj = ends.length; j < jj; ++j) {
            ends[j] -= offset;
          }
        }
        var polygon = new Polygon(flatCoordinates.slice(offset, end), layout, ends);
        polygons.push(polygon);
        offset = end;
      }
      return polygons;
    };

    /**
     * @inheritDoc
     * @api
     */
    MultiPolygon.prototype.getType = function getType () {
      return GeometryType.MULTI_POLYGON;
    };

    /**
     * @inheritDoc
     * @api
     */
    MultiPolygon.prototype.intersectsExtent = function intersectsExtent (extent) {
      return intersectsLinearRingMultiArray(
        this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);
    };

    /**
     * Set the coordinates of the multipolygon.
     * @param {!Array<Array<Array<import("../coordinate.js").Coordinate>>>} coordinates Coordinates.
     * @param {GeometryLayout=} opt_layout Layout.
     * @override
     * @api
     */
    MultiPolygon.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {
      this.setLayout(opt_layout, coordinates, 3);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      var endss = deflateMultiCoordinatesArray(
        this.flatCoordinates, 0, coordinates, this.stride, this.endss_);
      if (endss.length === 0) {
        this.flatCoordinates.length = 0;
      } else {
        var lastEnds = endss[endss.length - 1];
        this.flatCoordinates.length = lastEnds.length === 0 ?
          0 : lastEnds[lastEnds.length - 1];
      }
      this.changed();
    };

    return MultiPolygon;
  }(SimpleGeometry));

  /**
   * @module ol/LayerType
   */

  /**
   * A layer type used when creating layer renderers.
   * @enum {string}
   */
  var LayerType = {
    IMAGE: 'IMAGE',
    TILE: 'TILE',
    VECTOR_TILE: 'VECTOR_TILE',
    VECTOR: 'VECTOR'
  };

  /**
   * @module ol/layer/VectorRenderType
   */

  /**
   * @enum {string}
   * Render mode for vector layers:
   *  * `'image'`: Vector layers are rendered as images. Great performance, but
   *    point symbols and texts are always rotated with the view and pixels are
   *    scaled during zoom animations.
   *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering
   *    even during animations, but slower performance.
   * @api
   */
  var VectorRenderType = {
    IMAGE: 'image',
    VECTOR: 'vector'
  };

  /**
   * @module ol/color
   */


  /**
   * A color represented as a short array [red, green, blue, alpha].
   * red, green, and blue should be integers in the range 0..255 inclusive.
   * alpha should be a float in the range 0..1 inclusive. If no alpha value is
   * given then `1` will be used.
   * @typedef {Array<number>} Color
   * @api
   */


  /**
   * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.
   * @const
   * @type {RegExp}
   * @private
   */
  var HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;


  /**
   * Regular expression for matching potential named color style strings.
   * @const
   * @type {RegExp}
   * @private
   */
  var NAMED_COLOR_RE_ = /^([a-z]*)$/i;


  /**
   * Return the color as an rgba string.
   * @param {Color|string} color Color.
   * @return {string} Rgba string.
   * @api
   */
  function asString(color) {
    if (typeof color === 'string') {
      return color;
    } else {
      return toString(color);
    }
  }

  /**
   * Return named color as an rgba string.
   * @param {string} color Named color.
   * @return {string} Rgb string.
   */
  function fromNamed(color) {
    var el = document.createElement('div');
    el.style.color = color;
    if (el.style.color !== '') {
      document.body.appendChild(el);
      var rgb = getComputedStyle(el).color;
      document.body.removeChild(el);
      return rgb;
    } else {
      return '';
    }
  }


  /**
   * @param {string} s String.
   * @return {Color} Color.
   */
  var fromString = (
    function() {

      // We maintain a small cache of parsed strings.  To provide cheap LRU-like
      // semantics, whenever the cache grows too large we simply delete an
      // arbitrary 25% of the entries.

      /**
       * @const
       * @type {number}
       */
      var MAX_CACHE_SIZE = 1024;

      /**
       * @type {Object<string, Color>}
       */
      var cache = {};

      /**
       * @type {number}
       */
      var cacheSize = 0;

      return (
        /**
         * @param {string} s String.
         * @return {Color} Color.
         */
        function(s) {
          var color;
          if (cache.hasOwnProperty(s)) {
            color = cache[s];
          } else {
            if (cacheSize >= MAX_CACHE_SIZE) {
              var i = 0;
              for (var key in cache) {
                if ((i++ & 3) === 0) {
                  delete cache[key];
                  --cacheSize;
                }
              }
            }
            color = fromStringInternal_(s);
            cache[s] = color;
            ++cacheSize;
          }
          return color;
        }
      );

    })();

  /**
   * Return the color as an array. This function maintains a cache of calculated
   * arrays which means the result should not be modified.
   * @param {Color|string} color Color.
   * @return {Color} Color.
   * @api
   */
  function asArray(color) {
    if (Array.isArray(color)) {
      return color;
    } else {
      return fromString(color);
    }
  }

  /**
   * @param {string} s String.
   * @private
   * @return {Color} Color.
   */
  function fromStringInternal_(s) {
    var r, g, b, a, color;

    if (NAMED_COLOR_RE_.exec(s)) {
      s = fromNamed(s);
    }

    if (HEX_COLOR_RE_.exec(s)) { // hex
      var n = s.length - 1; // number of hex digits
      var d; // number of digits per channel
      if (n <= 4) {
        d = 1;
      } else {
        d = 2;
      }
      var hasAlpha = n === 4 || n === 8;
      r = parseInt(s.substr(1 + 0 * d, d), 16);
      g = parseInt(s.substr(1 + 1 * d, d), 16);
      b = parseInt(s.substr(1 + 2 * d, d), 16);
      if (hasAlpha) {
        a = parseInt(s.substr(1 + 3 * d, d), 16);
      } else {
        a = 255;
      }
      if (d == 1) {
        r = (r << 4) + r;
        g = (g << 4) + g;
        b = (b << 4) + b;
        if (hasAlpha) {
          a = (a << 4) + a;
        }
      }
      color = [r, g, b, a / 255];
    } else if (s.indexOf('rgba(') == 0) { // rgba()
      color = s.slice(5, -1).split(',').map(Number);
      normalize(color);
    } else if (s.indexOf('rgb(') == 0) { // rgb()
      color = s.slice(4, -1).split(',').map(Number);
      color.push(1);
      normalize(color);
    } else {
      assert(false, 14); // Invalid color
    }
    return color;
  }


  /**
   * TODO this function is only used in the test, we probably shouldn't export it
   * @param {Color} color Color.
   * @return {Color} Clamped color.
   */
  function normalize(color) {
    color[0] = clamp((color[0] + 0.5) | 0, 0, 255);
    color[1] = clamp((color[1] + 0.5) | 0, 0, 255);
    color[2] = clamp((color[2] + 0.5) | 0, 0, 255);
    color[3] = clamp(color[3], 0, 1);
    return color;
  }


  /**
   * @param {Color} color Color.
   * @return {string} String.
   */
  function toString(color) {
    var r = color[0];
    if (r != (r | 0)) {
      r = (r + 0.5) | 0;
    }
    var g = color[1];
    if (g != (g | 0)) {
      g = (g + 0.5) | 0;
    }
    var b = color[2];
    if (b != (b | 0)) {
      b = (b + 0.5) | 0;
    }
    var a = color[3] === undefined ? 1 : color[3];
    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
  }

  /**
   * @module ol/colorlike
   */


  /**
   * A type accepted by CanvasRenderingContext2D.fillStyle
   * or CanvasRenderingContext2D.strokeStyle.
   * Represents a color, pattern, or gradient. The origin for patterns and
   * gradients as fill style is an increment of 512 css pixels from map coordinate
   * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image
   * must be a factor of two (2, 4, 8, ..., 512).
   *
   * @typedef {string|CanvasPattern|CanvasGradient} ColorLike
   * @api
   */


  /**
   * @param {import("./color.js").Color|ColorLike} color Color.
   * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.
   * @api
   */
  function asColorLike(color) {
    if (Array.isArray(color)) {
      return toString(color);
    } else {
      return color;
    }
  }

  /**
   * @module ol/ImageState
   */

  /**
   * @enum {number}
   */
  var ImageState = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    ERROR: 3
  };

  /**
   * @module ol/structs/LRUCache
   */


  /**
   * @typedef {Object} Entry
   * @property {string} key_
   * @property {Object} newer
   * @property {Object} older
   * @property {*} value_
   */


  /**
   * @classdesc
   * Implements a Least-Recently-Used cache where the keys do not conflict with
   * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
   * items from the cache is the responsibility of the user.
   *
   * @fires import("../events/Event.js").Event
   * @template T
   */
  var LRUCache = /*@__PURE__*/(function (EventTarget) {
    function LRUCache(opt_highWaterMark) {

      EventTarget.call(this);

      /**
       * @type {number}
       */
      this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;

      /**
       * @private
       * @type {number}
       */
      this.count_ = 0;

      /**
       * @private
       * @type {!Object<string, Entry>}
       */
      this.entries_ = {};

      /**
       * @private
       * @type {?Entry}
       */
      this.oldest_ = null;

      /**
       * @private
       * @type {?Entry}
       */
      this.newest_ = null;

    }

    if ( EventTarget ) LRUCache.__proto__ = EventTarget;
    LRUCache.prototype = Object.create( EventTarget && EventTarget.prototype );
    LRUCache.prototype.constructor = LRUCache;


    /**
     * @return {boolean} Can expire cache.
     */
    LRUCache.prototype.canExpireCache = function canExpireCache () {
      return this.getCount() > this.highWaterMark;
    };


    /**
     * FIXME empty description for jsdoc
     */
    LRUCache.prototype.clear = function clear () {
      this.count_ = 0;
      this.entries_ = {};
      this.oldest_ = null;
      this.newest_ = null;
      this.dispatchEvent(EventType.CLEAR);
    };


    /**
     * @param {string} key Key.
     * @return {boolean} Contains key.
     */
    LRUCache.prototype.containsKey = function containsKey (key) {
      return this.entries_.hasOwnProperty(key);
    };


    /**
     * @param {function(this: S, T, string, LRUCache): ?} f The function
     *     to call for every entry from the oldest to the newer. This function takes
     *     3 arguments (the entry value, the entry key and the LRUCache object).
     *     The return value is ignored.
     * @param {S=} opt_this The object to use as `this` in `f`.
     * @template S
     */
    LRUCache.prototype.forEach = function forEach (f, opt_this) {
      var entry = this.oldest_;
      while (entry) {
        f.call(opt_this, entry.value_, entry.key_, this);
        entry = entry.newer;
      }
    };


    /**
     * @param {string} key Key.
     * @return {T} Value.
     */
    LRUCache.prototype.get = function get (key) {
      var entry = this.entries_[key];
      assert(entry !== undefined,
        15); // Tried to get a value for a key that does not exist in the cache
      if (entry === this.newest_) {
        return entry.value_;
      } else if (entry === this.oldest_) {
        this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);
        this.oldest_.older = null;
      } else {
        entry.newer.older = entry.older;
        entry.older.newer = entry.newer;
      }
      entry.newer = null;
      entry.older = this.newest_;
      this.newest_.newer = entry;
      this.newest_ = entry;
      return entry.value_;
    };


    /**
     * Remove an entry from the cache.
     * @param {string} key The entry key.
     * @return {T} The removed entry.
     */
    LRUCache.prototype.remove = function remove (key) {
      var entry = this.entries_[key];
      assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
      if (entry === this.newest_) {
        this.newest_ = /** @type {Entry} */ (entry.older);
        if (this.newest_) {
          this.newest_.newer = null;
        }
      } else if (entry === this.oldest_) {
        this.oldest_ = /** @type {Entry} */ (entry.newer);
        if (this.oldest_) {
          this.oldest_.older = null;
        }
      } else {
        entry.newer.older = entry.older;
        entry.older.newer = entry.newer;
      }
      delete this.entries_[key];
      --this.count_;
      return entry.value_;
    };


    /**
     * @return {number} Count.
     */
    LRUCache.prototype.getCount = function getCount () {
      return this.count_;
    };


    /**
     * @return {Array<string>} Keys.
     */
    LRUCache.prototype.getKeys = function getKeys () {
      var keys = new Array(this.count_);
      var i = 0;
      var entry;
      for (entry = this.newest_; entry; entry = entry.older) {
        keys[i++] = entry.key_;
      }
      return keys;
    };


    /**
     * @return {Array<T>} Values.
     */
    LRUCache.prototype.getValues = function getValues () {
      var values = new Array(this.count_);
      var i = 0;
      var entry;
      for (entry = this.newest_; entry; entry = entry.older) {
        values[i++] = entry.value_;
      }
      return values;
    };


    /**
     * @return {T} Last value.
     */
    LRUCache.prototype.peekLast = function peekLast () {
      return this.oldest_.value_;
    };


    /**
     * @return {string} Last key.
     */
    LRUCache.prototype.peekLastKey = function peekLastKey () {
      return this.oldest_.key_;
    };


    /**
     * Get the key of the newest item in the cache.  Throws if the cache is empty.
     * @return {string} The newest key.
     */
    LRUCache.prototype.peekFirstKey = function peekFirstKey () {
      return this.newest_.key_;
    };


    /**
     * @return {T} value Value.
     */
    LRUCache.prototype.pop = function pop () {
      var entry = this.oldest_;
      delete this.entries_[entry.key_];
      if (entry.newer) {
        entry.newer.older = null;
      }
      this.oldest_ = /** @type {Entry} */ (entry.newer);
      if (!this.oldest_) {
        this.newest_ = null;
      }
      --this.count_;
      return entry.value_;
    };


    /**
     * @param {string} key Key.
     * @param {T} value Value.
     */
    LRUCache.prototype.replace = function replace (key, value) {
      this.get(key); // update `newest_`
      this.entries_[key].value_ = value;
    };


    /**
     * @param {string} key Key.
     * @param {T} value Value.
     */
    LRUCache.prototype.set = function set (key, value) {
      assert(!(key in this.entries_),
        16); // Tried to set a value for a key that is used already
      var entry = /** @type {Entry} */ ({
        key_: key,
        newer: null,
        older: this.newest_,
        value_: value
      });
      if (!this.newest_) {
        this.oldest_ = entry;
      } else {
        this.newest_.newer = entry;
      }
      this.newest_ = entry;
      this.entries_[key] = entry;
      ++this.count_;
    };


    /**
     * Set a maximum number of entries for the cache.
     * @param {number} size Cache size.
     * @api
     */
    LRUCache.prototype.setSize = function setSize (size) {
      this.highWaterMark = size;
    };


    /**
     * Prune the cache.
     */
    LRUCache.prototype.prune = function prune () {
      while (this.canExpireCache()) {
        this.pop();
      }
    };

    return LRUCache;
  }(Target));

  /**
   * @module ol/render/canvas
   */


  /**
   * @typedef {Object} FillState
   * @property {import("../colorlike.js").ColorLike} fillStyle
   */


  /**
   * @typedef {Object} FillStrokeState
   * @property {import("../colorlike.js").ColorLike} [currentFillStyle]
   * @property {import("../colorlike.js").ColorLike} [currentStrokeStyle]
   * @property {string} [currentLineCap]
   * @property {Array<number>} currentLineDash
   * @property {number} [currentLineDashOffset]
   * @property {string} [currentLineJoin]
   * @property {number} [currentLineWidth]
   * @property {number} [currentMiterLimit]
   * @property {number} [lastStroke]
   * @property {import("../colorlike.js").ColorLike} [fillStyle]
   * @property {import("../colorlike.js").ColorLike} [strokeStyle]
   * @property {string} [lineCap]
   * @property {Array<number>} lineDash
   * @property {number} [lineDashOffset]
   * @property {string} [lineJoin]
   * @property {number} [lineWidth]
   * @property {number} [miterLimit]
   */


  /**
   * @typedef {Object} StrokeState
   * @property {string} lineCap
   * @property {Array<number>} lineDash
   * @property {number} lineDashOffset
   * @property {string} lineJoin
   * @property {number} lineWidth
   * @property {number} miterLimit
   * @property {import("../colorlike.js").ColorLike} strokeStyle
   */


  /**
   * @typedef {Object} TextState
   * @property {string} font
   * @property {string} [textAlign]
   * @property {string} textBaseline
   * @property {string} [placement]
   * @property {number} [maxAngle]
   * @property {boolean} [overflow]
   * @property {import("../style/Fill.js").default} [backgroundFill]
   * @property {import("../style/Stroke.js").default} [backgroundStroke]
   * @property {number} [scale]
   * @property {Array<number>} [padding]
   */


  /**
   * Container for decluttered replay instructions that need to be rendered or
   * omitted together, i.e. when styles render both an image and text, or for the
   * characters that form text along lines. The basic elements of this array are
   * `[minX, minY, maxX, maxY, count]`, where the first four entries are the
   * rendered extent of the group in pixel space. `count` is the number of styles
   * in the group, i.e. 2 when an image and a text are grouped, or 1 otherwise.
   * In addition to these four elements, declutter instruction arrays (i.e. the
   * arguments to {@link module:ol/render/canvas~drawImage} are appended to the array.
   * @typedef {Array<*>} DeclutterGroup
   */


  /**
   * @const
   * @type {string}
   */
  var defaultFont = '10px sans-serif';


  /**
   * @const
   * @type {import("../color.js").Color}
   */
  var defaultFillStyle = [0, 0, 0, 1];


  /**
   * @const
   * @type {string}
   */
  var defaultLineCap = 'round';


  /**
   * @const
   * @type {Array<number>}
   */
  var defaultLineDash = [];


  /**
   * @const
   * @type {number}
   */
  var defaultLineDashOffset = 0;


  /**
   * @const
   * @type {string}
   */
  var defaultLineJoin = 'round';


  /**
   * @const
   * @type {number}
   */
  var defaultMiterLimit = 10;


  /**
   * @const
   * @type {import("../color.js").Color}
   */
  var defaultStrokeStyle = [0, 0, 0, 1];


  /**
   * @const
   * @type {string}
   */
  var defaultTextAlign = 'center';


  /**
   * @const
   * @type {string}
   */
  var defaultTextBaseline = 'middle';


  /**
   * @const
   * @type {Array<number>}
   */
  var defaultPadding = [0, 0, 0, 0];


  /**
   * @const
   * @type {number}
   */
  var defaultLineWidth = 1;


  /**
   * The label cache for text rendering. To change the default cache size of 2048
   * entries, use {@link module:ol/structs/LRUCache#setSize}.
   * @type {LRUCache<HTMLCanvasElement>}
   * @api
   */
  var labelCache = new LRUCache();


  /**
   * @type {!Object<string, number>}
   */
  var checkedFonts = {};


  /**
   * @type {CanvasRenderingContext2D}
   */
  var measureContext = null;


  /**
   * @type {!Object<string, number>}
   */
  var textHeights = {};


  /**
   * Clears the label cache when a font becomes available.
   * @param {string} fontSpec CSS font spec.
   */
  var checkFont = (function() {
    var retries = 60;
    var checked = checkedFonts;
    var size = '32px ';
    var referenceFonts = ['monospace', 'serif'];
    var len = referenceFonts.length;
    var text = 'wmytzilWMYTZIL@#/&?$%10\uF013';
    var interval, referenceWidth;

    function isAvailable(font) {
      var context = getMeasureContext();
      // Check weight ranges according to
      // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights
      for (var weight = 100; weight <= 700; weight += 300) {
        var fontWeight = weight + ' ';
        var available = true;
        for (var i = 0; i < len; ++i) {
          var referenceFont = referenceFonts[i];
          context.font = fontWeight + size + referenceFont;
          referenceWidth = context.measureText(text).width;
          if (font != referenceFont) {
            context.font = fontWeight + size + font + ',' + referenceFont;
            var width = context.measureText(text).width;
            // If width and referenceWidth are the same, then the fallback was used
            // instead of the font we wanted, so the font is not available.
            available = available && width != referenceWidth;
          }
        }
        if (available) {
          // Consider font available when it is available in one weight range.
          //FIXME With this we miss rare corner cases, so we should consider
          //FIXME checking availability for each requested weight range.
          return true;
        }
      }
      return false;
    }

    function check() {
      var done = true;
      for (var font in checked) {
        if (checked[font] < retries) {
          if (isAvailable(font)) {
            checked[font] = retries;
            clear(textHeights);
            // Make sure that loaded fonts are picked up by Safari
            measureContext = null;
            labelCache.clear();
          } else {
            ++checked[font];
            done = false;
          }
        }
      }
      if (done) {
        clearInterval(interval);
        interval = undefined;
      }
    }

    return function(fontSpec) {
      var fontFamilies = getFontFamilies(fontSpec);
      if (!fontFamilies) {
        return;
      }
      for (var i = 0, ii = fontFamilies.length; i < ii; ++i) {
        var fontFamily = fontFamilies[i];
        if (!(fontFamily in checked)) {
          checked[fontFamily] = retries;
          if (!isAvailable(fontFamily)) {
            checked[fontFamily] = 0;
            if (interval === undefined) {
              interval = setInterval(check, 32);
            }
          }
        }
      }
    };
  })();


  /**
   * @return {CanvasRenderingContext2D} Measure context.
   */
  function getMeasureContext() {
    if (!measureContext) {
      measureContext = createCanvasContext2D(1, 1);
    }
    return measureContext;
  }


  /**
   * @param {string} font Font to use for measuring.
   * @return {import("../size.js").Size} Measurement.
   */
  var measureTextHeight = (function() {
    var span;
    var heights = textHeights;
    return function(font) {
      var height = heights[font];
      if (height == undefined) {
        if (!span) {
          span = document.createElement('span');
          span.textContent = 'M';
          span.style.margin = span.style.padding = '0 !important';
          span.style.position = 'absolute !important';
          span.style.left = '-99999px !important';
        }
        span.style.font = font;
        document.body.appendChild(span);
        height = heights[font] = span.offsetHeight;
        document.body.removeChild(span);
      }
      return height;
    };
  })();


  /**
   * @param {string} font Font.
   * @param {string} text Text.
   * @return {number} Width.
   */
  function measureTextWidth(font, text) {
    var measureContext = getMeasureContext();
    if (font != measureContext.font) {
      measureContext.font = font;
    }
    return measureContext.measureText(text).width;
  }


  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} rotation Rotation.
   * @param {number} offsetX X offset.
   * @param {number} offsetY Y offset.
   */
  function rotateAtOffset(context, rotation, offsetX, offsetY) {
    if (rotation !== 0) {
      context.translate(offsetX, offsetY);
      context.rotate(rotation);
      context.translate(-offsetX, -offsetY);
    }
  }


  var resetTransform = create();


  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../transform.js").Transform|null} transform Transform.
   * @param {number} opacity Opacity.
   * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.
   * @param {number} originX Origin X.
   * @param {number} originY Origin Y.
   * @param {number} w Width.
   * @param {number} h Height.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} scale Scale.
   */
  function drawImage(context,
    transform, opacity, image, originX, originY, w, h, x, y, scale) {
    var alpha;
    if (opacity != 1) {
      alpha = context.globalAlpha;
      context.globalAlpha = alpha * opacity;
    }
    if (transform) {
      context.setTransform.apply(context, transform);
    }

    context.drawImage(image, originX, originY, w, h, x, y, w * scale, h * scale);

    if (alpha) {
      context.globalAlpha = alpha;
    }
    if (transform) {
      context.setTransform.apply(context, resetTransform);
    }
  }

  /**
   * @module ol/style/Image
   */


  /**
   * @typedef {Object} Options
   * @property {number} opacity
   * @property {boolean} rotateWithView
   * @property {number} rotation
   * @property {number} scale
   */


  /**
   * @classdesc
   * A base class used for creating subclasses and not instantiated in
   * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and
   * {@link module:ol/style/RegularShape~RegularShape}.
   * @abstract
   * @api
   */
  var ImageStyle = function ImageStyle(options) {

    /**
     * @private
     * @type {number}
     */
    this.opacity_ = options.opacity;

    /**
     * @private
     * @type {boolean}
     */
    this.rotateWithView_ = options.rotateWithView;

    /**
     * @private
     * @type {number}
     */
    this.rotation_ = options.rotation;

    /**
     * @private
     * @type {number}
     */
    this.scale_ = options.scale;

  };

  /**
   * Clones the style.
   * @return {ImageStyle} The cloned style.
   * @api
   */
  ImageStyle.prototype.clone = function clone () {
    return new ImageStyle({
      opacity: this.getOpacity(),
      scale: this.getScale(),
      rotation: this.getRotation(),
      rotateWithView: this.getRotateWithView()
    });
  };

  /**
   * Get the symbolizer opacity.
   * @return {number} Opacity.
   * @api
   */
  ImageStyle.prototype.getOpacity = function getOpacity () {
    return this.opacity_;
  };

  /**
   * Determine whether the symbolizer rotates with the map.
   * @return {boolean} Rotate with map.
   * @api
   */
  ImageStyle.prototype.getRotateWithView = function getRotateWithView () {
    return this.rotateWithView_;
  };

  /**
   * Get the symoblizer rotation.
   * @return {number} Rotation.
   * @api
   */
  ImageStyle.prototype.getRotation = function getRotation () {
    return this.rotation_;
  };

  /**
   * Get the symbolizer scale.
   * @return {number} Scale.
   * @api
   */
  ImageStyle.prototype.getScale = function getScale () {
    return this.scale_;
  };

  /**
   * This method is deprecated and always returns false.
   * @return {boolean} false.
   * @deprecated
   * @api
   */
  ImageStyle.prototype.getSnapToPixel = function getSnapToPixel () {
    return false;
  };

  /**
   * Get the anchor point in pixels. The anchor determines the center point for the
   * symbolizer.
   * @abstract
   * @return {Array<number>} Anchor.
   */
  ImageStyle.prototype.getAnchor = function getAnchor () {
    return abstract();
  };

  /**
   * Get the image element for the symbolizer.
   * @abstract
   * @param {number} pixelRatio Pixel ratio.
   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
   */
  ImageStyle.prototype.getImage = function getImage (pixelRatio) {
    return abstract();
  };

  /**
   * @abstract
   * @param {number} pixelRatio Pixel ratio.
   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
   */
  ImageStyle.prototype.getHitDetectionImage = function getHitDetectionImage (pixelRatio) {
    return abstract();
  };

  /**
   * @abstract
   * @return {import("../ImageState.js").default} Image state.
   */
  ImageStyle.prototype.getImageState = function getImageState () {
    return abstract();
  };

  /**
   * @abstract
   * @return {import("../size.js").Size} Image size.
   */
  ImageStyle.prototype.getImageSize = function getImageSize () {
    return abstract();
  };

  /**
   * @abstract
   * @return {import("../size.js").Size} Size of the hit-detection image.
   */
  ImageStyle.prototype.getHitDetectionImageSize = function getHitDetectionImageSize () {
    return abstract();
  };

  /**
   * Get the origin of the symbolizer.
   * @abstract
   * @return {Array<number>} Origin.
   */
  ImageStyle.prototype.getOrigin = function getOrigin () {
    return abstract();
  };

  /**
   * Get the size of the symbolizer (in pixels).
   * @abstract
   * @return {import("../size.js").Size} Size.
   */
  ImageStyle.prototype.getSize = function getSize () {
    return abstract();
  };

  /**
   * Set the opacity.
   *
   * @param {number} opacity Opacity.
   * @api
   */
  ImageStyle.prototype.setOpacity = function setOpacity (opacity) {
    this.opacity_ = opacity;
  };

  /**
   * Set whether to rotate the style with the view.
   *
   * @param {boolean} rotateWithView Rotate with map.
   * @api
   */
  ImageStyle.prototype.setRotateWithView = function setRotateWithView (rotateWithView) {
    this.rotateWithView_ = rotateWithView;
  };

  /**
   * Set the rotation.
   *
   * @param {number} rotation Rotation.
   * @api
   */
  ImageStyle.prototype.setRotation = function setRotation (rotation) {
    this.rotation_ = rotation;
  };
  /**
   * Set the scale.
   *
   * @param {number} scale Scale.
   * @api
   */
  ImageStyle.prototype.setScale = function setScale (scale) {
    this.scale_ = scale;
  };

  /**
   * This method is deprecated and does nothing.
   * @param {boolean} snapToPixel Snap to pixel?
   * @deprecated
   * @api
   */
  ImageStyle.prototype.setSnapToPixel = function setSnapToPixel (snapToPixel) {};

  /**
   * @abstract
   * @param {function(this: T, import("../events/Event.js").default)} listener Listener function.
   * @param {T} thisArg Value to use as `this` when executing `listener`.
   * @return {import("../events.js").EventsKey|undefined} Listener key.
   * @template T
   */
  ImageStyle.prototype.listenImageChange = function listenImageChange (listener, thisArg) {
    return abstract();
  };

  /**
   * Load not yet loaded URI.
   * @abstract
   */
  ImageStyle.prototype.load = function load () {
    abstract();
  };

  /**
   * @abstract
   * @param {function(this: T, import("../events/Event.js").default)} listener Listener function.
   * @param {T} thisArg Value to use as `this` when executing `listener`.
   * @template T
   */
  ImageStyle.prototype.unlistenImageChange = function unlistenImageChange (listener, thisArg) {
    abstract();
  };

  /**
   * @module ol/style/RegularShape
   */


  /**
   * Specify radius for regular polygons, or radius1 and radius2 for stars.
   * @typedef {Object} Options
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points
   * is the number of sides.
   * @property {number} [radius] Radius of a regular polygon.
   * @property {number} [radius1] Outer radius of a star.
   * @property {number} [radius2] Inner radius of a star.
   * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.
   * @property {import("./AtlasManager.js").default} [atlasManager] The atlas manager to use for this symbol. When
   * using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given, the
   * symbol is added to an atlas. By default no atlas manager is used.
   */


  /**
   * @typedef {Object} RenderOptions
   * @property {import("../colorlike.js").ColorLike} [strokeStyle]
   * @property {number} strokeWidth
   * @property {number} size
   * @property {string} lineCap
   * @property {Array<number>} lineDash
   * @property {number} lineDashOffset
   * @property {string} lineJoin
   * @property {number} miterLimit
   */


  /**
   * @classdesc
   * Set regular shape style for vector features. The resulting shape will be
   * a regular polygon when `radius` is provided, or a star when `radius1` and
   * `radius2` are provided.
   * @api
   */
  var RegularShape = /*@__PURE__*/(function (ImageStyle$$1) {
    function RegularShape(options) {
      /**
       * @type {boolean}
       */
      var rotateWithView = options.rotateWithView !== undefined ?
        options.rotateWithView : false;

      ImageStyle$$1.call(this, {
        opacity: 1,
        rotateWithView: rotateWithView,
        rotation: options.rotation !== undefined ? options.rotation : 0,
        scale: 1
      });

      /**
       * @private
       * @type {Array<string|number>}
       */
      this.checksums_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.hitDetectionCanvas_ = null;

      /**
       * @private
       * @type {import("./Fill.js").default}
       */
      this.fill_ = options.fill !== undefined ? options.fill : null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.origin_ = [0, 0];

      /**
       * @private
       * @type {number}
       */
      this.points_ = options.points;

      /**
       * @protected
       * @type {number}
       */
      this.radius_ = /** @type {number} */ (options.radius !== undefined ?
        options.radius : options.radius1);

      /**
       * @private
       * @type {number|undefined}
       */
      this.radius2_ = options.radius2;

      /**
       * @private
       * @type {number}
       */
      this.angle_ = options.angle !== undefined ? options.angle : 0;

      /**
       * @private
       * @type {import("./Stroke.js").default}
       */
      this.stroke_ = options.stroke !== undefined ? options.stroke : null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.size_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.imageSize_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.hitDetectionImageSize_ = null;

      /**
       * @protected
       * @type {import("./AtlasManager.js").default|undefined}
       */
      this.atlasManager_ = options.atlasManager;

      this.render_(this.atlasManager_);

    }

    if ( ImageStyle$$1 ) RegularShape.__proto__ = ImageStyle$$1;
    RegularShape.prototype = Object.create( ImageStyle$$1 && ImageStyle$$1.prototype );
    RegularShape.prototype.constructor = RegularShape;

    /**
     * Clones the style. If an atlasmanager was provided to the original style it will be used in the cloned style, too.
     * @return {RegularShape} The cloned style.
     * @api
     */
    RegularShape.prototype.clone = function clone () {
      var style = new RegularShape({
        fill: this.getFill() ? this.getFill().clone() : undefined,
        points: this.getPoints(),
        radius: this.getRadius(),
        radius2: this.getRadius2(),
        angle: this.getAngle(),
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView(),
        atlasManager: this.atlasManager_
      });
      style.setOpacity(this.getOpacity());
      style.setScale(this.getScale());
      return style;
    };

    /**
     * @inheritDoc
     * @api
     */
    RegularShape.prototype.getAnchor = function getAnchor () {
      return this.anchor_;
    };

    /**
     * Get the angle used in generating the shape.
     * @return {number} Shape's rotation in radians.
     * @api
     */
    RegularShape.prototype.getAngle = function getAngle () {
      return this.angle_;
    };

    /**
     * Get the fill style for the shape.
     * @return {import("./Fill.js").default} Fill style.
     * @api
     */
    RegularShape.prototype.getFill = function getFill () {
      return this.fill_;
    };

    /**
     * @inheritDoc
     */
    RegularShape.prototype.getHitDetectionImage = function getHitDetectionImage (pixelRatio) {
      return this.hitDetectionCanvas_;
    };

    /**
     * @inheritDoc
     * @api
     */
    RegularShape.prototype.getImage = function getImage (pixelRatio) {
      return this.canvas_;
    };

    /**
     * @inheritDoc
     */
    RegularShape.prototype.getImageSize = function getImageSize () {
      return this.imageSize_;
    };

    /**
     * @inheritDoc
     */
    RegularShape.prototype.getHitDetectionImageSize = function getHitDetectionImageSize () {
      return this.hitDetectionImageSize_;
    };

    /**
     * @inheritDoc
     */
    RegularShape.prototype.getImageState = function getImageState () {
      return ImageState.LOADED;
    };

    /**
     * @inheritDoc
     * @api
     */
    RegularShape.prototype.getOrigin = function getOrigin () {
      return this.origin_;
    };

    /**
     * Get the number of points for generating the shape.
     * @return {number} Number of points for stars and regular polygons.
     * @api
     */
    RegularShape.prototype.getPoints = function getPoints () {
      return this.points_;
    };

    /**
     * Get the (primary) radius for the shape.
     * @return {number} Radius.
     * @api
     */
    RegularShape.prototype.getRadius = function getRadius () {
      return this.radius_;
    };

    /**
     * Get the secondary radius for the shape.
     * @return {number|undefined} Radius2.
     * @api
     */
    RegularShape.prototype.getRadius2 = function getRadius2 () {
      return this.radius2_;
    };

    /**
     * @inheritDoc
     * @api
     */
    RegularShape.prototype.getSize = function getSize () {
      return this.size_;
    };

    /**
     * Get the stroke style for the shape.
     * @return {import("./Stroke.js").default} Stroke style.
     * @api
     */
    RegularShape.prototype.getStroke = function getStroke () {
      return this.stroke_;
    };

    /**
     * @inheritDoc
     */
    RegularShape.prototype.listenImageChange = function listenImageChange (listener, thisArg) {
      return undefined;
    };

    /**
     * @inheritDoc
     */
    RegularShape.prototype.load = function load () {};

    /**
     * @inheritDoc
     */
    RegularShape.prototype.unlistenImageChange = function unlistenImageChange (listener, thisArg) {};

    /**
     * @protected
     * @param {import("./AtlasManager.js").default|undefined} atlasManager An atlas manager.
     */
    RegularShape.prototype.render_ = function render_ (atlasManager) {
      var imageSize;
      var lineCap = '';
      var lineJoin = '';
      var miterLimit = 0;
      var lineDash = null;
      var lineDashOffset = 0;
      var strokeStyle;
      var strokeWidth = 0;

      if (this.stroke_) {
        strokeStyle = this.stroke_.getColor();
        if (strokeStyle === null) {
          strokeStyle = defaultStrokeStyle;
        }
        strokeStyle = asColorLike(strokeStyle);
        strokeWidth = this.stroke_.getWidth();
        if (strokeWidth === undefined) {
          strokeWidth = defaultLineWidth;
        }
        lineDash = this.stroke_.getLineDash();
        lineDashOffset = this.stroke_.getLineDashOffset();
        if (!CANVAS_LINE_DASH) {
          lineDash = null;
          lineDashOffset = 0;
        }
        lineJoin = this.stroke_.getLineJoin();
        if (lineJoin === undefined) {
          lineJoin = defaultLineJoin;
        }
        lineCap = this.stroke_.getLineCap();
        if (lineCap === undefined) {
          lineCap = defaultLineCap;
        }
        miterLimit = this.stroke_.getMiterLimit();
        if (miterLimit === undefined) {
          miterLimit = defaultMiterLimit;
        }
      }

      var size = 2 * (this.radius_ + strokeWidth) + 1;

      /** @type {RenderOptions} */
      var renderOptions = {
        strokeStyle: strokeStyle,
        strokeWidth: strokeWidth,
        size: size,
        lineCap: lineCap,
        lineDash: lineDash,
        lineDashOffset: lineDashOffset,
        lineJoin: lineJoin,
        miterLimit: miterLimit
      };

      if (atlasManager === undefined) {
        // no atlas manager is used, create a new canvas
        var context = createCanvasContext2D(size, size);
        this.canvas_ = context.canvas;

        // canvas.width and height are rounded to the closest integer
        size = this.canvas_.width;
        imageSize = size;

        this.draw_(renderOptions, context, 0, 0);

        this.createHitDetectionCanvas_(renderOptions);
      } else {
        // an atlas manager is used, add the symbol to an atlas
        size = Math.round(size);

        var hasCustomHitDetectionImage = !this.fill_;
        var renderHitDetectionCallback;
        if (hasCustomHitDetectionImage) {
          // render the hit-detection image into a separate atlas image
          renderHitDetectionCallback =
              this.drawHitDetectionCanvas_.bind(this, renderOptions);
        }

        var id = this.getChecksum();
        var info = atlasManager.add(
          id, size, size, this.draw_.bind(this, renderOptions),
          renderHitDetectionCallback);

        this.canvas_ = info.image;
        this.origin_ = [info.offsetX, info.offsetY];
        imageSize = info.image.width;

        if (hasCustomHitDetectionImage) {
          this.hitDetectionCanvas_ = info.hitImage;
          this.hitDetectionImageSize_ =
              [info.hitImage.width, info.hitImage.height];
        } else {
          this.hitDetectionCanvas_ = this.canvas_;
          this.hitDetectionImageSize_ = [imageSize, imageSize];
        }
      }

      this.anchor_ = [size / 2, size / 2];
      this.size_ = [size, size];
      this.imageSize_ = [imageSize, imageSize];
    };

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @param {CanvasRenderingContext2D} context The rendering context.
     * @param {number} x The origin for the symbol (x).
     * @param {number} y The origin for the symbol (y).
     */
    RegularShape.prototype.draw_ = function draw_ (renderOptions, context, x, y) {
      var i, angle0, radiusC;
      // reset transform
      context.setTransform(1, 0, 0, 1, 0, 0);

      // then move to (x, y)
      context.translate(x, y);

      context.beginPath();

      var points = this.points_;
      if (points === Infinity) {
        context.arc(
          renderOptions.size / 2, renderOptions.size / 2,
          this.radius_, 0, 2 * Math.PI, true);
      } else {
        var radius2 = (this.radius2_ !== undefined) ? this.radius2_
          : this.radius_;
        if (radius2 !== this.radius_) {
          points = 2 * points;
        }
        for (i = 0; i <= points; i++) {
          angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;
          radiusC = i % 2 === 0 ? this.radius_ : radius2;
          context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),
            renderOptions.size / 2 + radiusC * Math.sin(angle0));
        }
      }


      if (this.fill_) {
        var color = this.fill_.getColor();
        if (color === null) {
          color = defaultFillStyle;
        }
        context.fillStyle = asColorLike(color);
        context.fill();
      }
      if (this.stroke_) {
        context.strokeStyle = renderOptions.strokeStyle;
        context.lineWidth = renderOptions.strokeWidth;
        if (renderOptions.lineDash) {
          context.setLineDash(renderOptions.lineDash);
          context.lineDashOffset = renderOptions.lineDashOffset;
        }
        context.lineCap = /** @type {CanvasLineCap} */ (renderOptions.lineCap);
        context.lineJoin = /** @type {CanvasLineJoin} */ (renderOptions.lineJoin);
        context.miterLimit = renderOptions.miterLimit;
        context.stroke();
      }
      context.closePath();
    };

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     */
    RegularShape.prototype.createHitDetectionCanvas_ = function createHitDetectionCanvas_ (renderOptions) {
      this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];
      if (this.fill_) {
        this.hitDetectionCanvas_ = this.canvas_;
        return;
      }

      // if no fill style is set, create an extra hit-detection image with a
      // default fill style
      var context = createCanvasContext2D(renderOptions.size, renderOptions.size);
      this.hitDetectionCanvas_ = context.canvas;

      this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);
    };

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @param {CanvasRenderingContext2D} context The context.
     * @param {number} x The origin for the symbol (x).
     * @param {number} y The origin for the symbol (y).
     */
    RegularShape.prototype.drawHitDetectionCanvas_ = function drawHitDetectionCanvas_ (renderOptions, context, x, y) {
      // reset transform
      context.setTransform(1, 0, 0, 1, 0, 0);

      // then move to (x, y)
      context.translate(x, y);

      context.beginPath();

      var points = this.points_;
      if (points === Infinity) {
        context.arc(
          renderOptions.size / 2, renderOptions.size / 2,
          this.radius_, 0, 2 * Math.PI, true);
      } else {
        var radius2 = (this.radius2_ !== undefined) ? this.radius2_
          : this.radius_;
        if (radius2 !== this.radius_) {
          points = 2 * points;
        }
        var i, radiusC, angle0;
        for (i = 0; i <= points; i++) {
          angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;
          radiusC = i % 2 === 0 ? this.radius_ : radius2;
          context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),
            renderOptions.size / 2 + radiusC * Math.sin(angle0));
        }
      }

      context.fillStyle = asString(defaultFillStyle);
      context.fill();
      if (this.stroke_) {
        context.strokeStyle = renderOptions.strokeStyle;
        context.lineWidth = renderOptions.strokeWidth;
        if (renderOptions.lineDash) {
          context.setLineDash(renderOptions.lineDash);
          context.lineDashOffset = renderOptions.lineDashOffset;
        }
        context.stroke();
      }
      context.closePath();
    };

    /**
     * @return {string} The checksum.
     */
    RegularShape.prototype.getChecksum = function getChecksum () {
      var strokeChecksum = this.stroke_ ?
        this.stroke_.getChecksum() : '-';
      var fillChecksum = this.fill_ ?
        this.fill_.getChecksum() : '-';

      var recalculate = !this.checksums_ ||
          (strokeChecksum != this.checksums_[1] ||
          fillChecksum != this.checksums_[2] ||
          this.radius_ != this.checksums_[3] ||
          this.radius2_ != this.checksums_[4] ||
          this.angle_ != this.checksums_[5] ||
          this.points_ != this.checksums_[6]);

      if (recalculate) {
        var checksum = 'r' + strokeChecksum + fillChecksum +
            (this.radius_ !== undefined ? this.radius_.toString() : '-') +
            (this.radius2_ !== undefined ? this.radius2_.toString() : '-') +
            (this.angle_ !== undefined ? this.angle_.toString() : '-') +
            (this.points_ !== undefined ? this.points_.toString() : '-');
        this.checksums_ = [checksum, strokeChecksum, fillChecksum,
          this.radius_, this.radius2_, this.angle_, this.points_];
      }

      return /** @type {string} */ (this.checksums_[0]);
    };

    return RegularShape;
  }(ImageStyle));

  /**
   * @module ol/style/Circle
   */


  /**
   * @typedef {Object} Options
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {number} radius Circle radius.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {import("./AtlasManager.js").default} [atlasManager] The atlas manager to use for this circle.
   * When using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given,
   * the circle is added to an atlas. By default no atlas manager is used.
   */


  /**
   * @classdesc
   * Set circle style for vector features.
   * @api
   */
  var CircleStyle = /*@__PURE__*/(function (RegularShape$$1) {
    function CircleStyle(opt_options) {

      var options = opt_options || /** @type {Options} */ ({});

      RegularShape$$1.call(this, {
        points: Infinity,
        fill: options.fill,
        radius: options.radius,
        stroke: options.stroke,
        atlasManager: options.atlasManager
      });

    }

    if ( RegularShape$$1 ) CircleStyle.__proto__ = RegularShape$$1;
    CircleStyle.prototype = Object.create( RegularShape$$1 && RegularShape$$1.prototype );
    CircleStyle.prototype.constructor = CircleStyle;

    /**
    * Clones the style.  If an atlasmanager was provided to the original style it will be used in the cloned style, too.
    * @return {CircleStyle} The cloned style.
    * @override
    * @api
    */
    CircleStyle.prototype.clone = function clone () {
      var style = new CircleStyle({
        fill: this.getFill() ? this.getFill().clone() : undefined,
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        radius: this.getRadius(),
        atlasManager: this.atlasManager_
      });
      style.setOpacity(this.getOpacity());
      style.setScale(this.getScale());
      return style;
    };

    /**
    * Set the circle radius.
    *
    * @param {number} radius Circle radius.
    * @api
    */
    CircleStyle.prototype.setRadius = function setRadius (radius) {
      this.radius_ = radius;
      this.render_(this.atlasManager_);
    };

    return CircleStyle;
  }(RegularShape));

  /**
   * @module ol/style/Fill
   */


  /**
   * @typedef {Object} Options
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
   * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
   * Default null; if null, the Canvas/renderer default black will be used.
   */


  /**
   * @classdesc
   * Set fill style for vector features.
   * @api
   */
  var Fill = function Fill(opt_options) {

    var options = opt_options || {};

    /**
     * @private
     * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
     */
    this.color_ = options.color !== undefined ? options.color : null;

    /**
     * @private
     * @type {string|undefined}
     */
    this.checksum_ = undefined;
  };

  /**
   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.
   * @return {Fill} The cloned style.
   * @api
   */
  Fill.prototype.clone = function clone () {
    var color = this.getColor();
    return new Fill({
      color: Array.isArray(color) ? color.slice() : color || undefined
    });
  };

  /**
   * Get the fill color.
   * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
   * @api
   */
  Fill.prototype.getColor = function getColor () {
    return this.color_;
  };

  /**
   * Set the color.
   *
   * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
   * @api
   */
  Fill.prototype.setColor = function setColor (color) {
    this.color_ = color;
    this.checksum_ = undefined;
  };

  /**
   * @return {string} The checksum.
   */
  Fill.prototype.getChecksum = function getChecksum () {
    if (this.checksum_ === undefined) {
      var color = this.color_;
      if (color) {
        if (Array.isArray(color) || typeof color == 'string') {
          this.checksum_ = 'f' + asString(/** @type {import("../color.js").Color|string} */ (color));
        } else {
          this.checksum_ = getUid(this.color_);
        }
      } else {
        this.checksum_ = 'f-';
      }
    }

    return this.checksum_;
  };

  /**
   * @module ol/style/Stroke
   */


  /**
   * @typedef {Object} Options
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
   * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
   * Default null; if null, the Canvas/renderer default black will be used.
   * @property {string} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.
   * @property {string} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.
   * @property {Array<number>} [lineDash] Line dash pattern. Default is `undefined` (no dash).
   * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on
   * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.
   * @property {number} [lineDashOffset=0] Line dash offset.
   * @property {number} [miterLimit=10] Miter limit.
   * @property {number} [width] Width.
   */


  /**
   * @classdesc
   * Set stroke style for vector features.
   * Note that the defaults given are the Canvas defaults, which will be used if
   * option is not defined. The `get` functions return whatever was entered in
   * the options; they will not return the default.
   * @api
   */
  var Stroke = function Stroke(opt_options) {

    var options = opt_options || {};

    /**
     * @private
     * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
     */
    this.color_ = options.color !== undefined ? options.color : null;

    /**
     * @private
     * @type {string|undefined}
     */
    this.lineCap_ = options.lineCap;

    /**
     * @private
     * @type {Array<number>}
     */
    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;

    /**
     * @private
     * @type {number|undefined}
     */
    this.lineDashOffset_ = options.lineDashOffset;

    /**
     * @private
     * @type {string|undefined}
     */
    this.lineJoin_ = options.lineJoin;

    /**
     * @private
     * @type {number|undefined}
     */
    this.miterLimit_ = options.miterLimit;

    /**
     * @private
     * @type {number|undefined}
     */
    this.width_ = options.width;

    /**
     * @private
     * @type {string|undefined}
     */
    this.checksum_ = undefined;
  };

  /**
   * Clones the style.
   * @return {Stroke} The cloned style.
   * @api
   */
  Stroke.prototype.clone = function clone () {
    var color = this.getColor();
    return new Stroke({
      color: Array.isArray(color) ? color.slice() : color || undefined,
      lineCap: this.getLineCap(),
      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,
      lineDashOffset: this.getLineDashOffset(),
      lineJoin: this.getLineJoin(),
      miterLimit: this.getMiterLimit(),
      width: this.getWidth()
    });
  };

  /**
   * Get the stroke color.
   * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
   * @api
   */
  Stroke.prototype.getColor = function getColor () {
    return this.color_;
  };

  /**
   * Get the line cap type for the stroke.
   * @return {string|undefined} Line cap.
   * @api
   */
  Stroke.prototype.getLineCap = function getLineCap () {
    return this.lineCap_;
  };

  /**
   * Get the line dash style for the stroke.
   * @return {Array<number>} Line dash.
   * @api
   */
  Stroke.prototype.getLineDash = function getLineDash () {
    return this.lineDash_;
  };

  /**
   * Get the line dash offset for the stroke.
   * @return {number|undefined} Line dash offset.
   * @api
   */
  Stroke.prototype.getLineDashOffset = function getLineDashOffset () {
    return this.lineDashOffset_;
  };

  /**
   * Get the line join type for the stroke.
   * @return {string|undefined} Line join.
   * @api
   */
  Stroke.prototype.getLineJoin = function getLineJoin () {
    return this.lineJoin_;
  };

  /**
   * Get the miter limit for the stroke.
   * @return {number|undefined} Miter limit.
   * @api
   */
  Stroke.prototype.getMiterLimit = function getMiterLimit () {
    return this.miterLimit_;
  };

  /**
   * Get the stroke width.
   * @return {number|undefined} Width.
   * @api
   */
  Stroke.prototype.getWidth = function getWidth () {
    return this.width_;
  };

  /**
   * Set the color.
   *
   * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
   * @api
   */
  Stroke.prototype.setColor = function setColor (color) {
    this.color_ = color;
    this.checksum_ = undefined;
  };

  /**
   * Set the line cap.
   *
   * @param {string|undefined} lineCap Line cap.
   * @api
   */
  Stroke.prototype.setLineCap = function setLineCap (lineCap) {
    this.lineCap_ = lineCap;
    this.checksum_ = undefined;
  };

  /**
   * Set the line dash.
   *
   * Please note that Internet Explorer 10 and lower [do not support][mdn] the
   * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this
   * property will have no visual effect in these browsers.
   *
   * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility
   *
   * @param {Array<number>} lineDash Line dash.
   * @api
   */
  Stroke.prototype.setLineDash = function setLineDash (lineDash) {
    this.lineDash_ = lineDash;
    this.checksum_ = undefined;
  };

  /**
   * Set the line dash offset.
   *
   * @param {number|undefined} lineDashOffset Line dash offset.
   * @api
   */
  Stroke.prototype.setLineDashOffset = function setLineDashOffset (lineDashOffset) {
    this.lineDashOffset_ = lineDashOffset;
    this.checksum_ = undefined;
  };

  /**
   * Set the line join.
   *
   * @param {string|undefined} lineJoin Line join.
   * @api
   */
  Stroke.prototype.setLineJoin = function setLineJoin (lineJoin) {
    this.lineJoin_ = lineJoin;
    this.checksum_ = undefined;
  };

  /**
   * Set the miter limit.
   *
   * @param {number|undefined} miterLimit Miter limit.
   * @api
   */
  Stroke.prototype.setMiterLimit = function setMiterLimit (miterLimit) {
    this.miterLimit_ = miterLimit;
    this.checksum_ = undefined;
  };

  /**
   * Set the width.
   *
   * @param {number|undefined} width Width.
   * @api
   */
  Stroke.prototype.setWidth = function setWidth (width) {
    this.width_ = width;
    this.checksum_ = undefined;
  };

  /**
   * @return {string} The checksum.
   */
  Stroke.prototype.getChecksum = function getChecksum () {
    if (this.checksum_ === undefined) {
      this.checksum_ = 's';
      if (this.color_) {
        if (typeof this.color_ === 'string') {
          this.checksum_ += this.color_;
        } else {
          this.checksum_ += getUid(this.color_);
        }
      } else {
        this.checksum_ += '-';
      }
      this.checksum_ += ',' +
          (this.lineCap_ !== undefined ?
            this.lineCap_.toString() : '-') + ',' +
          (this.lineDash_ ?
            this.lineDash_.toString() : '-') + ',' +
          (this.lineDashOffset_ !== undefined ?
            this.lineDashOffset_ : '-') + ',' +
          (this.lineJoin_ !== undefined ?
            this.lineJoin_ : '-') + ',' +
          (this.miterLimit_ !== undefined ?
            this.miterLimit_.toString() : '-') + ',' +
          (this.width_ !== undefined ?
            this.width_.toString() : '-');
    }

    return this.checksum_;
  };

  /**
   * @module ol/style/Style
   */


  /**
   * A function that takes an {@link module:ol/Feature} and a `{number}`
   * representing the view's resolution. The function should return a
   * {@link module:ol/style/Style} or an array of them. This way e.g. a
   * vector layer can be styled.
   *
   * @typedef {function(import("../Feature.js").FeatureLike, number):(Style|Array<Style>)} StyleFunction
   */

  /**
   * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.
   * @typedef {Style|Array<Style>|StyleFunction} StyleLike
   */

  /**
   * A function that takes an {@link module:ol/Feature} as argument and returns an
   * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.
   *
   * @typedef {function(import("../Feature.js").FeatureLike):
   *     (import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined)} GeometryFunction
   */


  /**
   * Custom renderer function. Takes two arguments:
   *
   * 1. The pixel coordinates of the geometry in GeoJSON notation.
   * 2. The {@link module:ol/render~State} of the layer renderer.
   *
   * @typedef {function((import("../coordinate.js").Coordinate|Array<import("../coordinate.js").Coordinate>|Array<Array<import("../coordinate.js").Coordinate>>),import("../render.js").State)}
   * RenderFunction
   */


  /**
   * @typedef {Object} Options
   * @property {string|import("../geom/Geometry.js").default|GeometryFunction} [geometry] Feature property or geometry
   * or function returning a geometry to render for this style.
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {import("./Image.js").default} [image] Image style.
   * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be
   * ignored, and the provided function will be called with each render frame for each geometry.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {import("./Text.js").default} [text] Text style.
   * @property {number} [zIndex] Z index.
   */

  /**
   * @classdesc
   * Container for vector feature rendering styles. Any changes made to the style
   * or its children through `set*()` methods will not take effect until the
   * feature or layer that uses the style is re-rendered.
   * @api
   */
  var Style = function Style(opt_options) {

    var options = opt_options || {};

    /**
     * @private
     * @type {string|import("../geom/Geometry.js").default|GeometryFunction}
     */
    this.geometry_ = null;

    /**
     * @private
     * @type {!GeometryFunction}
     */
    this.geometryFunction_ = defaultGeometryFunction;

    if (options.geometry !== undefined) {
      this.setGeometry(options.geometry);
    }

    /**
     * @private
     * @type {import("./Fill.js").default}
     */
    this.fill_ = options.fill !== undefined ? options.fill : null;

    /**
       * @private
       * @type {import("./Image.js").default}
       */
    this.image_ = options.image !== undefined ? options.image : null;

    /**
     * @private
     * @type {RenderFunction|null}
     */
    this.renderer_ = options.renderer !== undefined ? options.renderer : null;

    /**
     * @private
     * @type {import("./Stroke.js").default}
     */
    this.stroke_ = options.stroke !== undefined ? options.stroke : null;

    /**
     * @private
     * @type {import("./Text.js").default}
     */
    this.text_ = options.text !== undefined ? options.text : null;

    /**
     * @private
     * @type {number|undefined}
     */
    this.zIndex_ = options.zIndex;

  };

  /**
   * Clones the style.
   * @return {Style} The cloned style.
   * @api
   */
  Style.prototype.clone = function clone () {
    var geometry = this.getGeometry();
    if (geometry && typeof geometry === 'object') {
      geometry = /** @type {import("../geom/Geometry.js").default} */ (geometry).clone();
    }
    return new Style({
      geometry: geometry,
      fill: this.getFill() ? this.getFill().clone() : undefined,
      image: this.getImage() ? this.getImage().clone() : undefined,
      stroke: this.getStroke() ? this.getStroke().clone() : undefined,
      text: this.getText() ? this.getText().clone() : undefined,
      zIndex: this.getZIndex()
    });
  };

  /**
   * Get the custom renderer function that was configured with
   * {@link #setRenderer} or the `renderer` constructor option.
   * @return {RenderFunction|null} Custom renderer function.
   * @api
   */
  Style.prototype.getRenderer = function getRenderer () {
    return this.renderer_;
  };

  /**
   * Sets a custom renderer function for this style. When set, `fill`, `stroke`
   * and `image` options of the style will be ignored.
   * @param {RenderFunction|null} renderer Custom renderer function.
   * @api
   */
  Style.prototype.setRenderer = function setRenderer (renderer) {
    this.renderer_ = renderer;
  };

  /**
   * Get the geometry to be rendered.
   * @return {string|import("../geom/Geometry.js").default|GeometryFunction}
   * Feature property or geometry or function that returns the geometry that will
   * be rendered with this style.
   * @api
   */
  Style.prototype.getGeometry = function getGeometry () {
    return this.geometry_;
  };

  /**
   * Get the function used to generate a geometry for rendering.
   * @return {!GeometryFunction} Function that is called with a feature
   * and returns the geometry to render instead of the feature's geometry.
   * @api
   */
  Style.prototype.getGeometryFunction = function getGeometryFunction () {
    return this.geometryFunction_;
  };

  /**
   * Get the fill style.
   * @return {import("./Fill.js").default} Fill style.
   * @api
   */
  Style.prototype.getFill = function getFill () {
    return this.fill_;
  };

  /**
   * Set the fill style.
   * @param {import("./Fill.js").default} fill Fill style.
   * @api
   */
  Style.prototype.setFill = function setFill (fill) {
    this.fill_ = fill;
  };

  /**
   * Get the image style.
   * @return {import("./Image.js").default} Image style.
   * @api
   */
  Style.prototype.getImage = function getImage () {
    return this.image_;
  };

  /**
   * Set the image style.
   * @param {import("./Image.js").default} image Image style.
   * @api
   */
  Style.prototype.setImage = function setImage (image) {
    this.image_ = image;
  };

  /**
   * Get the stroke style.
   * @return {import("./Stroke.js").default} Stroke style.
   * @api
   */
  Style.prototype.getStroke = function getStroke () {
    return this.stroke_;
  };

  /**
   * Set the stroke style.
   * @param {import("./Stroke.js").default} stroke Stroke style.
   * @api
   */
  Style.prototype.setStroke = function setStroke (stroke) {
    this.stroke_ = stroke;
  };

  /**
   * Get the text style.
   * @return {import("./Text.js").default} Text style.
   * @api
   */
  Style.prototype.getText = function getText () {
    return this.text_;
  };

  /**
   * Set the text style.
   * @param {import("./Text.js").default} text Text style.
   * @api
   */
  Style.prototype.setText = function setText (text) {
    this.text_ = text;
  };

  /**
   * Get the z-index for the style.
   * @return {number|undefined} ZIndex.
   * @api
   */
  Style.prototype.getZIndex = function getZIndex () {
    return this.zIndex_;
  };

  /**
   * Set a geometry that is rendered instead of the feature's geometry.
   *
   * @param {string|import("../geom/Geometry.js").default|GeometryFunction} geometry
   *   Feature property or geometry or function returning a geometry to render
   *   for this style.
   * @api
   */
  Style.prototype.setGeometry = function setGeometry (geometry) {
    if (typeof geometry === 'function') {
      this.geometryFunction_ = geometry;
    } else if (typeof geometry === 'string') {
      this.geometryFunction_ = function(feature) {
        return (
          /** @type {import("../geom/Geometry.js").default} */ (feature.get(geometry))
        );
      };
    } else if (!geometry) {
      this.geometryFunction_ = defaultGeometryFunction;
    } else if (geometry !== undefined) {
      this.geometryFunction_ = function() {
        return (
          /** @type {import("../geom/Geometry.js").default} */ (geometry)
        );
      };
    }
    this.geometry_ = geometry;
  };

  /**
   * Set the z-index.
   *
   * @param {number|undefined} zIndex ZIndex.
   * @api
   */
  Style.prototype.setZIndex = function setZIndex (zIndex) {
    this.zIndex_ = zIndex;
  };


  /**
   * Convert the provided object into a style function.  Functions passed through
   * unchanged.  Arrays of Style or single style objects wrapped in a
   * new style function.
   * @param {StyleFunction|Array<Style>|Style} obj
   *     A style function, a single style, or an array of styles.
   * @return {StyleFunction} A style function.
   */
  function toFunction(obj) {
    var styleFunction;

    if (typeof obj === 'function') {
      styleFunction = obj;
    } else {
      /**
       * @type {Array<Style>}
       */
      var styles;
      if (Array.isArray(obj)) {
        styles = obj;
      } else {
        assert(typeof /** @type {?} */ (obj).getZIndex === 'function',
          41); // Expected an `Style` or an array of `Style`
        var style = /** @type {Style} */ (obj);
        styles = [style];
      }
      styleFunction = function() {
        return styles;
      };
    }
    return styleFunction;
  }


  /**
   * @type {Array<Style>}
   */
  var defaultStyles = null;


  /**
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} resolution Resolution.
   * @return {Array<Style>} Style.
   */
  function createDefaultStyle(feature, resolution) {
    // We don't use an immediately-invoked function
    // and a closure so we don't get an error at script evaluation time in
    // browsers that do not support Canvas. (import("./Circle.js").CircleStyle does
    // canvas.getContext('2d') at construction time, which will cause an.error
    // in such browsers.)
    if (!defaultStyles) {
      var fill = new Fill({
        color: 'rgba(255,255,255,0.4)'
      });
      var stroke = new Stroke({
        color: '#3399CC',
        width: 1.25
      });
      defaultStyles = [
        new Style({
          image: new CircleStyle({
            fill: fill,
            stroke: stroke,
            radius: 5
          }),
          fill: fill,
          stroke: stroke
        })
      ];
    }
    return defaultStyles;
  }


  /**
   * Default styles for editing features.
   * @return {Object<import("../geom/GeometryType.js").default, Array<Style>>} Styles
   */
  function createEditingStyle() {
    /** @type {Object<import("../geom/GeometryType.js").default, Array<Style>>} */
    var styles = {};
    var white = [255, 255, 255, 1];
    var blue = [0, 153, 255, 1];
    var width = 3;
    styles[GeometryType.POLYGON] = [
      new Style({
        fill: new Fill({
          color: [255, 255, 255, 0.5]
        })
      })
    ];
    styles[GeometryType.MULTI_POLYGON] =
        styles[GeometryType.POLYGON];

    styles[GeometryType.LINE_STRING] = [
      new Style({
        stroke: new Stroke({
          color: white,
          width: width + 2
        })
      }),
      new Style({
        stroke: new Stroke({
          color: blue,
          width: width
        })
      })
    ];
    styles[GeometryType.MULTI_LINE_STRING] =
        styles[GeometryType.LINE_STRING];

    styles[GeometryType.CIRCLE] =
        styles[GeometryType.POLYGON].concat(
          styles[GeometryType.LINE_STRING]
        );


    styles[GeometryType.POINT] = [
      new Style({
        image: new CircleStyle({
          radius: width * 2,
          fill: new Fill({
            color: blue
          }),
          stroke: new Stroke({
            color: white,
            width: width / 2
          })
        }),
        zIndex: Infinity
      })
    ];
    styles[GeometryType.MULTI_POINT] =
        styles[GeometryType.POINT];

    styles[GeometryType.GEOMETRY_COLLECTION] =
        styles[GeometryType.POLYGON].concat(
          styles[GeometryType.LINE_STRING],
          styles[GeometryType.POINT]
        );

    return styles;
  }


  /**
   * Function that is called with a feature and returns its default geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature to get the geometry for.
   * @return {import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined} Geometry to render.
   */
  function defaultGeometryFunction(feature) {
    return feature.getGeometry();
  }

  /**
   * @module ol/layer/Vector
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
   * renderer when getting features from the vector source for the rendering or hit-detection.
   * Recommended value: the size of the largest symbol, line width or label.
   * @property {import("./VectorRenderType.js").default|string} [renderMode='vector'] Render mode for vector layers:
   *  * `'image'`: Vector layers are rendered as images. Great performance, but point symbols and
   *    texts are always rotated with the view and pixels are scaled during zoom animations.
   *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering even during
   *    animations, but slower performance.
   * @property {import("../source/Vector.js").default} [source] Source.
   * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map#addLayer}.
   * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
   * image and text styles, and the priority is defined by the z-index of the style. Lower z-index
   * means higher priority.
   * @property {import("../style/Style.js").StyleLike} [style] Layer style. See
   * {@link module:ol/style} for default style which will be used if this is not defined.
   * @property {boolean} [updateWhileAnimating=false] When set to `true` and `renderMode`
   * is `vector`, feature batches will be recreated during animations. This means that no
   * vectors will be shown clipped, but the setting will have a performance impact for large
   * amounts of vector data. When set to `false`, batches will be recreated when no animation
   * is active.
   * @property {boolean} [updateWhileInteracting=false] When set to `true` and `renderMode`
   * is `vector`, feature batches will be recreated during interactions. See also
   * `updateWhileAnimating`.
   */


  /**
   * @enum {string}
   * @private
   */
  var Property$2 = {
    RENDER_ORDER: 'renderOrder'
  };


  /**
   * @classdesc
   * Vector data that is rendered client-side.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @api
   */
  var VectorLayer = /*@__PURE__*/(function (Layer$$1) {
    function VectorLayer(opt_options) {
      var options = opt_options ?
        opt_options : /** @type {Options} */ ({});

      var baseOptions = assign({}, options);

      delete baseOptions.style;
      delete baseOptions.renderBuffer;
      delete baseOptions.updateWhileAnimating;
      delete baseOptions.updateWhileInteracting;
      Layer$$1.call(this, baseOptions);

      /**
      * @private
      * @type {boolean}
      */
      this.declutter_ = options.declutter !== undefined ? options.declutter : false;

      /**
      * @type {number}
      * @private
      */
      this.renderBuffer_ = options.renderBuffer !== undefined ?
        options.renderBuffer : 100;

      /**
      * User provided style.
      * @type {import("../style/Style.js").StyleLike}
      * @private
      */
      this.style_ = null;

      /**
      * Style function for use within the library.
      * @type {import("../style/Style.js").StyleFunction|undefined}
      * @private
      */
      this.styleFunction_ = undefined;

      this.setStyle(options.style);

      /**
      * @type {boolean}
      * @private
      */
      this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ?
        options.updateWhileAnimating : false;

      /**
      * @type {boolean}
      * @private
      */
      this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ?
        options.updateWhileInteracting : false;

      /**
      * @private
      * @type {import("./VectorTileRenderType.js").default|string}
      */
      this.renderMode_ = options.renderMode || VectorRenderType.VECTOR;

      /**
      * The layer type.
      * @protected
      * @type {import("../LayerType.js").default}
      */
      this.type = LayerType.VECTOR;

    }

    if ( Layer$$1 ) VectorLayer.__proto__ = Layer$$1;
    VectorLayer.prototype = Object.create( Layer$$1 && Layer$$1.prototype );
    VectorLayer.prototype.constructor = VectorLayer;

    /**
    * @return {boolean} Declutter.
    */
    VectorLayer.prototype.getDeclutter = function getDeclutter () {
      return this.declutter_;
    };

    /**
    * @param {boolean} declutter Declutter.
    */
    VectorLayer.prototype.setDeclutter = function setDeclutter (declutter) {
      this.declutter_ = declutter;
    };

    /**
    * @return {number|undefined} Render buffer.
    */
    VectorLayer.prototype.getRenderBuffer = function getRenderBuffer () {
      return this.renderBuffer_;
    };

    /**
    * @return {function(import("../Feature.js").default, import("../Feature.js").default): number|null|undefined} Render
    *     order.
    */
    VectorLayer.prototype.getRenderOrder = function getRenderOrder () {
      return (
      /** @type {import("../render.js").OrderFunction|null|undefined} */ (this.get(Property$2.RENDER_ORDER))
      );
    };

    /**
    * Get the style for features.  This returns whatever was passed to the `style`
    * option at construction or to the `setStyle` method.
    * @return {import("../style/Style.js").StyleLike}
    *     Layer style.
    * @api
    */
    VectorLayer.prototype.getStyle = function getStyle () {
      return this.style_;
    };

    /**
    * Get the style function.
    * @return {import("../style/Style.js").StyleFunction|undefined} Layer style function.
    * @api
    */
    VectorLayer.prototype.getStyleFunction = function getStyleFunction () {
      return this.styleFunction_;
    };

    /**
    * @return {boolean} Whether the rendered layer should be updated while
    *     animating.
    */
    VectorLayer.prototype.getUpdateWhileAnimating = function getUpdateWhileAnimating () {
      return this.updateWhileAnimating_;
    };

    /**
    * @return {boolean} Whether the rendered layer should be updated while
    *     interacting.
    */
    VectorLayer.prototype.getUpdateWhileInteracting = function getUpdateWhileInteracting () {
      return this.updateWhileInteracting_;
    };

    /**
    * @param {import("../render.js").OrderFunction|null|undefined} renderOrder
    *     Render order.
    */
    VectorLayer.prototype.setRenderOrder = function setRenderOrder (renderOrder) {
      this.set(Property$2.RENDER_ORDER, renderOrder);
    };

    /**
    * Set the style for features.  This can be a single style object, an array
    * of styles, or a function that takes a feature and resolution and returns
    * an array of styles. If it is `undefined` the default style is used. If
    * it is `null` the layer has no style (a `null` style), so only features
    * that have their own styles will be rendered in the layer. See
    * {@link module:ol/style} for information on the default style.
    * @param {import("../style/Style.js").default|Array<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction|null|undefined} style Layer style.
    * @api
    */
    VectorLayer.prototype.setStyle = function setStyle (style) {
      this.style_ = style !== undefined ? style : createDefaultStyle;
      this.styleFunction_ = style === null ?
        undefined : toFunction(this.style_);
      this.changed();
    };

    /**
    * @return {import("./VectorRenderType.js").default|string} The render mode.
    */
    VectorLayer.prototype.getRenderMode = function getRenderMode () {
      return this.renderMode_;
    };

    return VectorLayer;
  }(Layer));


  /**
   * Return the associated {@link module:ol/source/Vector vectorsource} of the layer.
   * @function
   * @return {import("../source/Vector.js").default} Source.
   * @api
   */
  VectorLayer.prototype.getSource;

  /**
   * @module ol/format/FormatType
   */

  /**
   * @enum {string}
   */
  var FormatType = {
    ARRAY_BUFFER: 'arraybuffer',
    JSON: 'json',
    TEXT: 'text',
    XML: 'xml'
  };

  /**
   * @module ol/featureloader
   */

  /**
   * {@link module:ol/source/Vector} sources use a function of this type to
   * load features.
   *
   * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,
   * a `{number}` representing the resolution (map units per pixel) and an
   * {@link module:ol/proj/Projection} for the projection  as
   * arguments. `this` within the function is bound to the
   * {@link module:ol/source/Vector} it's called from.
   *
   * The function is responsible for loading the features and adding them to the
   * source.
   * @typedef {function(this:(import("./source/Vector").default|import("./VectorTile.js").default), import("./extent.js").Extent, number,
   *                    import("./proj/Projection.js").default)} FeatureLoader
   * @api
   */


  /**
   * {@link module:ol/source/Vector} sources use a function of this type to
   * get the url to load features from.
   *
   * This function takes an {@link module:ol/extent~Extent} representing the area
   * to be loaded, a `{number}` representing the resolution (map units per pixel)
   * and an {@link module:ol/proj/Projection} for the projection  as
   * arguments and returns a `{string}` representing the URL.
   * @typedef {function(import("./extent.js").Extent, number, import("./proj/Projection.js").default): string} FeatureUrlFunction
   * @api
   */


  /**
   * @param {string|FeatureUrlFunction} url Feature URL service.
   * @param {import("./format/Feature.js").default} format Feature format.
   * @param {function(this:import("./VectorTile.js").default, Array<import("./Feature.js").default>, import("./proj/Projection.js").default, import("./extent.js").Extent)|function(this:import("./source/Vector").default, Array<import("./Feature.js").default>)} success
   *     Function called with the loaded features and optionally with the data
   *     projection. Called with the vector tile or source as `this`.
   * @param {function(this:import("./VectorTile.js").default)|function(this:import("./source/Vector").default)} failure
   *     Function called when loading failed. Called with the vector tile or
   *     source as `this`.
   * @return {FeatureLoader} The feature loader.
   */
  function loadFeaturesXhr(url, format, success, failure) {
    return (
      /**
       * @param {import("./extent.js").Extent} extent Extent.
       * @param {number} resolution Resolution.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @this {import("./source/Vector").default|import("./VectorTile.js").default}
       */
      function(extent, resolution, projection) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET',
          typeof url === 'function' ? url(extent, resolution, projection) : url,
          true);
        if (format.getType() == FormatType.ARRAY_BUFFER) {
          xhr.responseType = 'arraybuffer';
        }
        /**
         * @param {Event} event Event.
         * @private
         */
        xhr.onload = function(event) {
          // status will be 0 for file:// urls
          if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {
            var type = format.getType();
            /** @type {Document|Node|Object|string|undefined} */
            var source;
            if (type == FormatType.JSON || type == FormatType.TEXT) {
              source = xhr.responseText;
            } else if (type == FormatType.XML) {
              source = xhr.responseXML;
              if (!source) {
                source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');
              }
            } else if (type == FormatType.ARRAY_BUFFER) {
              source = /** @type {ArrayBuffer} */ (xhr.response);
            }
            if (source) {
              success.call(this, format.readFeatures(source,
                {featureProjection: projection}),
              format.readProjection(source), format.getLastExtent());
            } else {
              failure.call(this);
            }
          } else {
            failure.call(this);
          }
        }.bind(this);
        /**
         * @private
         */
        xhr.onerror = function() {
          failure.call(this);
        }.bind(this);
        xhr.send();
      }
    );
  }


  /**
   * Create an XHR feature loader for a `url` and `format`. The feature loader
   * loads features (with XHR), parses the features, and adds them to the
   * vector source.
   * @param {string|FeatureUrlFunction} url Feature URL service.
   * @param {import("./format/Feature.js").default} format Feature format.
   * @return {FeatureLoader} The feature loader.
   * @api
   */
  function xhr(url, format) {
    return loadFeaturesXhr(url, format,
      /**
       * @param {Array<import("./Feature.js").default>} features The loaded features.
       * @param {import("./proj/Projection.js").default} dataProjection Data
       * projection.
       * @this {import("./source/Vector").default|import("./VectorTile.js").default}
       */
      function(features, dataProjection) {
        var sourceOrTile = /** @type {?} */ (this);
        if (typeof sourceOrTile.addFeatures === 'function') {
          /** @type {import("./source/Vector").default} */ (sourceOrTile).addFeatures(features);
        }
      }, /* FIXME handle error */ VOID);
  }

  /**
   * @module ol/loadingstrategy
   */


  /**
   * Strategy function for loading all features with a single request.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @return {Array<import("./extent.js").Extent>} Extents.
   * @api
   */
  function all(extent, resolution) {
    return [[-Infinity, -Infinity, Infinity, Infinity]];
  }

  /**
   * @module ol/source/Source
   */


  /**
   * A function that returns a string or an array of strings representing source
   * attributions.
   *
   * @typedef {function(import("../PluggableMap.js").FrameState): (string|Array<string>)} Attribution
   */


  /**
   * A type that can be used to provide attribution information for data sources.
   *
   * It represents either
   * * a simple string (e.g. `'© Acme Inc.'`)
   * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)
   * * a function that returns a string or array of strings (`{@link module:ol/source/Source~Attribution}`)
   *
   * @typedef {string|Array<string>|Attribution} AttributionLike
   */


  /**
   * @typedef {Object} Options
   * @property {AttributionLike} [attributions]
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {import("../proj.js").ProjectionLike} projection
   * @property {SourceState} [state='ready']
   * @property {boolean} [wrapX=false]
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for {@link module:ol/layer/Layer~Layer} sources.
   *
   * A generic `change` event is triggered when the state of the source changes.
   * @abstract
   * @api
   */
  var Source = /*@__PURE__*/(function (BaseObject$$1) {
    function Source(options) {

      BaseObject$$1.call(this);

      /**
       * @private
       * @type {import("../proj/Projection.js").default}
       */
      this.projection_ = get$2(options.projection);

      /**
       * @private
       * @type {?Attribution}
       */
      this.attributions_ = adaptAttributions(options.attributions);

      /**
       * @private
       * @type {boolean}
       */
      this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ?
        options.attributionsCollapsible : true;

      /**
       * This source is currently loading data. Sources that defer loading to the
       * map's tile queue never set this to `true`.
       * @type {boolean}
       */
      this.loading = false;

      /**
       * @private
       * @type {SourceState}
       */
      this.state_ = options.state !== undefined ?
        options.state : SourceState.READY;

      /**
       * @private
       * @type {boolean}
       */
      this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;

    }

    if ( BaseObject$$1 ) Source.__proto__ = BaseObject$$1;
    Source.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Source.prototype.constructor = Source;

    /**
     * Get the attribution function for the source.
     * @return {?Attribution} Attribution function.
     */
    Source.prototype.getAttributions = function getAttributions () {
      return this.attributions_;
    };

    /**
     * @return {boolean} Aattributions are collapsible.
     */
    Source.prototype.getAttributionsCollapsible = function getAttributionsCollapsible () {
      return this.attributionsCollapsible_;
    };

    /**
     * Get the projection of the source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     */
    Source.prototype.getProjection = function getProjection () {
      return this.projection_;
    };

    /**
     * @abstract
     * @return {Array<number>|undefined} Resolutions.
     */
    Source.prototype.getResolutions = function getResolutions () {
      return abstract();
    };

    /**
     * Get the state of the source, see {@link module:ol/source/State~State} for possible states.
     * @return {SourceState} State.
     * @api
     */
    Source.prototype.getState = function getState () {
      return this.state_;
    };

    /**
     * @return {boolean|undefined} Wrap X.
     */
    Source.prototype.getWrapX = function getWrapX () {
      return this.wrapX_;
    };

    /**
     * Refreshes the source and finally dispatches a 'change' event.
     * @api
     */
    Source.prototype.refresh = function refresh () {
      this.changed();
    };

    /**
     * Set the attributions of the source.
     * @param {AttributionLike|undefined} attributions Attributions.
     *     Can be passed as `string`, `Array<string>`, `{@link module:ol/source/Source~Attribution}`,
     *     or `undefined`.
     * @api
     */
    Source.prototype.setAttributions = function setAttributions (attributions) {
      this.attributions_ = adaptAttributions(attributions);
      this.changed();
    };

    /**
     * Set the state of the source.
     * @param {SourceState} state State.
     * @protected
     */
    Source.prototype.setState = function setState (state) {
      this.state_ = state;
      this.changed();
    };

    return Source;
  }(BaseObject));


  /**
   * Turns the attributions option into an attributions function.
   * @param {AttributionLike|undefined} attributionLike The attribution option.
   * @return {?Attribution} An attribution function (or null).
   */
  function adaptAttributions(attributionLike) {
    if (!attributionLike) {
      return null;
    }
    if (Array.isArray(attributionLike)) {
      return function(frameState) {
        return attributionLike;
      };
    }

    if (typeof attributionLike === 'function') {
      return attributionLike;
    }

    return function(frameState) {
      return [attributionLike];
    };
  }

  /**
   * @module ol/source/VectorEventType
   */

  /**
   * @enum {string}
   */
  var VectorEventType = {
    /**
     * Triggered when a feature is added to the source.
     * @event ol/source/Vector.VectorSourceEvent#addfeature
     * @api
     */
    ADDFEATURE: 'addfeature',

    /**
     * Triggered when a feature is updated.
     * @event ol/source/Vector.VectorSourceEvent#changefeature
     * @api
     */
    CHANGEFEATURE: 'changefeature',

    /**
     * Triggered when the clear method is called on the source.
     * @event ol/source/Vector.VectorSourceEvent#clear
     * @api
     */
    CLEAR: 'clear',

    /**
     * Triggered when a feature is removed from the source.
     * See {@link module:ol/source/Vector#clear source.clear()} for exceptions.
     * @event ol/source/Vector.VectorSourceEvent#removefeature
     * @api
     */
    REMOVEFEATURE: 'removefeature'
  };

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var quickselect = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
  	module.exports = factory();
  }(commonjsGlobal, (function () {
  function quickselect(arr, k, left, right, compare) {
      quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);
  }

  function quickselectStep(arr, k, left, right, compare) {

      while (right > left) {
          if (right - left > 600) {
              var n = right - left + 1;
              var m = k - left + 1;
              var z = Math.log(n);
              var s = 0.5 * Math.exp(2 * z / 3);
              var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
              var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
              var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
              quickselectStep(arr, k, newLeft, newRight, compare);
          }

          var t = arr[k];
          var i = left;
          var j = right;

          swap(arr, left, k);
          if (compare(arr[right], t) > 0) swap(arr, left, right);

          while (i < j) {
              swap(arr, i, j);
              i++;
              j--;
              while (compare(arr[i], t) < 0) i++;
              while (compare(arr[j], t) > 0) j--;
          }

          if (compare(arr[left], t) === 0) swap(arr, left, j);
          else {
              j++;
              swap(arr, j, right);
          }

          if (j <= k) left = j + 1;
          if (k <= j) right = j - 1;
      }
  }

  function swap(arr, i, j) {
      var tmp = arr[i];
      arr[i] = arr[j];
      arr[j] = tmp;
  }

  function defaultCompare(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
  }

  return quickselect;

  })));
  });

  var quickselect$1 = /*#__PURE__*/Object.freeze({
    default: quickselect,
    __moduleExports: quickselect
  });

  var quickselect$2 = ( quickselect$1 && quickselect ) || quickselect$1;

  var rbush_1 = rbush;
  var default_1 = rbush;



  function rbush(maxEntries, format) {
      if (!(this instanceof rbush)) return new rbush(maxEntries, format);

      // max entries in a node is 9 by default; min node fill is 40% for best performance
      this._maxEntries = Math.max(4, maxEntries || 9);
      this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));

      if (format) {
          this._initFormat(format);
      }

      this.clear();
  }

  rbush.prototype = {

      all: function () {
          return this._all(this.data, []);
      },

      search: function (bbox) {

          var node = this.data,
              result = [],
              toBBox = this.toBBox;

          if (!intersects$1(bbox, node)) return result;

          var nodesToSearch = [],
              i, len, child, childBBox;

          while (node) {
              for (i = 0, len = node.children.length; i < len; i++) {

                  child = node.children[i];
                  childBBox = node.leaf ? toBBox(child) : child;

                  if (intersects$1(bbox, childBBox)) {
                      if (node.leaf) result.push(child);
                      else if (contains(bbox, childBBox)) this._all(child, result);
                      else nodesToSearch.push(child);
                  }
              }
              node = nodesToSearch.pop();
          }

          return result;
      },

      collides: function (bbox) {

          var node = this.data,
              toBBox = this.toBBox;

          if (!intersects$1(bbox, node)) return false;

          var nodesToSearch = [],
              i, len, child, childBBox;

          while (node) {
              for (i = 0, len = node.children.length; i < len; i++) {

                  child = node.children[i];
                  childBBox = node.leaf ? toBBox(child) : child;

                  if (intersects$1(bbox, childBBox)) {
                      if (node.leaf || contains(bbox, childBBox)) return true;
                      nodesToSearch.push(child);
                  }
              }
              node = nodesToSearch.pop();
          }

          return false;
      },

      load: function (data) {
          if (!(data && data.length)) return this;

          if (data.length < this._minEntries) {
              for (var i = 0, len = data.length; i < len; i++) {
                  this.insert(data[i]);
              }
              return this;
          }

          // recursively build the tree with the given data from scratch using OMT algorithm
          var node = this._build(data.slice(), 0, data.length - 1, 0);

          if (!this.data.children.length) {
              // save as is if tree is empty
              this.data = node;

          } else if (this.data.height === node.height) {
              // split root if trees have the same height
              this._splitRoot(this.data, node);

          } else {
              if (this.data.height < node.height) {
                  // swap trees if inserted one is bigger
                  var tmpNode = this.data;
                  this.data = node;
                  node = tmpNode;
              }

              // insert the small tree into the large tree at appropriate level
              this._insert(node, this.data.height - node.height - 1, true);
          }

          return this;
      },

      insert: function (item) {
          if (item) this._insert(item, this.data.height - 1);
          return this;
      },

      clear: function () {
          this.data = createNode([]);
          return this;
      },

      remove: function (item, equalsFn) {
          if (!item) return this;

          var node = this.data,
              bbox = this.toBBox(item),
              path = [],
              indexes = [],
              i, parent, index, goingUp;

          // depth-first iterative tree traversal
          while (node || path.length) {

              if (!node) { // go up
                  node = path.pop();
                  parent = path[path.length - 1];
                  i = indexes.pop();
                  goingUp = true;
              }

              if (node.leaf) { // check current node
                  index = findItem(item, node.children, equalsFn);

                  if (index !== -1) {
                      // item found, remove the item and condense tree upwards
                      node.children.splice(index, 1);
                      path.push(node);
                      this._condense(path);
                      return this;
                  }
              }

              if (!goingUp && !node.leaf && contains(node, bbox)) { // go down
                  path.push(node);
                  indexes.push(i);
                  i = 0;
                  parent = node;
                  node = node.children[0];

              } else if (parent) { // go right
                  i++;
                  node = parent.children[i];
                  goingUp = false;

              } else node = null; // nothing found
          }

          return this;
      },

      toBBox: function (item) { return item; },

      compareMinX: compareNodeMinX,
      compareMinY: compareNodeMinY,

      toJSON: function () { return this.data; },

      fromJSON: function (data) {
          this.data = data;
          return this;
      },

      _all: function (node, result) {
          var nodesToSearch = [];
          while (node) {
              if (node.leaf) result.push.apply(result, node.children);
              else nodesToSearch.push.apply(nodesToSearch, node.children);

              node = nodesToSearch.pop();
          }
          return result;
      },

      _build: function (items, left, right, height) {

          var N = right - left + 1,
              M = this._maxEntries,
              node;

          if (N <= M) {
              // reached leaf level; return leaf
              node = createNode(items.slice(left, right + 1));
              calcBBox(node, this.toBBox);
              return node;
          }

          if (!height) {
              // target height of the bulk-loaded tree
              height = Math.ceil(Math.log(N) / Math.log(M));

              // target number of root entries to maximize storage utilization
              M = Math.ceil(N / Math.pow(M, height - 1));
          }

          node = createNode([]);
          node.leaf = false;
          node.height = height;

          // split the items into M mostly square tiles

          var N2 = Math.ceil(N / M),
              N1 = N2 * Math.ceil(Math.sqrt(M)),
              i, j, right2, right3;

          multiSelect(items, left, right, N1, this.compareMinX);

          for (i = left; i <= right; i += N1) {

              right2 = Math.min(i + N1 - 1, right);

              multiSelect(items, i, right2, N2, this.compareMinY);

              for (j = i; j <= right2; j += N2) {

                  right3 = Math.min(j + N2 - 1, right2);

                  // pack each entry recursively
                  node.children.push(this._build(items, j, right3, height - 1));
              }
          }

          calcBBox(node, this.toBBox);

          return node;
      },

      _chooseSubtree: function (bbox, node, level, path) {

          var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;

          while (true) {
              path.push(node);

              if (node.leaf || path.length - 1 === level) break;

              minArea = minEnlargement = Infinity;

              for (i = 0, len = node.children.length; i < len; i++) {
                  child = node.children[i];
                  area = bboxArea(child);
                  enlargement = enlargedArea(bbox, child) - area;

                  // choose entry with the least area enlargement
                  if (enlargement < minEnlargement) {
                      minEnlargement = enlargement;
                      minArea = area < minArea ? area : minArea;
                      targetNode = child;

                  } else if (enlargement === minEnlargement) {
                      // otherwise choose one with the smallest area
                      if (area < minArea) {
                          minArea = area;
                          targetNode = child;
                      }
                  }
              }

              node = targetNode || node.children[0];
          }

          return node;
      },

      _insert: function (item, level, isNode) {

          var toBBox = this.toBBox,
              bbox = isNode ? item : toBBox(item),
              insertPath = [];

          // find the best node for accommodating the item, saving all nodes along the path too
          var node = this._chooseSubtree(bbox, this.data, level, insertPath);

          // put the item into the node
          node.children.push(item);
          extend$2(node, bbox);

          // split on node overflow; propagate upwards if necessary
          while (level >= 0) {
              if (insertPath[level].children.length > this._maxEntries) {
                  this._split(insertPath, level);
                  level--;
              } else break;
          }

          // adjust bboxes along the insertion path
          this._adjustParentBBoxes(bbox, insertPath, level);
      },

      // split overflowed node into two
      _split: function (insertPath, level) {

          var node = insertPath[level],
              M = node.children.length,
              m = this._minEntries;

          this._chooseSplitAxis(node, m, M);

          var splitIndex = this._chooseSplitIndex(node, m, M);

          var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
          newNode.height = node.height;
          newNode.leaf = node.leaf;

          calcBBox(node, this.toBBox);
          calcBBox(newNode, this.toBBox);

          if (level) insertPath[level - 1].children.push(newNode);
          else this._splitRoot(node, newNode);
      },

      _splitRoot: function (node, newNode) {
          // split root node
          this.data = createNode([node, newNode]);
          this.data.height = node.height + 1;
          this.data.leaf = false;
          calcBBox(this.data, this.toBBox);
      },

      _chooseSplitIndex: function (node, m, M) {

          var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;

          minOverlap = minArea = Infinity;

          for (i = m; i <= M - m; i++) {
              bbox1 = distBBox(node, 0, i, this.toBBox);
              bbox2 = distBBox(node, i, M, this.toBBox);

              overlap = intersectionArea(bbox1, bbox2);
              area = bboxArea(bbox1) + bboxArea(bbox2);

              // choose distribution with minimum overlap
              if (overlap < minOverlap) {
                  minOverlap = overlap;
                  index = i;

                  minArea = area < minArea ? area : minArea;

              } else if (overlap === minOverlap) {
                  // otherwise choose distribution with minimum area
                  if (area < minArea) {
                      minArea = area;
                      index = i;
                  }
              }
          }

          return index;
      },

      // sorts node children by the best axis for split
      _chooseSplitAxis: function (node, m, M) {

          var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,
              compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,
              xMargin = this._allDistMargin(node, m, M, compareMinX),
              yMargin = this._allDistMargin(node, m, M, compareMinY);

          // if total distributions margin value is minimal for x, sort by minX,
          // otherwise it's already sorted by minY
          if (xMargin < yMargin) node.children.sort(compareMinX);
      },

      // total margin of all possible split distributions where each node is at least m full
      _allDistMargin: function (node, m, M, compare) {

          node.children.sort(compare);

          var toBBox = this.toBBox,
              leftBBox = distBBox(node, 0, m, toBBox),
              rightBBox = distBBox(node, M - m, M, toBBox),
              margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),
              i, child;

          for (i = m; i < M - m; i++) {
              child = node.children[i];
              extend$2(leftBBox, node.leaf ? toBBox(child) : child);
              margin += bboxMargin(leftBBox);
          }

          for (i = M - m - 1; i >= m; i--) {
              child = node.children[i];
              extend$2(rightBBox, node.leaf ? toBBox(child) : child);
              margin += bboxMargin(rightBBox);
          }

          return margin;
      },

      _adjustParentBBoxes: function (bbox, path, level) {
          // adjust bboxes along the given tree path
          for (var i = level; i >= 0; i--) {
              extend$2(path[i], bbox);
          }
      },

      _condense: function (path) {
          // go through the path, removing empty nodes and updating bboxes
          for (var i = path.length - 1, siblings; i >= 0; i--) {
              if (path[i].children.length === 0) {
                  if (i > 0) {
                      siblings = path[i - 1].children;
                      siblings.splice(siblings.indexOf(path[i]), 1);

                  } else this.clear();

              } else calcBBox(path[i], this.toBBox);
          }
      },

      _initFormat: function (format) {
          // data format (minX, minY, maxX, maxY accessors)

          // uses eval-type function compilation instead of just accepting a toBBox function
          // because the algorithms are very sensitive to sorting functions performance,
          // so they should be dead simple and without inner calls

          var compareArr = ['return a', ' - b', ';'];

          this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));
          this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));

          this.toBBox = new Function('a',
              'return {minX: a' + format[0] +
              ', minY: a' + format[1] +
              ', maxX: a' + format[2] +
              ', maxY: a' + format[3] + '};');
      }
  };

  function findItem(item, items, equalsFn) {
      if (!equalsFn) return items.indexOf(item);

      for (var i = 0; i < items.length; i++) {
          if (equalsFn(item, items[i])) return i;
      }
      return -1;
  }

  // calculate node's bbox from bboxes of its children
  function calcBBox(node, toBBox) {
      distBBox(node, 0, node.children.length, toBBox, node);
  }

  // min bounding rectangle of node children from k to p-1
  function distBBox(node, k, p, toBBox, destNode) {
      if (!destNode) destNode = createNode(null);
      destNode.minX = Infinity;
      destNode.minY = Infinity;
      destNode.maxX = -Infinity;
      destNode.maxY = -Infinity;

      for (var i = k, child; i < p; i++) {
          child = node.children[i];
          extend$2(destNode, node.leaf ? toBBox(child) : child);
      }

      return destNode;
  }

  function extend$2(a, b) {
      a.minX = Math.min(a.minX, b.minX);
      a.minY = Math.min(a.minY, b.minY);
      a.maxX = Math.max(a.maxX, b.maxX);
      a.maxY = Math.max(a.maxY, b.maxY);
      return a;
  }

  function compareNodeMinX(a, b) { return a.minX - b.minX; }
  function compareNodeMinY(a, b) { return a.minY - b.minY; }

  function bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }
  function bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }

  function enlargedArea(a, b) {
      return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *
             (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
  }

  function intersectionArea(a, b) {
      var minX = Math.max(a.minX, b.minX),
          minY = Math.max(a.minY, b.minY),
          maxX = Math.min(a.maxX, b.maxX),
          maxY = Math.min(a.maxY, b.maxY);

      return Math.max(0, maxX - minX) *
             Math.max(0, maxY - minY);
  }

  function contains(a, b) {
      return a.minX <= b.minX &&
             a.minY <= b.minY &&
             b.maxX <= a.maxX &&
             b.maxY <= a.maxY;
  }

  function intersects$1(a, b) {
      return b.minX <= a.maxX &&
             b.minY <= a.maxY &&
             b.maxX >= a.minX &&
             b.maxY >= a.minY;
  }

  function createNode(children) {
      return {
          children: children,
          height: 1,
          leaf: true,
          minX: Infinity,
          minY: Infinity,
          maxX: -Infinity,
          maxY: -Infinity
      };
  }

  // sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
  // combines selection algorithm with binary divide & conquer approach

  function multiSelect(arr, left, right, n, compare) {
      var stack = [left, right],
          mid;

      while (stack.length) {
          right = stack.pop();
          left = stack.pop();

          if (right - left <= n) continue;

          mid = left + Math.ceil((right - left) / n / 2) * n;
          quickselect$2(arr, mid, left, right, compare);

          stack.push(left, mid, mid, right);
      }
  }
  rbush_1.default = default_1;

  /**
   * @module ol/structs/RBush
   */

  /**
   * @typedef {Object} Entry
   * @property {number} minX
   * @property {number} minY
   * @property {number} maxX
   * @property {number} maxY
   * @property {Object} [value]
   */

  /**
   * @classdesc
   * Wrapper around the RBush by Vladimir Agafonkin.
   * See https://github.com/mourner/rbush.
   *
   * @template T
   */
  var RBush = function RBush(opt_maxEntries) {

    /**
     * @private
     */
    this.rbush_ = rbush_1(opt_maxEntries, undefined);

    /**
     * A mapping between the objects added to this rbush wrapper
     * and the objects that are actually added to the internal rbush.
     * @private
     * @type {Object<string, Entry>}
     */
    this.items_ = {};

  };

  /**
   * Insert a value into the RBush.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {T} value Value.
   */
  RBush.prototype.insert = function insert (extent, value) {
    /** @type {Entry} */
    var item = {
      minX: extent[0],
      minY: extent[1],
      maxX: extent[2],
      maxY: extent[3],
      value: value
    };

    this.rbush_.insert(item);
    this.items_[getUid(value)] = item;
  };


  /**
   * Bulk-insert values into the RBush.
   * @param {Array<import("../extent.js").Extent>} extents Extents.
   * @param {Array<T>} values Values.
   */
  RBush.prototype.load = function load (extents, values) {
    var items = new Array(values.length);
    for (var i = 0, l = values.length; i < l; i++) {
      var extent = extents[i];
      var value = values[i];

      /** @type {Entry} */
      var item = {
        minX: extent[0],
        minY: extent[1],
        maxX: extent[2],
        maxY: extent[3],
        value: value
      };
      items[i] = item;
      this.items_[getUid(value)] = item;
    }
    this.rbush_.load(items);
  };


  /**
   * Remove a value from the RBush.
   * @param {T} value Value.
   * @return {boolean} Removed.
   */
  RBush.prototype.remove = function remove (value) {
    var uid = getUid(value);

    // get the object in which the value was wrapped when adding to the
    // internal rbush. then use that object to do the removal.
    var item = this.items_[uid];
    delete this.items_[uid];
    return this.rbush_.remove(item) !== null;
  };


  /**
   * Update the extent of a value in the RBush.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {T} value Value.
   */
  RBush.prototype.update = function update (extent, value) {
    var item = this.items_[getUid(value)];
    var bbox = [item.minX, item.minY, item.maxX, item.maxY];
    if (!equals$2(bbox, extent)) {
      this.remove(value);
      this.insert(extent, value);
    }
  };


  /**
   * Return all values in the RBush.
   * @return {Array<T>} All.
   */
  RBush.prototype.getAll = function getAll () {
    var items = this.rbush_.all();
    return items.map(function(item) {
      return item.value;
    });
  };


  /**
   * Return all values in the given extent.
   * @param {import("../extent.js").Extent} extent Extent.
   * @return {Array<T>} All in extent.
   */
  RBush.prototype.getInExtent = function getInExtent (extent) {
    /** @type {Entry} */
    var bbox = {
      minX: extent[0],
      minY: extent[1],
      maxX: extent[2],
      maxY: extent[3]
    };
    var items = this.rbush_.search(bbox);
    return items.map(function(item) {
      return item.value;
    });
  };


  /**
   * Calls a callback function with each value in the tree.
   * If the callback returns a truthy value, this value is returned without
   * checking the rest of the tree.
   * @param {function(this: S, T): *} callback Callback.
   * @param {S=} opt_this The object to use as `this` in `callback`.
   * @return {*} Callback return value.
   * @template S
   */
  RBush.prototype.forEach = function forEach (callback, opt_this) {
    return this.forEach_(this.getAll(), callback, opt_this);
  };


  /**
   * Calls a callback function with each value in the provided extent.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {function(this: S, T): *} callback Callback.
   * @param {S=} opt_this The object to use as `this` in `callback`.
   * @return {*} Callback return value.
   * @template S
   */
  RBush.prototype.forEachInExtent = function forEachInExtent (extent, callback, opt_this) {
    return this.forEach_(this.getInExtent(extent), callback, opt_this);
  };


  /**
   * @param {Array<T>} values Values.
   * @param {function(this: S, T): *} callback Callback.
   * @param {S=} opt_this The object to use as `this` in `callback`.
   * @private
   * @return {*} Callback return value.
   * @template S
   */
  RBush.prototype.forEach_ = function forEach_ (values, callback, opt_this) {
    var result;
    for (var i = 0, l = values.length; i < l; i++) {
      result = callback.call(opt_this, values[i]);
      if (result) {
        return result;
      }
    }
    return result;
  };


  /**
   * @return {boolean} Is empty.
   */
  RBush.prototype.isEmpty = function isEmpty$1$$1 () {
    return isEmpty(this.items_);
  };


  /**
   * Remove all values from the RBush.
   */
  RBush.prototype.clear = function clear$$1 () {
    this.rbush_.clear();
    this.items_ = {};
  };


  /**
   * @param {import("../extent.js").Extent=} opt_extent Extent.
   * @return {import("../extent.js").Extent} Extent.
   */
  RBush.prototype.getExtent = function getExtent (opt_extent) {
    var data = this.rbush_.toJSON();
    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);
  };


  /**
   * @param {RBush} rbush R-Tree.
   */
  RBush.prototype.concat = function concat (rbush) {
    this.rbush_.load(rbush.rbush_.all());
    for (var i in rbush.items_) {
      this.items_[i] = rbush.items_[i];
    }
  };

  /**
   * @module ol/source/Vector
   */

  /**
   * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and
   * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this
   * is one of the standard {@link module:ol/loadingstrategy} strategies.
   *
   * @typedef {function(import("../extent.js").Extent, number): Array<import("../extent.js").Extent>} LoadingStrategy
   * @api
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Vector} instances are instances of this
   * type.
   */
  var VectorSourceEvent = /*@__PURE__*/(function (Event$$1) {
    function VectorSourceEvent(type, opt_feature) {

      Event$$1.call(this, type);

      /**
       * The feature being added or removed.
       * @type {import("../Feature.js").default|undefined}
       * @api
       */
      this.feature = opt_feature;

    }

    if ( Event$$1 ) VectorSourceEvent.__proto__ = Event$$1;
    VectorSourceEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    VectorSourceEvent.prototype.constructor = VectorSourceEvent;

    return VectorSourceEvent;
  }(Event));


  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {Array<import("../Feature.js").default>|Collection<import("../Feature.js").default>} [features]
   * Features. If provided as {@link module:ol/Collection}, the features in the source
   * and the collection will stay in sync.
   * @property {import("../format/Feature.js").default} [format] The feature format used by the XHR
   * feature loader when `url` is set. Required if `url` is set, otherwise ignored.
   * @property {import("../featureloader.js").FeatureLoader} [loader]
   * The loader function used to load features, from a remote source for example.
   * If this is not set and `url` is set, the source will create and use an XHR
   * feature loader.
   *
   * Example:
   *
   * ```js
   * import {Vector} from 'ol/source';
   * import {GeoJSON} from 'ol/format';
   * import {bbox} from 'ol/loadingstrategy';
   *
   * var vectorSource = new Vector({
   *   format: new GeoJSON(),
   *   loader: function(extent, resolution, projection) {
   *      var proj = projection.getCode();
   *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +
   *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +
   *          'outputFormat=application/json&srsname=' + proj + '&' +
   *          'bbox=' + extent.join(',') + ',' + proj;
   *      var xhr = new XMLHttpRequest();
   *      xhr.open('GET', url);
   *      var onError = function() {
   *        vectorSource.removeLoadedExtent(extent);
   *      }
   *      xhr.onerror = onError;
   *      xhr.onload = function() {
   *        if (xhr.status == 200) {
   *          vectorSource.addFeatures(
   *              vectorSource.getFormat().readFeatures(xhr.responseText));
   *        } else {
   *          onError();
   *        }
   *      }
   *      xhr.send();
   *    },
   *    strategy: bbox
   *  });
   * ```
   * @property {boolean} [overlaps=true] This source may have overlapping geometries.
   * Setting this to `false` (e.g. for sources with polygons that represent administrative
   * boundaries or TopoJSON sources) allows the renderer to optimise fill and
   * stroke operations.
   * @property {LoadingStrategy} [strategy] The loading strategy to use.
   * By default an {@link module:ol/loadingstrategy~all}
   * strategy is used, a one-off strategy which loads all features at once.
   * @property {string|import("../featureloader.js").FeatureUrlFunction} [url]
   * Setting this option instructs the source to load features using an XHR loader
   * (see {@link module:ol/featureloader~xhr}). Use a `string` and an
   * {@link module:ol/loadingstrategy~all} for a one-off download of all features from
   * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with
   * other loading strategies.
   * Requires `format` to be set as well.
   * When default XHR feature loader is provided, the features will
   * be transformed from the data projection to the view projection
   * during parsing. If your remote data source does not advertise its projection
   * properly, this transformation will be incorrect. For some formats, the
   * default projection (usually EPSG:4326) can be overridden by setting the
   * dataProjection constructor option on the format.
   * Note that if a source contains non-feature data, such as a GeoJSON geometry
   * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.
   * @property {boolean} [useSpatialIndex=true]
   * By default, an RTree is used as spatial index. When features are removed and
   * added frequently, and the total number of features is low, setting this to
   * `false` may improve performance.
   *
   * Note that
   * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},
   * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and
   * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is
   * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop
   * through all features.
   *
   * When set to `false`, the features will be maintained in an
   * {@link module:ol/Collection}, which can be retrieved through
   * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.
   * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the
   * -180° and 180° meridians to work properly, this should be set to `false`. The
   * resulting geometry coordinates will then exceed the world bounds.
   */


  /**
   * @classdesc
   * Provides a source of features for vector layers. Vector features provided
   * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for
   * vector data that is optimized for rendering.
   *
   * @fires ol/source/Vector.VectorSourceEvent
   * @api
   */
  var VectorSource = /*@__PURE__*/(function (Source$$1) {
    function VectorSource(opt_options) {

      var options = opt_options || {};

      Source$$1.call(this, {
        attributions: options.attributions,
        projection: undefined,
        state: SourceState.READY,
        wrapX: options.wrapX !== undefined ? options.wrapX : true
      });

      /**
       * @private
       * @type {import("../featureloader.js").FeatureLoader}
       */
      this.loader_ = VOID;

      /**
       * @private
       * @type {import("../format/Feature.js").default|undefined}
       */
      this.format_ = options.format;

      /**
       * @private
       * @type {boolean}
       */
      this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;

      /**
       * @private
       * @type {string|import("../featureloader.js").FeatureUrlFunction|undefined}
       */
      this.url_ = options.url;

      if (options.loader !== undefined) {
        this.loader_ = options.loader;
      } else if (this.url_ !== undefined) {
        assert(this.format_, 7); // `format` must be set when `url` is set
        // create a XHR feature loader for "url" and "format"
        this.loader_ = xhr(this.url_, /** @type {import("../format/Feature.js").default} */ (this.format_));
      }

      /**
       * @private
       * @type {LoadingStrategy}
       */
      this.strategy_ = options.strategy !== undefined ? options.strategy : all;

      var useSpatialIndex =
          options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;

      /**
       * @private
       * @type {RBush<import("../Feature.js").default>}
       */
      this.featuresRtree_ = useSpatialIndex ? new RBush() : null;

      /**
       * @private
       * @type {RBush<{extent: import("../extent.js").Extent}>}
       */
      this.loadedExtentsRtree_ = new RBush();

      /**
       * @private
       * @type {!Object<string, import("../Feature.js").default>}
       */
      this.nullGeometryFeatures_ = {};

      /**
       * A lookup of features by id (the return from feature.getId()).
       * @private
       * @type {!Object<string, import("../Feature.js").default>}
       */
      this.idIndex_ = {};

      /**
       * A lookup of features without id (keyed by getUid(feature)).
       * @private
       * @type {!Object<string, import("../Feature.js").default>}
       */
      this.undefIdIndex_ = {};

      /**
       * @private
       * @type {Object<string, Array<import("../events.js").EventsKey>>}
       */
      this.featureChangeKeys_ = {};

      /**
       * @private
       * @type {Collection<import("../Feature.js").default>}
       */
      this.featuresCollection_ = null;

      var collection, features;
      if (Array.isArray(options.features)) {
        features = options.features;
      } else if (options.features) {
        collection = options.features;
        features = collection.getArray();
      }
      if (!useSpatialIndex && collection === undefined) {
        collection = new Collection(features);
      }
      if (features !== undefined) {
        this.addFeaturesInternal(features);
      }
      if (collection !== undefined) {
        this.bindFeaturesCollection_(collection);
      }

    }

    if ( Source$$1 ) VectorSource.__proto__ = Source$$1;
    VectorSource.prototype = Object.create( Source$$1 && Source$$1.prototype );
    VectorSource.prototype.constructor = VectorSource;

    /**
     * Add a single feature to the source.  If you want to add a batch of features
     * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
     * instead. A feature will not be added to the source if feature with
     * the same id is already there. The reason for this behavior is to avoid
     * feature duplication when using bbox or tile loading strategies.
     * @param {import("../Feature.js").default} feature Feature to add.
     * @api
     */
    VectorSource.prototype.addFeature = function addFeature (feature) {
      this.addFeatureInternal(feature);
      this.changed();
    };


    /**
     * Add a feature without firing a `change` event.
     * @param {import("../Feature.js").default} feature Feature.
     * @protected
     */
    VectorSource.prototype.addFeatureInternal = function addFeatureInternal (feature) {
      var featureKey = getUid(feature);

      if (!this.addToIndex_(featureKey, feature)) {
        return;
      }

      this.setupChangeEvents_(featureKey, feature);

      var geometry = feature.getGeometry();
      if (geometry) {
        var extent = geometry.getExtent();
        if (this.featuresRtree_) {
          this.featuresRtree_.insert(extent, feature);
        }
      } else {
        this.nullGeometryFeatures_[featureKey] = feature;
      }

      this.dispatchEvent(
        new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));
    };


    /**
     * @param {string} featureKey Unique identifier for the feature.
     * @param {import("../Feature.js").default} feature The feature.
     * @private
     */
    VectorSource.prototype.setupChangeEvents_ = function setupChangeEvents_ (featureKey, feature) {
      this.featureChangeKeys_[featureKey] = [
        listen(feature, EventType.CHANGE,
          this.handleFeatureChange_, this),
        listen(feature, ObjectEventType.PROPERTYCHANGE,
          this.handleFeatureChange_, this)
      ];
    };


    /**
     * @param {string} featureKey Unique identifier for the feature.
     * @param {import("../Feature.js").default} feature The feature.
     * @return {boolean} The feature is "valid", in the sense that it is also a
     *     candidate for insertion into the Rtree.
     * @private
     */
    VectorSource.prototype.addToIndex_ = function addToIndex_ (featureKey, feature) {
      var valid = true;
      var id = feature.getId();
      if (id !== undefined) {
        if (!(id.toString() in this.idIndex_)) {
          this.idIndex_[id.toString()] = feature;
        } else {
          valid = false;
        }
      } else {
        assert(!(featureKey in this.undefIdIndex_),
          30); // The passed `feature` was already added to the source
        this.undefIdIndex_[featureKey] = feature;
      }
      return valid;
    };


    /**
     * Add a batch of features to the source.
     * @param {Array<import("../Feature.js").default>} features Features to add.
     * @api
     */
    VectorSource.prototype.addFeatures = function addFeatures (features) {
      this.addFeaturesInternal(features);
      this.changed();
    };


    /**
     * Add features without firing a `change` event.
     * @param {Array<import("../Feature.js").default>} features Features.
     * @protected
     */
    VectorSource.prototype.addFeaturesInternal = function addFeaturesInternal (features) {
      var extents = [];
      var newFeatures = [];
      var geometryFeatures = [];

      for (var i = 0, length = features.length; i < length; i++) {
        var feature = features[i];
        var featureKey = getUid(feature);
        if (this.addToIndex_(featureKey, feature)) {
          newFeatures.push(feature);
        }
      }

      for (var i$1 = 0, length$1 = newFeatures.length; i$1 < length$1; i$1++) {
        var feature$1 = newFeatures[i$1];
        var featureKey$1 = getUid(feature$1);
        this.setupChangeEvents_(featureKey$1, feature$1);

        var geometry = feature$1.getGeometry();
        if (geometry) {
          var extent = geometry.getExtent();
          extents.push(extent);
          geometryFeatures.push(feature$1);
        } else {
          this.nullGeometryFeatures_[featureKey$1] = feature$1;
        }
      }
      if (this.featuresRtree_) {
        this.featuresRtree_.load(extents, geometryFeatures);
      }

      for (var i$2 = 0, length$2 = newFeatures.length; i$2 < length$2; i$2++) {
        this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i$2]));
      }
    };


    /**
     * @param {!Collection<import("../Feature.js").default>} collection Collection.
     * @private
     */
    VectorSource.prototype.bindFeaturesCollection_ = function bindFeaturesCollection_ (collection) {
      var modifyingCollection = false;
      listen(this, VectorEventType.ADDFEATURE,
        /**
         * @param {VectorSourceEvent} evt The vector source event
         */
        function(evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            collection.push(evt.feature);
            modifyingCollection = false;
          }
        });
      listen(this, VectorEventType.REMOVEFEATURE,
        /**
         * @param {VectorSourceEvent} evt The vector source event
         */
        function(evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            collection.remove(evt.feature);
            modifyingCollection = false;
          }
        });
      listen(collection, CollectionEventType.ADD,
        /**
         * @param {import("../Collection.js").CollectionEvent} evt The collection event
         */
        function(evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            this.addFeature(/** @type {import("../Feature.js").default} */ (evt.element));
            modifyingCollection = false;
          }
        }, this);
      listen(collection, CollectionEventType.REMOVE,
        /**
         * @param {import("../Collection.js").CollectionEvent} evt The collection event
         */
        function(evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            this.removeFeature(/** @type {import("../Feature.js").default} */ (evt.element));
            modifyingCollection = false;
          }
        }, this);
      this.featuresCollection_ = collection;
    };


    /**
     * Remove all features from the source.
     * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.
     * @api
     */
    VectorSource.prototype.clear = function clear$$1 (opt_fast) {
      if (opt_fast) {
        for (var featureId in this.featureChangeKeys_) {
          var keys = this.featureChangeKeys_[featureId];
          keys.forEach(unlistenByKey);
        }
        if (!this.featuresCollection_) {
          this.featureChangeKeys_ = {};
          this.idIndex_ = {};
          this.undefIdIndex_ = {};
        }
      } else {
        if (this.featuresRtree_) {
          this.featuresRtree_.forEach(this.removeFeatureInternal, this);
          for (var id in this.nullGeometryFeatures_) {
            this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
          }
        }
      }
      if (this.featuresCollection_) {
        this.featuresCollection_.clear();
      }

      if (this.featuresRtree_) {
        this.featuresRtree_.clear();
      }
      this.loadedExtentsRtree_.clear();
      this.nullGeometryFeatures_ = {};

      var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);
      this.dispatchEvent(clearEvent);
      this.changed();
    };


    /**
     * Iterate through all features on the source, calling the provided callback
     * with each one.  If the callback returns any "truthy" value, iteration will
     * stop and the function will return the same value.
     * Note: this function only iterate through the feature that have a defined geometry.
     *
     * @param {function(import("../Feature.js").default): T} callback Called with each feature
     *     on the source.  Return a truthy value to stop iteration.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    VectorSource.prototype.forEachFeature = function forEachFeature (callback) {
      if (this.featuresRtree_) {
        return this.featuresRtree_.forEach(callback);
      } else if (this.featuresCollection_) {
        this.featuresCollection_.forEach(callback);
      }
    };


    /**
     * Iterate through all features whose geometries contain the provided
     * coordinate, calling the callback with each feature.  If the callback returns
     * a "truthy" value, iteration will stop and the function will return the same
     * value.
     *
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(import("../Feature.js").default): T} callback Called with each feature
     *     whose goemetry contains the provided coordinate.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     */
    VectorSource.prototype.forEachFeatureAtCoordinateDirect = function forEachFeatureAtCoordinateDirect (coordinate, callback) {
      var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];
      return this.forEachFeatureInExtent(extent, function(feature) {
        var geometry = feature.getGeometry();
        if (geometry.intersectsCoordinate(coordinate)) {
          return callback(feature);
        } else {
          return undefined;
        }
      });
    };


    /**
     * Iterate through all features whose bounding box intersects the provided
     * extent (note that the feature's geometry may not intersect the extent),
     * calling the callback with each feature.  If the callback returns a "truthy"
     * value, iteration will stop and the function will return the same value.
     *
     * If you are interested in features whose geometry intersects an extent, call
     * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
     *
     * When `useSpatialIndex` is set to false, this method will loop through all
     * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(import("../Feature.js").default): T} callback Called with each feature
     *     whose bounding box intersects the provided extent.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    VectorSource.prototype.forEachFeatureInExtent = function forEachFeatureInExtent (extent, callback) {
      if (this.featuresRtree_) {
        return this.featuresRtree_.forEachInExtent(extent, callback);
      } else if (this.featuresCollection_) {
        this.featuresCollection_.forEach(callback);
      }
    };


    /**
     * Iterate through all features whose geometry intersects the provided extent,
     * calling the callback with each feature.  If the callback returns a "truthy"
     * value, iteration will stop and the function will return the same value.
     *
     * If you only want to test for bounding box intersection, call the
     * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(import("../Feature.js").default): T} callback Called with each feature
     *     whose geometry intersects the provided extent.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    VectorSource.prototype.forEachFeatureIntersectingExtent = function forEachFeatureIntersectingExtent (extent, callback) {
      return this.forEachFeatureInExtent(extent,
        /**
         * @param {import("../Feature.js").default} feature Feature.
         * @return {T|undefined} The return value from the last call to the callback.
         */
        function(feature) {
          var geometry = feature.getGeometry();
          if (geometry.intersectsExtent(extent)) {
            var result = callback(feature);
            if (result) {
              return result;
            }
          }
        });
    };


    /**
     * Get the features collection associated with this source. Will be `null`
     * unless the source was configured with `useSpatialIndex` set to `false`, or
     * with an {@link module:ol/Collection} as `features`.
     * @return {Collection<import("../Feature.js").default>} The collection of features.
     * @api
     */
    VectorSource.prototype.getFeaturesCollection = function getFeaturesCollection () {
      return this.featuresCollection_;
    };


    /**
     * Get all features on the source in random order.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */
    VectorSource.prototype.getFeatures = function getFeatures () {
      var features;
      if (this.featuresCollection_) {
        features = this.featuresCollection_.getArray();
      } else if (this.featuresRtree_) {
        features = this.featuresRtree_.getAll();
        if (!isEmpty(this.nullGeometryFeatures_)) {
          extend(features, getValues(this.nullGeometryFeatures_));
        }
      }
      return (
        /** @type {Array<import("../Feature.js").default>} */ (features)
      );
    };


    /**
     * Get all features whose geometry intersects the provided coordinate.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */
    VectorSource.prototype.getFeaturesAtCoordinate = function getFeaturesAtCoordinate (coordinate) {
      var features = [];
      this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {
        features.push(feature);
      });
      return features;
    };


    /**
     * Get all features in the provided extent.  Note that this returns an array of
     * all features intersecting the given extent in random order (so it may include
     * features whose geometries do not intersect the extent).
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */
    VectorSource.prototype.getFeaturesInExtent = function getFeaturesInExtent (extent) {
      return this.featuresRtree_.getInExtent(extent);
    };


    /**
     * Get the closest feature to the provided coordinate.
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(import("../Feature.js").default):boolean=} opt_filter Feature filter function.
     *     The filter function will receive one argument, the {@link module:ol/Feature feature}
     *     and it should return a boolean value. By default, no filtering is made.
     * @return {import("../Feature.js").default} Closest feature.
     * @api
     */
    VectorSource.prototype.getClosestFeatureToCoordinate = function getClosestFeatureToCoordinate (coordinate, opt_filter) {
      // Find the closest feature using branch and bound.  We start searching an
      // infinite extent, and find the distance from the first feature found.  This
      // becomes the closest feature.  We then compute a smaller extent which any
      // closer feature must intersect.  We continue searching with this smaller
      // extent, trying to find a closer feature.  Every time we find a closer
      // feature, we update the extent being searched so that any even closer
      // feature must intersect it.  We continue until we run out of features.
      var x = coordinate[0];
      var y = coordinate[1];
      var closestFeature = null;
      var closestPoint = [NaN, NaN];
      var minSquaredDistance = Infinity;
      var extent = [-Infinity, -Infinity, Infinity, Infinity];
      var filter = opt_filter ? opt_filter : TRUE;
      this.featuresRtree_.forEachInExtent(extent,
        /**
         * @param {import("../Feature.js").default} feature Feature.
         */
        function(feature) {
          if (filter(feature)) {
            var geometry = feature.getGeometry();
            var previousMinSquaredDistance = minSquaredDistance;
            minSquaredDistance = geometry.closestPointXY(
              x, y, closestPoint, minSquaredDistance);
            if (minSquaredDistance < previousMinSquaredDistance) {
              closestFeature = feature;
              // This is sneaky.  Reduce the extent that it is currently being
              // searched while the R-Tree traversal using this same extent object
              // is still in progress.  This is safe because the new extent is
              // strictly contained by the old extent.
              var minDistance = Math.sqrt(minSquaredDistance);
              extent[0] = x - minDistance;
              extent[1] = y - minDistance;
              extent[2] = x + minDistance;
              extent[3] = y + minDistance;
            }
          }
        });
      return closestFeature;
    };


    /**
     * Get the extent of the features currently in the source.
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../extent.js").Extent=} opt_extent Destination extent. If provided, no new extent
     *     will be created. Instead, that extent's coordinates will be overwritten.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    VectorSource.prototype.getExtent = function getExtent (opt_extent) {
      return this.featuresRtree_.getExtent(opt_extent);
    };


    /**
     * Get a feature by its identifier (the value returned by feature.getId()).
     * Note that the index treats string and numeric identifiers as the same.  So
     * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
     *
     * @param {string|number} id Feature identifier.
     * @return {import("../Feature.js").default} The feature (or `null` if not found).
     * @api
     */
    VectorSource.prototype.getFeatureById = function getFeatureById (id) {
      var feature = this.idIndex_[id.toString()];
      return feature !== undefined ? feature : null;
    };


    /**
     * Get the format associated with this source.
     *
     * @return {import("../format/Feature.js").default|undefined} The feature format.
     * @api
     */
    VectorSource.prototype.getFormat = function getFormat () {
      return this.format_;
    };


    /**
     * @return {boolean} The source can have overlapping geometries.
     */
    VectorSource.prototype.getOverlaps = function getOverlaps () {
      return this.overlaps_;
    };


    /**
     * Get the url associated with this source.
     *
     * @return {string|import("../featureloader.js").FeatureUrlFunction|undefined} The url.
     * @api
     */
    VectorSource.prototype.getUrl = function getUrl () {
      return this.url_;
    };


    /**
     * @param {Event} event Event.
     * @private
     */
    VectorSource.prototype.handleFeatureChange_ = function handleFeatureChange_ (event) {
      var feature = /** @type {import("../Feature.js").default} */ (event.target);
      var featureKey = getUid(feature);
      var geometry = feature.getGeometry();
      if (!geometry) {
        if (!(featureKey in this.nullGeometryFeatures_)) {
          if (this.featuresRtree_) {
            this.featuresRtree_.remove(feature);
          }
          this.nullGeometryFeatures_[featureKey] = feature;
        }
      } else {
        var extent = geometry.getExtent();
        if (featureKey in this.nullGeometryFeatures_) {
          delete this.nullGeometryFeatures_[featureKey];
          if (this.featuresRtree_) {
            this.featuresRtree_.insert(extent, feature);
          }
        } else {
          if (this.featuresRtree_) {
            this.featuresRtree_.update(extent, feature);
          }
        }
      }
      var id = feature.getId();
      if (id !== undefined) {
        var sid = id.toString();
        if (featureKey in this.undefIdIndex_) {
          delete this.undefIdIndex_[featureKey];
          this.idIndex_[sid] = feature;
        } else {
          if (this.idIndex_[sid] !== feature) {
            this.removeFromIdIndex_(feature);
            this.idIndex_[sid] = feature;
          }
        }
      } else {
        if (!(featureKey in this.undefIdIndex_)) {
          this.removeFromIdIndex_(feature);
          this.undefIdIndex_[featureKey] = feature;
        }
      }
      this.changed();
      this.dispatchEvent(new VectorSourceEvent(
        VectorEventType.CHANGEFEATURE, feature));
    };

    /**
     * Returns true if the feature is contained within the source.
     * @param {import("../Feature.js").default} feature Feature.
     * @return {boolean} Has feature.
     * @api
     */
    VectorSource.prototype.hasFeature = function hasFeature (feature) {
      var id = feature.getId();
      if (id !== undefined) {
        return id in this.idIndex_;
      } else {
        return getUid(feature) in this.undefIdIndex_;
      }
    };

    /**
     * @return {boolean} Is empty.
     */
    VectorSource.prototype.isEmpty = function isEmpty$1$$1 () {
      return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);
    };


    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */
    VectorSource.prototype.loadFeatures = function loadFeatures (extent, resolution, projection) {
      var this$1 = this;

      var loadedExtentsRtree = this.loadedExtentsRtree_;
      var extentsToLoad = this.strategy_(extent, resolution);
      this.loading = false;
      var loop = function ( i, ii ) {
        var extentToLoad = extentsToLoad[i];
        var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,
          /**
           * @param {{extent: import("../extent.js").Extent}} object Object.
           * @return {boolean} Contains.
           */
          function(object) {
            return containsExtent(object.extent, extentToLoad);
          });
        if (!alreadyLoaded) {
          this$1.loader_.call(this$1, extentToLoad, resolution, projection);
          loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});
          this$1.loading = this$1.loader_ !== VOID;
        }
      };

      for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) loop( i, ii );
    };


    /**
     * Remove an extent from the list of loaded extents.
     * @param {import("../extent.js").Extent} extent Extent.
     * @api
     */
    VectorSource.prototype.removeLoadedExtent = function removeLoadedExtent (extent) {
      var loadedExtentsRtree = this.loadedExtentsRtree_;
      var obj;
      loadedExtentsRtree.forEachInExtent(extent, function(object) {
        if (equals$2(object.extent, extent)) {
          obj = object;
          return true;
        }
      });
      if (obj) {
        loadedExtentsRtree.remove(obj);
      }
    };


    /**
     * Remove a single feature from the source.  If you want to remove all features
     * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
     * instead.
     * @param {import("../Feature.js").default} feature Feature to remove.
     * @api
     */
    VectorSource.prototype.removeFeature = function removeFeature (feature) {
      var featureKey = getUid(feature);
      if (featureKey in this.nullGeometryFeatures_) {
        delete this.nullGeometryFeatures_[featureKey];
      } else {
        if (this.featuresRtree_) {
          this.featuresRtree_.remove(feature);
        }
      }
      this.removeFeatureInternal(feature);
      this.changed();
    };


    /**
     * Remove feature without firing a `change` event.
     * @param {import("../Feature.js").default} feature Feature.
     * @protected
     */
    VectorSource.prototype.removeFeatureInternal = function removeFeatureInternal (feature) {
      var featureKey = getUid(feature);
      this.featureChangeKeys_[featureKey].forEach(unlistenByKey);
      delete this.featureChangeKeys_[featureKey];
      var id = feature.getId();
      if (id !== undefined) {
        delete this.idIndex_[id.toString()];
      } else {
        delete this.undefIdIndex_[featureKey];
      }
      this.dispatchEvent(new VectorSourceEvent(
        VectorEventType.REMOVEFEATURE, feature));
    };


    /**
     * Remove a feature from the id index.  Called internally when the feature id
     * may have changed.
     * @param {import("../Feature.js").default} feature The feature.
     * @return {boolean} Removed the feature from the index.
     * @private
     */
    VectorSource.prototype.removeFromIdIndex_ = function removeFromIdIndex_ (feature) {
      var removed = false;
      for (var id in this.idIndex_) {
        if (this.idIndex_[id] === feature) {
          delete this.idIndex_[id];
          removed = true;
          break;
        }
      }
      return removed;
    };


    /**
     * Set the new loader of the source. The next loadFeatures call will use the
     * new loader.
     * @param {import("../featureloader.js").FeatureLoader} loader The loader to set.
     * @api
     */
    VectorSource.prototype.setLoader = function setLoader (loader) {
      this.loader_ = loader;
    };

    return VectorSource;
  }(Source));

  /**
   * @module ol/interaction/Draw
   */


  /**
   * @typedef {Object} Options
   * @property {GeometryType} type Geometry type of
   * the geometries being drawn with this instance.
   * @property {number} [clickTolerance=6] The maximum distance in pixels between
   * "down" and "up" for a "up" event to be considered a "click" event and
   * actually add a point/vertex to the geometry being drawn.  The default of `6`
   * was chosen for the draw interaction to behave correctly on mouse as well as
   * on touch devices.
   * @property {import("../Collection.js").default<Feature>} [features]
   * Destination collection for the drawn features.
   * @property {VectorSource} [source] Destination source for
   * the drawn features.
   * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown
   * before the current vertex can be dragged to its exact position.
   * @property {number} [snapTolerance=12] Pixel distance for snapping to the
   * drawing finish.
   * @property {boolean} [stopClick=false] Stop click, singleclick, and
   * doubleclick events from firing during drawing.
   * @property {number} [maxPoints] The number of points that can be drawn before
   * a polygon ring or line string is finished. By default there is no
   * restriction.
   * @property {number} [minPoints] The number of points that must be drawn
   * before a polygon ring or line string can be finished. Default is `3` for
   * polygon rings and `2` for line strings.
   * @property {import("../events/condition.js").Condition} [finishCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether the drawing can be finished.
   * @property {import("../style/Style.js").StyleLike} [style]
   * Style for sketch features.
   * @property {GeometryFunction} [geometryFunction]
   * Function that is called when a geometry's coordinates are updated.
   * @property {string} [geometryName] Geometry name to use for features created
   * by the draw interaction.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,
   * adds a vertex or deactivates freehand drawing.
   * @property {boolean} [freehand=false] Operate in freehand mode for lines,
   * polygons, and circles.  This makes the interaction always operate in freehand
   * mode and takes precedence over any `freehandCondition` option.
   * @property {import("../events/condition.js").Condition} [freehandCondition]
   * Condition that activates freehand drawing for lines and polygons. This
   * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
   * returns a boolean to indicate whether that event should be handled. The
   * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the
   * Shift key activates freehand drawing.
   * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
   * overlay.
   */


  /**
   * Coordinate type when drawing points.
   * @typedef {import("../coordinate.js").Coordinate} PointCoordType
   */


  /**
   * Coordinate type when drawing lines.
   * @typedef {Array<import("../coordinate.js").Coordinate>} LineCoordType
   */


  /**
   * Coordinate type when drawing polygons.
   * @typedef {Array<Array<import("../coordinate.js").Coordinate>>} PolyCoordType
   */


  /**
   * Types used for drawing coordinates.
   * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType
   */


  /**
   * Function that takes an array of coordinates and an optional existing geometry as
   * arguments, and returns a geometry. The optional existing geometry is the
   * geometry that is returned when the function is called without a second
   * argument.
   * @typedef {function(!SketchCoordType, import("../geom/SimpleGeometry.js").default=):
   *     import("../geom/SimpleGeometry.js").default} GeometryFunction
   */


  /**
   * Draw mode.  This collapses multi-part geometry types with their single-part
   * cousins.
   * @enum {string}
   */
  var Mode$1 = {
    POINT: 'Point',
    LINE_STRING: 'LineString',
    POLYGON: 'Polygon',
    CIRCLE: 'Circle'
  };


  /**
   * @enum {string}
   */
  var DrawEventType = {
    /**
     * Triggered upon feature draw start
     * @event DrawEvent#drawstart
     * @api
     */
    DRAWSTART: 'drawstart',
    /**
     * Triggered upon feature draw end
     * @event DrawEvent#drawend
     * @api
     */
    DRAWEND: 'drawend'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are
   * instances of this type.
   */
  var DrawEvent = /*@__PURE__*/(function (Event$$1) {
    function DrawEvent(type, feature) {

      Event$$1.call(this, type);

      /**
       * The feature being drawn.
       * @type {Feature}
       * @api
       */
      this.feature = feature;

    }

    if ( Event$$1 ) DrawEvent.__proto__ = Event$$1;
    DrawEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    DrawEvent.prototype.constructor = DrawEvent;

    return DrawEvent;
  }(Event));


  /**
   * @classdesc
   * Interaction for drawing feature geometries.
   *
   * @fires DrawEvent
   * @api
   */
  var Draw = /*@__PURE__*/(function (PointerInteraction$$1) {
    function Draw(options) {

      var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      PointerInteraction$$1.call(this, pointerOptions);

      /**
       * @type {boolean}
       * @private
       */
      this.shouldHandle_ = false;

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.downPx_ = null;

      /**
       * @type {?}
       * @private
       */
      this.downTimeout_;

      /**
       * @type {number|undefined}
       * @private
       */
      this.lastDragTime_;

      /**
       * @type {boolean}
       * @private
       */
      this.freehand_ = false;

      /**
       * Target source for drawn features.
       * @type {VectorSource}
       * @private
       */
      this.source_ = options.source ? options.source : null;

      /**
       * Target collection for drawn features.
       * @type {import("../Collection.js").default<Feature>}
       * @private
       */
      this.features_ = options.features ? options.features : null;

      /**
       * Pixel distance for snapping.
       * @type {number}
       * @private
       */
      this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;

      /**
       * Geometry type.
       * @type {GeometryType}
       * @private
       */
      this.type_ = /** @type {GeometryType} */ (options.type);

      /**
       * Drawing mode (derived from geometry type.
       * @type {Mode}
       * @private
       */
      this.mode_ = getMode(this.type_);

      /**
       * Stop click, singleclick, and doubleclick events from firing during drawing.
       * Default is `false`.
       * @type {boolean}
       * @private
       */
      this.stopClick_ = !!options.stopClick;

      /**
       * The number of points that must be drawn before a polygon ring or line
       * string can be finished.  The default is 3 for polygon rings and 2 for
       * line strings.
       * @type {number}
       * @private
       */
      this.minPoints_ = options.minPoints ?
        options.minPoints :
        (this.mode_ === Mode$1.POLYGON ? 3 : 2);

      /**
       * The number of points that can be drawn before a polygon ring or line string
       * is finished. The default is no restriction.
       * @type {number}
       * @private
       */
      this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;

      /**
       * A function to decide if a potential finish coordinate is permissible
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;

      var geometryFunction = options.geometryFunction;
      if (!geometryFunction) {
        if (this.type_ === GeometryType.CIRCLE) {
          /**
           * @param {!LineCoordType} coordinates The coordinates.
           * @param {import("../geom/SimpleGeometry.js").default=} opt_geometry Optional geometry.
           * @return {import("../geom/SimpleGeometry.js").default} A geometry.
           */
          geometryFunction = function(coordinates, opt_geometry) {
            var circle = opt_geometry ? /** @type {Circle} */ (opt_geometry) :
              new Circle([NaN, NaN]);
            var squaredLength = squaredDistance$1(
              coordinates[0], coordinates[1]);
            circle.setCenterAndRadius(coordinates[0], Math.sqrt(squaredLength));
            return circle;
          };
        } else {
          var Constructor;
          var mode = this.mode_;
          if (mode === Mode$1.POINT) {
            Constructor = Point;
          } else if (mode === Mode$1.LINE_STRING) {
            Constructor = LineString;
          } else if (mode === Mode$1.POLYGON) {
            Constructor = Polygon;
          }
          /**
           * @param {!LineCoordType} coordinates The coordinates.
           * @param {import("../geom/SimpleGeometry.js").default=} opt_geometry Optional geometry.
           * @return {import("../geom/SimpleGeometry.js").default} A geometry.
           */
          geometryFunction = function(coordinates, opt_geometry) {
            var geometry = opt_geometry;
            if (geometry) {
              if (mode === Mode$1.POLYGON) {
                if (coordinates[0].length) {
                  // Add a closing coordinate to match the first
                  geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);
                } else {
                  geometry.setCoordinates([]);
                }
              } else {
                geometry.setCoordinates(coordinates);
              }
            } else {
              geometry = new Constructor(coordinates);
            }
            return geometry;
          };
        }
      }

      /**
       * @type {GeometryFunction}
       * @private
       */
      this.geometryFunction_ = geometryFunction;

      /**
       * @type {number}
       * @private
       */
      this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;

      /**
       * Finish coordinate for the feature (first point for polygons, last point for
       * linestrings).
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.finishCoordinate_ = null;

      /**
       * Sketch feature.
       * @type {Feature}
       * @private
       */
      this.sketchFeature_ = null;

      /**
       * Sketch point.
       * @type {Feature}
       * @private
       */
      this.sketchPoint_ = null;

      /**
       * Sketch coordinates. Used when drawing a line or polygon.
       * @type {SketchCoordType}
       * @private
       */
      this.sketchCoords_ = null;

      /**
       * Sketch line. Used when drawing polygon.
       * @type {Feature}
       * @private
       */
      this.sketchLine_ = null;

      /**
       * Sketch line coordinates. Used when drawing a polygon or circle.
       * @type {LineCoordType}
       * @private
       */
      this.sketchLineCoords_ = null;

      /**
       * Squared tolerance for handling up events.  If the squared distance
       * between a down and up event is greater than this tolerance, up events
       * will not be handled.
       * @type {number}
       * @private
       */
      this.squaredClickTolerance_ = options.clickTolerance ?
        options.clickTolerance * options.clickTolerance : 36;

      /**
       * Draw overlay where our sketch features are drawn.
       * @type {VectorLayer}
       * @private
       */
      this.overlay_ = new VectorLayer({
        source: new VectorSource({
          useSpatialIndex: false,
          wrapX: options.wrapX ? options.wrapX : false
        }),
        style: options.style ? options.style :
          getDefaultStyleFunction(),
        updateWhileInteracting: true
      });

      /**
       * Name of the geometry attribute for newly created features.
       * @type {string|undefined}
       * @private
       */
      this.geometryName_ = options.geometryName;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : noModifierKeys;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.freehandCondition_;
      if (options.freehand) {
        this.freehandCondition_ = always;
      } else {
        this.freehandCondition_ = options.freehandCondition ?
          options.freehandCondition : shiftKeyOnly;
      }

      listen(this,
        getChangeEventType(InteractionProperty.ACTIVE),
        this.updateState_, this);

    }

    if ( PointerInteraction$$1 ) Draw.__proto__ = PointerInteraction$$1;
    Draw.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    Draw.prototype.constructor = Draw;

    /**
     * @inheritDoc
     */
    Draw.prototype.setMap = function setMap (map) {
      PointerInteraction$$1.prototype.setMap.call(this, map);
      this.updateState_();
    };

    /**
     * Get the overlay layer that this interaction renders sketch features to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    Draw.prototype.getOverlay = function getOverlay () {
      return this.overlay_;
    };

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.
     * @override
     * @api
     */
    Draw.prototype.handleEvent = function handleEvent (event) {
      if (event.originalEvent.type === EventType.CONTEXTMENU) {
        // Avoid context menu for long taps when drawing on mobile
        event.preventDefault();
      }
      this.freehand_ = this.mode_ !== Mode$1.POINT && this.freehandCondition_(event);
      var move = event.type === MapBrowserEventType.POINTERMOVE;
      var pass = true;
      if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {
        var now = Date.now();
        if (now - this.lastDragTime_ >= this.dragVertexDelay_) {
          this.downPx_ = event.pixel;
          this.shouldHandle_ = !this.freehand_;
          move = true;
        } else {
          this.lastDragTime_ = undefined;
        }
        if (this.shouldHandle_ && this.downTimeout_ !== undefined) {
          clearTimeout(this.downTimeout_);
          this.downTimeout_ = undefined;
        }
      }
      if (this.freehand_ &&
          event.type === MapBrowserEventType.POINTERDRAG &&
          this.sketchFeature_ !== null) {
        this.addToDrawing_(event);
        pass = false;
      } else if (this.freehand_ &&
          event.type === MapBrowserEventType.POINTERDOWN) {
        pass = false;
      } else if (move) {
        pass = event.type === MapBrowserEventType.POINTERMOVE;
        if (pass && this.freehand_) {
          pass = this.handlePointerMove_(event);
        } else if (/** @type {MapBrowserPointerEvent} */ (event).pointerEvent.pointerType == POINTER_TYPE ||
            (event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined)) {
          this.handlePointerMove_(event);
        }
      } else if (event.type === MapBrowserEventType.DBLCLICK) {
        pass = false;
      }

      return PointerInteraction$$1.prototype.handleEvent.call(this, event) && pass;
    };

    /**
     * @inheritDoc
     */
    Draw.prototype.handleDownEvent = function handleDownEvent (event) {
      this.shouldHandle_ = !this.freehand_;

      if (this.freehand_) {
        this.downPx_ = event.pixel;
        if (!this.finishCoordinate_) {
          this.startDrawing_(event);
        }
        return true;
      } else if (this.condition_(event)) {
        this.lastDragTime_ = Date.now();
        this.downTimeout_ = setTimeout(function() {
          this.handlePointerMove_(new MapBrowserPointerEvent(
            MapBrowserEventType.POINTERMOVE, event.map, event.pointerEvent, false, event.frameState));
        }.bind(this), this.dragVertexDelay_);
        this.downPx_ = event.pixel;
        return true;
      } else {
        return false;
      }
    };


    /**
     * @inheritDoc
     */
    Draw.prototype.handleUpEvent = function handleUpEvent (event) {
      var pass = true;

      if (this.downTimeout_) {
        clearTimeout(this.downTimeout_);
        this.downTimeout_ = undefined;
      }

      this.handlePointerMove_(event);

      var circleMode = this.mode_ === Mode$1.CIRCLE;

      if (this.shouldHandle_) {
        if (!this.finishCoordinate_) {
          this.startDrawing_(event);
          if (this.mode_ === Mode$1.POINT) {
            this.finishDrawing();
          }
        } else if (this.freehand_ || circleMode) {
          this.finishDrawing();
        } else if (this.atFinish_(event)) {
          if (this.finishCondition_(event)) {
            this.finishDrawing();
          }
        } else {
          this.addToDrawing_(event);
        }
        pass = false;
      } else if (this.freehand_) {
        this.finishCoordinate_ = null;
        this.abortDrawing_();
      }
      if (!pass && this.stopClick_) {
        event.stopPropagation();
      }
      return pass;
    };

    /**
     * Handle move events.
     * @param {import("../MapBrowserEvent.js").default} event A move event.
     * @return {boolean} Pass the event to other interactions.
     * @private
     */
    Draw.prototype.handlePointerMove_ = function handlePointerMove_ (event) {
      if (this.downPx_ &&
          ((!this.freehand_ && this.shouldHandle_) ||
          (this.freehand_ && !this.shouldHandle_))) {
        var downPx = this.downPx_;
        var clickPx = event.pixel;
        var dx = downPx[0] - clickPx[0];
        var dy = downPx[1] - clickPx[1];
        var squaredDistance$$1 = dx * dx + dy * dy;
        this.shouldHandle_ = this.freehand_ ?
          squaredDistance$$1 > this.squaredClickTolerance_ :
          squaredDistance$$1 <= this.squaredClickTolerance_;
        if (!this.shouldHandle_) {
          return true;
        }
      }

      if (this.finishCoordinate_) {
        this.modifyDrawing_(event);
      } else {
        this.createOrUpdateSketchPoint_(event);
      }
      return true;
    };

    /**
     * Determine if an event is within the snapping tolerance of the start coord.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} The event is within the snapping tolerance of the start.
     * @private
     */
    Draw.prototype.atFinish_ = function atFinish_ (event) {
      var at = false;
      if (this.sketchFeature_) {
        var potentiallyDone = false;
        var potentiallyFinishCoordinates = [this.finishCoordinate_];
        if (this.mode_ === Mode$1.LINE_STRING) {
          potentiallyDone = this.sketchCoords_.length > this.minPoints_;
        } else if (this.mode_ === Mode$1.POLYGON) {
          var sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);
          potentiallyDone = sketchCoords[0].length > this.minPoints_;
          potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];
        }
        if (potentiallyDone) {
          var map = event.map;
          for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {
            var finishCoordinate = potentiallyFinishCoordinates[i];
            var finishPixel = map.getPixelFromCoordinate(finishCoordinate);
            var pixel = event.pixel;
            var dx = pixel[0] - finishPixel[0];
            var dy = pixel[1] - finishPixel[1];
            var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;
            at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;
            if (at) {
              this.finishCoordinate_ = finishCoordinate;
              break;
            }
          }
        }
      }
      return at;
    };

    /**
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    Draw.prototype.createOrUpdateSketchPoint_ = function createOrUpdateSketchPoint_ (event) {
      var coordinates = event.coordinate.slice();
      if (!this.sketchPoint_) {
        this.sketchPoint_ = new Feature(new Point(coordinates));
        this.updateSketchFeatures_();
      } else {
        var sketchPointGeom = /** @type {Point} */ (this.sketchPoint_.getGeometry());
        sketchPointGeom.setCoordinates(coordinates);
      }
    };

    /**
     * Start the drawing.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    Draw.prototype.startDrawing_ = function startDrawing_ (event) {
      var start = event.coordinate;
      this.finishCoordinate_ = start;
      if (this.mode_ === Mode$1.POINT) {
        this.sketchCoords_ = start.slice();
      } else if (this.mode_ === Mode$1.POLYGON) {
        this.sketchCoords_ = [[start.slice(), start.slice()]];
        this.sketchLineCoords_ = this.sketchCoords_[0];
      } else {
        this.sketchCoords_ = [start.slice(), start.slice()];
      }
      if (this.sketchLineCoords_) {
        this.sketchLine_ = new Feature(
          new LineString(this.sketchLineCoords_));
      }
      var geometry = this.geometryFunction_(this.sketchCoords_);
      this.sketchFeature_ = new Feature();
      if (this.geometryName_) {
        this.sketchFeature_.setGeometryName(this.geometryName_);
      }
      this.sketchFeature_.setGeometry(geometry);
      this.updateSketchFeatures_();
      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));
    };

    /**
     * Modify the drawing.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    Draw.prototype.modifyDrawing_ = function modifyDrawing_ (event) {
      var coordinate = event.coordinate;
      var geometry = /** @type {import("../geom/SimpleGeometry.js").default} */ (this.sketchFeature_.getGeometry());
      var coordinates, last;
      if (this.mode_ === Mode$1.POINT) {
        last = this.sketchCoords_;
      } else if (this.mode_ === Mode$1.POLYGON) {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        last = coordinates[coordinates.length - 1];
        if (this.atFinish_(event)) {
          // snap to finish
          coordinate = this.finishCoordinate_.slice();
        }
      } else {
        coordinates = this.sketchCoords_;
        last = coordinates[coordinates.length - 1];
      }
      last[0] = coordinate[0];
      last[1] = coordinate[1];
      this.geometryFunction_(/** @type {!LineCoordType} */ (this.sketchCoords_), geometry);
      if (this.sketchPoint_) {
        var sketchPointGeom = /** @type {Point} */ (this.sketchPoint_.getGeometry());
        sketchPointGeom.setCoordinates(coordinate);
      }
      /** @type {LineString} */
      var sketchLineGeom;
      if (geometry.getType() == GeometryType.POLYGON &&
          this.mode_ !== Mode$1.POLYGON) {
        if (!this.sketchLine_) {
          this.sketchLine_ = new Feature();
        }
        var ring = /** @type {Polygon} */ (geometry).getLinearRing(0);
        sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());
        if (!sketchLineGeom) {
          sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());
          this.sketchLine_.setGeometry(sketchLineGeom);
        } else {
          sketchLineGeom.setFlatCoordinates(
            ring.getLayout(), ring.getFlatCoordinates());
          sketchLineGeom.changed();
        }
      } else if (this.sketchLineCoords_) {
        sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());
        sketchLineGeom.setCoordinates(this.sketchLineCoords_);
      }
      this.updateSketchFeatures_();
    };

    /**
     * Add a new coordinate to the drawing.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    Draw.prototype.addToDrawing_ = function addToDrawing_ (event) {
      var coordinate = event.coordinate;
      var geometry = /** @type {import("../geom/SimpleGeometry.js").default} */ (this.sketchFeature_.getGeometry());
      var done;
      var coordinates;
      if (this.mode_ === Mode$1.LINE_STRING) {
        this.finishCoordinate_ = coordinate.slice();
        coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);
        if (coordinates.length >= this.maxPoints_) {
          if (this.freehand_) {
            coordinates.pop();
          } else {
            done = true;
          }
        }
        coordinates.push(coordinate.slice());
        this.geometryFunction_(coordinates, geometry);
      } else if (this.mode_ === Mode$1.POLYGON) {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        if (coordinates.length >= this.maxPoints_) {
          if (this.freehand_) {
            coordinates.pop();
          } else {
            done = true;
          }
        }
        coordinates.push(coordinate.slice());
        if (done) {
          this.finishCoordinate_ = coordinates[0];
        }
        this.geometryFunction_(this.sketchCoords_, geometry);
      }
      this.updateSketchFeatures_();
      if (done) {
        this.finishDrawing();
      }
    };

    /**
     * Remove last point of the feature currently being drawn.
     * @api
     */
    Draw.prototype.removeLastPoint = function removeLastPoint () {
      if (!this.sketchFeature_) {
        return;
      }
      var geometry = /** @type {import("../geom/SimpleGeometry.js").default} */ (this.sketchFeature_.getGeometry());
      var coordinates;
      /** @type {LineString} */
      var sketchLineGeom;
      if (this.mode_ === Mode$1.LINE_STRING) {
        coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);
        coordinates.splice(-2, 1);
        this.geometryFunction_(coordinates, geometry);
        if (coordinates.length >= 2) {
          this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();
        }
      } else if (this.mode_ === Mode$1.POLYGON) {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        coordinates.splice(-2, 1);
        sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());
        sketchLineGeom.setCoordinates(coordinates);
        this.geometryFunction_(this.sketchCoords_, geometry);
      }

      if (coordinates.length === 0) {
        this.finishCoordinate_ = null;
      }

      this.updateSketchFeatures_();
    };

    /**
     * Stop drawing and add the sketch feature to the target layer.
     * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is
     * dispatched before inserting the feature.
     * @api
     */
    Draw.prototype.finishDrawing = function finishDrawing () {
      var sketchFeature = this.abortDrawing_();
      if (!sketchFeature) {
        return;
      }
      var coordinates = this.sketchCoords_;
      var geometry = /** @type {import("../geom/SimpleGeometry.js").default} */ (sketchFeature.getGeometry());
      if (this.mode_ === Mode$1.LINE_STRING) {
        // remove the redundant last point
        coordinates.pop();
        this.geometryFunction_(coordinates, geometry);
      } else if (this.mode_ === Mode$1.POLYGON) {
        // remove the redundant last point in ring
        /** @type {PolyCoordType} */ (coordinates)[0].pop();
        this.geometryFunction_(coordinates, geometry);
        coordinates = geometry.getCoordinates();
      }

      // cast multi-part geometries
      if (this.type_ === GeometryType.MULTI_POINT) {
        sketchFeature.setGeometry(new MultiPoint([/** @type {PointCoordType} */(coordinates)]));
      } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {
        sketchFeature.setGeometry(new MultiLineString([/** @type {LineCoordType} */(coordinates)]));
      } else if (this.type_ === GeometryType.MULTI_POLYGON) {
        sketchFeature.setGeometry(new MultiPolygon([/** @type {PolyCoordType} */(coordinates)]));
      }

      // First dispatch event to allow full set up of feature
      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));

      // Then insert feature
      if (this.features_) {
        this.features_.push(sketchFeature);
      }
      if (this.source_) {
        this.source_.addFeature(sketchFeature);
      }
    };

    /**
     * Stop drawing without adding the sketch feature to the target layer.
     * @return {Feature} The sketch feature (or null if none).
     * @private
     */
    Draw.prototype.abortDrawing_ = function abortDrawing_ () {
      this.finishCoordinate_ = null;
      var sketchFeature = this.sketchFeature_;
      if (sketchFeature) {
        this.sketchFeature_ = null;
        this.sketchPoint_ = null;
        this.sketchLine_ = null;
        /** @type {VectorSource} */ (this.overlay_.getSource()).clear(true);
      }
      return sketchFeature;
    };

    /**
     * Extend an existing geometry by adding additional points. This only works
     * on features with `LineString` geometries, where the interaction will
     * extend lines by adding points to the end of the coordinates array.
     * @param {!Feature} feature Feature to be extended.
     * @api
     */
    Draw.prototype.extend = function extend (feature) {
      var geometry = feature.getGeometry();
      var lineString = /** @type {LineString} */ (geometry);
      this.sketchFeature_ = feature;
      this.sketchCoords_ = lineString.getCoordinates();
      var last = this.sketchCoords_[this.sketchCoords_.length - 1];
      this.finishCoordinate_ = last.slice();
      this.sketchCoords_.push(last.slice());
      this.updateSketchFeatures_();
      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));
    };

    /**
     * Redraw the sketch features.
     * @private
     */
    Draw.prototype.updateSketchFeatures_ = function updateSketchFeatures_ () {
      var sketchFeatures = [];
      if (this.sketchFeature_) {
        sketchFeatures.push(this.sketchFeature_);
      }
      if (this.sketchLine_) {
        sketchFeatures.push(this.sketchLine_);
      }
      if (this.sketchPoint_) {
        sketchFeatures.push(this.sketchPoint_);
      }
      var overlaySource = /** @type {VectorSource} */ (this.overlay_.getSource());
      overlaySource.clear(true);
      overlaySource.addFeatures(sketchFeatures);
    };

    /**
     * @private
     */
    Draw.prototype.updateState_ = function updateState_ () {
      var map = this.getMap();
      var active = this.getActive();
      if (!map || !active) {
        this.abortDrawing_();
      }
      this.overlay_.setMap(active ? map : null);
    };

    return Draw;
  }(PointerInteraction));


  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction() {
    var styles = createEditingStyle();
    return function(feature, resolution) {
      return styles[feature.getGeometry().getType()];
    };
  }


  /**
   * Create a `geometryFunction` for `type: 'Circle'` that will create a regular
   * polygon with a user specified number of sides and start angle instead of an
   * `import("../geom/Circle.js").Circle` geometry.
   * @param {number=} opt_sides Number of sides of the regular polygon. Default is
   *     32.
   * @param {number=} opt_angle Angle of the first point in radians. 0 means East.
   *     Default is the angle defined by the heading from the center of the
   *     regular polygon to the current pointer position.
   * @return {GeometryFunction} Function that draws a
   *     polygon.
   * @api
   */
  function createRegularPolygon(opt_sides, opt_angle) {
    return function(coordinates, opt_geometry) {
      var center = /** @type {LineCoordType} */ (coordinates)[0];
      var end = /** @type {LineCoordType} */ (coordinates)[1];
      var radius = Math.sqrt(
        squaredDistance$1(center, end));
      var geometry = opt_geometry ? /** @type {Polygon} */ (opt_geometry) :
        fromCircle(new Circle(center), opt_sides);
      var angle = opt_angle;
      if (!opt_angle) {
        var x = end[0] - center[0];
        var y = end[1] - center[1];
        angle = Math.atan(y / x) - (x < 0 ? Math.PI : 0);
      }
      makeRegular(geometry, center, radius, angle);
      return geometry;
    };
  }


  /**
   * Get the drawing mode.  The mode for mult-part geometries is the same as for
   * their single-part cousins.
   * @param {GeometryType} type Geometry type.
   * @return {Mode} Drawing mode.
   */
  function getMode(type) {
    var mode;
    if (type === GeometryType.POINT ||
        type === GeometryType.MULTI_POINT) {
      mode = Mode$1.POINT;
    } else if (type === GeometryType.LINE_STRING ||
        type === GeometryType.MULTI_LINE_STRING) {
      mode = Mode$1.LINE_STRING;
    } else if (type === GeometryType.POLYGON ||
        type === GeometryType.MULTI_POLYGON) {
      mode = Mode$1.POLYGON;
    } else if (type === GeometryType.CIRCLE) {
      mode = Mode$1.CIRCLE;
    }
    return (
      /** @type {!Mode} */ (mode)
    );
  }

  /**
   * @module ol/interaction/Extent
   */


  /**
   * @typedef {Object} Options
   * @property {import("../extent.js").Extent} [extent] Initial extent. Defaults to no
   * initial extent.
   * @property {import("../style/Style.js").StyleLike} [boxStyle]
   * Style for the drawn extent box. Defaults to
   * {@link module:ol/style/Style~createEditing()['Polygon']}
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
   * pointer close enough to a segment or vertex for editing.
   * @property {import("../style/Style.js").StyleLike} [pointerStyle]
   * Style for the cursor used to draw the extent. Defaults to
   * {@link module:ol/style/Style~createEditing()['Point']}
   * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps
   * in the X direction? Only affects visuals, not functionality.
   */


  /**
   * @enum {string}
   */
  var ExtentEventType = {
    /**
     * Triggered after the extent is changed
     * @event ExtentEventType#extentchanged
     * @api
     */
    EXTENTCHANGED: 'extentchanged'
  };


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Extent~ExtentInteraction} instances are
   * instances of this type.
   */
  var ExtentInteractionEvent = /*@__PURE__*/(function (Event$$1) {
    function ExtentInteractionEvent(extent) {
      Event$$1.call(this, ExtentEventType.EXTENTCHANGED);

      /**
       * The current extent.
       * @type {import("../extent.js").Extent}
       * @api
       */
      this.extent = extent;
    }

    if ( Event$$1 ) ExtentInteractionEvent.__proto__ = Event$$1;
    ExtentInteractionEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    ExtentInteractionEvent.prototype.constructor = ExtentInteractionEvent;

    return ExtentInteractionEvent;
  }(Event));


  /**
   * @classdesc
   * Allows the user to draw a vector box by clicking and dragging on the map.
   * Once drawn, the vector box can be modified by dragging its vertices or edges.
   * This interaction is only supported for mouse devices.
   *
   * @fires Event
   * @api
   */
  var ExtentInteraction = /*@__PURE__*/(function (PointerInteraction$$1) {
    function ExtentInteraction(opt_options) {

      var options = opt_options || {};

      PointerInteraction$$1.call(/** @type {import("./Pointer.js").Options} */ this, (options));

      /**
       * Extent of the drawn box
       * @type {import("../extent.js").Extent}
       * @private
       */
      this.extent_ = null;

      /**
       * Handler for pointer move events
       * @type {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent|null}
       * @private
       */
      this.pointerHandler_ = null;

      /**
       * Pixel threshold to snap to extent
       * @type {number}
       * @private
       */
      this.pixelTolerance_ = options.pixelTolerance !== undefined ?
        options.pixelTolerance : 10;

      /**
       * Is the pointer snapped to an extent vertex
       * @type {boolean}
       * @private
       */
      this.snappedToVertex_ = false;

      /**
       * Feature for displaying the visible extent
       * @type {Feature}
       * @private
       */
      this.extentFeature_ = null;

      /**
       * Feature for displaying the visible pointer
       * @type {Feature}
       * @private
       */
      this.vertexFeature_ = null;

      if (!opt_options) {
        opt_options = {};
      }

      /**
       * Layer for the extentFeature
       * @type {VectorLayer}
       * @private
       */
      this.extentOverlay_ = new VectorLayer({
        source: new VectorSource({
          useSpatialIndex: false,
          wrapX: !!opt_options.wrapX
        }),
        style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),
        updateWhileAnimating: true,
        updateWhileInteracting: true
      });

      /**
       * Layer for the vertexFeature
       * @type {VectorLayer}
       * @private
       */
      this.vertexOverlay_ = new VectorLayer({
        source: new VectorSource({
          useSpatialIndex: false,
          wrapX: !!opt_options.wrapX
        }),
        style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),
        updateWhileAnimating: true,
        updateWhileInteracting: true
      });

      if (opt_options.extent) {
        this.setExtent(opt_options.extent);
      }
    }

    if ( PointerInteraction$$1 ) ExtentInteraction.__proto__ = PointerInteraction$$1;
    ExtentInteraction.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    ExtentInteraction.prototype.constructor = ExtentInteraction;

    /**
     * @param {import("../pixel.js").Pixel} pixel cursor location
     * @param {import("../PluggableMap.js").default} map map
     * @returns {import("../coordinate.js").Coordinate|null} snapped vertex on extent
     * @private
     */
    ExtentInteraction.prototype.snapToVertex_ = function snapToVertex_ (pixel, map) {
      var pixelCoordinate = map.getCoordinateFromPixel(pixel);
      var sortByDistance = function(a, b) {
        return squaredDistanceToSegment(pixelCoordinate, a) -
            squaredDistanceToSegment(pixelCoordinate, b);
      };
      var extent = this.getExtent();
      if (extent) {
        //convert extents to line segments and find the segment closest to pixelCoordinate
        var segments = getSegments(extent);
        segments.sort(sortByDistance);
        var closestSegment = segments[0];

        var vertex = (closestOnSegment(pixelCoordinate,
          closestSegment));
        var vertexPixel = map.getPixelFromCoordinate(vertex);

        //if the distance is within tolerance, snap to the segment
        if (distance(pixel, vertexPixel) <= this.pixelTolerance_) {
          //test if we should further snap to a vertex
          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
          var squaredDist1 = squaredDistance$1(vertexPixel, pixel1);
          var squaredDist2 = squaredDistance$1(vertexPixel, pixel2);
          var dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
          this.snappedToVertex_ = dist <= this.pixelTolerance_;
          if (this.snappedToVertex_) {
            vertex = squaredDist1 > squaredDist2 ?
              closestSegment[1] : closestSegment[0];
          }
          return vertex;
        }
      }
      return null;
    };

    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent pointer move event
     * @private
     */
    ExtentInteraction.prototype.handlePointerMove_ = function handlePointerMove_ (mapBrowserEvent) {
      var pixel = mapBrowserEvent.pixel;
      var map = mapBrowserEvent.map;

      var vertex = this.snapToVertex_(pixel, map);
      if (!vertex) {
        vertex = map.getCoordinateFromPixel(pixel);
      }
      this.createOrUpdatePointerFeature_(vertex);
    };

    /**
     * @param {import("../extent.js").Extent} extent extent
     * @returns {Feature} extent as featrue
     * @private
     */
    ExtentInteraction.prototype.createOrUpdateExtentFeature_ = function createOrUpdateExtentFeature_ (extent) {
      var extentFeature = this.extentFeature_;

      if (!extentFeature) {
        if (!extent) {
          extentFeature = new Feature({});
        } else {
          extentFeature = new Feature(fromExtent(extent));
        }
        this.extentFeature_ = extentFeature;
        /** @type {VectorSource} */ (this.extentOverlay_.getSource()).addFeature(extentFeature);
      } else {
        if (!extent) {
          extentFeature.setGeometry(undefined);
        } else {
          extentFeature.setGeometry(fromExtent(extent));
        }
      }
      return extentFeature;
    };

    /**
     * @param {import("../coordinate.js").Coordinate} vertex location of feature
     * @returns {Feature} vertex as feature
     * @private
     */
    ExtentInteraction.prototype.createOrUpdatePointerFeature_ = function createOrUpdatePointerFeature_ (vertex) {
      var vertexFeature = this.vertexFeature_;
      if (!vertexFeature) {
        vertexFeature = new Feature(new Point(vertex));
        this.vertexFeature_ = vertexFeature;
        /** @type {VectorSource} */ (this.vertexOverlay_.getSource()).addFeature(vertexFeature);
      } else {
        var geometry = /** @type {Point} */ (vertexFeature.getGeometry());
        geometry.setCoordinates(vertex);
      }
      return vertexFeature;
    };

    /**
     * @inheritDoc
     */
    ExtentInteraction.prototype.handleEvent = function handleEvent (mapBrowserEvent) {
      if (!(/** @type {import("../MapBrowserPointerEvent.js").default} */ (mapBrowserEvent).pointerEvent)) {
        return true;
      }
      //display pointer (if not dragging)
      if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {
        this.handlePointerMove_(mapBrowserEvent);
      }
      //call pointer to determine up/down/drag
      PointerInteraction$$1.prototype.handleEvent.call(this, mapBrowserEvent);
      //return false to stop propagation
      return false;
    };

    /**
     * @inheritDoc
     */
    ExtentInteraction.prototype.handleDownEvent = function handleDownEvent (mapBrowserEvent) {
      var pixel = mapBrowserEvent.pixel;
      var map = mapBrowserEvent.map;

      var extent = this.getExtent();
      var vertex = this.snapToVertex_(pixel, map);

      //find the extent corner opposite the passed corner
      var getOpposingPoint = function(point) {
        var x_ = null;
        var y_ = null;
        if (point[0] == extent[0]) {
          x_ = extent[2];
        } else if (point[0] == extent[2]) {
          x_ = extent[0];
        }
        if (point[1] == extent[1]) {
          y_ = extent[3];
        } else if (point[1] == extent[3]) {
          y_ = extent[1];
        }
        if (x_ !== null && y_ !== null) {
          return [x_, y_];
        }
        return null;
      };
      if (vertex && extent) {
        var x = (vertex[0] == extent[0] || vertex[0] == extent[2]) ? vertex[0] : null;
        var y = (vertex[1] == extent[1] || vertex[1] == extent[3]) ? vertex[1] : null;

        //snap to point
        if (x !== null && y !== null) {
          this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));
        //snap to edge
        } else if (x !== null) {
          this.pointerHandler_ = getEdgeHandler(
            getOpposingPoint([x, extent[1]]),
            getOpposingPoint([x, extent[3]])
          );
        } else if (y !== null) {
          this.pointerHandler_ = getEdgeHandler(
            getOpposingPoint([extent[0], y]),
            getOpposingPoint([extent[2], y])
          );
        }
      //no snap - new bbox
      } else {
        vertex = map.getCoordinateFromPixel(pixel);
        this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);
        this.pointerHandler_ = getPointHandler(vertex);
      }
      return true; //event handled; start downup sequence
    };

    /**
     * @inheritDoc
     */
    ExtentInteraction.prototype.handleDragEvent = function handleDragEvent (mapBrowserEvent) {
      if (this.pointerHandler_) {
        var pixelCoordinate = mapBrowserEvent.coordinate;
        this.setExtent(this.pointerHandler_(pixelCoordinate));
        this.createOrUpdatePointerFeature_(pixelCoordinate);
      }
      return true;
    };

    /**
     * @inheritDoc
     */
    ExtentInteraction.prototype.handleUpEvent = function handleUpEvent (mapBrowserEvent) {
      this.pointerHandler_ = null;
      //If bbox is zero area, set to null;
      var extent = this.getExtent();
      if (!extent || getArea(extent) === 0) {
        this.setExtent(null);
      }
      return false; //Stop handling downup sequence
    };

    /**
     * @inheritDoc
     */
    ExtentInteraction.prototype.setMap = function setMap (map) {
      this.extentOverlay_.setMap(map);
      this.vertexOverlay_.setMap(map);
      PointerInteraction$$1.prototype.setMap.call(this, map);
    };

    /**
     * Returns the current drawn extent in the view projection
     *
     * @return {import("../extent.js").Extent} Drawn extent in the view projection.
     * @api
     */
    ExtentInteraction.prototype.getExtent = function getExtent () {
      return this.extent_;
    };

    /**
     * Manually sets the drawn extent, using the view projection.
     *
     * @param {import("../extent.js").Extent} extent Extent
     * @api
     */
    ExtentInteraction.prototype.setExtent = function setExtent (extent) {
      //Null extent means no bbox
      this.extent_ = extent ? extent : null;
      this.createOrUpdateExtentFeature_(extent);
      this.dispatchEvent(new ExtentInteractionEvent(this.extent_));
    };

    return ExtentInteraction;
  }(PointerInteraction));

  /**
   * Returns the default style for the drawn bbox
   *
   * @return {import("../style/Style.js").StyleFunction} Default Extent style
   */
  function getDefaultExtentStyleFunction() {
    var style = createEditingStyle();
    return function(feature, resolution) {
      return style[GeometryType.POLYGON];
    };
  }

  /**
   * Returns the default style for the pointer
   *
   * @return {import("../style/Style.js").StyleFunction} Default pointer style
   */
  function getDefaultPointerStyleFunction() {
    var style = createEditingStyle();
    return function(feature, resolution) {
      return style[GeometryType.POINT];
    };
  }

  /**
   * @param {import("../coordinate.js").Coordinate} fixedPoint corner that will be unchanged in the new extent
   * @returns {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent} event handler
   */
  function getPointHandler(fixedPoint) {
    return function(point) {
      return boundingExtent([fixedPoint, point]);
    };
  }

  /**
   * @param {import("../coordinate.js").Coordinate} fixedP1 first corner that will be unchanged in the new extent
   * @param {import("../coordinate.js").Coordinate} fixedP2 second corner that will be unchanged in the new extent
   * @returns {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent|null} event handler
   */
  function getEdgeHandler(fixedP1, fixedP2) {
    if (fixedP1[0] == fixedP2[0]) {
      return function(point) {
        return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);
      };
    } else if (fixedP1[1] == fixedP2[1]) {
      return function(point) {
        return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);
      };
    } else {
      return null;
    }
  }

  /**
   * @param {import("../extent.js").Extent} extent extent
   * @returns {Array<Array<import("../coordinate.js").Coordinate>>} extent line segments
   */
  function getSegments(extent) {
    return [
      [[extent[0], extent[1]], [extent[0], extent[3]]],
      [[extent[0], extent[3]], [extent[2], extent[3]]],
      [[extent[2], extent[3]], [extent[2], extent[1]]],
      [[extent[2], extent[1]], [extent[0], extent[1]]]
    ];
  }

  /**
   * @module ol/interaction/Modify
   */


  /**
   * The segment index assigned to a circle's center when
   * breaking up a circle into ModifySegmentDataType segments.
   * @type {number}
   */
  var CIRCLE_CENTER_INDEX = 0;

  /**
   * The segment index assigned to a circle's circumference when
   * breaking up a circle into ModifySegmentDataType segments.
   * @type {number}
   */
  var CIRCLE_CIRCUMFERENCE_INDEX = 1;


  /**
   * @enum {string}
   */
  var ModifyEventType = {
    /**
     * Triggered upon feature modification start
     * @event ModifyEvent#modifystart
     * @api
     */
    MODIFYSTART: 'modifystart',
    /**
     * Triggered upon feature modification end
     * @event ModifyEvent#modifyend
     * @api
     */
    MODIFYEND: 'modifyend'
  };


  /**
   * @typedef {Object} SegmentData
   * @property {Array<number>} [depth]
   * @property {Feature} feature
   * @property {import("../geom/SimpleGeometry.js").default} geometry
   * @property {number} [index]
   * @property {Array<import("../extent.js").Extent>} segment
   * @property {Array<SegmentData>} [featureSegments]
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event will be considered to add or move a
   * vertex to the sketch. Default is
   * {@link module:ol/events/condition~primaryAction}.
   * @property {import("../events/condition.js").Condition} [deleteCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. By default,
   * {@link module:ol/events/condition~singleClick} with
   * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.
   * @property {import("../events/condition.js").Condition} [insertVertexCondition] A
   * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
   * returns a boolean to indicate whether a new vertex can be added to the sketch
   * features. Default is {@link module:ol/events/condition~always}.
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
   * pointer close enough to a segment or vertex for editing.
   * @property {import("../style/Style.js").StyleLike} [style]
   * Style used for the features being modified. By default the default edit
   * style is used (see {@link module:ol/style}).
   * @property {VectorSource} [source] The vector source with
   * features to modify.  If a vector source is not provided, a feature collection
   * must be provided with the features option.
   * @property {Collection<Feature>} [features]
   * The features the interaction works on.  If a feature collection is not
   * provided, a vector source must be provided with the source option.
   * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
   * overlay.
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are
   * instances of this type.
   */
  var ModifyEvent = /*@__PURE__*/(function (Event$$1) {
    function ModifyEvent(type, features, mapBrowserPointerEvent) {
      Event$$1.call(this, type);

      /**
       * The features being modified.
       * @type {Collection<Feature>}
       * @api
       */
      this.features = features;

      /**
       * Associated {@link module:ol/MapBrowserEvent}.
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserPointerEvent;

    }

    if ( Event$$1 ) ModifyEvent.__proto__ = Event$$1;
    ModifyEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    ModifyEvent.prototype.constructor = ModifyEvent;

    return ModifyEvent;
  }(Event));


  /**
   * @classdesc
   * Interaction for modifying feature geometries.  To modify features that have
   * been added to an existing source, construct the modify interaction with the
   * `source` option.  If you want to modify features in a collection (for example,
   * the collection used by a select interaction), construct the interaction with
   * the `features` option.  The interaction must be constructed with either a
   * `source` or `features` option.
   *
   * By default, the interaction will allow deletion of vertices when the `alt`
   * key is pressed.  To configure the interaction with a different condition
   * for deletion, use the `deleteCondition` option.
   * @fires ModifyEvent
   * @api
   */
  var Modify = /*@__PURE__*/(function (PointerInteraction$$1) {
    function Modify(options) {

      PointerInteraction$$1.call(/** @type {import("./Pointer.js").Options} */ this, (options));

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : primaryAction;

      /**
       * @private
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
       * @return {boolean} Combined condition result.
       */
      this.defaultDeleteCondition_ = function(mapBrowserEvent) {
        return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);
      };

      /**
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.deleteCondition_ = options.deleteCondition ?
        options.deleteCondition : this.defaultDeleteCondition_;

      /**
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.insertVertexCondition_ = options.insertVertexCondition ?
        options.insertVertexCondition : always;

      /**
       * Editing vertex.
       * @type {Feature}
       * @private
       */
      this.vertexFeature_ = null;

      /**
       * Segments intersecting {@link this.vertexFeature_} by segment uid.
       * @type {Object<string, boolean>}
       * @private
       */
      this.vertexSegments_ = null;

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.lastPixel_ = [0, 0];

      /**
       * Tracks if the next `singleclick` event should be ignored to prevent
       * accidental deletion right after vertex creation.
       * @type {boolean}
       * @private
       */
      this.ignoreNextSingleClick_ = false;

      /**
       * @type {boolean}
       * @private
       */
      this.modified_ = false;

      /**
       * Segment RTree for each layer
       * @type {RBush<SegmentData>}
       * @private
       */
      this.rBush_ = new RBush();

      /**
       * @type {number}
       * @private
       */
      this.pixelTolerance_ = options.pixelTolerance !== undefined ?
        options.pixelTolerance : 10;

      /**
       * @type {boolean}
       * @private
       */
      this.snappedToVertex_ = false;

      /**
       * Indicate whether the interaction is currently changing a feature's
       * coordinates.
       * @type {boolean}
       * @private
       */
      this.changingFeature_ = false;

      /**
       * @type {Array}
       * @private
       */
      this.dragSegments_ = [];

      /**
       * Draw overlay where sketch features are drawn.
       * @type {VectorLayer}
       * @private
       */
      this.overlay_ = new VectorLayer({
        source: new VectorSource({
          useSpatialIndex: false,
          wrapX: !!options.wrapX
        }),
        style: options.style ? options.style :
          getDefaultStyleFunction$1(),
        updateWhileAnimating: true,
        updateWhileInteracting: true
      });

      /**
       * @const
       * @private
       * @type {!Object<string, function(Feature, import("../geom/Geometry.js").default)>}
       */
      this.SEGMENT_WRITERS_ = {
        'Point': this.writePointGeometry_,
        'LineString': this.writeLineStringGeometry_,
        'LinearRing': this.writeLineStringGeometry_,
        'Polygon': this.writePolygonGeometry_,
        'MultiPoint': this.writeMultiPointGeometry_,
        'MultiLineString': this.writeMultiLineStringGeometry_,
        'MultiPolygon': this.writeMultiPolygonGeometry_,
        'Circle': this.writeCircleGeometry_,
        'GeometryCollection': this.writeGeometryCollectionGeometry_
      };


      /**
       * @type {VectorSource}
       * @private
       */
      this.source_ = null;

      var features;
      if (options.source) {
        this.source_ = options.source;
        features = new Collection(this.source_.getFeatures());
        listen(this.source_, VectorEventType.ADDFEATURE,
          this.handleSourceAdd_, this);
        listen(this.source_, VectorEventType.REMOVEFEATURE,
          this.handleSourceRemove_, this);
      } else {
        features = options.features;
      }
      if (!features) {
        throw new Error('The modify interaction requires features or a source');
      }

      /**
       * @type {Collection<Feature>}
       * @private
       */
      this.features_ = features;

      this.features_.forEach(this.addFeature_.bind(this));
      listen(this.features_, CollectionEventType.ADD,
        this.handleFeatureAdd_, this);
      listen(this.features_, CollectionEventType.REMOVE,
        this.handleFeatureRemove_, this);

      /**
       * @type {import("../MapBrowserPointerEvent.js").default}
       * @private
       */
      this.lastPointerEvent_ = null;

    }

    if ( PointerInteraction$$1 ) Modify.__proto__ = PointerInteraction$$1;
    Modify.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    Modify.prototype.constructor = Modify;

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    Modify.prototype.addFeature_ = function addFeature_ (feature) {
      var geometry = feature.getGeometry();
      if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {
        this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);
      }
      var map = this.getMap();
      if (map && map.isRendered() && this.getActive()) {
        this.handlePointerAtPixel_(this.lastPixel_, map);
      }
      listen(feature, EventType.CHANGE,
        this.handleFeatureChange_, this);
    };

    /**
     * @param {import("../MapBrowserPointerEvent.js").default} evt Map browser event
     * @private
     */
    Modify.prototype.willModifyFeatures_ = function willModifyFeatures_ (evt) {
      if (!this.modified_) {
        this.modified_ = true;
        this.dispatchEvent(new ModifyEvent(
          ModifyEventType.MODIFYSTART, this.features_, evt));
      }
    };

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    Modify.prototype.removeFeature_ = function removeFeature_ (feature) {
      this.removeFeatureSegmentData_(feature);
      // Remove the vertex feature if the collection of canditate features
      // is empty.
      if (this.vertexFeature_ && this.features_.getLength() === 0) {
        /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
      unlisten(feature, EventType.CHANGE,
        this.handleFeatureChange_, this);
    };

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    Modify.prototype.removeFeatureSegmentData_ = function removeFeatureSegmentData_ (feature) {
      var rBush = this.rBush_;
      var /** @type {Array<SegmentData>} */ nodesToRemove = [];
      rBush.forEach(
        /**
         * @param {SegmentData} node RTree node.
         */
        function(node) {
          if (feature === node.feature) {
            nodesToRemove.push(node);
          }
        });
      for (var i = nodesToRemove.length - 1; i >= 0; --i) {
        rBush.remove(nodesToRemove[i]);
      }
    };

    /**
     * @inheritDoc
     */
    Modify.prototype.setActive = function setActive (active) {
      if (this.vertexFeature_ && !active) {
        /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
      PointerInteraction$$1.prototype.setActive.call(this, active);
    };

    /**
     * @inheritDoc
     */
    Modify.prototype.setMap = function setMap (map) {
      this.overlay_.setMap(map);
      PointerInteraction$$1.prototype.setMap.call(this, map);
    };

    /**
     * Get the overlay layer that this interaction renders sketch features to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    Modify.prototype.getOverlay = function getOverlay () {
      return this.overlay_;
    };

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    Modify.prototype.handleSourceAdd_ = function handleSourceAdd_ (event) {
      if (event.feature) {
        this.features_.push(event.feature);
      }
    };

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    Modify.prototype.handleSourceRemove_ = function handleSourceRemove_ (event) {
      if (event.feature) {
        this.features_.remove(event.feature);
      }
    };

    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    Modify.prototype.handleFeatureAdd_ = function handleFeatureAdd_ (evt) {
      this.addFeature_(/** @type {Feature} */ (evt.element));
    };

    /**
     * @param {import("../events/Event.js").default} evt Event.
     * @private
     */
    Modify.prototype.handleFeatureChange_ = function handleFeatureChange_ (evt) {
      if (!this.changingFeature_) {
        var feature = /** @type {Feature} */ (evt.target);
        this.removeFeature_(feature);
        this.addFeature_(feature);
      }
    };

    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    Modify.prototype.handleFeatureRemove_ = function handleFeatureRemove_ (evt) {
      var feature = /** @type {Feature} */ (evt.element);
      this.removeFeature_(feature);
    };

    /**
     * @param {Feature} feature Feature
     * @param {Point} geometry Geometry.
     * @private
     */
    Modify.prototype.writePointGeometry_ = function writePointGeometry_ (feature, geometry) {
      var coordinates = geometry.getCoordinates();
      var segmentData = /** @type {SegmentData} */ ({
        feature: feature,
        geometry: geometry,
        segment: [coordinates, coordinates]
      });
      this.rBush_.insert(geometry.getExtent(), segmentData);
    };

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writeMultiPointGeometry_ = function writeMultiPointGeometry_ (feature, geometry) {
      var points = geometry.getCoordinates();
      for (var i = 0, ii = points.length; i < ii; ++i) {
        var coordinates = points[i];
        var segmentData = /** @type {SegmentData} */ ({
          feature: feature,
          geometry: geometry,
          depth: [i],
          index: i,
          segment: [coordinates, coordinates]
        });
        this.rBush_.insert(geometry.getExtent(), segmentData);
      }
    };

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/LineString.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writeLineStringGeometry_ = function writeLineStringGeometry_ (feature, geometry) {
      var coordinates = geometry.getCoordinates();
      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        var segment = coordinates.slice(i, i + 2);
        var segmentData = /** @type {SegmentData} */ ({
          feature: feature,
          geometry: geometry,
          index: i,
          segment: segment
        });
        this.rBush_.insert(boundingExtent(segment), segmentData);
      }
    };

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writeMultiLineStringGeometry_ = function writeMultiLineStringGeometry_ (feature, geometry) {
      var lines = geometry.getCoordinates();
      for (var j = 0, jj = lines.length; j < jj; ++j) {
        var coordinates = lines[j];
        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          var segment = coordinates.slice(i, i + 2);
          var segmentData = /** @type {SegmentData} */ ({
            feature: feature,
            geometry: geometry,
            depth: [j],
            index: i,
            segment: segment
          });
          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    };

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/Polygon.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writePolygonGeometry_ = function writePolygonGeometry_ (feature, geometry) {
      var rings = geometry.getCoordinates();
      for (var j = 0, jj = rings.length; j < jj; ++j) {
        var coordinates = rings[j];
        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          var segment = coordinates.slice(i, i + 2);
          var segmentData = /** @type {SegmentData} */ ({
            feature: feature,
            geometry: geometry,
            depth: [j],
            index: i,
            segment: segment
          });
          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    };

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writeMultiPolygonGeometry_ = function writeMultiPolygonGeometry_ (feature, geometry) {
      var polygons = geometry.getCoordinates();
      for (var k = 0, kk = polygons.length; k < kk; ++k) {
        var rings = polygons[k];
        for (var j = 0, jj = rings.length; j < jj; ++j) {
          var coordinates = rings[j];
          for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
            var segment = coordinates.slice(i, i + 2);
            var segmentData = /** @type {SegmentData} */ ({
              feature: feature,
              geometry: geometry,
              depth: [j, k],
              index: i,
              segment: segment
            });
            this.rBush_.insert(boundingExtent(segment), segmentData);
          }
        }
      }
    };

    /**
     * We convert a circle into two segments.  The segment at index
     * {@link CIRCLE_CENTER_INDEX} is the
     * circle's center (a point).  The segment at index
     * {@link CIRCLE_CIRCUMFERENCE_INDEX} is
     * the circumference, and is not a line segment.
     *
     * @param {Feature} feature Feature.
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writeCircleGeometry_ = function writeCircleGeometry_ (feature, geometry) {
      var coordinates = geometry.getCenter();
      var centerSegmentData = /** @type {SegmentData} */ ({
        feature: feature,
        geometry: geometry,
        index: CIRCLE_CENTER_INDEX,
        segment: [coordinates, coordinates]
      });
      var circumferenceSegmentData = /** @type {SegmentData} */ ({
        feature: feature,
        geometry: geometry,
        index: CIRCLE_CIRCUMFERENCE_INDEX,
        segment: [coordinates, coordinates]
      });
      var featureSegments = [centerSegmentData, circumferenceSegmentData];
      centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;
      this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);
      this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);
    };

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @private
     */
    Modify.prototype.writeGeometryCollectionGeometry_ = function writeGeometryCollectionGeometry_ (feature, geometry) {
      var geometries = geometry.getGeometriesArray();
      for (var i = 0; i < geometries.length; ++i) {
        this.SEGMENT_WRITERS_[geometries[i].getType()].call(this, feature, geometries[i]);
      }
    };

    /**
     * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
     * @return {Feature} Vertex feature.
     * @private
     */
    Modify.prototype.createOrUpdateVertexFeature_ = function createOrUpdateVertexFeature_ (coordinates) {
      var vertexFeature = this.vertexFeature_;
      if (!vertexFeature) {
        vertexFeature = new Feature(new Point(coordinates));
        this.vertexFeature_ = vertexFeature;
        /** @type {VectorSource} */ (this.overlay_.getSource()).addFeature(vertexFeature);
      } else {
        var geometry = /** @type {Point} */ (vertexFeature.getGeometry());
        geometry.setCoordinates(coordinates);
      }
      return vertexFeature;
    };

    /**
     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.
     * @override
     */
    Modify.prototype.handleEvent = function handleEvent (mapBrowserEvent) {
      if (!(/** @type {import("../MapBrowserPointerEvent.js").default} */ (mapBrowserEvent).pointerEvent)) {
        return true;
      }
      this.lastPointerEvent_ = mapBrowserEvent;

      var handled;
      if (!mapBrowserEvent.map.getView().getInteracting() &&
          mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&
          !this.handlingDownUpSequence) {
        this.handlePointerMove_(mapBrowserEvent);
      }
      if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {
        if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {
          handled = this.removePoint();
        } else {
          handled = true;
        }
      }

      if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {
        this.ignoreNextSingleClick_ = false;
      }

      return PointerInteraction$$1.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;
    };

    /**
     * @inheritDoc
     */
    Modify.prototype.handleDragEvent = function handleDragEvent (evt) {
      this.ignoreNextSingleClick_ = false;
      this.willModifyFeatures_(evt);

      var vertex = evt.coordinate;
      for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {
        var dragSegment = this.dragSegments_[i];
        var segmentData = dragSegment[0];
        var depth = segmentData.depth;
        var geometry = segmentData.geometry;
        var coordinates = (void 0);
        var segment = segmentData.segment;
        var index = dragSegment[1];

        while (vertex.length < geometry.getStride()) {
          vertex.push(segment[index][vertex.length]);
        }

        switch (geometry.getType()) {
          case GeometryType.POINT:
            coordinates = vertex;
            segment[0] = segment[1] = vertex;
            break;
          case GeometryType.MULTI_POINT:
            coordinates = geometry.getCoordinates();
            coordinates[segmentData.index] = vertex;
            segment[0] = segment[1] = vertex;
            break;
          case GeometryType.LINE_STRING:
            coordinates = geometry.getCoordinates();
            coordinates[segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case GeometryType.MULTI_LINE_STRING:
            coordinates = geometry.getCoordinates();
            coordinates[depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case GeometryType.POLYGON:
            coordinates = geometry.getCoordinates();
            coordinates[depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case GeometryType.MULTI_POLYGON:
            coordinates = geometry.getCoordinates();
            coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case GeometryType.CIRCLE:
            segment[0] = segment[1] = vertex;
            if (segmentData.index === CIRCLE_CENTER_INDEX) {
              this.changingFeature_ = true;
              geometry.setCenter(vertex);
              this.changingFeature_ = false;
            } else { // We're dragging the circle's circumference:
              this.changingFeature_ = true;
              geometry.setRadius(distance(geometry.getCenter(), vertex));
              this.changingFeature_ = false;
            }
            break;
          default:
            // pass
        }

        if (coordinates) {
          this.setGeometryCoordinates_(geometry, coordinates);
        }
      }
      this.createOrUpdateVertexFeature_(vertex);
    };

    /**
     * @inheritDoc
     */
    Modify.prototype.handleDownEvent = function handleDownEvent (evt) {
      if (!this.condition_(evt)) {
        return false;
      }
      this.handlePointerAtPixel_(evt.pixel, evt.map);
      var pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);
      this.dragSegments_.length = 0;
      this.modified_ = false;
      var vertexFeature = this.vertexFeature_;
      if (vertexFeature) {
        var insertVertices = [];
        var geometry = /** @type {Point} */ (vertexFeature.getGeometry());
        var vertex = geometry.getCoordinates();
        var vertexExtent = boundingExtent([vertex]);
        var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);
        var componentSegments = {};
        segmentDataMatches.sort(compareIndexes);
        for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {
          var segmentDataMatch = segmentDataMatches[i];
          var segment = segmentDataMatch.segment;
          var uid = getUid(segmentDataMatch.feature);
          var depth = segmentDataMatch.depth;
          if (depth) {
            uid += '-' + depth.join('-'); // separate feature components
          }
          if (!componentSegments[uid]) {
            componentSegments[uid] = new Array(2);
          }
          if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE &&
          segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {

            var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);
            if (equals$1(closestVertex, vertex) && !componentSegments[uid][0]) {
              this.dragSegments_.push([segmentDataMatch, 0]);
              componentSegments[uid][0] = segmentDataMatch;
            }
          } else if (equals$1(segment[0], vertex) &&
              !componentSegments[uid][0]) {
            this.dragSegments_.push([segmentDataMatch, 0]);
            componentSegments[uid][0] = segmentDataMatch;
          } else if (equals$1(segment[1], vertex) &&
              !componentSegments[uid][1]) {

            // prevent dragging closed linestrings by the connecting node
            if ((segmentDataMatch.geometry.getType() ===
                GeometryType.LINE_STRING ||
                segmentDataMatch.geometry.getType() ===
                GeometryType.MULTI_LINE_STRING) &&
                componentSegments[uid][0] &&
                componentSegments[uid][0].index === 0) {
              continue;
            }

            this.dragSegments_.push([segmentDataMatch, 1]);
            componentSegments[uid][1] = segmentDataMatch;
          } else if (this.insertVertexCondition_(evt) && getUid(segment) in this.vertexSegments_ &&
              (!componentSegments[uid][0] && !componentSegments[uid][1])) {
            insertVertices.push([segmentDataMatch, vertex]);
          }
        }
        if (insertVertices.length) {
          this.willModifyFeatures_(evt);
        }
        for (var j = insertVertices.length - 1; j >= 0; --j) {
          this.insertVertex_.apply(this, insertVertices[j]);
        }
      }
      return !!this.vertexFeature_;
    };

    /**
     * @inheritDoc
     */
    Modify.prototype.handleUpEvent = function handleUpEvent (evt) {
      for (var i = this.dragSegments_.length - 1; i >= 0; --i) {
        var segmentData = this.dragSegments_[i][0];
        var geometry = segmentData.geometry;
        if (geometry.getType() === GeometryType.CIRCLE) {
          // Update a circle object in the R* bush:
          var coordinates = geometry.getCenter();
          var centerSegmentData = segmentData.featureSegments[0];
          var circumferenceSegmentData = segmentData.featureSegments[1];
          centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;
          circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;
          this.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);
          this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);
        } else {
          this.rBush_.update(boundingExtent(segmentData.segment), segmentData);
        }
      }
      if (this.modified_) {
        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));
        this.modified_ = false;
      }
      return false;
    };

    /**
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @private
     */
    Modify.prototype.handlePointerMove_ = function handlePointerMove_ (evt) {
      this.lastPixel_ = evt.pixel;
      this.handlePointerAtPixel_(evt.pixel, evt.map);
    };

    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel
     * @param {import("../PluggableMap.js").default} map Map.
     * @private
     */
    Modify.prototype.handlePointerAtPixel_ = function handlePointerAtPixel_ (pixel, map) {
      var pixelCoordinate = map.getCoordinateFromPixel(pixel);
      var sortByDistance = function(a, b) {
        return pointDistanceToSegmentDataSquared(pixelCoordinate, a) -
            pointDistanceToSegmentDataSquared(pixelCoordinate, b);
      };

      var box = buffer(createOrUpdateFromCoordinate(pixelCoordinate),
        map.getView().getResolution() * this.pixelTolerance_);

      var rBush = this.rBush_;
      var nodes = rBush.getInExtent(box);
      if (nodes.length > 0) {
        nodes.sort(sortByDistance);
        var node = nodes[0];
        var closestSegment = node.segment;
        var vertex = closestOnSegmentData(pixelCoordinate, node);
        var vertexPixel = map.getPixelFromCoordinate(vertex);
        var dist = distance(pixel, vertexPixel);
        if (dist <= this.pixelTolerance_) {
          /** @type {Object<string, boolean>} */
          var vertexSegments = {};

          if (node.geometry.getType() === GeometryType.CIRCLE &&
          node.index === CIRCLE_CIRCUMFERENCE_INDEX) {

            this.snappedToVertex_ = true;
            this.createOrUpdateVertexFeature_(vertex);
          } else {
            var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
            var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
            var squaredDist1 = squaredDistance$1(vertexPixel, pixel1);
            var squaredDist2 = squaredDistance$1(vertexPixel, pixel2);
            dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
            this.snappedToVertex_ = dist <= this.pixelTolerance_;
            if (this.snappedToVertex_) {
              vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
            }
            this.createOrUpdateVertexFeature_(vertex);
            for (var i = 1, ii = nodes.length; i < ii; ++i) {
              var segment = nodes[i].segment;
              if ((equals$1(closestSegment[0], segment[0]) &&
                  equals$1(closestSegment[1], segment[1]) ||
                  (equals$1(closestSegment[0], segment[1]) &&
                  equals$1(closestSegment[1], segment[0])))) {
                vertexSegments[getUid(segment)] = true;
              } else {
                break;
              }
            }
          }

          vertexSegments[getUid(closestSegment)] = true;
          this.vertexSegments_ = vertexSegments;
          return;
        }
      }
      if (this.vertexFeature_) {
        /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
    };

    /**
     * @param {SegmentData} segmentData Segment data.
     * @param {import("../coordinate.js").Coordinate} vertex Vertex.
     * @private
     */
    Modify.prototype.insertVertex_ = function insertVertex_ (segmentData, vertex) {
      var segment = segmentData.segment;
      var feature = segmentData.feature;
      var geometry = segmentData.geometry;
      var depth = segmentData.depth;
      var index = /** @type {number} */ (segmentData.index);
      var coordinates;

      while (vertex.length < geometry.getStride()) {
        vertex.push(0);
      }

      switch (geometry.getType()) {
        case GeometryType.MULTI_LINE_STRING:
          coordinates = geometry.getCoordinates();
          coordinates[depth[0]].splice(index + 1, 0, vertex);
          break;
        case GeometryType.POLYGON:
          coordinates = geometry.getCoordinates();
          coordinates[depth[0]].splice(index + 1, 0, vertex);
          break;
        case GeometryType.MULTI_POLYGON:
          coordinates = geometry.getCoordinates();
          coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);
          break;
        case GeometryType.LINE_STRING:
          coordinates = geometry.getCoordinates();
          coordinates.splice(index + 1, 0, vertex);
          break;
        default:
          return;
      }

      this.setGeometryCoordinates_(geometry, coordinates);
      var rTree = this.rBush_;
      rTree.remove(segmentData);
      this.updateSegmentIndices_(geometry, index, depth, 1);
      var newSegmentData = /** @type {SegmentData} */ ({
        segment: [segment[0], vertex],
        feature: feature,
        geometry: geometry,
        depth: depth,
        index: index
      });
      rTree.insert(boundingExtent(newSegmentData.segment),
        newSegmentData);
      this.dragSegments_.push([newSegmentData, 1]);

      var newSegmentData2 = /** @type {SegmentData} */ ({
        segment: [vertex, segment[1]],
        feature: feature,
        geometry: geometry,
        depth: depth,
        index: index + 1
      });
      rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);
      this.dragSegments_.push([newSegmentData2, 0]);
      this.ignoreNextSingleClick_ = true;
    };

    /**
     * Removes the vertex currently being pointed.
     * @return {boolean} True when a vertex was removed.
     * @api
     */
    Modify.prototype.removePoint = function removePoint () {
      if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {
        var evt = this.lastPointerEvent_;
        this.willModifyFeatures_(evt);
        this.removeVertex_();
        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));
        this.modified_ = false;
        return true;
      }
      return false;
    };

    /**
     * Removes a vertex from all matching features.
     * @return {boolean} True when a vertex was removed.
     * @private
     */
    Modify.prototype.removeVertex_ = function removeVertex_ () {
      var dragSegments = this.dragSegments_;
      var segmentsByFeature = {};
      var deleted = false;
      var component, coordinates, dragSegment, geometry, i, index, left;
      var newIndex, right, segmentData, uid;
      for (i = dragSegments.length - 1; i >= 0; --i) {
        dragSegment = dragSegments[i];
        segmentData = dragSegment[0];
        uid = getUid(segmentData.feature);
        if (segmentData.depth) {
          // separate feature components
          uid += '-' + segmentData.depth.join('-');
        }
        if (!(uid in segmentsByFeature)) {
          segmentsByFeature[uid] = {};
        }
        if (dragSegment[1] === 0) {
          segmentsByFeature[uid].right = segmentData;
          segmentsByFeature[uid].index = segmentData.index;
        } else if (dragSegment[1] == 1) {
          segmentsByFeature[uid].left = segmentData;
          segmentsByFeature[uid].index = segmentData.index + 1;
        }

      }
      for (uid in segmentsByFeature) {
        right = segmentsByFeature[uid].right;
        left = segmentsByFeature[uid].left;
        index = segmentsByFeature[uid].index;
        newIndex = index - 1;
        if (left !== undefined) {
          segmentData = left;
        } else {
          segmentData = right;
        }
        if (newIndex < 0) {
          newIndex = 0;
        }
        geometry = segmentData.geometry;
        coordinates = geometry.getCoordinates();
        component = coordinates;
        deleted = false;
        switch (geometry.getType()) {
          case GeometryType.MULTI_LINE_STRING:
            if (coordinates[segmentData.depth[0]].length > 2) {
              coordinates[segmentData.depth[0]].splice(index, 1);
              deleted = true;
            }
            break;
          case GeometryType.LINE_STRING:
            if (coordinates.length > 2) {
              coordinates.splice(index, 1);
              deleted = true;
            }
            break;
          case GeometryType.MULTI_POLYGON:
            component = component[segmentData.depth[1]];
            /* falls through */
          case GeometryType.POLYGON:
            component = component[segmentData.depth[0]];
            if (component.length > 4) {
              if (index == component.length - 1) {
                index = 0;
              }
              component.splice(index, 1);
              deleted = true;
              if (index === 0) {
                // close the ring again
                component.pop();
                component.push(component[0]);
                newIndex = component.length - 1;
              }
            }
            break;
          default:
            // pass
        }

        if (deleted) {
          this.setGeometryCoordinates_(geometry, coordinates);
          var segments = [];
          if (left !== undefined) {
            this.rBush_.remove(left);
            segments.push(left.segment[0]);
          }
          if (right !== undefined) {
            this.rBush_.remove(right);
            segments.push(right.segment[1]);
          }
          if (left !== undefined && right !== undefined) {
            var newSegmentData = /** @type {SegmentData} */ ({
              depth: segmentData.depth,
              feature: segmentData.feature,
              geometry: segmentData.geometry,
              index: newIndex,
              segment: segments
            });
            this.rBush_.insert(boundingExtent(newSegmentData.segment),
              newSegmentData);
          }
          this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);
          if (this.vertexFeature_) {
            /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);
            this.vertexFeature_ = null;
          }
          dragSegments.length = 0;
        }

      }
      return deleted;
    };

    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {Array} coordinates Coordinates.
     * @private
     */
    Modify.prototype.setGeometryCoordinates_ = function setGeometryCoordinates_ (geometry, coordinates) {
      this.changingFeature_ = true;
      geometry.setCoordinates(coordinates);
      this.changingFeature_ = false;
    };

    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {number} index Index.
     * @param {Array<number>|undefined} depth Depth.
     * @param {number} delta Delta (1 or -1).
     * @private
     */
    Modify.prototype.updateSegmentIndices_ = function updateSegmentIndices_ (geometry, index, depth, delta) {
      this.rBush_.forEachInExtent(geometry.getExtent(), function(segmentDataMatch) {
        if (segmentDataMatch.geometry === geometry &&
            (depth === undefined || segmentDataMatch.depth === undefined ||
            equals(segmentDataMatch.depth, depth)) &&
            segmentDataMatch.index > index) {
          segmentDataMatch.index += delta;
        }
      });
    };

    return Modify;
  }(PointerInteraction));


  /**
   * @param {SegmentData} a The first segment data.
   * @param {SegmentData} b The second segment data.
   * @return {number} The difference in indexes.
   */
  function compareIndexes(a, b) {
    return a.index - b.index;
  }


  /**
   * Returns the distance from a point to a line segment.
   *
   * @param {import("../coordinate.js").Coordinate} pointCoordinates The coordinates of the point from
   *        which to calculate the distance.
   * @param {SegmentData} segmentData The object describing the line
   *        segment we are calculating the distance to.
   * @return {number} The square of the distance between a point and a line segment.
   */
  function pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {
    var geometry = segmentData.geometry;

    if (geometry.getType() === GeometryType.CIRCLE) {
      var circleGeometry = /** @type {import("../geom/Circle.js").default} */ (geometry);

      if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
        var distanceToCenterSquared =
              squaredDistance$1(circleGeometry.getCenter(), pointCoordinates);
        var distanceToCircumference =
              Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();
        return distanceToCircumference * distanceToCircumference;
      }
    }
    return squaredDistanceToSegment(pointCoordinates, segmentData.segment);
  }

  /**
   * Returns the point closest to a given line segment.
   *
   * @param {import("../coordinate.js").Coordinate} pointCoordinates The point to which a closest point
   *        should be found.
   * @param {SegmentData} segmentData The object describing the line
   *        segment which should contain the closest point.
   * @return {import("../coordinate.js").Coordinate} The point closest to the specified line segment.
   */
  function closestOnSegmentData(pointCoordinates, segmentData) {
    var geometry = segmentData.geometry;

    if (geometry.getType() === GeometryType.CIRCLE &&
    segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
      return geometry.getClosestPoint(pointCoordinates);
    }
    return closestOnSegment(pointCoordinates, segmentData.segment);
  }


  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction$1() {
    var style = createEditingStyle();
    return function(feature, resolution) {
      return style[GeometryType.POINT];
    };
  }

  /**
   * @module ol/interaction/Select
   */


  /**
   * @enum {string}
   */
  var SelectEventType = {
    /**
     * Triggered when feature(s) has been (de)selected.
     * @event SelectEvent#select
     * @api
     */
    SELECT: 'select'
  };


  /**
   * A function that takes an {@link module:ol/Feature} or
   * {@link module:ol/render/Feature} and an
   * {@link module:ol/layer/Layer} and returns `true` if the feature may be
   * selected or `false` otherwise.
   * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default):boolean} FilterFunction
   */


  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [addCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default, this is {@link module:ol/events/condition~never}. Use this if you
   * want to use different events for add and remove instead of `toggle`.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. This is the event
   * for the selected features as a whole. By default, this is
   * {@link module:ol/events/condition~singleClick}. Clicking on a feature selects that
   * feature and removes any that were in the selection. Clicking outside any
   * feature removes all from the selection.
   * See `toggle`, `add`, `remove` options for adding/removing extra features to/
   * from the selection.
   * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default): boolean} [layers]
   * A list of layers from which features should be selected. Alternatively, a
   * filter function can be provided. The function will be called for each layer
   * in the map and should return `true` for layers that you want to be
   * selectable. If the option is absent, all visible layers will be considered
   * selectable.
   * @property {import("../style/Style.js").StyleLike} [style]
   * Style for the selected features. By default the default edit style is used
   * (see {@link module:ol/style}).
   * @property {import("../events/condition.js").Condition} [removeCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default, this is {@link module:ol/events/condition~never}. Use this if you
   * want to use different events for add and remove instead of `toggle`.
   * @property {import("../events/condition.js").Condition} [toggleCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. This is in addition
   * to the `condition` event. By default,
   * {@link module:ol/events/condition~shiftKeyOnly}, i.e. pressing `shift` as
   * well as the `condition` event, adds that feature to the current selection if
   * it is not currently selected, and removes it if it is. See `add` and `remove`
   * if you want to use different events instead of a toggle.
   * @property {boolean} [multi=false] A boolean that determines if the default
   * behaviour should select only single features or all (overlapping) features at
   * the clicked map position. The default of `false` means single select.
   * @property {import("../Collection.js").default<import("../Feature.js").default>} [features]
   * Collection where the interaction will place selected features. Optional. If
   * not set the interaction will create a collection. In any case the collection
   * used by the interaction is returned by
   * {@link module:ol/interaction/Select~Select#getFeatures}.
   * @property {FilterFunction} [filter] A function
   * that takes an {@link module:ol/Feature} and an
   * {@link module:ol/layer/Layer} and returns `true` if the feature may be
   * selected or `false` otherwise.
   * @property {boolean} [wrapX=true] Wrap the world horizontally on the selection
   * overlay.
   * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside
   * the radius around the given position will be checked for features. This only
   * works for the canvas renderer and not for WebGL.
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Select~Select} instances are instances of
   * this type.
   */
  var SelectEvent = /*@__PURE__*/(function (Event$$1) {
    function SelectEvent(type, selected, deselected, mapBrowserEvent) {
      Event$$1.call(this, type);

      /**
       * Selected features array.
       * @type {Array<import("../Feature.js").default>}
       * @api
       */
      this.selected = selected;

      /**
       * Deselected features array.
       * @type {Array<import("../Feature.js").default>}
       * @api
       */
      this.deselected = deselected;

      /**
       * Associated {@link module:ol/MapBrowserEvent}.
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;

    }

    if ( Event$$1 ) SelectEvent.__proto__ = Event$$1;
    SelectEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    SelectEvent.prototype.constructor = SelectEvent;

    return SelectEvent;
  }(Event));


  /**
   * @classdesc
   * Interaction for selecting vector features. By default, selected features are
   * styled differently, so this interaction can be used for visual highlighting,
   * as well as selecting features for other actions, such as modification or
   * output. There are three ways of controlling which features are selected:
   * using the browser event as defined by the `condition` and optionally the
   * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a
   * further feature filter using the `filter` option.
   *
   * Selected features are added to an internal unmanaged layer.
   *
   * @fires SelectEvent
   * @api
   */
  var Select = /*@__PURE__*/(function (Interaction$$1) {
    function Select(opt_options) {

      Interaction$$1.call(this, {
        handleEvent: handleEvent$3
      });

      var options = opt_options ? opt_options : {};

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : singleClick;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.addCondition_ = options.addCondition ? options.addCondition : never;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.removeCondition_ = options.removeCondition ? options.removeCondition : never;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.toggleCondition_ = options.toggleCondition ? options.toggleCondition : shiftKeyOnly;

      /**
       * @private
       * @type {boolean}
       */
      this.multi_ = options.multi ? options.multi : false;

      /**
       * @private
       * @type {FilterFunction}
       */
      this.filter_ = options.filter ? options.filter : TRUE;

      /**
       * @private
       * @type {number}
       */
      this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;

      var featureOverlay = new VectorLayer({
        source: new VectorSource({
          useSpatialIndex: false,
          features: options.features,
          wrapX: options.wrapX
        }),
        style: options.style ? options.style :
          getDefaultStyleFunction$2(),
        updateWhileAnimating: true,
        updateWhileInteracting: true
      });

      /**
       * @private
       * @type {VectorLayer}
       */
      this.featureOverlay_ = featureOverlay;

      /** @type {function(import("../layer/Layer.js").default): boolean} */
      var layerFilter;
      if (options.layers) {
        if (typeof options.layers === 'function') {
          layerFilter = options.layers;
        } else {
          var layers = options.layers;
          layerFilter = function(layer) {
            return includes(layers, layer);
          };
        }
      } else {
        layerFilter = TRUE;
      }

      /**
       * @private
       * @type {function(import("../layer/Layer.js").default): boolean}
       */
      this.layerFilter_ = layerFilter;

      /**
       * An association between selected feature (key)
       * and layer (value)
       * @private
       * @type {Object<string, import("../layer/Layer.js").default>}
       */
      this.featureLayerAssociation_ = {};

      var features = this.getFeatures();
      listen(features, CollectionEventType.ADD,
        this.addFeature_, this);
      listen(features, CollectionEventType.REMOVE,
        this.removeFeature_, this);
    }

    if ( Interaction$$1 ) Select.__proto__ = Interaction$$1;
    Select.prototype = Object.create( Interaction$$1 && Interaction$$1.prototype );
    Select.prototype.constructor = Select;

    /**
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../layer/Layer.js").default} layer Layer.
     * @private
     */
    Select.prototype.addFeatureLayerAssociation_ = function addFeatureLayerAssociation_ (feature, layer) {
      this.featureLayerAssociation_[getUid(feature)] = layer;
    };

    /**
     * Get the selected features.
     * @return {import("../Collection.js").default<import("../Feature.js").default>} Features collection.
     * @api
     */
    Select.prototype.getFeatures = function getFeatures () {
      return /** @type {VectorSource} */ (this.featureOverlay_.getSource()).getFeaturesCollection();
    };

    /**
     * Returns the Hit-detection tolerance.
     * @returns {number} Hit tolerance in pixels.
     * @api
     */
    Select.prototype.getHitTolerance = function getHitTolerance () {
      return this.hitTolerance_;
    };

    /**
     * Returns the associated {@link module:ol/layer/Vector~Vector vectorlayer} of
     * the (last) selected feature. Note that this will not work with any
     * programmatic method like pushing features to
     * {@link module:ol/interaction/Select~Select#getFeatures collection}.
     * @param {import("../Feature.js").FeatureLike} feature Feature
     * @return {VectorLayer} Layer.
     * @api
     */
    Select.prototype.getLayer = function getLayer (feature) {
      return (
        /** @type {VectorLayer} */ (this.featureLayerAssociation_[getUid(feature)])
      );
    };

    /**
     * Get the overlay layer that this interaction renders selected features to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    Select.prototype.getOverlay = function getOverlay () {
      return this.featureOverlay_;
    };

    /**
     * Hit-detection tolerance. Pixels inside the radius around the given position
     * will be checked for features. This only works for the canvas renderer and
     * not for WebGL.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @api
     */
    Select.prototype.setHitTolerance = function setHitTolerance (hitTolerance) {
      this.hitTolerance_ = hitTolerance;
    };

    /**
     * Remove the interaction from its current map, if any,  and attach it to a new
     * map, if any. Pass `null` to just remove the interaction from the current map.
     * @param {import("../PluggableMap.js").default} map Map.
     * @override
     * @api
     */
    Select.prototype.setMap = function setMap (map) {
      var currentMap = this.getMap();
      var selectedFeatures = this.getFeatures();
      if (currentMap) {
        selectedFeatures.forEach(currentMap.unskipFeature.bind(currentMap));
      }
      Interaction$$1.prototype.setMap.call(this, map);
      this.featureOverlay_.setMap(map);
      if (map) {
        selectedFeatures.forEach(map.skipFeature.bind(map));
      }
    };

    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    Select.prototype.addFeature_ = function addFeature_ (evt) {
      var map = this.getMap();
      if (map) {
        map.skipFeature(/** @type {import("../Feature.js").default} */ (evt.element));
      }
    };

    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    Select.prototype.removeFeature_ = function removeFeature_ (evt) {
      var map = this.getMap();
      if (map) {
        map.unskipFeature(/** @type {import("../Feature.js").default} */ (evt.element));
      }
    };

    /**
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @private
     */
    Select.prototype.removeFeatureLayerAssociation_ = function removeFeatureLayerAssociation_ (feature) {
      delete this.featureLayerAssociation_[getUid(feature)];
    };

    return Select;
  }(Interaction));


  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may change the
   * selected state of features.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {Select}
   */
  function handleEvent$3(mapBrowserEvent) {
    if (!this.condition_(mapBrowserEvent)) {
      return true;
    }
    var add = this.addCondition_(mapBrowserEvent);
    var remove$$1 = this.removeCondition_(mapBrowserEvent);
    var toggle = this.toggleCondition_(mapBrowserEvent);
    var set = !add && !remove$$1 && !toggle;
    var map = mapBrowserEvent.map;
    var features = this.getFeatures();
    var deselected = [];
    var selected = [];
    if (set) {
      // Replace the currently selected feature(s) with the feature(s) at the
      // pixel, or clear the selected feature(s) if there is no feature at
      // the pixel.
      clear(this.featureLayerAssociation_);
      map.forEachFeatureAtPixel(mapBrowserEvent.pixel,
        (
          /**
           * @param {import("../Feature.js").FeatureLike} feature Feature.
           * @param {import("../layer/Layer.js").default} layer Layer.
           * @return {boolean|undefined} Continue to iterate over the features.
           */
          function(feature, layer) {
            if (this.filter_(feature, layer)) {
              selected.push(feature);
              this.addFeatureLayerAssociation_(feature, layer);
              return !this.multi_;
            }
          }).bind(this), {
          layerFilter: this.layerFilter_,
          hitTolerance: this.hitTolerance_
        });
      for (var i = features.getLength() - 1; i >= 0; --i) {
        var feature = features.item(i);
        var index = selected.indexOf(feature);
        if (index > -1) {
          // feature is already selected
          selected.splice(index, 1);
        } else {
          features.remove(feature);
          deselected.push(feature);
        }
      }
      if (selected.length !== 0) {
        features.extend(selected);
      }
    } else {
      // Modify the currently selected feature(s).
      map.forEachFeatureAtPixel(mapBrowserEvent.pixel,
        (
          /**
           * @param {import("../Feature.js").FeatureLike} feature Feature.
           * @param {import("../layer/Layer.js").default} layer Layer.
           * @return {boolean|undefined} Continue to iterate over the features.
           */
          function(feature, layer) {
            if (this.filter_(feature, layer)) {
              if ((add || toggle) && !includes(features.getArray(), feature)) {
                selected.push(feature);
                this.addFeatureLayerAssociation_(feature, layer);
              } else if ((remove$$1 || toggle) && includes(features.getArray(), feature)) {
                deselected.push(feature);
                this.removeFeatureLayerAssociation_(feature);
              }
              return !this.multi_;
            }
          }).bind(this), {
          layerFilter: this.layerFilter_,
          hitTolerance: this.hitTolerance_
        });
      for (var j = deselected.length - 1; j >= 0; --j) {
        features.remove(deselected[j]);
      }
      features.extend(selected);
    }
    if (selected.length > 0 || deselected.length > 0) {
      this.dispatchEvent(
        new SelectEvent(SelectEventType.SELECT,
          selected, deselected, mapBrowserEvent));
    }
    return pointerMove$1(mapBrowserEvent);
  }


  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction$2() {
    var styles = createEditingStyle();
    extend(styles[GeometryType.POLYGON], styles[GeometryType.LINE_STRING]);
    extend(styles[GeometryType.GEOMETRY_COLLECTION], styles[GeometryType.LINE_STRING]);

    return function(feature, resolution) {
      if (!feature.getGeometry()) {
        return null;
      }
      return styles[feature.getGeometry().getType()];
    };
  }

  /**
   * @module ol/interaction/Snap
   */


  /**
   * @typedef {Object} Result
   * @property {boolean} snapped
   * @property {import("../coordinate.js").Coordinate|null} vertex
   * @property {import("../pixel.js").Pixel|null} vertexPixel
   */


  /**
   * @typedef {Object} SegmentData
   * @property {import("../Feature.js").default} feature
   * @property {Array<import("../coordinate.js").Coordinate>} segment
   */


  /**
   * @typedef {Object} Options
   * @property {import("../Collection.js").default<import("../Feature.js").default>} [features] Snap to these features. Either this option or source should be provided.
   * @property {boolean} [edge=true] Snap to edges.
   * @property {boolean} [vertex=true] Snap to vertices.
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the pointer close enough to a segment or
   * vertex for snapping.
   * @property {import("../source/Vector.js").default} [source] Snap to features from this source. Either this option or features should be provided
   */


  /**
   * @param  {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
   * @return {import("../Feature.js").default} Feature.
   */
  function getFeatureFromEvent(evt) {
    if (/** @type {import("../source/Vector.js").VectorSourceEvent} */ (evt).feature) {
      return /** @type {import("../source/Vector.js").VectorSourceEvent} */ (evt).feature;
    } else if (/** @type {import("../Collection.js").CollectionEvent} */ (evt).element) {
      return /** @type {import("../Feature.js").default} */ (/** @type {import("../Collection.js").CollectionEvent} */ (evt).element);
    }

  }

  /**
   * @classdesc
   * Handles snapping of vector features while modifying or drawing them.  The
   * features can come from a {@link module:ol/source/Vector} or {@link module:ol/Collection~Collection}
   * Any interaction object that allows the user to interact
   * with the features using the mouse can benefit from the snapping, as long
   * as it is added before.
   *
   * The snap interaction modifies map browser event `coordinate` and `pixel`
   * properties to force the snap to occur to any interaction that them.
   *
   * Example:
   *
   *     import Snap from 'ol/interaction/Snap';
   *
   *     var snap = new Snap({
   *       source: source
   *     });
   *
   * @api
   */
  var Snap = /*@__PURE__*/(function (PointerInteraction$$1) {
    function Snap(opt_options) {

      var options = opt_options ? opt_options : {};

      var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);

      if (!pointerOptions.handleDownEvent) {
        pointerOptions.handleDownEvent = TRUE;
      }

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      PointerInteraction$$1.call(this, pointerOptions);

      /**
       * @type {import("../source/Vector.js").default}
       * @private
       */
      this.source_ = options.source ? options.source : null;

      /**
       * @private
       * @type {boolean}
       */
      this.vertex_ = options.vertex !== undefined ? options.vertex : true;

      /**
       * @private
       * @type {boolean}
       */
      this.edge_ = options.edge !== undefined ? options.edge : true;

      /**
       * @type {import("../Collection.js").default<import("../Feature.js").default>}
       * @private
       */
      this.features_ = options.features ? options.features : null;

      /**
       * @type {Array<import("../events.js").EventsKey>}
       * @private
       */
      this.featuresListenerKeys_ = [];

      /**
       * @type {Object<string, import("../events.js").EventsKey>}
       * @private
       */
      this.featureChangeListenerKeys_ = {};

      /**
       * Extents are preserved so indexed segment can be quickly removed
       * when its feature geometry changes
       * @type {Object<string, import("../extent.js").Extent>}
       * @private
       */
      this.indexedFeaturesExtents_ = {};

      /**
       * If a feature geometry changes while a pointer drag|move event occurs, the
       * feature doesn't get updated right away.  It will be at the next 'pointerup'
       * event fired.
       * @type {!Object<string, import("../Feature.js").default>}
       * @private
       */
      this.pendingFeatures_ = {};

      /**
       * Used for distance sorting in sortByDistance_
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.pixelCoordinate_ = null;

      /**
       * @type {number}
       * @private
       */
      this.pixelTolerance_ = options.pixelTolerance !== undefined ?
        options.pixelTolerance : 10;

      /**
       * @type {function(SegmentData, SegmentData): number}
       * @private
       */
      this.sortByDistance_ = sortByDistance.bind(this);


      /**
      * Segment RTree for each layer
      * @type {import("../structs/RBush.js").default<SegmentData>}
      * @private
      */
      this.rBush_ = new RBush();


      /**
      * @const
      * @private
      * @type {Object<string, function(import("../Feature.js").default, import("../geom/Geometry.js").default)>}
      */
      this.SEGMENT_WRITERS_ = {
        'Point': this.writePointGeometry_,
        'LineString': this.writeLineStringGeometry_,
        'LinearRing': this.writeLineStringGeometry_,
        'Polygon': this.writePolygonGeometry_,
        'MultiPoint': this.writeMultiPointGeometry_,
        'MultiLineString': this.writeMultiLineStringGeometry_,
        'MultiPolygon': this.writeMultiPolygonGeometry_,
        'GeometryCollection': this.writeGeometryCollectionGeometry_,
        'Circle': this.writeCircleGeometry_
      };
    }

    if ( PointerInteraction$$1 ) Snap.__proto__ = PointerInteraction$$1;
    Snap.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    Snap.prototype.constructor = Snap;

    /**
     * Add a feature to the collection of features that we may snap to.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {boolean=} opt_listen Whether to listen to the feature change or not
     *     Defaults to `true`.
     * @api
     */
    Snap.prototype.addFeature = function addFeature (feature, opt_listen) {
      var register = opt_listen !== undefined ? opt_listen : true;
      var feature_uid = getUid(feature);
      var geometry = feature.getGeometry();
      if (geometry) {
        var segmentWriter = this.SEGMENT_WRITERS_[geometry.getType()];
        if (segmentWriter) {
          this.indexedFeaturesExtents_[feature_uid] = geometry.getExtent(createEmpty());
          segmentWriter.call(this, feature, geometry);
        }
      }

      if (register) {
        this.featureChangeListenerKeys_[feature_uid] = listen(
          feature,
          EventType.CHANGE,
          this.handleFeatureChange_, this);
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @private
     */
    Snap.prototype.forEachFeatureAdd_ = function forEachFeatureAdd_ (feature) {
      this.addFeature(feature);
    };

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @private
     */
    Snap.prototype.forEachFeatureRemove_ = function forEachFeatureRemove_ (feature) {
      this.removeFeature(feature);
    };

    /**
     * @return {import("../Collection.js").default<import("../Feature.js").default>|Array<import("../Feature.js").default>} Features.
     * @private
     */
    Snap.prototype.getFeatures_ = function getFeatures_ () {
      var features;
      if (this.features_) {
        features = this.features_;
      } else if (this.source_) {
        features = this.source_.getFeatures();
      }
      return features;
    };

    /**
     * @inheritDoc
     */
    Snap.prototype.handleEvent = function handleEvent (evt) {
      var result = this.snapTo(evt.pixel, evt.coordinate, evt.map);
      if (result.snapped) {
        evt.coordinate = result.vertex.slice(0, 2);
        evt.pixel = result.vertexPixel;
      }
      return PointerInteraction$$1.prototype.handleEvent.call(this, evt);
    };

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    Snap.prototype.handleFeatureAdd_ = function handleFeatureAdd_ (evt) {
      var feature = getFeatureFromEvent(evt);
      this.addFeature(feature);
    };

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */
    Snap.prototype.handleFeatureRemove_ = function handleFeatureRemove_ (evt) {
      var feature = getFeatureFromEvent(evt);
      this.removeFeature(feature);
    };

    /**
     * @param {import("../events/Event.js").default} evt Event.
     * @private
     */
    Snap.prototype.handleFeatureChange_ = function handleFeatureChange_ (evt) {
      var feature = /** @type {import("../Feature.js").default} */ (evt.target);
      if (this.handlingDownUpSequence) {
        var uid = getUid(feature);
        if (!(uid in this.pendingFeatures_)) {
          this.pendingFeatures_[uid] = feature;
        }
      } else {
        this.updateFeature_(feature);
      }
    };

    /**
     * @inheritDoc
     */
    Snap.prototype.handleUpEvent = function handleUpEvent (evt) {
      var featuresToUpdate = getValues(this.pendingFeatures_);
      if (featuresToUpdate.length) {
        featuresToUpdate.forEach(this.updateFeature_.bind(this));
        this.pendingFeatures_ = {};
      }
      return false;
    };

    /**
     * Remove a feature from the collection of features that we may snap to.
     * @param {import("../Feature.js").default} feature Feature
     * @param {boolean=} opt_unlisten Whether to unlisten to the feature change
     *     or not. Defaults to `true`.
     * @api
     */
    Snap.prototype.removeFeature = function removeFeature (feature, opt_unlisten) {
      var unregister = opt_unlisten !== undefined ? opt_unlisten : true;
      var feature_uid = getUid(feature);
      var extent = this.indexedFeaturesExtents_[feature_uid];
      if (extent) {
        var rBush = this.rBush_;
        var nodesToRemove = [];
        rBush.forEachInExtent(extent, function(node) {
          if (feature === node.feature) {
            nodesToRemove.push(node);
          }
        });
        for (var i = nodesToRemove.length - 1; i >= 0; --i) {
          rBush.remove(nodesToRemove[i]);
        }
      }

      if (unregister) {
        unlistenByKey(this.featureChangeListenerKeys_[feature_uid]);
        delete this.featureChangeListenerKeys_[feature_uid];
      }
    };

    /**
     * @inheritDoc
     */
    Snap.prototype.setMap = function setMap (map) {
      var currentMap = this.getMap();
      var keys = this.featuresListenerKeys_;
      var features = /** @type {Array<import("../Feature.js").default>} */ (this.getFeatures_());

      if (currentMap) {
        keys.forEach(unlistenByKey);
        keys.length = 0;
        features.forEach(this.forEachFeatureRemove_.bind(this));
      }
      PointerInteraction$$1.prototype.setMap.call(this, map);

      if (map) {
        if (this.features_) {
          keys.push(
            listen(this.features_, CollectionEventType.ADD,
              this.handleFeatureAdd_, this),
            listen(this.features_, CollectionEventType.REMOVE,
              this.handleFeatureRemove_, this)
          );
        } else if (this.source_) {
          keys.push(
            listen(this.source_, VectorEventType.ADDFEATURE,
              this.handleFeatureAdd_, this),
            listen(this.source_, VectorEventType.REMOVEFEATURE,
              this.handleFeatureRemove_, this)
          );
        }
        features.forEach(this.forEachFeatureAdd_.bind(this));
      }
    };

    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel
     * @param {import("../coordinate.js").Coordinate} pixelCoordinate Coordinate
     * @param {import("../PluggableMap.js").default} map Map.
     * @return {Result} Snap result
     */
    Snap.prototype.snapTo = function snapTo (pixel, pixelCoordinate, map) {

      var lowerLeft = map.getCoordinateFromPixel(
        [pixel[0] - this.pixelTolerance_, pixel[1] + this.pixelTolerance_]);
      var upperRight = map.getCoordinateFromPixel(
        [pixel[0] + this.pixelTolerance_, pixel[1] - this.pixelTolerance_]);
      var box = boundingExtent([lowerLeft, upperRight]);

      var segments = this.rBush_.getInExtent(box);

      // If snapping on vertices only, don't consider circles
      if (this.vertex_ && !this.edge_) {
        segments = segments.filter(function(segment) {
          return segment.feature.getGeometry().getType() !==
              GeometryType.CIRCLE;
        });
      }

      var snappedToVertex = false;
      var snapped = false;
      var vertex = null;
      var vertexPixel = null;
      var dist, pixel1, pixel2, squaredDist1, squaredDist2;
      if (segments.length > 0) {
        this.pixelCoordinate_ = pixelCoordinate;
        segments.sort(this.sortByDistance_);
        var closestSegment = segments[0].segment;
        var isCircle = segments[0].feature.getGeometry().getType() ===
            GeometryType.CIRCLE;
        if (this.vertex_ && !this.edge_) {
          pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
          pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
          squaredDist1 = squaredDistance$1(pixel, pixel1);
          squaredDist2 = squaredDistance$1(pixel, pixel2);
          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
          snappedToVertex = dist <= this.pixelTolerance_;
          if (snappedToVertex) {
            snapped = true;
            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
            vertexPixel = map.getPixelFromCoordinate(vertex);
          }
        } else if (this.edge_) {
          if (isCircle) {
            vertex = closestOnCircle(pixelCoordinate,
              /** @type {import("../geom/Circle.js").default} */ (segments[0].feature.getGeometry()));
          } else {
            vertex = closestOnSegment(pixelCoordinate, closestSegment);
          }
          vertexPixel = map.getPixelFromCoordinate(vertex);
          if (distance(pixel, vertexPixel) <= this.pixelTolerance_) {
            snapped = true;
            if (this.vertex_ && !isCircle) {
              pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
              pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
              squaredDist1 = squaredDistance$1(vertexPixel, pixel1);
              squaredDist2 = squaredDistance$1(vertexPixel, pixel2);
              dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
              snappedToVertex = dist <= this.pixelTolerance_;
              if (snappedToVertex) {
                vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
                vertexPixel = map.getPixelFromCoordinate(vertex);
              }
            }
          }
        }
        if (snapped) {
          vertexPixel = [Math.round(vertexPixel[0]), Math.round(vertexPixel[1])];
        }
      }
      return (
        /** @type {Result} */ ({
          snapped: snapped,
          vertex: vertex,
          vertexPixel: vertexPixel
        })
      );
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @private
     */
    Snap.prototype.updateFeature_ = function updateFeature_ (feature) {
      this.removeFeature(feature, false);
      this.addFeature(feature, false);
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writeCircleGeometry_ = function writeCircleGeometry_ (feature, geometry) {
      var polygon = fromCircle(geometry);
      var coordinates = polygon.getCoordinates()[0];
      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        var segment = coordinates.slice(i, i + 2);
        var segmentData = /** @type {SegmentData} */ ({
          feature: feature,
          segment: segment
        });
        this.rBush_.insert(boundingExtent(segment), segmentData);
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writeGeometryCollectionGeometry_ = function writeGeometryCollectionGeometry_ (feature, geometry) {
      var geometries = geometry.getGeometriesArray();
      for (var i = 0; i < geometries.length; ++i) {
        var segmentWriter = this.SEGMENT_WRITERS_[geometries[i].getType()];
        if (segmentWriter) {
          segmentWriter.call(this, feature, geometries[i]);
        }
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/LineString.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writeLineStringGeometry_ = function writeLineStringGeometry_ (feature, geometry) {
      var coordinates = geometry.getCoordinates();
      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        var segment = coordinates.slice(i, i + 2);
        var segmentData = /** @type {SegmentData} */ ({
          feature: feature,
          segment: segment
        });
        this.rBush_.insert(boundingExtent(segment), segmentData);
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writeMultiLineStringGeometry_ = function writeMultiLineStringGeometry_ (feature, geometry) {
      var lines = geometry.getCoordinates();
      for (var j = 0, jj = lines.length; j < jj; ++j) {
        var coordinates = lines[j];
        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          var segment = coordinates.slice(i, i + 2);
          var segmentData = /** @type {SegmentData} */ ({
            feature: feature,
            segment: segment
          });
          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writeMultiPointGeometry_ = function writeMultiPointGeometry_ (feature, geometry) {
      var points = geometry.getCoordinates();
      for (var i = 0, ii = points.length; i < ii; ++i) {
        var coordinates = points[i];
        var segmentData = /** @type {SegmentData} */ ({
          feature: feature,
          segment: [coordinates, coordinates]
        });
        this.rBush_.insert(geometry.getExtent(), segmentData);
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writeMultiPolygonGeometry_ = function writeMultiPolygonGeometry_ (feature, geometry) {
      var polygons = geometry.getCoordinates();
      for (var k = 0, kk = polygons.length; k < kk; ++k) {
        var rings = polygons[k];
        for (var j = 0, jj = rings.length; j < jj; ++j) {
          var coordinates = rings[j];
          for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
            var segment = coordinates.slice(i, i + 2);
            var segmentData = /** @type {SegmentData} */ ({
              feature: feature,
              segment: segment
            });
            this.rBush_.insert(boundingExtent(segment), segmentData);
          }
        }
      }
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/Point.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writePointGeometry_ = function writePointGeometry_ (feature, geometry) {
      var coordinates = geometry.getCoordinates();
      var segmentData = /** @type {SegmentData} */ ({
        feature: feature,
        segment: [coordinates, coordinates]
      });
      this.rBush_.insert(geometry.getExtent(), segmentData);
    };

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @param {import("../geom/Polygon.js").default} geometry Geometry.
     * @private
     */
    Snap.prototype.writePolygonGeometry_ = function writePolygonGeometry_ (feature, geometry) {
      var rings = geometry.getCoordinates();
      for (var j = 0, jj = rings.length; j < jj; ++j) {
        var coordinates = rings[j];
        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          var segment = coordinates.slice(i, i + 2);
          var segmentData = /** @type {SegmentData} */ ({
            feature: feature,
            segment: segment
          });
          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    };

    return Snap;
  }(PointerInteraction));


  /**
   * Sort segments by distance, helper function
   * @param {SegmentData} a The first segment data.
   * @param {SegmentData} b The second segment data.
   * @return {number} The difference in distance.
   * @this {Snap}
   */
  function sortByDistance(a, b) {
    var deltaA = squaredDistanceToSegment(this.pixelCoordinate_, a.segment);
    var deltaB = squaredDistanceToSegment(this.pixelCoordinate_, b.segment);
    return deltaA - deltaB;
  }

  /**
   * @module ol/interaction/Translate
   */


  /**
   * @enum {string}
   */
  var TranslateEventType = {
    /**
     * Triggered upon feature translation start.
     * @event TranslateEvent#translatestart
     * @api
     */
    TRANSLATESTART: 'translatestart',
    /**
     * Triggered upon feature translation.
     * @event TranslateEvent#translating
     * @api
     */
    TRANSLATING: 'translating',
    /**
     * Triggered upon feature translation end.
     * @event TranslateEvent#translateend
     * @api
     */
    TRANSLATEEND: 'translateend'
  };


  /**
   * @typedef {Object} Options
   * @property {Collection<import("../Feature.js").default>} [features] Only features contained in this collection will be able to be translated. If
   * not specified, all features on the map will be able to be translated.
   * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default): boolean} [layers] A list of layers from which features should be
   * translated. Alternatively, a filter function can be provided. The
   * function will be called for each layer in the map and should return
   * `true` for layers that you want to be translatable. If the option is
   * absent, all visible layers will be considered translatable.
   * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside the radius around the given position
   * will be checked for features. This only works for the canvas renderer and
   * not for WebGL.
   */


  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Translate~Translate} instances
   * are instances of this type.
   */
  var TranslateEvent = /*@__PURE__*/(function (Event$$1) {
    function TranslateEvent(type, features, coordinate) {

      Event$$1.call(this, type);

      /**
       * The features being translated.
       * @type {Collection<import("../Feature.js").default>}
       * @api
       */
      this.features = features;

      /**
       * The coordinate of the drag event.
       * @const
       * @type {import("../coordinate.js").Coordinate}
       * @api
       */
      this.coordinate = coordinate;

    }

    if ( Event$$1 ) TranslateEvent.__proto__ = Event$$1;
    TranslateEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    TranslateEvent.prototype.constructor = TranslateEvent;

    return TranslateEvent;
  }(Event));


  /**
   * @classdesc
   * Interaction for translating (moving) features.
   *
   * @fires TranslateEvent
   * @api
   */
  var Translate = /*@__PURE__*/(function (PointerInteraction$$1) {
    function Translate(opt_options) {
      var options = opt_options ? opt_options : {};

      PointerInteraction$$1.call(/** @type {import("./Pointer.js").Options} */ this, (options));

      /**
       * The last position we translated to.
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.lastCoordinate_ = null;


      /**
       * @type {Collection<import("../Feature.js").default>}
       * @private
       */
      this.features_ = options.features !== undefined ? options.features : null;

      /** @type {function(import("../layer/Layer.js").default): boolean} */
      var layerFilter;
      if (options.layers) {
        if (typeof options.layers === 'function') {
          layerFilter = options.layers;
        } else {
          var layers = options.layers;
          layerFilter = function(layer) {
            return includes(layers, layer);
          };
        }
      } else {
        layerFilter = TRUE;
      }

      /**
       * @private
       * @type {function(import("../layer/Layer.js").default): boolean}
       */
      this.layerFilter_ = layerFilter;

      /**
       * @private
       * @type {number}
       */
      this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;

      /**
       * @type {import("../Feature.js").default}
       * @private
       */
      this.lastFeature_ = null;

      listen(this,
        getChangeEventType(InteractionProperty.ACTIVE),
        this.handleActiveChanged_, this);

    }

    if ( PointerInteraction$$1 ) Translate.__proto__ = PointerInteraction$$1;
    Translate.prototype = Object.create( PointerInteraction$$1 && PointerInteraction$$1.prototype );
    Translate.prototype.constructor = Translate;

    /**
     * @inheritDoc
     */
    Translate.prototype.handleDownEvent = function handleDownEvent (event) {
      this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);
      if (!this.lastCoordinate_ && this.lastFeature_) {
        this.lastCoordinate_ = event.coordinate;
        this.handleMoveEvent(event);

        var features = this.features_ || new Collection([this.lastFeature_]);

        this.dispatchEvent(
          new TranslateEvent(
            TranslateEventType.TRANSLATESTART, features,
            event.coordinate));
        return true;
      }
      return false;
    };

    /**
     * @inheritDoc
     */
    Translate.prototype.handleUpEvent = function handleUpEvent (event) {
      if (this.lastCoordinate_) {
        this.lastCoordinate_ = null;
        this.handleMoveEvent(event);

        var features = this.features_ || new Collection([this.lastFeature_]);

        this.dispatchEvent(
          new TranslateEvent(
            TranslateEventType.TRANSLATEEND, features,
            event.coordinate));
        return true;
      }
      return false;
    };

    /**
     * @inheritDoc
     */
    Translate.prototype.handleDragEvent = function handleDragEvent (event) {
      if (this.lastCoordinate_) {
        var newCoordinate = event.coordinate;
        var deltaX = newCoordinate[0] - this.lastCoordinate_[0];
        var deltaY = newCoordinate[1] - this.lastCoordinate_[1];

        var features = this.features_ || new Collection([this.lastFeature_]);

        features.forEach(function(feature) {
          var geom = feature.getGeometry();
          geom.translate(deltaX, deltaY);
          feature.setGeometry(geom);
        });

        this.lastCoordinate_ = newCoordinate;
        this.dispatchEvent(
          new TranslateEvent(
            TranslateEventType.TRANSLATING, features,
            newCoordinate));
      }
    };

    /**
     * @inheritDoc
     */
    Translate.prototype.handleMoveEvent = function handleMoveEvent (event) {
      var elem = event.map.getViewport();

      // Change the cursor to grab/grabbing if hovering any of the features managed
      // by the interaction
      if (this.featuresAtPixel_(event.pixel, event.map)) {
        elem.classList.remove(this.lastCoordinate_ ? 'ol-grab' : 'ol-grabbing');
        elem.classList.add(this.lastCoordinate_ ? 'ol-grabbing' : 'ol-grab');
      } else {
        elem.classList.remove('ol-grab', 'ol-grabbing');
      }
    };

    /**
     * Tests to see if the given coordinates intersects any of our selected
     * features.
     * @param {import("../pixel.js").Pixel} pixel Pixel coordinate to test for intersection.
     * @param {import("../PluggableMap.js").default} map Map to test the intersection on.
     * @return {import("../Feature.js").default} Returns the feature found at the specified pixel
     * coordinates.
     * @private
     */
    Translate.prototype.featuresAtPixel_ = function featuresAtPixel_ (pixel, map) {
      return map.forEachFeatureAtPixel(pixel,
        function(feature) {
          if (!this.features_ || includes(this.features_.getArray(), feature)) {
            return feature;
          }
        }.bind(this), {
          layerFilter: this.layerFilter_,
          hitTolerance: this.hitTolerance_
        });
    };

    /**
     * Returns the Hit-detection tolerance.
     * @returns {number} Hit tolerance in pixels.
     * @api
     */
    Translate.prototype.getHitTolerance = function getHitTolerance () {
      return this.hitTolerance_;
    };

    /**
     * Hit-detection tolerance. Pixels inside the radius around the given position
     * will be checked for features. This only works for the canvas renderer and
     * not for WebGL.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @api
     */
    Translate.prototype.setHitTolerance = function setHitTolerance (hitTolerance) {
      this.hitTolerance_ = hitTolerance;
    };

    /**
     * @inheritDoc
     */
    Translate.prototype.setMap = function setMap (map) {
      var oldMap = this.getMap();
      PointerInteraction$$1.prototype.setMap.call(this, map);
      this.updateState_(oldMap);
    };

    /**
     * @private
     */
    Translate.prototype.handleActiveChanged_ = function handleActiveChanged_ () {
      this.updateState_(null);
    };

    /**
     * @param {import("../PluggableMap.js").default} oldMap Old map.
     * @private
     */
    Translate.prototype.updateState_ = function updateState_ (oldMap) {
      var map = this.getMap();
      var active = this.getActive();
      if (!map || !active) {
        map = map || oldMap;
        if (map) {
          var elem = map.getViewport();
          elem.classList.remove('ol-grab', 'ol-grabbing');
        }
      }
    };

    return Translate;
  }(PointerInteraction));

  /**
   * @module ol/interaction
   */


  /**
   * @typedef {Object} DefaultsOptions
   * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is
   * desired.
   * @property {boolean} [onFocusOnly=false] Interact only when the map has the
   * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is
   * useful when page scroll is desired for maps that do not have the browser's
   * focus.
   * @property {boolean} [constrainResolution=false] Zoom to the closest integer
   * zoom level after the wheel/trackpad or pinch gesture ends.
   * @property {boolean} [doubleClickZoom=true] Whether double click zoom is
   * desired.
   * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.
   * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.
   * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.
   * @property {boolean} [dragPan=true] Whether drag pan is desired.
   * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.
   * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.
   * @property {number} [zoomDelta] Zoom level delta when using keyboard or
   * mousewheel zoom.
   * @property {number} [zoomDuration] Duration of the zoom animation in
   * milliseconds.
   */


  /**
   * Set of interactions included in maps by default. Specific interactions can be
   * excluded by setting the appropriate option to false in the constructor
   * options, but the order of the interactions is fixed.  If you want to specify
   * a different order for interactions, you will need to create your own
   * {@link module:ol/interaction/Interaction} instances and insert
   * them into a {@link module:ol/Collection} in the order you want
   * before creating your {@link module:ol/Map~Map} instance. The default set of
   * interactions, in sequence, is:
   * * {@link module:ol/interaction/DragRotate~DragRotate}
   * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}
   * * {@link module:ol/interaction/DragPan~DragPan}
   * * {@link module:ol/interaction/PinchRotate~PinchRotate}
   * * {@link module:ol/interaction/PinchZoom~PinchZoom}
   * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}
   * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}
   * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}
   * * {@link module:ol/interaction/DragZoom~DragZoom}
   *
   * @param {DefaultsOptions=} opt_options Defaults options.
   * @return {import("./Collection.js").default<import("./interaction/Interaction.js").default>}
   * A collection of interactions to be used with the {@link module:ol/Map~Map}
   * constructor's `interactions` option.
   * @api
   */
  function defaults$1(opt_options) {

    var options = opt_options ? opt_options : {};

    var interactions = new Collection();

    var kinetic = new Kinetic(-0.005, 0.05, 100);

    var altShiftDragRotate = options.altShiftDragRotate !== undefined ?
      options.altShiftDragRotate : true;
    if (altShiftDragRotate) {
      interactions.push(new DragRotate());
    }

    var doubleClickZoom = options.doubleClickZoom !== undefined ?
      options.doubleClickZoom : true;
    if (doubleClickZoom) {
      interactions.push(new DoubleClickZoom({
        delta: options.zoomDelta,
        duration: options.zoomDuration
      }));
    }

    var dragPan = options.dragPan !== undefined ? options.dragPan : true;
    if (dragPan) {
      interactions.push(new DragPan({
        condition: options.onFocusOnly ? focus : undefined,
        kinetic: kinetic
      }));
    }

    var pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate :
      true;
    if (pinchRotate) {
      interactions.push(new PinchRotate());
    }

    var pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
    if (pinchZoom) {
      interactions.push(new PinchZoom({
        constrainResolution: options.constrainResolution,
        duration: options.zoomDuration
      }));
    }

    var keyboard = options.keyboard !== undefined ? options.keyboard : true;
    if (keyboard) {
      interactions.push(new KeyboardPan());
      interactions.push(new KeyboardZoom({
        delta: options.zoomDelta,
        duration: options.zoomDuration
      }));
    }

    var mouseWheelZoom = options.mouseWheelZoom !== undefined ?
      options.mouseWheelZoom : true;
    if (mouseWheelZoom) {
      interactions.push(new MouseWheelZoom({
        condition: options.onFocusOnly ? focus : undefined,
        constrainResolution: options.constrainResolution,
        duration: options.zoomDuration
      }));
    }

    var shiftDragZoom = options.shiftDragZoom !== undefined ?
      options.shiftDragZoom : true;
    if (shiftDragZoom) {
      interactions.push(new DragZoom({
        duration: options.zoomDuration
      }));
    }

    return interactions;

  }

  /**
   * @module ol/reproj/common
   */

  /**
   * Default maximum allowed threshold  (in pixels) for reprojection
   * triangulation.
   * @type {number}
   */
  var ERROR_THRESHOLD = 0.5;

  /**
   * @module ol/ImageBase
   */

  /**
   * @abstract
   */
  var ImageBase = /*@__PURE__*/(function (EventTarget) {
    function ImageBase(extent, resolution, pixelRatio, state) {

      EventTarget.call(this);

      /**
       * @protected
       * @type {import("./extent.js").Extent}
       */
      this.extent = extent;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @protected
       * @type {number|undefined}
       */
      this.resolution = resolution;

      /**
       * @protected
       * @type {import("./ImageState.js").default}
       */
      this.state = state;

    }

    if ( EventTarget ) ImageBase.__proto__ = EventTarget;
    ImageBase.prototype = Object.create( EventTarget && EventTarget.prototype );
    ImageBase.prototype.constructor = ImageBase;

    /**
     * @protected
     */
    ImageBase.prototype.changed = function changed () {
      this.dispatchEvent(EventType.CHANGE);
    };

    /**
     * @return {import("./extent.js").Extent} Extent.
     */
    ImageBase.prototype.getExtent = function getExtent () {
      return this.extent;
    };

    /**
     * @abstract
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     */
    ImageBase.prototype.getImage = function getImage () {
      return abstract();
    };

    /**
     * @return {number} PixelRatio.
     */
    ImageBase.prototype.getPixelRatio = function getPixelRatio () {
      return this.pixelRatio_;
    };

    /**
     * @return {number} Resolution.
     */
    ImageBase.prototype.getResolution = function getResolution () {
      return /** @type {number} */ (this.resolution);
    };

    /**
     * @return {import("./ImageState.js").default} State.
     */
    ImageBase.prototype.getState = function getState () {
      return this.state;
    };

    /**
     * Load not yet loaded URI.
     * @abstract
     */
    ImageBase.prototype.load = function load () {
      abstract();
    };

    return ImageBase;
  }(Target));

  /**
   * @module ol/ImageCanvas
   */


  /**
   * A function that is called to trigger asynchronous canvas drawing.  It is
   * called with a "done" callback that should be called when drawing is done.
   * If any error occurs during drawing, the "done" callback should be called with
   * that error.
   *
   * @typedef {function(function(Error=))} Loader
   */


  var ImageCanvas = /*@__PURE__*/(function (ImageBase$$1) {
    function ImageCanvas(extent, resolution, pixelRatio, canvas, opt_loader) {

      var state = opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;

      ImageBase$$1.call(this, extent, resolution, pixelRatio, state);

      /**
       * Optional canvas loader function.
       * @type {?Loader}
       * @private
       */
      this.loader_ = opt_loader !== undefined ? opt_loader : null;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = canvas;

      /**
       * @private
       * @type {Error}
       */
      this.error_ = null;

    }

    if ( ImageBase$$1 ) ImageCanvas.__proto__ = ImageBase$$1;
    ImageCanvas.prototype = Object.create( ImageBase$$1 && ImageBase$$1.prototype );
    ImageCanvas.prototype.constructor = ImageCanvas;

    /**
     * Get any error associated with asynchronous rendering.
     * @return {Error} Any error that occurred during rendering.
     */
    ImageCanvas.prototype.getError = function getError () {
      return this.error_;
    };

    /**
     * Handle async drawing complete.
     * @param {Error=} err Any error during drawing.
     * @private
     */
    ImageCanvas.prototype.handleLoad_ = function handleLoad_ (err) {
      if (err) {
        this.error_ = err;
        this.state = ImageState.ERROR;
      } else {
        this.state = ImageState.LOADED;
      }
      this.changed();
    };

    /**
     * @inheritDoc
     */
    ImageCanvas.prototype.load = function load () {
      if (this.state == ImageState.IDLE) {
        this.state = ImageState.LOADING;
        this.changed();
        this.loader_(this.handleLoad_.bind(this));
      }
    };

    /**
     * @return {HTMLCanvasElement} Canvas element.
     */
    ImageCanvas.prototype.getImage = function getImage () {
      return this.canvas_;
    };

    return ImageCanvas;
  }(ImageBase));

  /**
   * @module ol/render/Event
   */

  var RenderEvent = /*@__PURE__*/(function (Event$$1) {
    function RenderEvent(type, opt_vectorContext, opt_frameState, opt_context, opt_glContext) {

      Event$$1.call(this, type);

      /**
       * For canvas, this is an instance of {@link module:ol/render/canvas/Immediate}.
       * @type {import("./VectorContext.js").default|undefined}
       * @api
       */
      this.vectorContext = opt_vectorContext;

      /**
       * An object representing the current render frame state.
       * @type {import("../PluggableMap.js").FrameState|undefined}
       * @api
       */
      this.frameState = opt_frameState;

      /**
       * Canvas context. Only available when a Canvas renderer is used, null
       * otherwise.
       * @type {CanvasRenderingContext2D|null|undefined}
       * @api
       */
      this.context = opt_context;

      /**
       * WebGL context. Only available when a WebGL renderer is used, null
       * otherwise.
       * @type {import("../webgl/Context.js").default|null|undefined}
       * @api
       */
      this.glContext = opt_glContext;

    }

    if ( Event$$1 ) RenderEvent.__proto__ = Event$$1;
    RenderEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    RenderEvent.prototype.constructor = RenderEvent;

    return RenderEvent;
  }(Event));

  /**
   * @module ol/render/VectorContext
   */

  /**
   * @classdesc
   * Context for drawing geometries.  A vector context is available on render
   * events and does not need to be constructed directly.
   * @api
   */
  var VectorContext = function VectorContext () {};

  VectorContext.prototype.drawCustom = function drawCustom (geometry, feature, renderer) {};

  /**
   * Render a geometry.
   *
   * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
   */
  VectorContext.prototype.drawGeometry = function drawGeometry (geometry) {};

  /**
   * Set the rendering style.
   *
   * @param {import("../style/Style.js").default} style The rendering style.
   */
  VectorContext.prototype.setStyle = function setStyle (style) {};

  /**
   * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
   * @param {import("../Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawCircle = function drawCircle (circleGeometry, feature) {};

  /**
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   */
  VectorContext.prototype.drawFeature = function drawFeature (feature, style) {};

  /**
   * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
   * @param {import("../Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawGeometryCollection = function drawGeometryCollection (geometryCollectionGeometry, feature) {};

  /**
   * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawLineString = function drawLineString (lineStringGeometry, feature) {};

  /**
   * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawMultiLineString = function drawMultiLineString (multiLineStringGeometry, feature) {};

  /**
   * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawMultiPoint = function drawMultiPoint (multiPointGeometry, feature) {};

  /**
   * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawMultiPolygon = function drawMultiPolygon (multiPolygonGeometry, feature) {};

  /**
   * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawPoint = function drawPoint (pointGeometry, feature) {};

  /**
   * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawPolygon = function drawPolygon (polygonGeometry, feature) {};

  /**
   * @param {import("../geom/Geometry.js").default|import("./Feature.js").default} geometry Geometry.
   * @param {import("../Feature.js").default|import("./Feature.js").default} feature Feature.
   */
  VectorContext.prototype.drawText = function drawText (geometry, feature) {};

  /**
   * @param {import("../style/Fill.js").default} fillStyle Fill style.
   * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
   */
  VectorContext.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {};

  /**
   * @param {import("../style/Image.js").default} imageStyle Image style.
   * @param {import("./canvas.js").DeclutterGroup=} opt_declutterGroup Declutter.
   */
  VectorContext.prototype.setImageStyle = function setImageStyle (imageStyle, opt_declutterGroup) {};

  /**
   * @param {import("../style/Text.js").default} textStyle Text style.
   * @param {import("./canvas.js").DeclutterGroup=} opt_declutterGroup Declutter.
   */
  VectorContext.prototype.setTextStyle = function setTextStyle (textStyle, opt_declutterGroup) {};

  /**
   * @module ol/render/canvas/Immediate
   */

  /**
   * @classdesc
   * A concrete subclass of {@link module:ol/render/VectorContext} that implements
   * direct rendering of features and geometries to an HTML5 Canvas context.
   * Instances of this class are created internally by the library and
   * provided to application code as vectorContext member of the
   * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and
   * render events emitted by layers and maps.
   */
  var CanvasImmediateRenderer = /*@__PURE__*/(function (VectorContext$$1) {
    function CanvasImmediateRenderer(context, pixelRatio, extent, transform, viewRotation) {
      VectorContext$$1.call(this);

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.context_ = context;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.extent_ = extent;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.transform_ = transform;

      /**
       * @private
       * @type {number}
       */
      this.viewRotation_ = viewRotation;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.contextFillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.contextStrokeState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").TextState}
       */
      this.contextTextState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.fillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.strokeState_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
       */
      this.image_ = null;

      /**
       * @private
       * @type {number}
       */
      this.imageAnchorX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageAnchorY_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageHeight_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOpacity_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOriginX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOriginY_ = 0;

      /**
       * @private
       * @type {boolean}
       */
      this.imageRotateWithView_ = false;

      /**
       * @private
       * @type {number}
       */
      this.imageRotation_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageScale_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageWidth_ = 0;

      /**
       * @private
       * @type {string}
       */
      this.text_ = '';

      /**
       * @private
       * @type {number}
       */
      this.textOffsetX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textOffsetY_ = 0;

      /**
       * @private
       * @type {boolean}
       */
      this.textRotateWithView_ = false;

      /**
       * @private
       * @type {number}
       */
      this.textRotation_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textScale_ = 0;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.textFillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.textStrokeState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").TextState}
       */
      this.textState_ = null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.pixelCoordinates_ = [];

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.tmpLocalTransform_ = create();

    }

    if ( VectorContext$$1 ) CanvasImmediateRenderer.__proto__ = VectorContext$$1;
    CanvasImmediateRenderer.prototype = Object.create( VectorContext$$1 && VectorContext$$1.prototype );
    CanvasImmediateRenderer.prototype.constructor = CanvasImmediateRenderer;

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     */
    CanvasImmediateRenderer.prototype.drawImages_ = function drawImages_ (flatCoordinates, offset, end, stride) {
      if (!this.image_) {
        return;
      }
      var pixelCoordinates = transform2D(
        flatCoordinates, offset, end, 2, this.transform_,
        this.pixelCoordinates_);
      var context = this.context_;
      var localTransform = this.tmpLocalTransform_;
      var alpha = context.globalAlpha;
      if (this.imageOpacity_ != 1) {
        context.globalAlpha = alpha * this.imageOpacity_;
      }
      var rotation = this.imageRotation_;
      if (this.imageRotateWithView_) {
        rotation += this.viewRotation_;
      }
      for (var i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {
        var x = pixelCoordinates[i] - this.imageAnchorX_;
        var y = pixelCoordinates[i + 1] - this.imageAnchorY_;
        if (rotation !== 0 || this.imageScale_ != 1) {
          var centerX = x + this.imageAnchorX_;
          var centerY = y + this.imageAnchorY_;
          compose(localTransform,
            centerX, centerY,
            this.imageScale_, this.imageScale_,
            rotation,
            -centerX, -centerY);
          context.setTransform.apply(context, localTransform);
        }
        context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_,
          this.imageWidth_, this.imageHeight_, x, y,
          this.imageWidth_, this.imageHeight_);
      }
      if (rotation !== 0 || this.imageScale_ != 1) {
        context.setTransform(1, 0, 0, 1, 0, 0);
      }
      if (this.imageOpacity_ != 1) {
        context.globalAlpha = alpha;
      }
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     */
    CanvasImmediateRenderer.prototype.drawText_ = function drawText_ (flatCoordinates, offset, end, stride) {
      if (!this.textState_ || this.text_ === '') {
        return;
      }
      if (this.textFillState_) {
        this.setContextFillState_(this.textFillState_);
      }
      if (this.textStrokeState_) {
        this.setContextStrokeState_(this.textStrokeState_);
      }
      this.setContextTextState_(this.textState_);
      var pixelCoordinates = transform2D(
        flatCoordinates, offset, end, stride, this.transform_,
        this.pixelCoordinates_);
      var context = this.context_;
      var rotation = this.textRotation_;
      if (this.textRotateWithView_) {
        rotation += this.viewRotation_;
      }
      for (; offset < end; offset += stride) {
        var x = pixelCoordinates[offset] + this.textOffsetX_;
        var y = pixelCoordinates[offset + 1] + this.textOffsetY_;
        if (rotation !== 0 || this.textScale_ != 1) {
          var localTransform = compose(this.tmpLocalTransform_,
            x, y,
            this.textScale_, this.textScale_,
            rotation,
            -x, -y);
          context.setTransform.apply(context, localTransform);
        }
        if (this.textStrokeState_) {
          context.strokeText(this.text_, x, y);
        }
        if (this.textFillState_) {
          context.fillText(this.text_, x, y);
        }
      }
      if (rotation !== 0 || this.textScale_ != 1) {
        context.setTransform(1, 0, 0, 1, 0, 0);
      }
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {boolean} close Close.
     * @private
     * @return {number} end End.
     */
    CanvasImmediateRenderer.prototype.moveToLineTo_ = function moveToLineTo_ (flatCoordinates, offset, end, stride, close) {
      var context = this.context_;
      var pixelCoordinates = transform2D(
        flatCoordinates, offset, end, stride, this.transform_,
        this.pixelCoordinates_);
      context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
      var length = pixelCoordinates.length;
      if (close) {
        length -= 2;
      }
      for (var i = 2; i < length; i += 2) {
        context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
      }
      if (close) {
        context.closePath();
      }
      return end;
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @private
     * @return {number} End.
     */
    CanvasImmediateRenderer.prototype.drawRings_ = function drawRings_ (flatCoordinates, offset, ends, stride) {
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);
      }
      return offset;
    };

    /**
     * Render a circle geometry into the canvas.  Rendering is immediate and uses
     * the current fill and stroke styles.
     *
     * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
     * @override
     * @api
     */
    CanvasImmediateRenderer.prototype.drawCircle = function drawCircle (geometry) {
      if (!intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.fillState_ || this.strokeState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        var pixelCoordinates = transformGeom2D(
          geometry, this.transform_, this.pixelCoordinates_);
        var dx = pixelCoordinates[2] - pixelCoordinates[0];
        var dy = pixelCoordinates[3] - pixelCoordinates[1];
        var radius = Math.sqrt(dx * dx + dy * dy);
        var context = this.context_;
        context.beginPath();
        context.arc(
          pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        this.drawText_(geometry.getCenter(), 0, 2, 2);
      }
    };

    /**
     * Set the rendering style.  Note that since this is an immediate rendering API,
     * any `zIndex` on the provided style will be ignored.
     *
     * @param {import("../../style/Style.js").default} style The rendering style.
     * @override
     * @api
     */
    CanvasImmediateRenderer.prototype.setStyle = function setStyle (style) {
      this.setFillStrokeStyle(style.getFill(), style.getStroke());
      this.setImageStyle(style.getImage());
      this.setTextStyle(style.getText());
    };

    /**
     * Render a geometry into the canvas.  Call
     * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.
     *
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
     * @override
     * @api
     */
    CanvasImmediateRenderer.prototype.drawGeometry = function drawGeometry (geometry) {
      var type = geometry.getType();
      switch (type) {
        case GeometryType.POINT:
          this.drawPoint(/** @type {import("../../geom/Point.js").default} */ (geometry));
          break;
        case GeometryType.LINE_STRING:
          this.drawLineString(/** @type {import("../../geom/LineString.js").default} */ (geometry));
          break;
        case GeometryType.POLYGON:
          this.drawPolygon(/** @type {import("../../geom/Polygon.js").default} */ (geometry));
          break;
        case GeometryType.MULTI_POINT:
          this.drawMultiPoint(/** @type {import("../../geom/MultiPoint.js").default} */ (geometry));
          break;
        case GeometryType.MULTI_LINE_STRING:
          this.drawMultiLineString(/** @type {import("../../geom/MultiLineString.js").default} */ (geometry));
          break;
        case GeometryType.MULTI_POLYGON:
          this.drawMultiPolygon(/** @type {import("../../geom/MultiPolygon.js").default} */ (geometry));
          break;
        case GeometryType.GEOMETRY_COLLECTION:
          this.drawGeometryCollection(/** @type {import("../../geom/GeometryCollection.js").default} */ (geometry));
          break;
        case GeometryType.CIRCLE:
          this.drawCircle(/** @type {import("../../geom/Circle.js").default} */ (geometry));
          break;
        default:
      }
    };

    /**
     * Render a feature into the canvas.  Note that any `zIndex` on the provided
     * style will be ignored - features are rendered immediately in the order that
     * this method is called.  If you need `zIndex` support, you should be using an
     * {@link module:ol/layer/Vector~VectorLayer} instead.
     *
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {import("../../style/Style.js").default} style Style.
     * @override
     * @api
     */
    CanvasImmediateRenderer.prototype.drawFeature = function drawFeature (feature, style) {
      var geometry = style.getGeometryFunction()(feature);
      if (!geometry || !intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      this.setStyle(style);
      this.drawGeometry(geometry);
    };

    /**
     * Render a GeometryCollection to the canvas.  Rendering is immediate and
     * uses the current styles appropriate for each geometry in the collection.
     *
     * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawGeometryCollection = function drawGeometryCollection (geometry) {
      var geometries = geometry.getGeometriesArray();
      for (var i = 0, ii = geometries.length; i < ii; ++i) {
        this.drawGeometry(geometries[i]);
      }
    };

    /**
     * Render a Point geometry into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawPoint = function drawPoint (geometry) {
      var flatCoordinates = geometry.getFlatCoordinates();
      var stride = geometry.getStride();
      if (this.image_) {
        this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
      if (this.text_ !== '') {
        this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
    };

    /**
     * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
     * uses the current style.
     *
     * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawMultiPoint = function drawMultiPoint (geometry) {
      var flatCoordinates = geometry.getFlatCoordinates();
      var stride = geometry.getStride();
      if (this.image_) {
        this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
      if (this.text_ !== '') {
        this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
    };

    /**
     * Render a LineString into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawLineString = function drawLineString (geometry) {
      if (!intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_) {
        this.setContextStrokeState_(this.strokeState_);
        var context = this.context_;
        var flatCoordinates = geometry.getFlatCoordinates();
        context.beginPath();
        this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length,
          geometry.getStride(), false);
        context.stroke();
      }
      if (this.text_ !== '') {
        var flatMidpoint = geometry.getFlatMidpoint();
        this.drawText_(flatMidpoint, 0, 2, 2);
      }
    };

    /**
     * Render a MultiLineString geometry into the canvas.  Rendering is immediate
     * and uses the current style.
     *
     * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawMultiLineString = function drawMultiLineString (geometry) {
      var geometryExtent = geometry.getExtent();
      if (!intersects(this.extent_, geometryExtent)) {
        return;
      }
      if (this.strokeState_) {
        this.setContextStrokeState_(this.strokeState_);
        var context = this.context_;
        var flatCoordinates = geometry.getFlatCoordinates();
        var offset = 0;
        var ends = /** @type {Array<number>} */ (geometry.getEnds());
        var stride = geometry.getStride();
        context.beginPath();
        for (var i = 0, ii = ends.length; i < ii; ++i) {
          offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);
        }
        context.stroke();
      }
      if (this.text_ !== '') {
        var flatMidpoints = geometry.getFlatMidpoints();
        this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
      }
    };

    /**
     * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawPolygon = function drawPolygon (geometry) {
      if (!intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_ || this.fillState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        var context = this.context_;
        context.beginPath();
        this.drawRings_(geometry.getOrientedFlatCoordinates(),
          0, /** @type {Array<number>} */ (geometry.getEnds()), geometry.getStride());
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        var flatInteriorPoint = geometry.getFlatInteriorPoint();
        this.drawText_(flatInteriorPoint, 0, 2, 2);
      }
    };

    /**
     * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
     * uses the current style.
     * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
     * @override
     */
    CanvasImmediateRenderer.prototype.drawMultiPolygon = function drawMultiPolygon (geometry) {
      if (!intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_ || this.fillState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        var context = this.context_;
        var flatCoordinates = geometry.getOrientedFlatCoordinates();
        var offset = 0;
        var endss = geometry.getEndss();
        var stride = geometry.getStride();
        context.beginPath();
        for (var i = 0, ii = endss.length; i < ii; ++i) {
          var ends = endss[i];
          offset = this.drawRings_(flatCoordinates, offset, ends, stride);
        }
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        var flatInteriorPoints = geometry.getFlatInteriorPoints();
        this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
      }
    };

    /**
     * @param {import("../canvas.js").FillState} fillState Fill state.
     * @private
     */
    CanvasImmediateRenderer.prototype.setContextFillState_ = function setContextFillState_ (fillState) {
      var context = this.context_;
      var contextFillState = this.contextFillState_;
      if (!contextFillState) {
        context.fillStyle = fillState.fillStyle;
        this.contextFillState_ = {
          fillStyle: fillState.fillStyle
        };
      } else {
        if (contextFillState.fillStyle != fillState.fillStyle) {
          contextFillState.fillStyle = context.fillStyle = fillState.fillStyle;
        }
      }
    };

    /**
     * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
     * @private
     */
    CanvasImmediateRenderer.prototype.setContextStrokeState_ = function setContextStrokeState_ (strokeState) {
      var context = this.context_;
      var contextStrokeState = this.contextStrokeState_;
      if (!contextStrokeState) {
        context.lineCap = /** @type {CanvasLineCap} */ (strokeState.lineCap);
        if (CANVAS_LINE_DASH) {
          context.setLineDash(strokeState.lineDash);
          context.lineDashOffset = strokeState.lineDashOffset;
        }
        context.lineJoin = /** @type {CanvasLineJoin} */ (strokeState.lineJoin);
        context.lineWidth = strokeState.lineWidth;
        context.miterLimit = strokeState.miterLimit;
        context.strokeStyle = strokeState.strokeStyle;
        this.contextStrokeState_ = {
          lineCap: strokeState.lineCap,
          lineDash: strokeState.lineDash,
          lineDashOffset: strokeState.lineDashOffset,
          lineJoin: strokeState.lineJoin,
          lineWidth: strokeState.lineWidth,
          miterLimit: strokeState.miterLimit,
          strokeStyle: strokeState.strokeStyle
        };
      } else {
        if (contextStrokeState.lineCap != strokeState.lineCap) {
          contextStrokeState.lineCap = context.lineCap = /** @type {CanvasLineCap} */ (strokeState.lineCap);
        }
        if (CANVAS_LINE_DASH) {
          if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {
            context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);
          }
          if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
            contextStrokeState.lineDashOffset = context.lineDashOffset =
                strokeState.lineDashOffset;
          }
        }
        if (contextStrokeState.lineJoin != strokeState.lineJoin) {
          contextStrokeState.lineJoin = context.lineJoin = /** @type {CanvasLineJoin} */ (strokeState.lineJoin);
        }
        if (contextStrokeState.lineWidth != strokeState.lineWidth) {
          contextStrokeState.lineWidth = context.lineWidth = strokeState.lineWidth;
        }
        if (contextStrokeState.miterLimit != strokeState.miterLimit) {
          contextStrokeState.miterLimit = context.miterLimit =
              strokeState.miterLimit;
        }
        if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
          contextStrokeState.strokeStyle = context.strokeStyle =
              strokeState.strokeStyle;
        }
      }
    };

    /**
     * @param {import("../canvas.js").TextState} textState Text state.
     * @private
     */
    CanvasImmediateRenderer.prototype.setContextTextState_ = function setContextTextState_ (textState) {
      var context = this.context_;
      var contextTextState = this.contextTextState_;
      var textAlign = textState.textAlign ?
        textState.textAlign : defaultTextAlign;
      if (!contextTextState) {
        context.font = textState.font;
        context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
        context.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
        this.contextTextState_ = {
          font: textState.font,
          textAlign: textAlign,
          textBaseline: textState.textBaseline
        };
      } else {
        if (contextTextState.font != textState.font) {
          contextTextState.font = context.font = textState.font;
        }
        if (contextTextState.textAlign != textAlign) {
          contextTextState.textAlign = context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
        }
        if (contextTextState.textBaseline != textState.textBaseline) {
          contextTextState.textBaseline = context.textBaseline =
            /** @type {CanvasTextBaseline} */ (textState.textBaseline);
        }
      }
    };

    /**
     * Set the fill and stroke style for subsequent draw operations.  To clear
     * either fill or stroke styles, pass null for the appropriate parameter.
     *
     * @param {import("../../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
     * @override
     */
    CanvasImmediateRenderer.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {
      if (!fillStyle) {
        this.fillState_ = null;
      } else {
        var fillStyleColor = fillStyle.getColor();
        this.fillState_ = {
          fillStyle: asColorLike(fillStyleColor ?
            fillStyleColor : defaultFillStyle)
        };
      }
      if (!strokeStyle) {
        this.strokeState_ = null;
      } else {
        var strokeStyleColor = strokeStyle.getColor();
        var strokeStyleLineCap = strokeStyle.getLineCap();
        var strokeStyleLineDash = strokeStyle.getLineDash();
        var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
        var strokeStyleLineJoin = strokeStyle.getLineJoin();
        var strokeStyleWidth = strokeStyle.getWidth();
        var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
        this.strokeState_ = {
          lineCap: strokeStyleLineCap !== undefined ?
            strokeStyleLineCap : defaultLineCap,
          lineDash: strokeStyleLineDash ?
            strokeStyleLineDash : defaultLineDash,
          lineDashOffset: strokeStyleLineDashOffset ?
            strokeStyleLineDashOffset : defaultLineDashOffset,
          lineJoin: strokeStyleLineJoin !== undefined ?
            strokeStyleLineJoin : defaultLineJoin,
          lineWidth: this.pixelRatio_ * (strokeStyleWidth !== undefined ?
            strokeStyleWidth : defaultLineWidth),
          miterLimit: strokeStyleMiterLimit !== undefined ?
            strokeStyleMiterLimit : defaultMiterLimit,
          strokeStyle: asColorLike(strokeStyleColor ?
            strokeStyleColor : defaultStrokeStyle)
        };
      }
    };

    /**
     * Set the image style for subsequent draw operations.  Pass null to remove
     * the image style.
     *
     * @param {import("../../style/Image.js").default} imageStyle Image style.
     * @override
     */
    CanvasImmediateRenderer.prototype.setImageStyle = function setImageStyle (imageStyle) {
      if (!imageStyle) {
        this.image_ = null;
      } else {
        var imageAnchor = imageStyle.getAnchor();
        // FIXME pixel ratio
        var imageImage = imageStyle.getImage(1);
        var imageOrigin = imageStyle.getOrigin();
        var imageSize = imageStyle.getSize();
        this.imageAnchorX_ = imageAnchor[0];
        this.imageAnchorY_ = imageAnchor[1];
        this.imageHeight_ = imageSize[1];
        this.image_ = imageImage;
        this.imageOpacity_ = imageStyle.getOpacity();
        this.imageOriginX_ = imageOrigin[0];
        this.imageOriginY_ = imageOrigin[1];
        this.imageRotateWithView_ = imageStyle.getRotateWithView();
        this.imageRotation_ = imageStyle.getRotation();
        this.imageScale_ = imageStyle.getScale() * this.pixelRatio_;
        this.imageWidth_ = imageSize[0];
      }
    };

    /**
     * Set the text style for subsequent draw operations.  Pass null to
     * remove the text style.
     *
     * @param {import("../../style/Text.js").default} textStyle Text style.
     * @override
     */
    CanvasImmediateRenderer.prototype.setTextStyle = function setTextStyle (textStyle) {
      if (!textStyle) {
        this.text_ = '';
      } else {
        var textFillStyle = textStyle.getFill();
        if (!textFillStyle) {
          this.textFillState_ = null;
        } else {
          var textFillStyleColor = textFillStyle.getColor();
          this.textFillState_ = {
            fillStyle: asColorLike(textFillStyleColor ?
              textFillStyleColor : defaultFillStyle)
          };
        }
        var textStrokeStyle = textStyle.getStroke();
        if (!textStrokeStyle) {
          this.textStrokeState_ = null;
        } else {
          var textStrokeStyleColor = textStrokeStyle.getColor();
          var textStrokeStyleLineCap = textStrokeStyle.getLineCap();
          var textStrokeStyleLineDash = textStrokeStyle.getLineDash();
          var textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();
          var textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
          var textStrokeStyleWidth = textStrokeStyle.getWidth();
          var textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
          this.textStrokeState_ = {
            lineCap: textStrokeStyleLineCap !== undefined ?
              textStrokeStyleLineCap : defaultLineCap,
            lineDash: textStrokeStyleLineDash ?
              textStrokeStyleLineDash : defaultLineDash,
            lineDashOffset: textStrokeStyleLineDashOffset ?
              textStrokeStyleLineDashOffset : defaultLineDashOffset,
            lineJoin: textStrokeStyleLineJoin !== undefined ?
              textStrokeStyleLineJoin : defaultLineJoin,
            lineWidth: textStrokeStyleWidth !== undefined ?
              textStrokeStyleWidth : defaultLineWidth,
            miterLimit: textStrokeStyleMiterLimit !== undefined ?
              textStrokeStyleMiterLimit : defaultMiterLimit,
            strokeStyle: asColorLike(textStrokeStyleColor ?
              textStrokeStyleColor : defaultStrokeStyle)
          };
        }
        var textFont = textStyle.getFont();
        var textOffsetX = textStyle.getOffsetX();
        var textOffsetY = textStyle.getOffsetY();
        var textRotateWithView = textStyle.getRotateWithView();
        var textRotation = textStyle.getRotation();
        var textScale = textStyle.getScale();
        var textText = textStyle.getText();
        var textTextAlign = textStyle.getTextAlign();
        var textTextBaseline = textStyle.getTextBaseline();
        this.textState_ = {
          font: textFont !== undefined ?
            textFont : defaultFont,
          textAlign: textTextAlign !== undefined ?
            textTextAlign : defaultTextAlign,
          textBaseline: textTextBaseline !== undefined ?
            textTextBaseline : defaultTextBaseline
        };
        this.text_ = textText !== undefined ? textText : '';
        this.textOffsetX_ =
            textOffsetX !== undefined ? (this.pixelRatio_ * textOffsetX) : 0;
        this.textOffsetY_ =
            textOffsetY !== undefined ? (this.pixelRatio_ * textOffsetY) : 0;
        this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;
        this.textRotation_ = textRotation !== undefined ? textRotation : 0;
        this.textScale_ = this.pixelRatio_ * (textScale !== undefined ?
          textScale : 1);
      }
    };

    return CanvasImmediateRenderer;
  }(VectorContext));

  /**
   * @module ol/style/IconImageCache
   */

  /**
   * @classdesc
   * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.
   */
  var IconImageCache = function IconImageCache() {

    /**
    * @type {!Object<string, import("./IconImage.js").default>}
    * @private
    */
    this.cache_ = {};

    /**
    * @type {number}
    * @private
    */
    this.cacheSize_ = 0;

    /**
    * @type {number}
    * @private
    */
    this.maxCacheSize_ = 32;
  };

  /**
  * FIXME empty description for jsdoc
  */
  IconImageCache.prototype.clear = function clear () {
    this.cache_ = {};
    this.cacheSize_ = 0;
  };

  /**
  * FIXME empty description for jsdoc
  */
  IconImageCache.prototype.expire = function expire () {
    if (this.cacheSize_ > this.maxCacheSize_) {
      var i = 0;
      for (var key in this.cache_) {
        var iconImage = this.cache_[key];
        if ((i++ & 3) === 0 && !iconImage.hasListener()) {
          delete this.cache_[key];
          --this.cacheSize_;
        }
      }
    }
  };

  /**
  * @param {string} src Src.
  * @param {?string} crossOrigin Cross origin.
  * @param {import("../color.js").Color} color Color.
  * @return {import("./IconImage.js").default} Icon image.
  */
  IconImageCache.prototype.get = function get (src, crossOrigin, color) {
    var key = getKey(src, crossOrigin, color);
    return key in this.cache_ ? this.cache_[key] : null;
  };

  /**
  * @param {string} src Src.
  * @param {?string} crossOrigin Cross origin.
  * @param {import("../color.js").Color} color Color.
  * @param {import("./IconImage.js").default} iconImage Icon image.
  */
  IconImageCache.prototype.set = function set (src, crossOrigin, color, iconImage) {
    var key = getKey(src, crossOrigin, color);
    this.cache_[key] = iconImage;
    ++this.cacheSize_;
  };

  /**
  * Set the cache size of the icon cache. Default is `32`. Change this value when
  * your map uses more than 32 different icon images and you are not caching icon
  * styles on the application level.
  * @param {number} maxCacheSize Cache max size.
  * @api
  */
  IconImageCache.prototype.setSize = function setSize (maxCacheSize) {
    this.maxCacheSize_ = maxCacheSize;
    this.expire();
  };


  /**
   * @param {string} src Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../color.js").Color} color Color.
   * @return {string} Cache key.
   */
  function getKey(src, crossOrigin, color) {
    var colorString = color ? asString(color) : 'null';
    return crossOrigin + ':' + src + ':' + colorString;
  }


  /**
   * The {@link module:ol/style/IconImageCache~IconImageCache} for
   * {@link module:ol/style/Icon~Icon} images.
   * @api
   */
  var shared = new IconImageCache();

  /**
   * @module ol/renderer/Map
   */

  /**
   * @abstract
   */
  var MapRenderer = /*@__PURE__*/(function (Disposable$$1) {
    function MapRenderer(map) {
      Disposable$$1.call(this);

      /**
       * @private
       * @type {import("../PluggableMap.js").default}
       */
      this.map_ = map;

      /**
       * @private
       * @type {!Object<string, import("./Layer.js").default>}
       */
      this.layerRenderers_ = {};

      /**
       * @private
       * @type {Object<string, import("../events.js").EventsKey>}
       */
      this.layerRendererListeners_ = {};

      /**
       * @private
       * @type {Array<typeof import("./Layer.js").default>}
       */
      this.layerRendererConstructors_ = [];

    }

    if ( Disposable$$1 ) MapRenderer.__proto__ = Disposable$$1;
    MapRenderer.prototype = Object.create( Disposable$$1 && Disposable$$1.prototype );
    MapRenderer.prototype.constructor = MapRenderer;

    /**
     * @abstract
     * @param {import("../render/EventType.js").default} type Event type.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    MapRenderer.prototype.dispatchRenderEvent = function dispatchRenderEvent (type, frameState) {
      abstract();
    };

    /**
     * Register layer renderer constructors.
     * @param {Array<typeof import("./Layer.js").default>} constructors Layer renderers.
     */
    MapRenderer.prototype.registerLayerRenderers = function registerLayerRenderers (constructors) {
      this.layerRendererConstructors_.push.apply(this.layerRendererConstructors_, constructors);
    };

    /**
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @protected
     */
    MapRenderer.prototype.calculateMatrices2D = function calculateMatrices2D (frameState) {
      var viewState = frameState.viewState;
      var coordinateToPixelTransform = frameState.coordinateToPixelTransform;
      var pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;

      compose(coordinateToPixelTransform,
        frameState.size[0] / 2, frameState.size[1] / 2,
        1 / viewState.resolution, -1 / viewState.resolution,
        -viewState.rotation,
        -viewState.center[0], -viewState.center[1]);

      invert(
        setFromArray(pixelToCoordinateTransform, coordinateToPixelTransform));
    };

    /**
     * Removes all layer renderers.
     */
    MapRenderer.prototype.removeLayerRenderers = function removeLayerRenderers () {
      for (var key in this.layerRenderers_) {
        this.removeLayerRendererByKey_(key).dispose();
      }
    };

    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(this: S, import("../Feature.js").FeatureLike,
     *     import("../layer/Layer.js").default): T} callback Feature callback.
     * @param {S} thisArg Value to use as `this` when executing `callback`.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */
    MapRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (
      coordinate,
      frameState,
      hitTolerance,
      callback,
      thisArg,
      layerFilter,
      thisArg2
    ) {
      var result;
      var viewState = frameState.viewState;
      var viewResolution = viewState.resolution;

      /**
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       * @param {import("../layer/Layer.js").default} layer Layer.
       * @return {?} Callback result.
       */
      function forEachFeatureAtCoordinate(feature, layer) {
        var managed = frameState.layerStates[getUid(layer)].managed;
        if (!(getUid(feature) in frameState.skippedFeatureUids && !managed)) {
          return callback.call(thisArg, feature, managed ? layer : null);
        }
      }

      var projection = viewState.projection;

      var translatedCoordinate = coordinate;
      if (projection.canWrapX()) {
        var projectionExtent = projection.getExtent();
        var worldWidth = getWidth(projectionExtent);
        var x = coordinate[0];
        if (x < projectionExtent[0] || x > projectionExtent[2]) {
          var worldsAway = Math.ceil((projectionExtent[0] - x) / worldWidth);
          translatedCoordinate = [x + worldWidth * worldsAway, coordinate[1]];
        }
      }

      var layerStates = frameState.layerStatesArray;
      var numLayers = layerStates.length;
      var i;
      for (i = numLayers - 1; i >= 0; --i) {
        var layerState = layerStates[i];
        var layer = layerState.layer;
        if (visibleAtResolution(layerState, viewResolution) && layerFilter.call(thisArg2, layer)) {
          var layerRenderer = this.getLayerRenderer(layer);
          var source = /** @type {import("../layer/Layer.js").default} */ (layer).getSource();
          if (source) {
            result = layerRenderer.forEachFeatureAtCoordinate(
              source.getWrapX() ? translatedCoordinate : coordinate,
              frameState, hitTolerance, forEachFeatureAtCoordinate);
          }
          if (result) {
            return result;
          }
        }
      }
      return undefined;
    };

    /**
     * @abstract
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(this: S, import("../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
     *     callback.
     * @param {S} thisArg Value to use as `this` when executing `callback`.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */
    MapRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, hitTolerance, callback, thisArg, layerFilter, thisArg2) {
      return abstract();
    };

    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
     * @return {boolean} Is there a feature at the given coordinate?
     * @template U
     */
    MapRenderer.prototype.hasFeatureAtCoordinate = function hasFeatureAtCoordinate (coordinate, frameState, hitTolerance, layerFilter, thisArg) {
      var hasFeature = this.forEachFeatureAtCoordinate(
        coordinate, frameState, hitTolerance, TRUE, this, layerFilter, thisArg);

      return hasFeature !== undefined;
    };

    /**
     * @param {import("../layer/Base.js").default} layer Layer.
     * @protected
     * @return {import("./Layer.js").default} Layer renderer.
     */
    MapRenderer.prototype.getLayerRenderer = function getLayerRenderer (layer) {
      var layerKey = getUid(layer);
      if (layerKey in this.layerRenderers_) {
        return this.layerRenderers_[layerKey];
      } else {
        var renderer;
        for (var i = 0, ii = this.layerRendererConstructors_.length; i < ii; ++i) {
          var candidate = this.layerRendererConstructors_[i];
          if (candidate['handles'](layer)) {
            renderer = candidate['create'](this, layer);
            break;
          }
        }
        if (renderer) {
          this.layerRenderers_[layerKey] = renderer;
          this.layerRendererListeners_[layerKey] = listen(renderer,
            EventType.CHANGE, this.handleLayerRendererChange_, this);
        } else {
          throw new Error('Unable to create renderer for layer: ' + layer.getType());
        }
        return renderer;
      }
    };

    /**
     * @param {string} layerKey Layer key.
     * @protected
     * @return {import("./Layer.js").default} Layer renderer.
     */
    MapRenderer.prototype.getLayerRendererByKey = function getLayerRendererByKey (layerKey) {
      return this.layerRenderers_[layerKey];
    };

    /**
     * @protected
     * @return {Object<string, import("./Layer.js").default>} Layer renderers.
     */
    MapRenderer.prototype.getLayerRenderers = function getLayerRenderers () {
      return this.layerRenderers_;
    };

    /**
     * @return {import("../PluggableMap.js").default} Map.
     */
    MapRenderer.prototype.getMap = function getMap () {
      return this.map_;
    };

    /**
     * Handle changes in a layer renderer.
     * @private
     */
    MapRenderer.prototype.handleLayerRendererChange_ = function handleLayerRendererChange_ () {
      this.map_.render();
    };

    /**
     * @param {string} layerKey Layer key.
     * @return {import("./Layer.js").default} Layer renderer.
     * @private
     */
    MapRenderer.prototype.removeLayerRendererByKey_ = function removeLayerRendererByKey_ (layerKey) {
      var layerRenderer = this.layerRenderers_[layerKey];
      delete this.layerRenderers_[layerKey];

      unlistenByKey(this.layerRendererListeners_[layerKey]);
      delete this.layerRendererListeners_[layerKey];

      return layerRenderer;
    };

    /**
     * @param {import("../PluggableMap.js").default} map Map.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */
    MapRenderer.prototype.removeUnusedLayerRenderers_ = function removeUnusedLayerRenderers_ (map, frameState) {
      for (var layerKey in this.layerRenderers_) {
        if (!frameState || !(layerKey in frameState.layerStates)) {
          this.removeLayerRendererByKey_(layerKey).dispose();
        }
      }
    };

    /**
     * Render.
     * @abstract
     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    MapRenderer.prototype.renderFrame = function renderFrame (frameState) {
      abstract();
    };

    /**
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */
    MapRenderer.prototype.scheduleExpireIconCache = function scheduleExpireIconCache (frameState) {
      frameState.postRenderFunctions.push(/** @type {import("../PluggableMap.js").PostRenderFunction} */ (expireIconCache));
    };

    /**
     * @param {!import("../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */
    MapRenderer.prototype.scheduleRemoveUnusedLayerRenderers = function scheduleRemoveUnusedLayerRenderers (frameState) {
      for (var layerKey in this.layerRenderers_) {
        if (!(layerKey in frameState.layerStates)) {
          frameState.postRenderFunctions.push(
            /** @type {import("../PluggableMap.js").PostRenderFunction} */ (this.removeUnusedLayerRenderers_.bind(this))
          );
          return;
        }
      }
    };

    return MapRenderer;
  }(Disposable));


  /**
   * @param {import("../PluggableMap.js").default} map Map.
   * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
   */
  function expireIconCache(map, frameState) {
    shared.expire();
  }


  /**
   * @param {import("../layer/Layer.js").State} state1 First layer state.
   * @param {import("../layer/Layer.js").State} state2 Second layer state.
   * @return {number} The zIndex difference.
   */
  function sortByZIndex(state1, state2) {
    return state1.zIndex - state2.zIndex;
  }

  /**
   * @module ol/renderer/canvas/Map
   */


  /**
   * @type {Array<typeof import("../Layer.js").default>}
   */
  var layerRendererConstructors = [];

  /**
   * @classdesc
   * Canvas map renderer.
   * @api
   */
  var CanvasMapRenderer = /*@__PURE__*/(function (MapRenderer$$1) {
    function CanvasMapRenderer(map) {
      MapRenderer$$1.call(this, map);

      var container = map.getViewport();

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.context_ = createCanvasContext2D();

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = this.context_.canvas;

      this.canvas_.style.width = '100%';
      this.canvas_.style.height = '100%';
      this.canvas_.style.display = 'block';
      this.canvas_.className = CLASS_UNSELECTABLE;
      container.insertBefore(this.canvas_, container.childNodes[0] || null);

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = true;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.transform_ = create();

    }

    if ( MapRenderer$$1 ) CanvasMapRenderer.__proto__ = MapRenderer$$1;
    CanvasMapRenderer.prototype = Object.create( MapRenderer$$1 && MapRenderer$$1.prototype );
    CanvasMapRenderer.prototype.constructor = CanvasMapRenderer;

    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     */
    CanvasMapRenderer.prototype.dispatchRenderEvent = function dispatchRenderEvent (type, frameState) {
      var map = this.getMap();
      var context = this.context_;
      if (map.hasListener(type)) {
        var extent = frameState.extent;
        var pixelRatio = frameState.pixelRatio;
        var viewState = frameState.viewState;
        var rotation = viewState.rotation;

        var transform = this.getTransform(frameState);

        var vectorContext = new CanvasImmediateRenderer(context, pixelRatio,
          extent, transform, rotation);
        var composeEvent = new RenderEvent(type, vectorContext,
          frameState, context, null);
        map.dispatchEvent(composeEvent);
      }
    };

    /**
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     * @return {!import("../../transform.js").Transform} Transform.
     */
    CanvasMapRenderer.prototype.getTransform = function getTransform (frameState) {
      var viewState = frameState.viewState;
      var dx1 = this.canvas_.width / 2;
      var dy1 = this.canvas_.height / 2;
      var sx = frameState.pixelRatio / viewState.resolution;
      var sy = -sx;
      var angle = -viewState.rotation;
      var dx2 = -viewState.center[0];
      var dy2 = -viewState.center[1];
      return compose(this.transform_, dx1, dy1, sx, sy, angle, dx2, dy2);
    };

    /**
     * @inheritDoc
     */
    CanvasMapRenderer.prototype.renderFrame = function renderFrame (frameState) {

      if (!frameState) {
        if (this.renderedVisible_) {
          this.canvas_.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      var context = this.context_;
      var pixelRatio = frameState.pixelRatio;
      var width = Math.round(frameState.size[0] * pixelRatio);
      var height = Math.round(frameState.size[1] * pixelRatio);
      if (this.canvas_.width != width || this.canvas_.height != height) {
        this.canvas_.width = width;
        this.canvas_.height = height;
      } else {
        context.clearRect(0, 0, width, height);
      }

      var rotation = frameState.viewState.rotation;

      this.calculateMatrices2D(frameState);

      this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);

      var layerStatesArray = frameState.layerStatesArray;
      stableSort(layerStatesArray, sortByZIndex);

      if (rotation) {
        context.save();
        rotateAtOffset(context, rotation, width / 2, height / 2);
      }

      var viewResolution = frameState.viewState.resolution;
      var i, ii;
      for (i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        var layerState = layerStatesArray[i];
        var layer = layerState.layer;
        var layerRenderer = /** @type {import("./Layer.js").default} */ (this.getLayerRenderer(layer));
        if (!visibleAtResolution(layerState, viewResolution) ||
            layerState.sourceState != SourceState.READY) {
          continue;
        }
        if (layerRenderer.prepareFrame(frameState, layerState)) {
          layerRenderer.composeFrame(frameState, layerState, context);
        }
      }

      if (rotation) {
        context.restore();
      }

      this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);

      if (!this.renderedVisible_) {
        this.canvas_.style.display = '';
        this.renderedVisible_ = true;
      }

      this.scheduleRemoveUnusedLayerRenderers(frameState);
      this.scheduleExpireIconCache(frameState);
    };

    /**
     * @inheritDoc
     */
    CanvasMapRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, hitTolerance, callback, thisArg, layerFilter, thisArg2) {
      var result;
      var viewState = frameState.viewState;
      var viewResolution = viewState.resolution;

      var layerStates = frameState.layerStatesArray;
      var numLayers = layerStates.length;

      var coordinate = apply(
        frameState.pixelToCoordinateTransform, pixel.slice());

      var i;
      for (i = numLayers - 1; i >= 0; --i) {
        var layerState = layerStates[i];
        var layer = layerState.layer;
        if (visibleAtResolution(layerState, viewResolution) && layerFilter.call(thisArg2, layer)) {
          var layerRenderer = /** @type {import("./Layer.js").default} */ (this.getLayerRenderer(layer));
          result = layerRenderer.forEachLayerAtCoordinate(
            coordinate, frameState, hitTolerance, callback, thisArg);
          if (result) {
            return result;
          }
        }
      }
      return undefined;
    };

    /**
     * @inheritDoc
     */
    CanvasMapRenderer.prototype.registerLayerRenderers = function registerLayerRenderers (constructors) {
      MapRenderer$$1.prototype.registerLayerRenderers.call(this, constructors);
      for (var i = 0, ii = constructors.length; i < ii; ++i) {
        var ctor = constructors[i];
        if (!includes(layerRendererConstructors, ctor)) {
          layerRendererConstructors.push(ctor);
        }
      }
    };

    return CanvasMapRenderer;
  }(MapRenderer));

  /**
   * @module ol/renderer/Layer
   */

  var LayerRenderer = /*@__PURE__*/(function (Observable$$1) {
    function LayerRenderer(layer) {

      Observable$$1.call(this);

      /**
       * @private
       * @type {import("../layer/Layer.js").default}
       */
      this.layer_ = layer;

    }

    if ( Observable$$1 ) LayerRenderer.__proto__ = Observable$$1;
    LayerRenderer.prototype = Object.create( Observable$$1 && Observable$$1.prototype );
    LayerRenderer.prototype.constructor = LayerRenderer;

    /**
     * Create a function that adds loaded tiles to the tile lookup.
     * @param {import("../source/Tile.js").default} source Tile source.
     * @param {import("../proj/Projection.js").default} projection Projection of the tiles.
     * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
     * @return {function(number, import("../TileRange.js").default):boolean} A function that can be
     *     called with a zoom level and a tile range to add loaded tiles to the lookup.
     * @protected
     */
    LayerRenderer.prototype.createLoadedTileFinder = function createLoadedTileFinder (source, projection, tiles) {
      return (
        /**
         * @param {number} zoom Zoom level.
         * @param {import("../TileRange.js").default} tileRange Tile range.
         * @return {boolean} The tile range is fully loaded.
         */
        function(zoom, tileRange) {
          /**
           * @param {import("../Tile.js").default} tile Tile.
           */
          function callback(tile) {
            if (!tiles[zoom]) {
              tiles[zoom] = {};
            }
            tiles[zoom][tile.tileCoord.toString()] = tile;
          }
          return source.forEachLoadedTile(projection, zoom, tileRange, callback);
        }
      );
    };

    /**
     * @abstract
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default): T} callback Feature callback.
     * @return {T|void} Callback result.
     * @template T
     */
    LayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (coordinate, frameState, hitTolerance, callback) {};

    /**
     * @return {import("../layer/Layer.js").default} Layer.
     */
    LayerRenderer.prototype.getLayer = function getLayer () {
      return this.layer_;
    };

    /**
     * Handle changes in image state.
     * @param {import("../events/Event.js").default} event Image change event.
     * @private
     */
    LayerRenderer.prototype.handleImageChange_ = function handleImageChange_ (event) {
      var image = /** @type {import("../Image.js").default} */ (event.target);
      if (image.getState() === ImageState.LOADED) {
        this.renderIfReadyAndVisible();
      }
    };

    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @return {boolean} Is there a feature at the given coordinate?
     */
    LayerRenderer.prototype.hasFeatureAtCoordinate = function hasFeatureAtCoordinate (coordinate, frameState) {
      return false;
    };

    /**
     * Load the image if not already loaded, and register the image change
     * listener if needed.
     * @param {import("../ImageBase.js").default} image Image.
     * @return {boolean} `true` if the image is already loaded, `false` otherwise.
     * @protected
     */
    LayerRenderer.prototype.loadImage = function loadImage (image) {
      var imageState = image.getState();
      if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {
        listen(image, EventType.CHANGE, this.handleImageChange_, this);
      }
      if (imageState == ImageState.IDLE) {
        image.load();
        imageState = image.getState();
      }
      return imageState == ImageState.LOADED;
    };

    /**
     * @protected
     */
    LayerRenderer.prototype.renderIfReadyAndVisible = function renderIfReadyAndVisible () {
      var layer = this.getLayer();
      if (layer.getVisible() && layer.getSourceState() == SourceState.READY) {
        this.changed();
      }
    };

    /**
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../source/Tile.js").default} tileSource Tile source.
     * @protected
     */
    LayerRenderer.prototype.scheduleExpireCache = function scheduleExpireCache (frameState, tileSource) {
      if (tileSource.canExpireCache()) {
        /**
         * @param {import("../source/Tile.js").default} tileSource Tile source.
         * @param {import("../PluggableMap.js").default} map Map.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        var postRenderFunction = function(tileSource, map, frameState) {
          var tileSourceKey = getUid(tileSource);
          if (tileSourceKey in frameState.usedTiles) {
            tileSource.expireCache(frameState.viewState.projection,
              frameState.usedTiles[tileSourceKey]);
          }
        }.bind(null, tileSource);

        frameState.postRenderFunctions.push(
          /** @type {import("../PluggableMap.js").PostRenderFunction} */ (postRenderFunction)
        );
      }
    };

    /**
     * @param {!Object<string, !Object<string, import("../TileRange.js").default>>} usedTiles Used tiles.
     * @param {import("../source/Tile.js").default} tileSource Tile source.
     * @param {number} z Z.
     * @param {import("../TileRange.js").default} tileRange Tile range.
     * @protected
     */
    LayerRenderer.prototype.updateUsedTiles = function updateUsedTiles (usedTiles, tileSource, z, tileRange) {
      // FIXME should we use tilesToDrawByZ instead?
      var tileSourceKey = getUid(tileSource);
      var zKey = z.toString();
      if (tileSourceKey in usedTiles) {
        if (zKey in usedTiles[tileSourceKey]) {
          usedTiles[tileSourceKey][zKey].extend(tileRange);
        } else {
          usedTiles[tileSourceKey][zKey] = tileRange;
        }
      } else {
        usedTiles[tileSourceKey] = {};
        usedTiles[tileSourceKey][zKey] = tileRange;
      }
    };

    /**
     * Manage tile pyramid.
     * This function performs a number of functions related to the tiles at the
     * current zoom and lower zoom levels:
     * - registers idle tiles in frameState.wantedTiles so that they are not
     *   discarded by the tile queue
     * - enqueues missing tiles
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../source/Tile.js").default} tileSource Tile source.
     * @param {import("../tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} currentZ Current Z.
     * @param {number} preload Load low resolution tiles up to 'preload' levels.
     * @param {function(this: T, import("../Tile.js").default)=} opt_tileCallback Tile callback.
     * @param {T=} opt_this Object to use as `this` in `opt_tileCallback`.
     * @protected
     * @template T
     */
    LayerRenderer.prototype.manageTilePyramid = function manageTilePyramid (
      frameState,
      tileSource,
      tileGrid,
      pixelRatio,
      projection,
      extent,
      currentZ,
      preload,
      opt_tileCallback,
      opt_this
    ) {
      var tileSourceKey = getUid(tileSource);
      if (!(tileSourceKey in frameState.wantedTiles)) {
        frameState.wantedTiles[tileSourceKey] = {};
      }
      var wantedTiles = frameState.wantedTiles[tileSourceKey];
      var tileQueue = frameState.tileQueue;
      var minZoom = tileGrid.getMinZoom();
      var tile, tileRange, tileResolution, x, y, z;
      for (z = minZoom; z <= currentZ; ++z) {
        tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);
        tileResolution = tileGrid.getResolution(z);
        for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
          for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
            if (currentZ - z <= preload) {
              tile = tileSource.getTile(z, x, y, pixelRatio, projection);
              if (tile.getState() == TileState.IDLE) {
                wantedTiles[tile.getKey()] = true;
                if (!tileQueue.isKeyQueued(tile.getKey())) {
                  tileQueue.enqueue([tile, tileSourceKey,
                    tileGrid.getTileCoordCenter(tile.tileCoord), tileResolution]);
                }
              }
              if (opt_tileCallback !== undefined) {
                opt_tileCallback.call(opt_this, tile);
              }
            } else {
              tileSource.useTile(z, x, y, projection);
            }
          }
        }
      }
    };

    return LayerRenderer;
  }(Observable));

  /**
   * @module ol/renderer/canvas/Layer
   */

  /**
   * @abstract
   */
  var CanvasLayerRenderer = /*@__PURE__*/(function (LayerRenderer$$1) {
    function CanvasLayerRenderer(layer) {

      LayerRenderer$$1.call(this, layer);

      /**
       * @protected
       * @type {number}
       */
      this.renderedResolution;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.transform_ = create();

    }

    if ( LayerRenderer$$1 ) CanvasLayerRenderer.__proto__ = LayerRenderer$$1;
    CanvasLayerRenderer.prototype = Object.create( LayerRenderer$$1 && LayerRenderer$$1.prototype );
    CanvasLayerRenderer.prototype.constructor = CanvasLayerRenderer;

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../extent.js").Extent} extent Clip extent.
     * @protected
     */
    CanvasLayerRenderer.prototype.clip = function clip (context, frameState, extent) {
      var pixelRatio = frameState.pixelRatio;
      var width = frameState.size[0] * pixelRatio;
      var height = frameState.size[1] * pixelRatio;
      var rotation = frameState.viewState.rotation;
      var topLeft = getTopLeft(extent);
      var topRight = getTopRight(extent);
      var bottomRight = getBottomRight(extent);
      var bottomLeft = getBottomLeft(extent);

      apply(frameState.coordinateToPixelTransform, topLeft);
      apply(frameState.coordinateToPixelTransform, topRight);
      apply(frameState.coordinateToPixelTransform, bottomRight);
      apply(frameState.coordinateToPixelTransform, bottomLeft);

      context.save();
      rotateAtOffset(context, -rotation, width / 2, height / 2);
      context.beginPath();
      context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);
      context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);
      context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);
      context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);
      context.clip();
      rotateAtOffset(context, rotation, width / 2, height / 2);
    };

    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../transform.js").Transform=} opt_transform Transform.
     * @private
     */
    CanvasLayerRenderer.prototype.dispatchComposeEvent_ = function dispatchComposeEvent_ (type, context, frameState, opt_transform) {
      var layer = this.getLayer();
      if (layer.hasListener(type)) {
        var width = frameState.size[0] * frameState.pixelRatio;
        var height = frameState.size[1] * frameState.pixelRatio;
        var rotation = frameState.viewState.rotation;
        rotateAtOffset(context, -rotation, width / 2, height / 2);
        var transform = opt_transform !== undefined ?
          opt_transform : this.getTransform(frameState, 0);
        var render = new CanvasImmediateRenderer(
          context, frameState.pixelRatio, frameState.extent, transform,
          frameState.viewState.rotation);
        var composeEvent = new RenderEvent(type, render, frameState,
          context, null);
        layer.dispatchEvent(composeEvent);
        rotateAtOffset(context, rotation, width / 2, height / 2);
      }
    };

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(this: S, import("../../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
     *     callback.
     * @param {S} thisArg Value to use as `this` when executing `callback`.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */
    CanvasLayerRenderer.prototype.forEachLayerAtCoordinate = function forEachLayerAtCoordinate (coordinate, frameState, hitTolerance, callback, thisArg) {
      var hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, TRUE);

      if (hasFeature) {
        return callback.call(thisArg, this.getLayer(), null);
      } else {
        return undefined;
      }
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     * @param {import("../../transform.js").Transform=} opt_transform Transform.
     * @protected
     */
    CanvasLayerRenderer.prototype.postCompose = function postCompose (context, frameState, layerState, opt_transform) {
      this.dispatchComposeEvent_(RenderEventType.POSTCOMPOSE, context, frameState, opt_transform);
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../transform.js").Transform=} opt_transform Transform.
     * @protected
     */
    CanvasLayerRenderer.prototype.preCompose = function preCompose (context, frameState, opt_transform) {
      this.dispatchComposeEvent_(RenderEventType.PRECOMPOSE, context, frameState, opt_transform);
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../transform.js").Transform=} opt_transform Transform.
     * @protected
     */
    CanvasLayerRenderer.prototype.dispatchRenderEvent = function dispatchRenderEvent (context, frameState, opt_transform) {
      this.dispatchComposeEvent_(RenderEventType.RENDER, context, frameState, opt_transform);
    };

    /**
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} offsetX Offset on the x-axis in view coordinates.
     * @protected
     * @return {!import("../../transform.js").Transform} Transform.
     */
    CanvasLayerRenderer.prototype.getTransform = function getTransform (frameState, offsetX) {
      var viewState = frameState.viewState;
      var pixelRatio = frameState.pixelRatio;
      var dx1 = pixelRatio * frameState.size[0] / 2;
      var dy1 = pixelRatio * frameState.size[1] / 2;
      var sx = pixelRatio / viewState.resolution;
      var sy = -sx;
      var angle = -viewState.rotation;
      var dx2 = -viewState.center[0] + offsetX;
      var dy2 = -viewState.center[1];
      return compose(this.transform_, dx1, dy1, sx, sy, angle, dx2, dy2);
    };

    /**
     * @abstract
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     * @param {CanvasRenderingContext2D} context Context.
     */
    CanvasLayerRenderer.prototype.composeFrame = function composeFrame (frameState, layerState, context) {
      abstract();
    };

    /**
     * @abstract
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     * @return {boolean} whether composeFrame should be called.
     */
    CanvasLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState) {
      return abstract();
    };

    return CanvasLayerRenderer;
  }(LayerRenderer));

  /**
   * @module ol/renderer/canvas/IntermediateCanvas
   */

  /**
   * @abstract
   */
  var IntermediateCanvasRenderer = /*@__PURE__*/(function (CanvasLayerRenderer$$1) {
    function IntermediateCanvasRenderer(layer) {

      CanvasLayerRenderer$$1.call(this, layer);

      /**
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.coordinateToCanvasPixelTransform = create();

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.hitCanvasContext_ = null;

    }

    if ( CanvasLayerRenderer$$1 ) IntermediateCanvasRenderer.__proto__ = CanvasLayerRenderer$$1;
    IntermediateCanvasRenderer.prototype = Object.create( CanvasLayerRenderer$$1 && CanvasLayerRenderer$$1.prototype );
    IntermediateCanvasRenderer.prototype.constructor = IntermediateCanvasRenderer;

    /**
     * @inheritDoc
     */
    IntermediateCanvasRenderer.prototype.composeFrame = function composeFrame (frameState, layerState, context) {

      this.preCompose(context, frameState);

      var image = this.getImage();
      if (image) {

        // clipped rendering if layer extent is set
        var extent = layerState.extent;
        var clipped = extent !== undefined &&
            !containsExtent(extent, frameState.extent) &&
            intersects(extent, frameState.extent);
        if (clipped) {
          this.clip(context, frameState, /** @type {import("../../extent.js").Extent} */ (extent));
        }

        var imageTransform = this.getImageTransform();
        // for performance reasons, context.save / context.restore is not used
        // to save and restore the transformation matrix and the opacity.
        // see http://jsperf.com/context-save-restore-versus-variable
        var alpha = context.globalAlpha;
        context.globalAlpha = layerState.opacity;

        // for performance reasons, context.setTransform is only used
        // when the view is rotated. see http://jsperf.com/canvas-transform
        var dx = imageTransform[4];
        var dy = imageTransform[5];
        var dw = image.width * imageTransform[0];
        var dh = image.height * imageTransform[3];
        if (dw >= 0.5 && dh >= 0.5) {
          context.drawImage(image, 0, 0, +image.width, +image.height,
            Math.round(dx), Math.round(dy), Math.round(dw), Math.round(dh));
        }
        context.globalAlpha = alpha;

        if (clipped) {
          context.restore();
        }
      }

      this.postCompose(context, frameState, layerState);
    };

    /**
     * @abstract
     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Canvas.
     */
    IntermediateCanvasRenderer.prototype.getImage = function getImage () {
      return abstract();
    };

    /**
     * @abstract
     * @return {!import("../../transform.js").Transform} Image transform.
     */
    IntermediateCanvasRenderer.prototype.getImageTransform = function getImageTransform () {
      return abstract();
    };

    /**
     * @inheritDoc
     */
    IntermediateCanvasRenderer.prototype.forEachLayerAtCoordinate = function forEachLayerAtCoordinate (coordinate, frameState, hitTolerance, callback, thisArg) {
      if (!this.getImage()) {
        return undefined;
      }

      var pixel = apply(this.coordinateToCanvasPixelTransform, coordinate.slice());
      scale(pixel, frameState.viewState.resolution / this.renderedResolution);

      if (!this.hitCanvasContext_) {
        this.hitCanvasContext_ = createCanvasContext2D(1, 1);
      }

      this.hitCanvasContext_.clearRect(0, 0, 1, 1);
      this.hitCanvasContext_.drawImage(this.getImage(), pixel[0], pixel[1], 1, 1, 0, 0, 1, 1);

      var imageData = this.hitCanvasContext_.getImageData(0, 0, 1, 1).data;
      if (imageData[3] > 0) {
        return callback.call(thisArg, this.getLayer(), imageData);
      } else {
        return undefined;
      }
    };

    return IntermediateCanvasRenderer;
  }(CanvasLayerRenderer));

  /**
   * @module ol/renderer/canvas/ImageLayer
   */

  /**
   * @classdesc
   * Canvas renderer for image layers.
   * @api
   */
  var CanvasImageLayerRenderer = /*@__PURE__*/(function (IntermediateCanvasRenderer$$1) {
    function CanvasImageLayerRenderer(imageLayer) {

      IntermediateCanvasRenderer$$1.call(this, imageLayer);

      /**
       * @private
       * @type {?import("../../ImageBase.js").default}
       */
      this.image_ = null;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.imageTransform_ = create();

      /**
       * @type {!Array<string>}
       */
      this.skippedFeatures_ = [];

      /**
       * @private
       * @type {import("./VectorLayer.js").default}
       */
      this.vectorRenderer_ = null;

      if (imageLayer.getType() === LayerType.VECTOR) {
        for (var i = 0, ii = layerRendererConstructors.length; i < ii; ++i) {
          var ctor = layerRendererConstructors[i];
          if (ctor !== CanvasImageLayerRenderer && ctor['handles'](imageLayer)) {
            this.vectorRenderer_ = /** @type {import("./VectorLayer.js").default} */ (new ctor(imageLayer));
            break;
          }
        }
      }

    }

    if ( IntermediateCanvasRenderer$$1 ) CanvasImageLayerRenderer.__proto__ = IntermediateCanvasRenderer$$1;
    CanvasImageLayerRenderer.prototype = Object.create( IntermediateCanvasRenderer$$1 && IntermediateCanvasRenderer$$1.prototype );
    CanvasImageLayerRenderer.prototype.constructor = CanvasImageLayerRenderer;

    /**
     * @inheritDoc
     */
    CanvasImageLayerRenderer.prototype.disposeInternal = function disposeInternal () {
      if (this.vectorRenderer_) {
        this.vectorRenderer_.dispose();
      }
      IntermediateCanvasRenderer$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @inheritDoc
     */
    CanvasImageLayerRenderer.prototype.getImage = function getImage () {
      return !this.image_ ? null : this.image_.getImage();
    };

    /**
     * @inheritDoc
     */
    CanvasImageLayerRenderer.prototype.getImageTransform = function getImageTransform () {
      return this.imageTransform_;
    };

    /**
     * @inheritDoc
     */
    CanvasImageLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState) {

      var pixelRatio = frameState.pixelRatio;
      var size = frameState.size;
      var viewState = frameState.viewState;
      var viewCenter = viewState.center;
      var viewResolution = viewState.resolution;

      var image;
      var imageLayer = /** @type {import("../../layer/Image.js").default} */ (this.getLayer());
      var imageSource = /** @type {import("../../source/Image.js").default} */ (imageLayer.getSource());

      var hints = frameState.viewHints;

      var vectorRenderer = this.vectorRenderer_;
      var renderedExtent = frameState.extent;
      if (!vectorRenderer && layerState.extent !== undefined) {
        renderedExtent = getIntersection(renderedExtent, layerState.extent);
      }

      if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] &&
          !isEmpty$1(renderedExtent)) {
        var projection = viewState.projection;
        var skippedFeatures = this.skippedFeatures_;
        if (vectorRenderer) {
          var context = vectorRenderer.context;
          var imageFrameState = /** @type {import("../../PluggableMap.js").FrameState} */ (assign({}, frameState, {
            size: [
              getWidth(renderedExtent) / viewResolution,
              getHeight(renderedExtent) / viewResolution
            ],
            viewState: /** @type {import("../../View.js").State} */ (assign({}, frameState.viewState, {
              rotation: 0
            }))
          }));
          var newSkippedFeatures = Object.keys(imageFrameState.skippedFeatureUids).sort();
          image = new ImageCanvas(renderedExtent, viewResolution, pixelRatio, context.canvas, function(callback) {
            if (vectorRenderer.prepareFrame(imageFrameState, layerState) &&
                (vectorRenderer.replayGroupChanged ||
                !equals(skippedFeatures, newSkippedFeatures))) {
              context.canvas.width = imageFrameState.size[0] * pixelRatio;
              context.canvas.height = imageFrameState.size[1] * pixelRatio;
              vectorRenderer.compose(context, imageFrameState, layerState);
              skippedFeatures = newSkippedFeatures;
              callback();
            }
          });
        } else {
          image = imageSource.getImage(
            renderedExtent, viewResolution, pixelRatio, projection);
        }
        if (image && this.loadImage(image)) {
          this.image_ = image;
          this.skippedFeatures_ = skippedFeatures;
        }
      }

      if (this.image_) {
        image = this.image_;
        var imageExtent = image.getExtent();
        var imageResolution = image.getResolution();
        var imagePixelRatio = image.getPixelRatio();
        var scale = pixelRatio * imageResolution /
            (viewResolution * imagePixelRatio);
        var transform = compose(this.imageTransform_,
          pixelRatio * size[0] / 2, pixelRatio * size[1] / 2,
          scale, scale,
          0,
          imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolution,
          imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolution);
        compose(this.coordinateToCanvasPixelTransform,
          pixelRatio * size[0] / 2 - transform[4], pixelRatio * size[1] / 2 - transform[5],
          pixelRatio / viewResolution, -pixelRatio / viewResolution,
          0,
          -viewCenter[0], -viewCenter[1]);

        this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;
      }

      return !!this.image_;
    };

    /**
     * @inheritDoc
     */
    CanvasImageLayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (coordinate, frameState, hitTolerance, callback) {
      if (this.vectorRenderer_) {
        return this.vectorRenderer_.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback);
      } else {
        return IntermediateCanvasRenderer$$1.prototype.forEachFeatureAtCoordinate.call(this, coordinate, frameState, hitTolerance, callback);
      }
    };

    return CanvasImageLayerRenderer;
  }(IntermediateCanvasRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  CanvasImageLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.IMAGE ||
      layer.getType() === LayerType.VECTOR &&
      /** @type {import("../../layer/Vector.js").default} */ (layer).getRenderMode() === VectorRenderType.IMAGE;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {CanvasImageLayerRenderer} The layer renderer.
   */
  CanvasImageLayerRenderer['create'] = function(mapRenderer, layer) {
    return new CanvasImageLayerRenderer(/** @type {import("../../layer/Image.js").default} */ (layer));
  };

  /**
   * @module ol/TileRange
   */

  /**
   * A representation of a contiguous block of tiles.  A tile range is specified
   * by its min/max tile coordinates and is inclusive of coordinates.
   */
  var TileRange = function TileRange(minX, maxX, minY, maxY) {

    /**
     * @type {number}
     */
    this.minX = minX;

    /**
     * @type {number}
     */
    this.maxX = maxX;

    /**
     * @type {number}
     */
    this.minY = minY;

    /**
     * @type {number}
     */
    this.maxY = maxY;

  };

  /**
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @return {boolean} Contains tile coordinate.
   */
  TileRange.prototype.contains = function contains (tileCoord) {
    return this.containsXY(tileCoord[1], tileCoord[2]);
  };

  /**
   * @param {TileRange} tileRange Tile range.
   * @return {boolean} Contains.
   */
  TileRange.prototype.containsTileRange = function containsTileRange (tileRange) {
    return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX &&
       this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;
  };

  /**
   * @param {number} x Tile coordinate x.
   * @param {number} y Tile coordinate y.
   * @return {boolean} Contains coordinate.
   */
  TileRange.prototype.containsXY = function containsXY (x, y) {
    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
  };

  /**
   * @param {TileRange} tileRange Tile range.
   * @return {boolean} Equals.
   */
  TileRange.prototype.equals = function equals (tileRange) {
    return this.minX == tileRange.minX && this.minY == tileRange.minY &&
       this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;
  };

  /**
   * @param {TileRange} tileRange Tile range.
   */
  TileRange.prototype.extend = function extend (tileRange) {
    if (tileRange.minX < this.minX) {
      this.minX = tileRange.minX;
    }
    if (tileRange.maxX > this.maxX) {
      this.maxX = tileRange.maxX;
    }
    if (tileRange.minY < this.minY) {
      this.minY = tileRange.minY;
    }
    if (tileRange.maxY > this.maxY) {
      this.maxY = tileRange.maxY;
    }
  };

  /**
   * @return {number} Height.
   */
  TileRange.prototype.getHeight = function getHeight () {
    return this.maxY - this.minY + 1;
  };

  /**
   * @return {import("./size.js").Size} Size.
   */
  TileRange.prototype.getSize = function getSize () {
    return [this.getWidth(), this.getHeight()];
  };

  /**
   * @return {number} Width.
   */
  TileRange.prototype.getWidth = function getWidth () {
    return this.maxX - this.minX + 1;
  };

  /**
   * @param {TileRange} tileRange Tile range.
   * @return {boolean} Intersects.
   */
  TileRange.prototype.intersects = function intersects (tileRange) {
    return this.minX <= tileRange.maxX &&
       this.maxX >= tileRange.minX &&
       this.minY <= tileRange.maxY &&
       this.maxY >= tileRange.minY;
  };


  /**
   * @param {number} minX Minimum X.
   * @param {number} maxX Maximum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxY Maximum Y.
   * @param {TileRange=} tileRange TileRange.
   * @return {TileRange} Tile range.
   */
  function createOrUpdate$1(minX, maxX, minY, maxY, tileRange) {
    if (tileRange !== undefined) {
      tileRange.minX = minX;
      tileRange.maxX = maxX;
      tileRange.minY = minY;
      tileRange.maxY = maxY;
      return tileRange;
    } else {
      return new TileRange(minX, maxX, minY, maxY);
    }
  }

  /**
   * @module ol/renderer/canvas/TileLayer
   */

  /**
   * @classdesc
   * Canvas renderer for tile layers.
   * @api
   */
  var CanvasTileLayerRenderer = /*@__PURE__*/(function (IntermediateCanvasRenderer$$1) {
    function CanvasTileLayerRenderer(tileLayer, opt_noContext) {

      IntermediateCanvasRenderer$$1.call(this, tileLayer);

      /**
       * @protected
       * @type {CanvasRenderingContext2D}
       */
      this.context = opt_noContext ? null : createCanvasContext2D();

      /**
       * @private
       * @type {number}
       */
      this.oversampling_;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.renderedExtent_ = null;

      /**
       * @protected
       * @type {number}
       */
      this.renderedRevision;

      /**
       * @protected
       * @type {!Array<import("../../Tile.js").default>}
       */
      this.renderedTiles = [];

      /**
       * @private
       * @type {boolean}
       */
      this.newTiles_ = false;

      /**
       * @protected
       * @type {import("../../extent.js").Extent}
       */
      this.tmpExtent = createEmpty();

      /**
       * @private
       * @type {import("../../TileRange.js").default}
       */
      this.tmpTileRange_ = new TileRange(0, 0, 0, 0);

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.imageTransform_ = create();

      /**
       * @protected
       * @type {number}
       */
      this.zDirection = 0;

    }

    if ( IntermediateCanvasRenderer$$1 ) CanvasTileLayerRenderer.__proto__ = IntermediateCanvasRenderer$$1;
    CanvasTileLayerRenderer.prototype = Object.create( IntermediateCanvasRenderer$$1 && IntermediateCanvasRenderer$$1.prototype );
    CanvasTileLayerRenderer.prototype.constructor = CanvasTileLayerRenderer;

    /**
     * @private
     * @param {import("../../Tile.js").default} tile Tile.
     * @return {boolean} Tile is drawable.
     */
    CanvasTileLayerRenderer.prototype.isDrawableTile_ = function isDrawableTile_ (tile) {
      var tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      var tileState = tile.getState();
      var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
      return tileState == TileState.LOADED ||
          tileState == TileState.EMPTY ||
          tileState == TileState.ERROR && !useInterimTilesOnError;
    };

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection.js").default} projection Projection.
     * @return {!import("../../Tile.js").default} Tile.
     */
    CanvasTileLayerRenderer.prototype.getTile = function getTile (z, x, y, pixelRatio, projection) {
      var tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      var tileSource = /** @type {import("../../source/Tile.js").default} */ (tileLayer.getSource());
      var tile = tileSource.getTile(z, x, y, pixelRatio, projection);
      if (tile.getState() == TileState.ERROR) {
        if (!tileLayer.getUseInterimTilesOnError()) {
          // When useInterimTilesOnError is false, we consider the error tile as loaded.
          tile.setState(TileState.LOADED);
        } else if (tileLayer.getPreload() > 0) {
          // Preloaded tiles for lower resolutions might have finished loading.
          this.newTiles_ = true;
        }
      }
      if (!this.isDrawableTile_(tile)) {
        tile = tile.getInterimTile();
      }
      return tile;
    };

    /**
     * @inheritDoc
     */
    CanvasTileLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState) {

      var pixelRatio = frameState.pixelRatio;
      var size = frameState.size;
      var viewState = frameState.viewState;
      var projection = viewState.projection;
      var viewResolution = viewState.resolution;
      var viewCenter = viewState.center;

      var tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      var tileSource = /** @type {import("../../source/Tile.js").default} */ (tileLayer.getSource());
      var sourceRevision = tileSource.getRevision();
      var tileGrid = tileSource.getTileGridForProjection(projection);
      var z = tileGrid.getZForResolution(viewResolution, this.zDirection);
      var tileResolution = tileGrid.getResolution(z);
      var oversampling = Math.round(viewResolution / tileResolution) || 1;
      var extent = frameState.extent;

      if (layerState.extent !== undefined) {
        extent = getIntersection(extent, layerState.extent);
      }
      if (isEmpty$1(extent)) {
        // Return false to prevent the rendering of the layer.
        return false;
      }

      var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
      var imageExtent = tileGrid.getTileRangeExtent(z, tileRange);

      var tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);

      /**
       * @type {Object<number, Object<string, import("../../Tile.js").default>>}
       */
      var tilesToDrawByZ = {};
      tilesToDrawByZ[z] = {};

      var findLoadedTiles = this.createLoadedTileFinder(
        tileSource, projection, tilesToDrawByZ);

      var hints = frameState.viewHints;
      var animatingOrInteracting = hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING];

      var tmpExtent = this.tmpExtent;
      var tmpTileRange = this.tmpTileRange_;
      this.newTiles_ = false;
      var tile, x, y;
      for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
        for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
          if (Date.now() - frameState.time > 16 && animatingOrInteracting) {
            continue;
          }
          tile = this.getTile(z, x, y, pixelRatio, projection);
          if (this.isDrawableTile_(tile)) {
            var uid = getUid(this);
            if (tile.getState() == TileState.LOADED) {
              tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
              var inTransition = tile.inTransition(uid);
              if (!this.newTiles_ && (inTransition || this.renderedTiles.indexOf(tile) === -1)) {
                this.newTiles_ = true;
              }
            }
            if (tile.getAlpha(uid, frameState.time) === 1) {
              // don't look for alt tiles if alpha is 1
              continue;
            }
          }

          var childTileRange = tileGrid.getTileCoordChildTileRange(
            tile.tileCoord, tmpTileRange, tmpExtent);
          var covered = false;
          if (childTileRange) {
            covered = findLoadedTiles(z + 1, childTileRange);
          }
          if (!covered) {
            tileGrid.forEachTileCoordParentTileRange(
              tile.tileCoord, findLoadedTiles, null, tmpTileRange, tmpExtent);
          }

        }
      }

      var renderedResolution = tileResolution * pixelRatio / tilePixelRatio * oversampling;
      if (!(this.renderedResolution && Date.now() - frameState.time > 16 && animatingOrInteracting) && (
        this.newTiles_ ||
            !(this.renderedExtent_ && containsExtent(this.renderedExtent_, extent)) ||
            this.renderedRevision != sourceRevision ||
            oversampling != this.oversampling_ ||
            !animatingOrInteracting && renderedResolution != this.renderedResolution
      )) {

        var context = this.context;
        if (context) {
          var tilePixelSize = tileSource.getTilePixelSize(z, pixelRatio, projection);
          var width = Math.round(tileRange.getWidth() * tilePixelSize[0] / oversampling);
          var height = Math.round(tileRange.getHeight() * tilePixelSize[1] / oversampling);
          var canvas = context.canvas;
          if (canvas.width != width || canvas.height != height) {
            this.oversampling_ = oversampling;
            canvas.width = width;
            canvas.height = height;
          } else {
            if (this.renderedExtent_ && !equals$2(imageExtent, this.renderedExtent_)) {
              context.clearRect(0, 0, width, height);
            }
            oversampling = this.oversampling_;
          }
        }

        this.renderedTiles.length = 0;
        /** @type {Array<number>} */
        var zs = Object.keys(tilesToDrawByZ).map(Number);
        zs.sort(function(a, b) {
          if (a === z) {
            return 1;
          } else if (b === z) {
            return -1;
          } else {
            return a > b ? 1 : a < b ? -1 : 0;
          }
        });
        var currentResolution, currentScale, currentTilePixelSize, currentZ, i, ii;
        var tileExtent, tileGutter, tilesToDraw, w, h;
        for (i = 0, ii = zs.length; i < ii; ++i) {
          currentZ = zs[i];
          currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
          currentResolution = tileGrid.getResolution(currentZ);
          currentScale = currentResolution / tileResolution;
          tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);
          tilesToDraw = tilesToDrawByZ[currentZ];
          for (var tileCoordKey in tilesToDraw) {
            tile = tilesToDraw[tileCoordKey];
            tileExtent = tileGrid.getTileCoordExtent(tile.getTileCoord(), tmpExtent);
            x = (tileExtent[0] - imageExtent[0]) / tileResolution * tilePixelRatio / oversampling;
            y = (imageExtent[3] - tileExtent[3]) / tileResolution * tilePixelRatio / oversampling;
            w = currentTilePixelSize[0] * currentScale / oversampling;
            h = currentTilePixelSize[1] * currentScale / oversampling;
            this.drawTileImage(tile, frameState, layerState, x, y, w, h, tileGutter, z === currentZ);
            this.renderedTiles.push(tile);
          }
        }

        this.renderedRevision = sourceRevision;
        this.renderedResolution = tileResolution * pixelRatio / tilePixelRatio * oversampling;
        this.renderedExtent_ = imageExtent;
      }

      var scale = this.renderedResolution / viewResolution;
      var transform = compose(this.imageTransform_,
        pixelRatio * size[0] / 2, pixelRatio * size[1] / 2,
        scale, scale,
        0,
        (this.renderedExtent_[0] - viewCenter[0]) / this.renderedResolution * pixelRatio,
        (viewCenter[1] - this.renderedExtent_[3]) / this.renderedResolution * pixelRatio);
      compose(this.coordinateToCanvasPixelTransform,
        pixelRatio * size[0] / 2 - transform[4], pixelRatio * size[1] / 2 - transform[5],
        pixelRatio / viewResolution, -pixelRatio / viewResolution,
        0,
        -viewCenter[0], -viewCenter[1]);


      this.updateUsedTiles(frameState.usedTiles, tileSource, z, tileRange);
      this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio,
        projection, extent, z, tileLayer.getPreload());
      this.scheduleExpireCache(frameState, tileSource);

      return this.renderedTiles.length > 0;
    };

    /**
     * @param {import("../../Tile.js").default} tile Tile.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     * @param {number} x Left of the tile.
     * @param {number} y Top of the tile.
     * @param {number} w Width of the tile.
     * @param {number} h Height of the tile.
     * @param {number} gutter Tile gutter.
     * @param {boolean} transition Apply an alpha transition.
     */
    CanvasTileLayerRenderer.prototype.drawTileImage = function drawTileImage (tile, frameState, layerState, x, y, w, h, gutter, transition) {
      var image = this.getTileImage(tile);
      if (!image) {
        return;
      }
      var uid = getUid(this);
      var alpha = transition ? tile.getAlpha(uid, frameState.time) : 1;
      var tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      var tileSource = /** @type {import("../../source/Tile.js").default} */ (tileLayer.getSource());
      if (alpha === 1 && !tileSource.getOpaque(frameState.viewState.projection)) {
        this.context.clearRect(x, y, w, h);
      }
      var alphaChanged = alpha !== this.context.globalAlpha;
      if (alphaChanged) {
        this.context.save();
        this.context.globalAlpha = alpha;
      }
      this.context.drawImage(image, gutter, gutter,
        image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);

      if (alphaChanged) {
        this.context.restore();
      }
      if (alpha !== 1) {
        frameState.animate = true;
      } else if (transition) {
        tile.endTransition(uid);
      }
    };

    /**
     * @inheritDoc
     */
    CanvasTileLayerRenderer.prototype.getImage = function getImage () {
      var context = this.context;
      return context ? context.canvas : null;
    };

    /**
     * @inheritDoc
     */
    CanvasTileLayerRenderer.prototype.getImageTransform = function getImageTransform () {
      return this.imageTransform_;
    };

    /**
     * Get the image from a tile.
     * @param {import("../../Tile.js").default} tile Tile.
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @protected
     */
    CanvasTileLayerRenderer.prototype.getTileImage = function getTileImage (tile) {
      return /** @type {import("../../ImageTile.js").default} */ (tile).getImage();
    };

    return CanvasTileLayerRenderer;
  }(IntermediateCanvasRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  CanvasTileLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.TILE;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {CanvasTileLayerRenderer} The layer renderer.
   */
  CanvasTileLayerRenderer['create'] = function(mapRenderer, layer) {
    return new CanvasTileLayerRenderer(/** @type {import("../../layer/Tile.js").default} */ (layer));
  };


  /**
   * @function
   * @return {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default}
   */
  CanvasTileLayerRenderer.prototype.getLayer;

  /**
   * @module ol/render/ReplayGroup
   */

  /**
   * Base class for replay groups.
   */
  var ReplayGroup = function ReplayGroup () {};

  ReplayGroup.prototype.getReplay = function getReplay (zIndex, replayType) {
    return abstract();
  };

  /**
   * @abstract
   * @return {boolean} Is empty.
   */
  ReplayGroup.prototype.isEmpty = function isEmpty () {
    return abstract();
  };

  /**
   * @abstract
   * @param {boolean} group Group with previous replay
   * @return {Array<*>} The resulting instruction group
   */
  ReplayGroup.prototype.addDeclutter = function addDeclutter (group) {
    return abstract();
  };

  /**
   * @module ol/render/ReplayType
   */

  /**
   * @enum {string}
   */
  var ReplayType = {
    CIRCLE: 'Circle',
    DEFAULT: 'Default',
    IMAGE: 'Image',
    LINE_STRING: 'LineString',
    POLYGON: 'Polygon',
    TEXT: 'Text'
  };

  /**
   * @module ol/geom/flat/textpath
   */


  /**
   * @param {Array<number>} flatCoordinates Path to put text on.
   * @param {number} offset Start offset of the `flatCoordinates`.
   * @param {number} end End offset of the `flatCoordinates`.
   * @param {number} stride Stride.
   * @param {string} text Text to place on the path.
   * @param {function(string):number} measure Measure function returning the
   * width of the character passed as 1st argument.
   * @param {number} startM m along the path where the text starts.
   * @param {number} maxAngle Max angle between adjacent chars in radians.
   * @return {Array<Array<*>>} The result array of null if `maxAngle` was
   * exceeded. Entries of the array are x, y, anchorX, angle, chunk.
   */
  function drawTextOnPath(
    flatCoordinates, offset, end, stride, text, measure, startM, maxAngle) {
    var result = [];

    // Keep text upright
    var reverse = flatCoordinates[offset] > flatCoordinates[end - stride];

    var numChars = text.length;

    var x1 = flatCoordinates[offset];
    var y1 = flatCoordinates[offset + 1];
    offset += stride;
    var x2 = flatCoordinates[offset];
    var y2 = flatCoordinates[offset + 1];
    var segmentM = 0;
    var segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));

    var chunk = '';
    var chunkLength = 0;
    var data, index, previousAngle;
    for (var i = 0; i < numChars; ++i) {
      index = reverse ? numChars - i - 1 : i;
      var char = text.charAt(index);
      chunk = reverse ? char + chunk : chunk + char;
      var charLength = measure(chunk) - chunkLength;
      chunkLength += charLength;
      var charM = startM + charLength / 2;
      while (offset < end - stride && segmentM + segmentLength < charM) {
        x1 = x2;
        y1 = y2;
        offset += stride;
        x2 = flatCoordinates[offset];
        y2 = flatCoordinates[offset + 1];
        segmentM += segmentLength;
        segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
      }
      var segmentPos = charM - segmentM;
      var angle = Math.atan2(y2 - y1, x2 - x1);
      if (reverse) {
        angle += angle > 0 ? -Math.PI : Math.PI;
      }
      if (previousAngle !== undefined) {
        var delta = angle - previousAngle;
        delta += (delta > Math.PI) ? -2 * Math.PI : (delta < -Math.PI) ? 2 * Math.PI : 0;
        if (Math.abs(delta) > maxAngle) {
          return null;
        }
      }
      var interpolate = segmentPos / segmentLength;
      var x = lerp(x1, x2, interpolate);
      var y = lerp(y1, y2, interpolate);
      if (previousAngle == angle) {
        if (reverse) {
          data[0] = x;
          data[1] = y;
          data[2] = charLength / 2;
        }
        data[4] = chunk;
      } else {
        chunk = char;
        chunkLength = charLength;
        data = [x, y, charLength / 2, angle, chunk];
        if (reverse) {
          result.unshift(data);
        } else {
          result.push(data);
        }
        previousAngle = angle;
      }
      startM += charLength;
    }
    return result;
  }

  /**
   * @module ol/render/canvas/Instruction
   */

  /**
   * @enum {number}
   */
  var Instruction = {
    BEGIN_GEOMETRY: 0,
    BEGIN_PATH: 1,
    CIRCLE: 2,
    CLOSE_PATH: 3,
    CUSTOM: 4,
    DRAW_CHARS: 5,
    DRAW_IMAGE: 6,
    END_GEOMETRY: 7,
    FILL: 8,
    MOVE_TO_LINE_TO: 9,
    SET_FILL_STYLE: 10,
    SET_STROKE_STYLE: 11,
    STROKE: 12
  };


  /**
   * @type {Array<Instruction>}
   */
  var fillInstruction = [Instruction.FILL];


  /**
   * @type {Array<Instruction>}
   */
  var strokeInstruction = [Instruction.STROKE];


  /**
   * @type {Array<Instruction>}
   */
  var beginPathInstruction = [Instruction.BEGIN_PATH];


  /**
   * @type {Array<Instruction>}
   */
  var closePathInstruction = [Instruction.CLOSE_PATH];

  /**
   * @module ol/render/replay
   */


  /**
   * @const
   * @type {Array<ReplayType>}
   */
  var ORDER = [
    ReplayType.POLYGON,
    ReplayType.CIRCLE,
    ReplayType.LINE_STRING,
    ReplayType.IMAGE,
    ReplayType.TEXT,
    ReplayType.DEFAULT
  ];

  /**
   * @const
   * @enum {number}
   */
  var TEXT_ALIGN = {};
  TEXT_ALIGN['left'] = 0;
  TEXT_ALIGN['end'] = 0;
  TEXT_ALIGN['center'] = 0.5;
  TEXT_ALIGN['right'] = 1;
  TEXT_ALIGN['start'] = 1;
  TEXT_ALIGN['top'] = 0;
  TEXT_ALIGN['middle'] = 0.5;
  TEXT_ALIGN['hanging'] = 0.2;
  TEXT_ALIGN['alphabetic'] = 0.8;
  TEXT_ALIGN['ideographic'] = 0.8;
  TEXT_ALIGN['bottom'] = 1;

  /**
   * @module ol/render/canvas/Replay
   */


  /**
   * @type {import("../../extent.js").Extent}
   */
  var tmpExtent = createEmpty();


  /**
   * @type {!import("../../transform.js").Transform}
   */
  var tmpTransform$1 = create();


  var CanvasReplay = /*@__PURE__*/(function (VectorContext$$1) {
    function CanvasReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
      VectorContext$$1.call(this);

      /**
       * @type {?}
       */
      this.declutterTree = declutterTree;

      /**
       * @protected
       * @type {number}
       */
      this.tolerance = tolerance;

      /**
       * @protected
       * @const
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent = maxExtent;

      /**
       * @protected
       * @type {boolean}
       */
      this.overlaps = overlaps;

      /**
       * @protected
       * @type {number}
       */
      this.pixelRatio = pixelRatio;

      /**
       * @protected
       * @type {number}
       */
      this.maxLineWidth = 0;

      /**
       * @protected
       * @const
       * @type {number}
       */
      this.resolution = resolution;

      /**
       * @private
       * @type {boolean}
       */
      this.alignFill_;

      /**
       * @private
       * @type {Array<*>}
       */
      this.beginGeometryInstruction1_ = null;

      /**
       * @private
       * @type {Array<*>}
       */
      this.beginGeometryInstruction2_ = null;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.bufferedMaxExtent_ = null;

      /**
       * @protected
       * @type {Array<*>}
       */
      this.instructions = [];

      /**
       * @protected
       * @type {Array<number>}
       */
      this.coordinates = [];

      /**
       * @private
       * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}
       */
      this.coordinateCache_ = {};

      /**
       * @private
       * @type {!import("../../transform.js").Transform}
       */
      this.renderedTransform_ = create();

      /**
       * @protected
       * @type {Array<*>}
       */
      this.hitDetectionInstructions = [];

      /**
       * @private
       * @type {Array<number>}
       */
      this.pixelCoordinates_ = null;

      /**
       * @protected
       * @type {import("../canvas.js").FillStrokeState}
       */
      this.state = /** @type {import("../canvas.js").FillStrokeState} */ ({});

      /**
       * @private
       * @type {number}
       */
      this.viewRotation_ = 0;

    }

    if ( VectorContext$$1 ) CanvasReplay.__proto__ = VectorContext$$1;
    CanvasReplay.prototype = Object.create( VectorContext$$1 && VectorContext$$1.prototype );
    CanvasReplay.prototype.constructor = CanvasReplay;

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
     * @param {Array<*>} fillInstruction Fill instruction.
     * @param {Array<*>} strokeInstruction Stroke instruction.
     */
    CanvasReplay.prototype.replayTextBackground_ = function replayTextBackground_ (context, p1, p2, p3, p4, fillInstruction$$1, strokeInstruction$$1) {
      context.beginPath();
      context.moveTo.apply(context, p1);
      context.lineTo.apply(context, p2);
      context.lineTo.apply(context, p3);
      context.lineTo.apply(context, p4);
      context.lineTo.apply(context, p1);
      if (fillInstruction$$1) {
        this.alignFill_ = /** @type {boolean} */ (fillInstruction$$1[2]);
        this.fill_(context);
      }
      if (strokeInstruction$$1) {
        this.setStrokeStyle_(context, /** @type {Array<*>} */ (strokeInstruction$$1));
        context.stroke();
      }
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.
     * @param {number} anchorX Anchor X.
     * @param {number} anchorY Anchor Y.
     * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
     * @param {number} height Height.
     * @param {number} opacity Opacity.
     * @param {number} originX Origin X.
     * @param {number} originY Origin Y.
     * @param {number} rotation Rotation.
     * @param {number} scale Scale.
     * @param {boolean} snapToPixel Snap to pixel.
     * @param {number} width Width.
     * @param {Array<number>} padding Padding.
     * @param {Array<*>} fillInstruction Fill instruction.
     * @param {Array<*>} strokeInstruction Stroke instruction.
     */
    CanvasReplay.prototype.replayImage_ = function replayImage_ (
      context,
      x,
      y,
      image,
      anchorX,
      anchorY,
      declutterGroup,
      height,
      opacity,
      originX,
      originY,
      rotation,
      scale,
      snapToPixel,
      width,
      padding,
      fillInstruction$$1,
      strokeInstruction$$1
    ) {
      var fillStroke = fillInstruction$$1 || strokeInstruction$$1;
      anchorX *= scale;
      anchorY *= scale;
      x -= anchorX;
      y -= anchorY;

      var w = (width + originX > image.width) ? image.width - originX : width;
      var h = (height + originY > image.height) ? image.height - originY : height;
      var boxW = padding[3] + w * scale + padding[1];
      var boxH = padding[0] + h * scale + padding[2];
      var boxX = x - padding[3];
      var boxY = y - padding[0];

      /** @type {import("../../coordinate.js").Coordinate} */
      var p1;
      /** @type {import("../../coordinate.js").Coordinate} */
      var p2;
      /** @type {import("../../coordinate.js").Coordinate} */
      var p3;
      /** @type {import("../../coordinate.js").Coordinate} */
      var p4;
      if (fillStroke || rotation !== 0) {
        p1 = [boxX, boxY];
        p2 = [boxX + boxW, boxY];
        p3 = [boxX + boxW, boxY + boxH];
        p4 = [boxX, boxY + boxH];
      }

      var transform = null;
      if (rotation !== 0) {
        var centerX = x + anchorX;
        var centerY = y + anchorY;
        transform = compose(tmpTransform$1, centerX, centerY, 1, 1, rotation, -centerX, -centerY);

        createOrUpdateEmpty(tmpExtent);
        extendCoordinate(tmpExtent, apply(tmpTransform$1, p1));
        extendCoordinate(tmpExtent, apply(tmpTransform$1, p2));
        extendCoordinate(tmpExtent, apply(tmpTransform$1, p3));
        extendCoordinate(tmpExtent, apply(tmpTransform$1, p4));
      } else {
        createOrUpdate(boxX, boxY, boxX + boxW, boxY + boxH, tmpExtent);
      }
      var canvas = context.canvas;
      var strokePadding = strokeInstruction$$1 ? (strokeInstruction$$1[2] * scale / 2) : 0;
      var intersects$$1 =
          tmpExtent[0] - strokePadding <= canvas.width && tmpExtent[2] + strokePadding >= 0 &&
          tmpExtent[1] - strokePadding <= canvas.height && tmpExtent[3] + strokePadding >= 0;

      if (snapToPixel) {
        x = Math.round(x);
        y = Math.round(y);
      }

      if (declutterGroup) {
        if (!intersects$$1 && declutterGroup[4] == 1) {
          return;
        }
        extend$1(declutterGroup, tmpExtent);
        var declutterArgs = intersects$$1 ?
          [context, transform ? transform.slice(0) : null, opacity, image, originX, originY, w, h, x, y, scale] :
          null;
        if (declutterArgs && fillStroke) {
          declutterArgs.push(fillInstruction$$1, strokeInstruction$$1, p1, p2, p3, p4);
        }
        declutterGroup.push(declutterArgs);
      } else if (intersects$$1) {
        if (fillStroke) {
          this.replayTextBackground_(context, p1, p2, p3, p4,
            /** @type {Array<*>} */ (fillInstruction$$1),
            /** @type {Array<*>} */ (strokeInstruction$$1));
        }
        drawImage(context, transform, opacity, image, originX, originY, w, h, x, y, scale);
      }
    };

    /**
     * @protected
     * @param {Array<number>} dashArray Dash array.
     * @return {Array<number>} Dash array with pixel ratio applied
     */
    CanvasReplay.prototype.applyPixelRatio = function applyPixelRatio (dashArray) {
      var pixelRatio = this.pixelRatio;
      return pixelRatio == 1 ? dashArray : dashArray.map(function(dash) {
        return dash * pixelRatio;
      });
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {boolean} closed Last input coordinate equals first.
     * @param {boolean} skipFirst Skip first coordinate.
     * @protected
     * @return {number} My end.
     */
    CanvasReplay.prototype.appendFlatCoordinates = function appendFlatCoordinates (flatCoordinates, offset, end, stride, closed, skipFirst) {

      var myEnd = this.coordinates.length;
      var extent = this.getBufferedMaxExtent();
      if (skipFirst) {
        offset += stride;
      }
      var lastCoord = [flatCoordinates[offset], flatCoordinates[offset + 1]];
      var nextCoord = [NaN, NaN];
      var skipped = true;

      var i, lastRel, nextRel;
      for (i = offset + stride; i < end; i += stride) {
        nextCoord[0] = flatCoordinates[i];
        nextCoord[1] = flatCoordinates[i + 1];
        nextRel = coordinateRelationship(extent, nextCoord);
        if (nextRel !== lastRel) {
          if (skipped) {
            this.coordinates[myEnd++] = lastCoord[0];
            this.coordinates[myEnd++] = lastCoord[1];
          }
          this.coordinates[myEnd++] = nextCoord[0];
          this.coordinates[myEnd++] = nextCoord[1];
          skipped = false;
        } else if (nextRel === Relationship.INTERSECTING) {
          this.coordinates[myEnd++] = nextCoord[0];
          this.coordinates[myEnd++] = nextCoord[1];
          skipped = false;
        } else {
          skipped = true;
        }
        lastCoord[0] = nextCoord[0];
        lastCoord[1] = nextCoord[1];
        lastRel = nextRel;
      }

      // Last coordinate equals first or only one point to append:
      if ((closed && skipped) || i === offset + stride) {
        this.coordinates[myEnd++] = lastCoord[0];
        this.coordinates[myEnd++] = lastCoord[1];
      }
      return myEnd;
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Array<number>} replayEnds Replay ends.
     * @return {number} Offset.
     */
    CanvasReplay.prototype.drawCustomCoordinates_ = function drawCustomCoordinates_ (flatCoordinates, offset, ends, stride, replayEnds) {
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        var end = ends[i];
        var replayEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
        replayEnds.push(replayEnd);
        offset = end;
      }
      return offset;
    };

    /**
     * @inheritDoc.
     */
    CanvasReplay.prototype.drawCustom = function drawCustom (geometry, feature, renderer) {
      this.beginGeometry(geometry, feature);
      var type = geometry.getType();
      var stride = geometry.getStride();
      var replayBegin = this.coordinates.length;
      var flatCoordinates, replayEnd, replayEnds, replayEndss;
      var offset;
      if (type == GeometryType.MULTI_POLYGON) {
        geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry);
        flatCoordinates = geometry.getOrientedFlatCoordinates();
        replayEndss = [];
        var endss = geometry.getEndss();
        offset = 0;
        for (var i = 0, ii = endss.length; i < ii; ++i) {
          var myEnds = [];
          offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);
          replayEndss.push(myEnds);
        }
        this.instructions.push([Instruction.CUSTOM,
          replayBegin, replayEndss, geometry, renderer, inflateMultiCoordinatesArray]);
      } else if (type == GeometryType.POLYGON || type == GeometryType.MULTI_LINE_STRING) {
        replayEnds = [];
        flatCoordinates = (type == GeometryType.POLYGON) ?
          /** @type {import("../../geom/Polygon.js").default} */ (geometry).getOrientedFlatCoordinates() :
          geometry.getFlatCoordinates();
        offset = this.drawCustomCoordinates_(flatCoordinates, 0,
          /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ (geometry).getEnds(),
          stride, replayEnds);
        this.instructions.push([Instruction.CUSTOM,
          replayBegin, replayEnds, geometry, renderer, inflateCoordinatesArray]);
      } else if (type == GeometryType.LINE_STRING || type == GeometryType.MULTI_POINT) {
        flatCoordinates = geometry.getFlatCoordinates();
        replayEnd = this.appendFlatCoordinates(
          flatCoordinates, 0, flatCoordinates.length, stride, false, false);
        this.instructions.push([Instruction.CUSTOM,
          replayBegin, replayEnd, geometry, renderer, inflateCoordinates]);
      } else if (type == GeometryType.POINT) {
        flatCoordinates = geometry.getFlatCoordinates();
        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
        replayEnd = this.coordinates.length;
        this.instructions.push([Instruction.CUSTOM,
          replayBegin, replayEnd, geometry, renderer]);
      }
      this.endGeometry(geometry, feature);
    };

    /**
     * @protected
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry Geometry.
     * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
     */
    CanvasReplay.prototype.beginGeometry = function beginGeometry (geometry, feature) {
      this.beginGeometryInstruction1_ = [Instruction.BEGIN_GEOMETRY, feature, 0];
      this.instructions.push(this.beginGeometryInstruction1_);
      this.beginGeometryInstruction2_ = [Instruction.BEGIN_GEOMETRY, feature, 0];
      this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
    };

    /**
     * FIXME empty description for jsdoc
     */
    CanvasReplay.prototype.finish = function finish () {};

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     */
    CanvasReplay.prototype.fill_ = function fill_ (context) {
      if (this.alignFill_) {
        var origin = apply(this.renderedTransform_, [0, 0]);
        var repeatSize = 512 * this.pixelRatio;
        context.translate(origin[0] % repeatSize, origin[1] % repeatSize);
        context.rotate(this.viewRotation_);
      }
      context.fill();
      if (this.alignFill_) {
        context.setTransform.apply(context, resetTransform);
      }
    };

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {Array<*>} instruction Instruction.
     */
    CanvasReplay.prototype.setStrokeStyle_ = function setStrokeStyle_ (context, instruction) {
      context.strokeStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
      context.lineWidth = /** @type {number} */ (instruction[2]);
      context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);
      context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);
      context.miterLimit = /** @type {number} */ (instruction[5]);
      if (CANVAS_LINE_DASH) {
        context.lineDashOffset = /** @type {number} */ (instruction[7]);
        context.setLineDash(/** @type {Array<number>} */ (instruction[6]));
      }
    };

    /**
     * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
     * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
     */
    CanvasReplay.prototype.renderDeclutter_ = function renderDeclutter_ (declutterGroup, feature) {
      if (declutterGroup && declutterGroup.length > 5) {
        var groupCount = declutterGroup[4];
        if (groupCount == 1 || groupCount == declutterGroup.length - 5) {
          /** @type {import("../../structs/RBush.js").Entry} */
          var box = {
            minX: /** @type {number} */ (declutterGroup[0]),
            minY: /** @type {number} */ (declutterGroup[1]),
            maxX: /** @type {number} */ (declutterGroup[2]),
            maxY: /** @type {number} */ (declutterGroup[3]),
            value: feature
          };
          if (!this.declutterTree.collides(box)) {
            this.declutterTree.insert(box);
            for (var j = 5, jj = declutterGroup.length; j < jj; ++j) {
              var declutterData = /** @type {Array} */ (declutterGroup[j]);
              if (declutterData) {
                if (declutterData.length > 11) {
                  this.replayTextBackground_(declutterData[0],
                    declutterData[13], declutterData[14], declutterData[15], declutterData[16],
                    declutterData[11], declutterData[12]);
                }
                drawImage.apply(undefined, declutterData);
              }
            }
          }
          declutterGroup.length = 5;
          createOrUpdateEmpty(declutterGroup);
        }
      }
    };

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features
     *     to skip.
     * @param {Array<*>} instructions Instructions array.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} featureCallback Feature callback.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Only check features that intersect this
     *     extent.
     * @return {T|undefined} Callback result.
     * @template T
     */
    CanvasReplay.prototype.replay_ = function replay_ (
      context,
      transform,
      skippedFeaturesHash,
      instructions,
      snapToPixel,
      featureCallback,
      opt_hitExtent
    ) {
      /** @type {Array<number>} */
      var pixelCoordinates;
      if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {
        pixelCoordinates = this.pixelCoordinates_;
      } else {
        if (!this.pixelCoordinates_) {
          this.pixelCoordinates_ = [];
        }
        pixelCoordinates = transform2D(
          this.coordinates, 0, this.coordinates.length, 2,
          transform, this.pixelCoordinates_);
        setFromArray(this.renderedTransform_, transform);
      }
      var skipFeatures = !isEmpty(skippedFeaturesHash);
      var i = 0; // instruction index
      var ii = instructions.length; // end of instructions
      var d = 0; // data index
      var dd; // end of per-instruction data
      var anchorX, anchorY, prevX, prevY, roundX, roundY, declutterGroup, image;
      var pendingFill = 0;
      var pendingStroke = 0;
      var lastFillInstruction = null;
      var lastStrokeInstruction = null;
      var coordinateCache = this.coordinateCache_;
      var viewRotation = this.viewRotation_;

      var state = /** @type {import("../../render.js").State} */ ({
        context: context,
        pixelRatio: this.pixelRatio,
        resolution: this.resolution,
        rotation: viewRotation
      });

      // When the batch size gets too big, performance decreases. 200 is a good
      // balance between batch size and number of fill/stroke instructions.
      var batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;
      var /** @type {import("../../Feature.js").default|import("../Feature.js").default} */ feature;
      var x, y;
      while (i < ii) {
        var instruction = instructions[i];
        var type = /** @type {CanvasInstruction} */ (instruction[0]);
        switch (type) {
          case Instruction.BEGIN_GEOMETRY:
            feature = /** @type {import("../../Feature.js").default|import("../Feature.js").default} */ (instruction[1]);
            if ((skipFeatures && skippedFeaturesHash[getUid(feature)]) || !feature.getGeometry()) {
              i = /** @type {number} */ (instruction[2]);
            } else if (opt_hitExtent !== undefined && !intersects(
              opt_hitExtent, feature.getGeometry().getExtent())) {
              i = /** @type {number} */ (instruction[2]) + 1;
            } else {
              ++i;
            }
            break;
          case Instruction.BEGIN_PATH:
            if (pendingFill > batchSize) {
              this.fill_(context);
              pendingFill = 0;
            }
            if (pendingStroke > batchSize) {
              context.stroke();
              pendingStroke = 0;
            }
            if (!pendingFill && !pendingStroke) {
              context.beginPath();
              prevX = prevY = NaN;
            }
            ++i;
            break;
          case Instruction.CIRCLE:
            d = /** @type {number} */ (instruction[1]);
            var x1 = pixelCoordinates[d];
            var y1 = pixelCoordinates[d + 1];
            var x2 = pixelCoordinates[d + 2];
            var y2 = pixelCoordinates[d + 3];
            var dx = x2 - x1;
            var dy = y2 - y1;
            var r = Math.sqrt(dx * dx + dy * dy);
            context.moveTo(x1 + r, y1);
            context.arc(x1, y1, r, 0, 2 * Math.PI, true);
            ++i;
            break;
          case Instruction.CLOSE_PATH:
            context.closePath();
            ++i;
            break;
          case Instruction.CUSTOM:
            d = /** @type {number} */ (instruction[1]);
            dd = instruction[2];
            var geometry = /** @type {import("../../geom/SimpleGeometry.js").default} */ (instruction[3]);
            var renderer = instruction[4];
            var fn = instruction.length == 6 ? instruction[5] : undefined;
            state.geometry = geometry;
            state.feature = feature;
            if (!(i in coordinateCache)) {
              coordinateCache[i] = [];
            }
            var coords = coordinateCache[i];
            if (fn) {
              fn(pixelCoordinates, d, dd, 2, coords);
            } else {
              coords[0] = pixelCoordinates[d];
              coords[1] = pixelCoordinates[d + 1];
              coords.length = 2;
            }
            renderer(coords, state);
            ++i;
            break;
          case Instruction.DRAW_IMAGE:
            d = /** @type {number} */ (instruction[1]);
            dd = /** @type {number} */ (instruction[2]);
            image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */
                (instruction[3]);
            // Remaining arguments in DRAW_IMAGE are in alphabetical order
            anchorX = /** @type {number} */ (instruction[4]);
            anchorY = /** @type {number} */ (instruction[5]);
            declutterGroup = featureCallback ? null : /** @type {import("../canvas.js").DeclutterGroup} */ (instruction[6]);
            var height = /** @type {number} */ (instruction[7]);
            var opacity = /** @type {number} */ (instruction[8]);
            var originX = /** @type {number} */ (instruction[9]);
            var originY = /** @type {number} */ (instruction[10]);
            var rotateWithView = /** @type {boolean} */ (instruction[11]);
            var rotation = /** @type {number} */ (instruction[12]);
            var scale = /** @type {number} */ (instruction[13]);
            var width = /** @type {number} */ (instruction[14]);

            var padding = (void 0), backgroundFill = (void 0), backgroundStroke = (void 0);
            if (instruction.length > 16) {
              padding = /** @type {Array<number>} */ (instruction[15]);
              backgroundFill = /** @type {boolean} */ (instruction[16]);
              backgroundStroke = /** @type {boolean} */ (instruction[17]);
            } else {
              padding = defaultPadding;
              backgroundFill = backgroundStroke = false;
            }

            if (rotateWithView) {
              rotation += viewRotation;
            }
            for (; d < dd; d += 2) {
              this.replayImage_(context,
                pixelCoordinates[d], pixelCoordinates[d + 1], image, anchorX, anchorY,
                declutterGroup, height, opacity, originX, originY, rotation, scale,
                snapToPixel, width, padding,
                backgroundFill ? /** @type {Array<*>} */ (lastFillInstruction) : null,
                backgroundStroke ? /** @type {Array<*>} */ (lastStrokeInstruction) : null);
            }
            this.renderDeclutter_(declutterGroup, feature);
            ++i;
            break;
          case Instruction.DRAW_CHARS:
            var begin = /** @type {number} */ (instruction[1]);
            var end = /** @type {number} */ (instruction[2]);
            var baseline = /** @type {number} */ (instruction[3]);
            declutterGroup = featureCallback ? null : /** @type {import("../canvas.js").DeclutterGroup} */ (instruction[4]);
            var overflow = /** @type {number} */ (instruction[5]);
            var fillKey = /** @type {string} */ (instruction[6]);
            var maxAngle = /** @type {number} */ (instruction[7]);
            var measure = /** @type {function(string):number} */ (instruction[8]);
            var offsetY = /** @type {number} */ (instruction[9]);
            var strokeKey = /** @type {string} */ (instruction[10]);
            var strokeWidth = /** @type {number} */ (instruction[11]);
            var text = /** @type {string} */ (instruction[12]);
            var textKey = /** @type {string} */ (instruction[13]);
            var textScale = /** @type {number} */ (instruction[14]);

            var pathLength = lineStringLength(pixelCoordinates, begin, end, 2);
            var textLength = measure(text);
            if (overflow || textLength <= pathLength) {
              /** @type {import("./TextReplay.js").default} */
              var textReplay = /** @type {?} */ (this);
              var textAlign = textReplay.textStates[textKey].textAlign;
              var startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];
              var parts = drawTextOnPath(
                pixelCoordinates, begin, end, 2, text, measure, startM, maxAngle);
              if (parts) {
                var c = (void 0), cc = (void 0), chars = (void 0), label = (void 0), part = (void 0);
                if (strokeKey) {
                  for (c = 0, cc = parts.length; c < cc; ++c) {
                    part = parts[c]; // x, y, anchorX, rotation, chunk
                    chars = /** @type {string} */ (part[4]);
                    label = textReplay.getImage(chars, textKey, '', strokeKey);
                    anchorX = /** @type {number} */ (part[2]) + strokeWidth;
                    anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth - offsetY;
                    this.replayImage_(context,
                      /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label,
                      anchorX, anchorY, declutterGroup, label.height, 1, 0, 0,
                      /** @type {number} */ (part[3]), textScale, false, label.width,
                      defaultPadding, null, null);
                  }
                }
                if (fillKey) {
                  for (c = 0, cc = parts.length; c < cc; ++c) {
                    part = parts[c]; // x, y, anchorX, rotation, chunk
                    chars = /** @type {string} */ (part[4]);
                    label = textReplay.getImage(chars, textKey, fillKey, '');
                    anchorX = /** @type {number} */ (part[2]);
                    anchorY = baseline * label.height - offsetY;
                    this.replayImage_(context,
                      /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label,
                      anchorX, anchorY, declutterGroup, label.height, 1, 0, 0,
                      /** @type {number} */ (part[3]), textScale, false, label.width,
                      defaultPadding, null, null);
                  }
                }
              }
            }
            this.renderDeclutter_(declutterGroup, feature);
            ++i;
            break;
          case Instruction.END_GEOMETRY:
            if (featureCallback !== undefined) {
              feature = /** @type {import("../../Feature.js").default|import("../Feature.js").default} */ (instruction[1]);
              var result = featureCallback(feature);
              if (result) {
                return result;
              }
            }
            ++i;
            break;
          case Instruction.FILL:
            if (batchSize) {
              pendingFill++;
            } else {
              this.fill_(context);
            }
            ++i;
            break;
          case Instruction.MOVE_TO_LINE_TO:
            d = /** @type {number} */ (instruction[1]);
            dd = /** @type {number} */ (instruction[2]);
            x = pixelCoordinates[d];
            y = pixelCoordinates[d + 1];
            roundX = (x + 0.5) | 0;
            roundY = (y + 0.5) | 0;
            if (roundX !== prevX || roundY !== prevY) {
              context.moveTo(x, y);
              prevX = roundX;
              prevY = roundY;
            }
            for (d += 2; d < dd; d += 2) {
              x = pixelCoordinates[d];
              y = pixelCoordinates[d + 1];
              roundX = (x + 0.5) | 0;
              roundY = (y + 0.5) | 0;
              if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
                context.lineTo(x, y);
                prevX = roundX;
                prevY = roundY;
              }
            }
            ++i;
            break;
          case Instruction.SET_FILL_STYLE:
            lastFillInstruction = instruction;
            this.alignFill_ = instruction[2];

            if (pendingFill) {
              this.fill_(context);
              pendingFill = 0;
              if (pendingStroke) {
                context.stroke();
                pendingStroke = 0;
              }
            }

            context.fillStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
            ++i;
            break;
          case Instruction.SET_STROKE_STYLE:
            lastStrokeInstruction = instruction;
            if (pendingStroke) {
              context.stroke();
              pendingStroke = 0;
            }
            this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));
            ++i;
            break;
          case Instruction.STROKE:
            if (batchSize) {
              pendingStroke++;
            } else {
              context.stroke();
            }
            ++i;
            break;
          default:
            ++i; // consume the instruction anyway, to avoid an infinite loop
            break;
        }
      }
      if (pendingFill) {
        this.fill_(context);
      }
      if (pendingStroke) {
        context.stroke();
      }
      return undefined;
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features
     *     to skip.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     */
    CanvasReplay.prototype.replay = function replay (context, transform, viewRotation, skippedFeaturesHash, snapToPixel) {
      this.viewRotation_ = viewRotation;
      this.replay_(context, transform,
        skippedFeaturesHash, this.instructions, snapToPixel, undefined, undefined);
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features
     *     to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T=} opt_featureCallback
     *     Feature callback.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Only check features that intersect this
     *     extent.
     * @return {T|undefined} Callback result.
     * @template T
     */
    CanvasReplay.prototype.replayHitDetection = function replayHitDetection (
      context,
      transform,
      viewRotation,
      skippedFeaturesHash,
      opt_featureCallback,
      opt_hitExtent
    ) {
      this.viewRotation_ = viewRotation;
      return this.replay_(context, transform, skippedFeaturesHash,
        this.hitDetectionInstructions, true, opt_featureCallback, opt_hitExtent);
    };

    /**
     * Reverse the hit detection instructions.
     */
    CanvasReplay.prototype.reverseHitDetectionInstructions = function reverseHitDetectionInstructions () {
      var hitDetectionInstructions = this.hitDetectionInstructions;
      // step 1 - reverse array
      hitDetectionInstructions.reverse();
      // step 2 - reverse instructions within geometry blocks
      var i;
      var n = hitDetectionInstructions.length;
      var instruction;
      var type;
      var begin = -1;
      for (i = 0; i < n; ++i) {
        instruction = hitDetectionInstructions[i];
        type = /** @type {CanvasInstruction} */ (instruction[0]);
        if (type == Instruction.END_GEOMETRY) {
          begin = i;
        } else if (type == Instruction.BEGIN_GEOMETRY) {
          instruction[2] = i;
          reverseSubArray(this.hitDetectionInstructions, begin, i);
          begin = -1;
        }
      }
    };

    /**
     * @inheritDoc
     */
    CanvasReplay.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {
      var state = this.state;
      if (fillStyle) {
        var fillStyleColor = fillStyle.getColor();
        state.fillStyle = asColorLike(fillStyleColor ?
          fillStyleColor : defaultFillStyle);
      } else {
        state.fillStyle = undefined;
      }
      if (strokeStyle) {
        var strokeStyleColor = strokeStyle.getColor();
        state.strokeStyle = asColorLike(strokeStyleColor ?
          strokeStyleColor : defaultStrokeStyle);
        var strokeStyleLineCap = strokeStyle.getLineCap();
        state.lineCap = strokeStyleLineCap !== undefined ?
          strokeStyleLineCap : defaultLineCap;
        var strokeStyleLineDash = strokeStyle.getLineDash();
        state.lineDash = strokeStyleLineDash ?
          strokeStyleLineDash.slice() : defaultLineDash;
        var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
        state.lineDashOffset = strokeStyleLineDashOffset ?
          strokeStyleLineDashOffset : defaultLineDashOffset;
        var strokeStyleLineJoin = strokeStyle.getLineJoin();
        state.lineJoin = strokeStyleLineJoin !== undefined ?
          strokeStyleLineJoin : defaultLineJoin;
        var strokeStyleWidth = strokeStyle.getWidth();
        state.lineWidth = strokeStyleWidth !== undefined ?
          strokeStyleWidth : defaultLineWidth;
        var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
        state.miterLimit = strokeStyleMiterLimit !== undefined ?
          strokeStyleMiterLimit : defaultMiterLimit;

        if (state.lineWidth > this.maxLineWidth) {
          this.maxLineWidth = state.lineWidth;
          // invalidate the buffered max extent cache
          this.bufferedMaxExtent_ = null;
        }
      } else {
        state.strokeStyle = undefined;
        state.lineCap = undefined;
        state.lineDash = null;
        state.lineDashOffset = undefined;
        state.lineJoin = undefined;
        state.lineWidth = undefined;
        state.miterLimit = undefined;
      }
    };

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry Geometry.
     * @return {Array<*>} Fill instruction.
     */
    CanvasReplay.prototype.createFill = function createFill (state, geometry) {
      var fillStyle = state.fillStyle;
      /** @type {Array<*>} */
      var fillInstruction$$1 = [Instruction.SET_FILL_STYLE, fillStyle];
      if (typeof fillStyle !== 'string') {
        // Fill is a pattern or gradient - align it!
        fillInstruction$$1.push(true);
      }
      return fillInstruction$$1;
    };

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     */
    CanvasReplay.prototype.applyStroke = function applyStroke (state) {
      this.instructions.push(this.createStroke(state));
    };

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @return {Array<*>} Stroke instruction.
     */
    CanvasReplay.prototype.createStroke = function createStroke (state) {
      return [
        Instruction.SET_STROKE_STYLE,
        state.strokeStyle, state.lineWidth * this.pixelRatio, state.lineCap,
        state.lineJoin, state.miterLimit,
        this.applyPixelRatio(state.lineDash), state.lineDashOffset * this.pixelRatio
      ];
    };

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {function(this:CanvasReplay, import("../canvas.js").FillStrokeState, (import("../../geom/Geometry.js").default|import("../Feature.js").default)):Array<*>} createFill Create fill.
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry Geometry.
     */
    CanvasReplay.prototype.updateFillStyle = function updateFillStyle (state, createFill, geometry) {
      var fillStyle = state.fillStyle;
      if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {
        if (fillStyle !== undefined) {
          this.instructions.push(createFill.call(this, state, geometry));
        }
        state.currentFillStyle = fillStyle;
      }
    };

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {function(this:CanvasReplay, import("../canvas.js").FillStrokeState)} applyStroke Apply stroke.
     */
    CanvasReplay.prototype.updateStrokeStyle = function updateStrokeStyle (state, applyStroke) {
      var strokeStyle = state.strokeStyle;
      var lineCap = state.lineCap;
      var lineDash = state.lineDash;
      var lineDashOffset = state.lineDashOffset;
      var lineJoin = state.lineJoin;
      var lineWidth = state.lineWidth;
      var miterLimit = state.miterLimit;
      if (state.currentStrokeStyle != strokeStyle ||
          state.currentLineCap != lineCap ||
          (lineDash != state.currentLineDash && !equals(state.currentLineDash, lineDash)) ||
          state.currentLineDashOffset != lineDashOffset ||
          state.currentLineJoin != lineJoin ||
          state.currentLineWidth != lineWidth ||
          state.currentMiterLimit != miterLimit) {
        if (strokeStyle !== undefined) {
          applyStroke.call(this, state);
        }
        state.currentStrokeStyle = strokeStyle;
        state.currentLineCap = lineCap;
        state.currentLineDash = lineDash;
        state.currentLineDashOffset = lineDashOffset;
        state.currentLineJoin = lineJoin;
        state.currentLineWidth = lineWidth;
        state.currentMiterLimit = miterLimit;
      }
    };

    /**
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry Geometry.
     * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
     */
    CanvasReplay.prototype.endGeometry = function endGeometry (geometry, feature) {
      this.beginGeometryInstruction1_[2] = this.instructions.length;
      this.beginGeometryInstruction1_ = null;
      this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
      this.beginGeometryInstruction2_ = null;
      var endGeometryInstruction = [Instruction.END_GEOMETRY, feature];
      this.instructions.push(endGeometryInstruction);
      this.hitDetectionInstructions.push(endGeometryInstruction);
    };

    /**
     * Get the buffered rendering extent.  Rendering will be clipped to the extent
     * provided to the constructor.  To account for symbolizers that may intersect
     * this extent, we calculate a buffered extent (e.g. based on stroke width).
     * @return {import("../../extent.js").Extent} The buffered rendering extent.
     * @protected
     */
    CanvasReplay.prototype.getBufferedMaxExtent = function getBufferedMaxExtent () {
      if (!this.bufferedMaxExtent_) {
        this.bufferedMaxExtent_ = clone(this.maxExtent);
        if (this.maxLineWidth > 0) {
          var width = this.resolution * (this.maxLineWidth + 1) / 2;
          buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
        }
      }
      return this.bufferedMaxExtent_;
    };

    return CanvasReplay;
  }(VectorContext));

  /**
   * @module ol/render/canvas/ImageReplay
   */

  var CanvasImageReplay = /*@__PURE__*/(function (CanvasReplay$$1) {
    function CanvasImageReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
      CanvasReplay$$1.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);

      /**
       * @private
       * @type {import("../canvas.js").DeclutterGroup}
       */
      this.declutterGroup_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
       */
      this.hitDetectionImage_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
       */
      this.image_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.anchorX_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.anchorY_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.height_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.opacity_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.originX_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.originY_ = undefined;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.rotateWithView_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.scale_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.width_ = undefined;

    }

    if ( CanvasReplay$$1 ) CanvasImageReplay.__proto__ = CanvasReplay$$1;
    CanvasImageReplay.prototype = Object.create( CanvasReplay$$1 && CanvasReplay$$1.prototype );
    CanvasImageReplay.prototype.constructor = CanvasImageReplay;

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     * @return {number} My end.
     */
    CanvasImageReplay.prototype.drawCoordinates_ = function drawCoordinates_ (flatCoordinates, offset, end, stride) {
      return this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
    };

    /**
     * @inheritDoc
     */
    CanvasImageReplay.prototype.drawPoint = function drawPoint (pointGeometry, feature) {
      if (!this.image_) {
        return;
      }
      this.beginGeometry(pointGeometry, feature);
      var flatCoordinates = pointGeometry.getFlatCoordinates();
      var stride = pointGeometry.getStride();
      var myBegin = this.coordinates.length;
      var myEnd = this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
      this.instructions.push([
        Instruction.DRAW_IMAGE, myBegin, myEnd, this.image_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
        this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
        this.scale_ * this.pixelRatio, this.width_
      ]);
      this.hitDetectionInstructions.push([
        Instruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
        this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
        this.scale_, this.width_
      ]);
      this.endGeometry(pointGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasImageReplay.prototype.drawMultiPoint = function drawMultiPoint (multiPointGeometry, feature) {
      if (!this.image_) {
        return;
      }
      this.beginGeometry(multiPointGeometry, feature);
      var flatCoordinates = multiPointGeometry.getFlatCoordinates();
      var stride = multiPointGeometry.getStride();
      var myBegin = this.coordinates.length;
      var myEnd = this.drawCoordinates_(
        flatCoordinates, 0, flatCoordinates.length, stride);
      this.instructions.push([
        Instruction.DRAW_IMAGE, myBegin, myEnd, this.image_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
        this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
        this.scale_ * this.pixelRatio, this.width_
      ]);
      this.hitDetectionInstructions.push([
        Instruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_, this.anchorY_, this.declutterGroup_, this.height_, this.opacity_,
        this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
        this.scale_, this.width_
      ]);
      this.endGeometry(multiPointGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasImageReplay.prototype.finish = function finish () {
      this.reverseHitDetectionInstructions();
      // FIXME this doesn't really protect us against further calls to draw*Geometry
      this.anchorX_ = undefined;
      this.anchorY_ = undefined;
      this.hitDetectionImage_ = null;
      this.image_ = null;
      this.height_ = undefined;
      this.scale_ = undefined;
      this.opacity_ = undefined;
      this.originX_ = undefined;
      this.originY_ = undefined;
      this.rotateWithView_ = undefined;
      this.rotation_ = undefined;
      this.width_ = undefined;
    };

    /**
     * @inheritDoc
     */
    CanvasImageReplay.prototype.setImageStyle = function setImageStyle (imageStyle, declutterGroup) {
      var anchor = imageStyle.getAnchor();
      var size = imageStyle.getSize();
      var hitDetectionImage = imageStyle.getHitDetectionImage(1);
      var image = imageStyle.getImage(1);
      var origin = imageStyle.getOrigin();
      this.anchorX_ = anchor[0];
      this.anchorY_ = anchor[1];
      this.declutterGroup_ = /** @type {import("../canvas.js").DeclutterGroup} */ (declutterGroup);
      this.hitDetectionImage_ = hitDetectionImage;
      this.image_ = image;
      this.height_ = size[1];
      this.opacity_ = imageStyle.getOpacity();
      this.originX_ = origin[0];
      this.originY_ = origin[1];
      this.rotateWithView_ = imageStyle.getRotateWithView();
      this.rotation_ = imageStyle.getRotation();
      this.scale_ = imageStyle.getScale();
      this.width_ = size[0];
    };

    return CanvasImageReplay;
  }(CanvasReplay));

  /**
   * @module ol/render/canvas/LineStringReplay
   */

  var CanvasLineStringReplay = /*@__PURE__*/(function (CanvasReplay$$1) {
    function CanvasLineStringReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
      CanvasReplay$$1.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);
    }

    if ( CanvasReplay$$1 ) CanvasLineStringReplay.__proto__ = CanvasReplay$$1;
    CanvasLineStringReplay.prototype = Object.create( CanvasReplay$$1 && CanvasReplay$$1.prototype );
    CanvasLineStringReplay.prototype.constructor = CanvasLineStringReplay;

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     * @return {number} end.
     */
    CanvasLineStringReplay.prototype.drawFlatCoordinates_ = function drawFlatCoordinates_ (flatCoordinates, offset, end, stride) {
      var myBegin = this.coordinates.length;
      var myEnd = this.appendFlatCoordinates(
        flatCoordinates, offset, end, stride, false, false);
      var moveToLineToInstruction = [Instruction.MOVE_TO_LINE_TO, myBegin, myEnd];
      this.instructions.push(moveToLineToInstruction);
      this.hitDetectionInstructions.push(moveToLineToInstruction);
      return end;
    };

    /**
     * @inheritDoc
     */
    CanvasLineStringReplay.prototype.drawLineString = function drawLineString (lineStringGeometry, feature) {
      var state = this.state;
      var strokeStyle = state.strokeStyle;
      var lineWidth = state.lineWidth;
      if (strokeStyle === undefined || lineWidth === undefined) {
        return;
      }
      this.updateStrokeStyle(state, this.applyStroke);
      this.beginGeometry(lineStringGeometry, feature);
      this.hitDetectionInstructions.push([
        Instruction.SET_STROKE_STYLE,
        state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
        state.miterLimit, state.lineDash, state.lineDashOffset
      ], beginPathInstruction);
      var flatCoordinates = lineStringGeometry.getFlatCoordinates();
      var stride = lineStringGeometry.getStride();
      this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
      this.hitDetectionInstructions.push(strokeInstruction);
      this.endGeometry(lineStringGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasLineStringReplay.prototype.drawMultiLineString = function drawMultiLineString (multiLineStringGeometry, feature) {
      var state = this.state;
      var strokeStyle = state.strokeStyle;
      var lineWidth = state.lineWidth;
      if (strokeStyle === undefined || lineWidth === undefined) {
        return;
      }
      this.updateStrokeStyle(state, this.applyStroke);
      this.beginGeometry(multiLineStringGeometry, feature);
      this.hitDetectionInstructions.push([
        Instruction.SET_STROKE_STYLE,
        state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
        state.miterLimit, state.lineDash, state.lineDashOffset
      ], beginPathInstruction);
      var ends = multiLineStringGeometry.getEnds();
      var flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
      var stride = multiLineStringGeometry.getStride();
      var offset = 0;
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        offset = this.drawFlatCoordinates_(flatCoordinates, offset, ends[i], stride);
      }
      this.hitDetectionInstructions.push(strokeInstruction);
      this.endGeometry(multiLineStringGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasLineStringReplay.prototype.finish = function finish () {
      var state = this.state;
      if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
        this.instructions.push(strokeInstruction);
      }
      this.reverseHitDetectionInstructions();
      this.state = null;
    };

    /**
     * @inheritDoc.
     */
    CanvasLineStringReplay.prototype.applyStroke = function applyStroke (state) {
      if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
        this.instructions.push(strokeInstruction);
        state.lastStroke = this.coordinates.length;
      }
      state.lastStroke = 0;
      CanvasReplay$$1.prototype.applyStroke.call(this, state);
      this.instructions.push(beginPathInstruction);
    };

    return CanvasLineStringReplay;
  }(CanvasReplay));

  /**
   * @module ol/render/canvas/PolygonReplay
   */


  var CanvasPolygonReplay = /*@__PURE__*/(function (CanvasReplay$$1) {
    function CanvasPolygonReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
      CanvasReplay$$1.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);
    }

    if ( CanvasReplay$$1 ) CanvasPolygonReplay.__proto__ = CanvasReplay$$1;
    CanvasPolygonReplay.prototype = Object.create( CanvasReplay$$1 && CanvasReplay$$1.prototype );
    CanvasPolygonReplay.prototype.constructor = CanvasPolygonReplay;

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @private
     * @return {number} End.
     */
    CanvasPolygonReplay.prototype.drawFlatCoordinatess_ = function drawFlatCoordinatess_ (flatCoordinates, offset, ends, stride) {
      var state = this.state;
      var fill = state.fillStyle !== undefined;
      var stroke = state.strokeStyle != undefined;
      var numEnds = ends.length;
      this.instructions.push(beginPathInstruction);
      this.hitDetectionInstructions.push(beginPathInstruction);
      for (var i = 0; i < numEnds; ++i) {
        var end = ends[i];
        var myBegin = this.coordinates.length;
        var myEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, true, !stroke);
        var moveToLineToInstruction = [Instruction.MOVE_TO_LINE_TO, myBegin, myEnd];
        this.instructions.push(moveToLineToInstruction);
        this.hitDetectionInstructions.push(moveToLineToInstruction);
        if (stroke) {
          // Performance optimization: only call closePath() when we have a stroke.
          // Otherwise the ring is closed already (see appendFlatCoordinates above).
          this.instructions.push(closePathInstruction);
          this.hitDetectionInstructions.push(closePathInstruction);
        }
        offset = end;
      }
      if (fill) {
        this.instructions.push(fillInstruction);
        this.hitDetectionInstructions.push(fillInstruction);
      }
      if (stroke) {
        this.instructions.push(strokeInstruction);
        this.hitDetectionInstructions.push(strokeInstruction);
      }
      return offset;
    };

    /**
     * @inheritDoc
     */
    CanvasPolygonReplay.prototype.drawCircle = function drawCircle (circleGeometry, feature) {
      var state = this.state;
      var fillStyle = state.fillStyle;
      var strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_(circleGeometry);
      this.beginGeometry(circleGeometry, feature);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_FILL_STYLE,
          asString(defaultFillStyle)
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
          state.miterLimit, state.lineDash, state.lineDashOffset
        ]);
      }
      var flatCoordinates = circleGeometry.getFlatCoordinates();
      var stride = circleGeometry.getStride();
      var myBegin = this.coordinates.length;
      this.appendFlatCoordinates(
        flatCoordinates, 0, flatCoordinates.length, stride, false, false);
      var circleInstruction = [Instruction.CIRCLE, myBegin];
      this.instructions.push(beginPathInstruction, circleInstruction);
      this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);
      this.hitDetectionInstructions.push(fillInstruction);
      if (state.fillStyle !== undefined) {
        this.instructions.push(fillInstruction);
      }
      if (state.strokeStyle !== undefined) {
        this.instructions.push(strokeInstruction);
        this.hitDetectionInstructions.push(strokeInstruction);
      }
      this.endGeometry(circleGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasPolygonReplay.prototype.drawPolygon = function drawPolygon (polygonGeometry, feature) {
      var state = this.state;
      var fillStyle = state.fillStyle;
      var strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_(polygonGeometry);
      this.beginGeometry(polygonGeometry, feature);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_FILL_STYLE,
          asString(defaultFillStyle)
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
          state.miterLimit, state.lineDash, state.lineDashOffset
        ]);
      }
      var ends = polygonGeometry.getEnds();
      var flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
      var stride = polygonGeometry.getStride();
      this.drawFlatCoordinatess_(flatCoordinates, 0, ends, stride);
      this.endGeometry(polygonGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasPolygonReplay.prototype.drawMultiPolygon = function drawMultiPolygon (multiPolygonGeometry, feature) {
      var state = this.state;
      var fillStyle = state.fillStyle;
      var strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_(multiPolygonGeometry);
      this.beginGeometry(multiPolygonGeometry, feature);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_FILL_STYLE,
          asString(defaultFillStyle)
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          Instruction.SET_STROKE_STYLE,
          state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
          state.miterLimit, state.lineDash, state.lineDashOffset
        ]);
      }
      var endss = multiPolygonGeometry.getEndss();
      var flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
      var stride = multiPolygonGeometry.getStride();
      var offset = 0;
      for (var i = 0, ii = endss.length; i < ii; ++i) {
        offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);
      }
      this.endGeometry(multiPolygonGeometry, feature);
    };

    /**
     * @inheritDoc
     */
    CanvasPolygonReplay.prototype.finish = function finish () {
      this.reverseHitDetectionInstructions();
      this.state = null;
      // We want to preserve topology when drawing polygons.  Polygons are
      // simplified using quantization and point elimination. However, we might
      // have received a mix of quantized and non-quantized geometries, so ensure
      // that all are quantized by quantizing all coordinates in the batch.
      var tolerance = this.tolerance;
      if (tolerance !== 0) {
        var coordinates = this.coordinates;
        for (var i = 0, ii = coordinates.length; i < ii; ++i) {
          coordinates[i] = snap(coordinates[i], tolerance);
        }
      }
    };

    /**
     * @private
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry Geometry.
     */
    CanvasPolygonReplay.prototype.setFillStrokeStyles_ = function setFillStrokeStyles_ (geometry) {
      var state = this.state;
      var fillStyle = state.fillStyle;
      if (fillStyle !== undefined) {
        this.updateFillStyle(state, this.createFill, geometry);
      }
      if (state.strokeStyle !== undefined) {
        this.updateStrokeStyle(state, this.applyStroke);
      }
    };

    return CanvasPolygonReplay;
  }(CanvasReplay));

  /**
   * @module ol/geom/flat/straightchunk
   */


  /**
   * @param {number} maxAngle Maximum acceptable angle delta between segments.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {Array<number>} Start and end of the first suitable chunk of the
   * given `flatCoordinates`.
   */
  function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {
    var chunkStart = offset;
    var chunkEnd = offset;
    var chunkM = 0;
    var m = 0;
    var start = offset;
    var acos, i, m12, m23, x1, y1, x12, y12, x23, y23;
    for (i = offset; i < end; i += stride) {
      var x2 = flatCoordinates[i];
      var y2 = flatCoordinates[i + 1];
      if (x1 !== undefined) {
        x23 = x2 - x1;
        y23 = y2 - y1;
        m23 = Math.sqrt(x23 * x23 + y23 * y23);
        if (x12 !== undefined) {
          m += m12;
          acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));
          if (acos > maxAngle) {
            if (m > chunkM) {
              chunkM = m;
              chunkStart = start;
              chunkEnd = i;
            }
            m = 0;
            start = i - stride;
          }
        }
        m12 = m23;
        x12 = x23;
        y12 = y23;
      }
      x1 = x2;
      y1 = y2;
    }
    m += m23;
    return m > chunkM ? [start, i] : [chunkStart, chunkEnd];
  }

  /**
   * @module ol/style/TextPlacement
   */

  /**
   * Text placement. One of `'point'`, `'line'`. Default is `'point'`. Note that
   * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},
   * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or
   * {@link module:ol/geom/MultiPolygon~MultiPolygon}.
   * @enum {string}
   */
  var TextPlacement = {
    POINT: 'point',
    LINE: 'line'
  };

  /**
   * @module ol/render/canvas/TextReplay
   */

  var CanvasTextReplay = /*@__PURE__*/(function (CanvasReplay$$1) {
    function CanvasTextReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
      CanvasReplay$$1.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);

      /**
       * @private
       * @type {import("../canvas.js").DeclutterGroup}
       */
      this.declutterGroup_;

      /**
       * @private
       * @type {Array<HTMLCanvasElement>}
       */
      this.labels_ = null;

      /**
       * @private
       * @type {string}
       */
      this.text_ = '';

      /**
       * @private
       * @type {number}
       */
      this.textOffsetX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textOffsetY_ = 0;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.textRotateWithView_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.textRotation_ = 0;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.textFillState_ = null;

      /**
       * @type {!Object<string, import("../canvas.js").FillState>}
       */
      this.fillStates = {};

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.textStrokeState_ = null;

      /**
       * @type {!Object<string, import("../canvas.js").StrokeState>}
       */
      this.strokeStates = {};

      /**
       * @private
       * @type {import("../canvas.js").TextState}
       */
      this.textState_ = /** @type {import("../canvas.js").TextState} */ ({});

      /**
       * @type {!Object<string, import("../canvas.js").TextState>}
       */
      this.textStates = {};

      /**
       * @private
       * @type {string}
       */
      this.textKey_ = '';

      /**
       * @private
       * @type {string}
       */
      this.fillKey_ = '';

      /**
       * @private
       * @type {string}
       */
      this.strokeKey_ = '';

      /**
       * @private
       * @type {Object<string, Object<string, number>>}
       */
      this.widths_ = {};

      labelCache.prune();

    }

    if ( CanvasReplay$$1 ) CanvasTextReplay.__proto__ = CanvasReplay$$1;
    CanvasTextReplay.prototype = Object.create( CanvasReplay$$1 && CanvasReplay$$1.prototype );
    CanvasTextReplay.prototype.constructor = CanvasTextReplay;

    /**
     * @inheritDoc
     */
    CanvasTextReplay.prototype.drawText = function drawText (geometry, feature) {
      var fillState = this.textFillState_;
      var strokeState = this.textStrokeState_;
      var textState = this.textState_;
      if (this.text_ === '' || !textState || (!fillState && !strokeState)) {
        return;
      }

      var begin = this.coordinates.length;

      var geometryType = geometry.getType();
      var flatCoordinates = null;
      var end = 2;
      var stride = 2;
      var i, ii;

      if (textState.placement === TextPlacement.LINE) {
        if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {
          return;
        }
        var ends;
        flatCoordinates = geometry.getFlatCoordinates();
        stride = geometry.getStride();
        if (geometryType == GeometryType.LINE_STRING) {
          ends = [flatCoordinates.length];
        } else if (geometryType == GeometryType.MULTI_LINE_STRING) {
          ends = geometry.getEnds();
        } else if (geometryType == GeometryType.POLYGON) {
          ends = geometry.getEnds().slice(0, 1);
        } else if (geometryType == GeometryType.MULTI_POLYGON) {
          var endss = geometry.getEndss();
          ends = [];
          for (i = 0, ii = endss.length; i < ii; ++i) {
            ends.push(endss[i][0]);
          }
        }
        this.beginGeometry(geometry, feature);
        var textAlign = textState.textAlign;
        var flatOffset = 0;
        var flatEnd;
        for (var o = 0, oo = ends.length; o < oo; ++o) {
          if (textAlign == undefined) {
            var range = matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);
            flatOffset = range[0];
            flatEnd = range[1];
          } else {
            flatEnd = ends[o];
          }
          for (i = flatOffset; i < flatEnd; i += stride) {
            this.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);
          }
          end = this.coordinates.length;
          flatOffset = ends[o];
          this.drawChars_(begin, end, this.declutterGroup_);
          begin = end;
        }
        this.endGeometry(geometry, feature);

      } else {
        var label = this.getImage(this.text_, this.textKey_, this.fillKey_, this.strokeKey_);
        var width = label.width / this.pixelRatio;
        switch (geometryType) {
          case GeometryType.POINT:
          case GeometryType.MULTI_POINT:
            flatCoordinates = geometry.getFlatCoordinates();
            end = flatCoordinates.length;
            break;
          case GeometryType.LINE_STRING:
            flatCoordinates = /** @type {import("../../geom/LineString.js").default} */ (geometry).getFlatMidpoint();
            break;
          case GeometryType.CIRCLE:
            flatCoordinates = /** @type {import("../../geom/Circle.js").default} */ (geometry).getCenter();
            break;
          case GeometryType.MULTI_LINE_STRING:
            flatCoordinates = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry).getFlatMidpoints();
            end = flatCoordinates.length;
            break;
          case GeometryType.POLYGON:
            flatCoordinates = /** @type {import("../../geom/Polygon.js").default} */ (geometry).getFlatInteriorPoint();
            if (!textState.overflow && flatCoordinates[2] / this.resolution < width) {
              return;
            }
            stride = 3;
            break;
          case GeometryType.MULTI_POLYGON:
            var interiorPoints = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getFlatInteriorPoints();
            flatCoordinates = [];
            for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {
              if (textState.overflow || interiorPoints[i + 2] / this.resolution >= width) {
                flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
              }
            }
            end = flatCoordinates.length;
            if (end == 0) {
              return;
            }
            break;
          default:
        }
        end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);
        if (textState.backgroundFill || textState.backgroundStroke) {
          this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);
          if (textState.backgroundFill) {
            this.updateFillStyle(this.state, this.createFill, geometry);
            this.hitDetectionInstructions.push(this.createFill(this.state, geometry));
          }
          if (textState.backgroundStroke) {
            this.updateStrokeStyle(this.state, this.applyStroke);
            this.hitDetectionInstructions.push(this.createStroke(this.state));
          }
        }
        this.beginGeometry(geometry, feature);
        this.drawTextImage_(label, begin, end);
        this.endGeometry(geometry, feature);
      }
    };

    /**
     * @param {string} text Text.
     * @param {string} textKey Text style key.
     * @param {string} fillKey Fill style key.
     * @param {string} strokeKey Stroke style key.
     * @return {HTMLCanvasElement} Image.
     */
    CanvasTextReplay.prototype.getImage = function getImage (text, textKey, fillKey, strokeKey) {
      var label;
      var key = strokeKey + textKey + text + fillKey + this.pixelRatio;

      if (!labelCache.containsKey(key)) {
        var strokeState = strokeKey ? this.strokeStates[strokeKey] || this.textStrokeState_ : null;
        var fillState = fillKey ? this.fillStates[fillKey] || this.textFillState_ : null;
        var textState = this.textStates[textKey] || this.textState_;
        var pixelRatio = this.pixelRatio;
        var scale = textState.scale * pixelRatio;
        var align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];
        var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;

        var lines = text.split('\n');
        var numLines = lines.length;
        var widths = [];
        var width = measureTextWidths(textState.font, lines, widths);
        var lineHeight = measureTextHeight(textState.font);
        var height = lineHeight * numLines;
        var renderWidth = (width + strokeWidth);
        var context = createCanvasContext2D(
          Math.ceil(renderWidth * scale),
          Math.ceil((height + strokeWidth) * scale));
        label = context.canvas;
        labelCache.set(key, label);
        if (scale != 1) {
          context.scale(scale, scale);
        }
        context.font = textState.font;
        if (strokeKey) {
          context.strokeStyle = strokeState.strokeStyle;
          context.lineWidth = strokeWidth;
          context.lineCap = /** @type {CanvasLineCap} */ (strokeState.lineCap);
          context.lineJoin = /** @type {CanvasLineJoin} */ (strokeState.lineJoin);
          context.miterLimit = strokeState.miterLimit;
          if (CANVAS_LINE_DASH && strokeState.lineDash.length) {
            context.setLineDash(strokeState.lineDash);
            context.lineDashOffset = strokeState.lineDashOffset;
          }
        }
        if (fillKey) {
          context.fillStyle = fillState.fillStyle;
        }
        context.textBaseline = 'middle';
        context.textAlign = 'center';
        var leftRight = (0.5 - align);
        var x = align * label.width / scale + leftRight * strokeWidth;
        var i;
        if (strokeKey) {
          for (i = 0; i < numLines; ++i) {
            context.strokeText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);
          }
        }
        if (fillKey) {
          for (i = 0; i < numLines; ++i) {
            context.fillText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);
          }
        }
      }
      return labelCache.get(key);
    };

    /**
     * @private
     * @param {HTMLCanvasElement} label Label.
     * @param {number} begin Begin.
     * @param {number} end End.
     */
    CanvasTextReplay.prototype.drawTextImage_ = function drawTextImage_ (label, begin, end) {
      var textState = this.textState_;
      var strokeState = this.textStrokeState_;
      var pixelRatio = this.pixelRatio;
      var align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];
      var baseline = TEXT_ALIGN[textState.textBaseline];
      var strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;

      var anchorX = align * label.width / pixelRatio + 2 * (0.5 - align) * strokeWidth;
      var anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;
      this.instructions.push([Instruction.DRAW_IMAGE, begin, end,
        label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio,
        this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_,
        1, label.width,
        textState.padding == defaultPadding ?
          defaultPadding : textState.padding.map(function(p) {
            return p * pixelRatio;
          }),
        !!textState.backgroundFill, !!textState.backgroundStroke
      ]);
      this.hitDetectionInstructions.push([Instruction.DRAW_IMAGE, begin, end,
        label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio,
        this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_,
        1 / pixelRatio, label.width, textState.padding,
        !!textState.backgroundFill, !!textState.backgroundStroke
      ]);
    };

    /**
     * @private
     * @param {number} begin Begin.
     * @param {number} end End.
     * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
     */
    CanvasTextReplay.prototype.drawChars_ = function drawChars_ (begin, end, declutterGroup) {
      var strokeState = this.textStrokeState_;
      var textState = this.textState_;
      var fillState = this.textFillState_;

      var strokeKey = this.strokeKey_;
      if (strokeState) {
        if (!(strokeKey in this.strokeStates)) {
          this.strokeStates[strokeKey] = /** @type {import("../canvas.js").StrokeState} */ ({
            strokeStyle: strokeState.strokeStyle,
            lineCap: strokeState.lineCap,
            lineDashOffset: strokeState.lineDashOffset,
            lineWidth: strokeState.lineWidth,
            lineJoin: strokeState.lineJoin,
            miterLimit: strokeState.miterLimit,
            lineDash: strokeState.lineDash
          });
        }
      }
      var textKey = this.textKey_;
      if (!(this.textKey_ in this.textStates)) {
        this.textStates[this.textKey_] = /** @type {import("../canvas.js").TextState} */ ({
          font: textState.font,
          textAlign: textState.textAlign || defaultTextAlign,
          scale: textState.scale
        });
      }
      var fillKey = this.fillKey_;
      if (fillState) {
        if (!(fillKey in this.fillStates)) {
          this.fillStates[fillKey] = /** @type {import("../canvas.js").FillState} */ ({
            fillStyle: fillState.fillStyle
          });
        }
      }

      var pixelRatio = this.pixelRatio;
      var baseline = TEXT_ALIGN[textState.textBaseline];

      var offsetY = this.textOffsetY_ * pixelRatio;
      var text = this.text_;
      var font = textState.font;
      var textScale = textState.scale;
      var strokeWidth = strokeState ? strokeState.lineWidth * textScale / 2 : 0;
      var widths = this.widths_[font];
      if (!widths) {
        this.widths_[font] = widths = {};
      }
      this.instructions.push([Instruction.DRAW_CHARS,
        begin, end, baseline, declutterGroup,
        textState.overflow, fillKey, textState.maxAngle,
        function(text) {
          var width = widths[text];
          if (!width) {
            width = widths[text] = measureTextWidth(font, text);
          }
          return width * textScale * pixelRatio;
        },
        offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1
      ]);
      this.hitDetectionInstructions.push([Instruction.DRAW_CHARS,
        begin, end, baseline, declutterGroup,
        textState.overflow, fillKey, textState.maxAngle,
        function(text) {
          var width = widths[text];
          if (!width) {
            width = widths[text] = measureTextWidth(font, text);
          }
          return width * textScale;
        },
        offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio
      ]);
    };

    /**
     * @inheritDoc
     */
    CanvasTextReplay.prototype.setTextStyle = function setTextStyle (textStyle, declutterGroup) {
      var textState, fillState, strokeState;
      if (!textStyle) {
        this.text_ = '';
      } else {
        this.declutterGroup_ = /** @type {import("../canvas.js").DeclutterGroup} */ (declutterGroup);

        var textFillStyle = textStyle.getFill();
        if (!textFillStyle) {
          fillState = this.textFillState_ = null;
        } else {
          fillState = this.textFillState_;
          if (!fillState) {
            fillState = this.textFillState_ = /** @type {import("../canvas.js").FillState} */ ({});
          }
          fillState.fillStyle = asColorLike(
            textFillStyle.getColor() || defaultFillStyle);
        }

        var textStrokeStyle = textStyle.getStroke();
        if (!textStrokeStyle) {
          strokeState = this.textStrokeState_ = null;
        } else {
          strokeState = this.textStrokeState_;
          if (!strokeState) {
            strokeState = this.textStrokeState_ = /** @type {import("../canvas.js").StrokeState} */ ({});
          }
          var lineDash = textStrokeStyle.getLineDash();
          var lineDashOffset = textStrokeStyle.getLineDashOffset();
          var lineWidth = textStrokeStyle.getWidth();
          var miterLimit = textStrokeStyle.getMiterLimit();
          strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;
          strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;
          strokeState.lineDashOffset =
              lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;
          strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;
          strokeState.lineWidth =
              lineWidth === undefined ? defaultLineWidth : lineWidth;
          strokeState.miterLimit =
              miterLimit === undefined ? defaultMiterLimit : miterLimit;
          strokeState.strokeStyle = asColorLike(
            textStrokeStyle.getColor() || defaultStrokeStyle);
        }

        textState = this.textState_;
        var font = textStyle.getFont() || defaultFont;
        checkFont(font);
        var textScale = textStyle.getScale();
        textState.overflow = textStyle.getOverflow();
        textState.font = font;
        textState.maxAngle = textStyle.getMaxAngle();
        textState.placement = textStyle.getPlacement();
        textState.textAlign = textStyle.getTextAlign();
        textState.textBaseline = textStyle.getTextBaseline() || defaultTextBaseline;
        textState.backgroundFill = textStyle.getBackgroundFill();
        textState.backgroundStroke = textStyle.getBackgroundStroke();
        textState.padding = textStyle.getPadding() || defaultPadding;
        textState.scale = textScale === undefined ? 1 : textScale;

        var textOffsetX = textStyle.getOffsetX();
        var textOffsetY = textStyle.getOffsetY();
        var textRotateWithView = textStyle.getRotateWithView();
        var textRotation = textStyle.getRotation();
        this.text_ = textStyle.getText() || '';
        this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
        this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
        this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;
        this.textRotation_ = textRotation === undefined ? 0 : textRotation;

        this.strokeKey_ = strokeState ?
          (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : getUid(strokeState.strokeStyle)) +
          strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth +
          strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' :
          '';
        this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?');
        this.fillKey_ = fillState ?
          (typeof fillState.fillStyle == 'string' ? fillState.fillStyle : ('|' + getUid(fillState.fillStyle))) :
          '';
      }
    };

    return CanvasTextReplay;
  }(CanvasReplay));


  /**
   * @param {string} font Font to use for measuring.
   * @param {Array<string>} lines Lines to measure.
   * @param {Array<number>} widths Array will be populated with the widths of
   * each line.
   * @return {number} Width of the whole text.
   */
  function measureTextWidths(font, lines, widths) {
    var numLines = lines.length;
    var width = 0;
    for (var i = 0; i < numLines; ++i) {
      var currentWidth = measureTextWidth(font, lines[i]);
      width = Math.max(width, currentWidth);
      widths.push(currentWidth);
    }
    return width;
  }

  /**
   * @module ol/render/canvas/ReplayGroup
   */


  /**
   * @type {Object<ReplayType, typeof CanvasReplay>}
   */
  var BATCH_CONSTRUCTORS = {
    'Circle': CanvasPolygonReplay,
    'Default': CanvasReplay,
    'Image': CanvasImageReplay,
    'LineString': CanvasLineStringReplay,
    'Polygon': CanvasPolygonReplay,
    'Text': CanvasTextReplay
  };


  var CanvasReplayGroup = /*@__PURE__*/(function (ReplayGroup$$1) {
    function CanvasReplayGroup(
      tolerance,
      maxExtent,
      resolution,
      pixelRatio,
      overlaps,
      declutterTree,
      opt_renderBuffer
    ) {
      ReplayGroup$$1.call(this);

      /**
       * Declutter tree.
       * @private
       */
      this.declutterTree_ = declutterTree;

      /**
       * @type {import("../canvas.js").DeclutterGroup}
       * @private
       */
      this.declutterGroup_ = null;

      /**
       * @private
       * @type {number}
       */
      this.tolerance_ = tolerance;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent_ = maxExtent;

      /**
       * @private
       * @type {boolean}
       */
      this.overlaps_ = overlaps;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.resolution_ = resolution;

      /**
       * @private
       * @type {number|undefined}
       */
      this.renderBuffer_ = opt_renderBuffer;

      /**
       * @private
       * @type {!Object<string, !Object<ReplayType, CanvasReplay>>}
       */
      this.replaysByZIndex_ = {};

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.hitDetectionContext_ = createCanvasContext2D(1, 1);

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.hitDetectionTransform_ = create();
    }

    if ( ReplayGroup$$1 ) CanvasReplayGroup.__proto__ = ReplayGroup$$1;
    CanvasReplayGroup.prototype = Object.create( ReplayGroup$$1 && ReplayGroup$$1.prototype );
    CanvasReplayGroup.prototype.constructor = CanvasReplayGroup;

    /**
     * @inheritDoc
     */
    CanvasReplayGroup.prototype.addDeclutter = function addDeclutter (group) {
      var declutter = null;
      if (this.declutterTree_) {
        if (group) {
          declutter = this.declutterGroup_;
          /** @type {number} */ (declutter[4])++;
        } else {
          declutter = this.declutterGroup_ = createEmpty();
          declutter.push(1);
        }
      }
      return declutter;
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     */
    CanvasReplayGroup.prototype.clip = function clip (context, transform) {
      var flatClipCoords = this.getClipCoords(transform);
      context.beginPath();
      context.moveTo(flatClipCoords[0], flatClipCoords[1]);
      context.lineTo(flatClipCoords[2], flatClipCoords[3]);
      context.lineTo(flatClipCoords[4], flatClipCoords[5]);
      context.lineTo(flatClipCoords[6], flatClipCoords[7]);
      context.clip();
    };

    /**
     * @param {Array<ReplayType>} replays Replays.
     * @return {boolean} Has replays of the provided types.
     */
    CanvasReplayGroup.prototype.hasReplays = function hasReplays (replays) {
      for (var zIndex in this.replaysByZIndex_) {
        var candidates = this.replaysByZIndex_[zIndex];
        for (var i = 0, ii = replays.length; i < ii; ++i) {
          if (replays[i] in candidates) {
            return true;
          }
        }
      }
      return false;
    };

    /**
     * FIXME empty description for jsdoc
     */
    CanvasReplayGroup.prototype.finish = function finish () {
      for (var zKey in this.replaysByZIndex_) {
        var replays = this.replaysByZIndex_[zKey];
        for (var replayKey in replays) {
          replays[replayKey].finish();
        }
      }
    };

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T} callback Feature callback.
     * @param {Object<string, import("../canvas.js").DeclutterGroup>} declutterReplays Declutter replays.
     * @return {T|undefined} Callback result.
     * @template T
     */
    CanvasReplayGroup.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (
      coordinate,
      resolution,
      rotation,
      hitTolerance,
      skippedFeaturesHash,
      callback,
      declutterReplays
    ) {

      hitTolerance = Math.round(hitTolerance);
      var contextSize = hitTolerance * 2 + 1;
      var transform = compose(this.hitDetectionTransform_,
        hitTolerance + 0.5, hitTolerance + 0.5,
        1 / resolution, -1 / resolution,
        -rotation,
        -coordinate[0], -coordinate[1]);
      var context = this.hitDetectionContext_;

      if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {
        context.canvas.width = contextSize;
        context.canvas.height = contextSize;
      } else {
        context.clearRect(0, 0, contextSize, contextSize);
      }

      /**
       * @type {import("../../extent.js").Extent}
       */
      var hitExtent;
      if (this.renderBuffer_ !== undefined) {
        hitExtent = createEmpty();
        extendCoordinate(hitExtent, coordinate);
        buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);
      }

      var mask = getCircleArray(hitTolerance);
      var declutteredFeatures;
      if (this.declutterTree_) {
        declutteredFeatures = this.declutterTree_.all().map(function(entry) {
          return entry.value;
        });
      }

      var replayType;

      /**
       * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
       * @return {?} Callback result.
       */
      function featureCallback(feature) {
        var imageData = context.getImageData(0, 0, contextSize, contextSize).data;
        for (var i = 0; i < contextSize; i++) {
          for (var j = 0; j < contextSize; j++) {
            if (mask[i][j]) {
              if (imageData[(j * contextSize + i) * 4 + 3] > 0) {
                var result = (void 0);
                if (!(declutteredFeatures && (replayType == ReplayType.IMAGE || replayType == ReplayType.TEXT)) ||
                    declutteredFeatures.indexOf(feature) !== -1) {
                  result = callback(feature);
                }
                if (result) {
                  return result;
                } else {
                  context.clearRect(0, 0, contextSize, contextSize);
                  return undefined;
                }
              }
            }
          }
        }
      }

      /** @type {Array<number>} */
      var zs = Object.keys(this.replaysByZIndex_).map(Number);
      zs.sort(numberSafeCompareFunction);

      var i, j, replays, replay, result;
      for (i = zs.length - 1; i >= 0; --i) {
        var zIndexKey = zs[i].toString();
        replays = this.replaysByZIndex_[zIndexKey];
        for (j = ORDER.length - 1; j >= 0; --j) {
          replayType = ORDER[j];
          replay = replays[replayType];
          if (replay !== undefined) {
            if (declutterReplays &&
                (replayType == ReplayType.IMAGE || replayType == ReplayType.TEXT)) {
              var declutter = declutterReplays[zIndexKey];
              if (!declutter) {
                declutterReplays[zIndexKey] = [replay, transform.slice(0)];
              } else {
                declutter.push(replay, transform.slice(0));
              }
            } else {
              result = replay.replayHitDetection(context, transform, rotation,
                skippedFeaturesHash, featureCallback, hitExtent);
              if (result) {
                return result;
              }
            }
          }
        }
      }
      return undefined;
    };

    /**
     * @param {import("../../transform.js").Transform} transform Transform.
     * @return {Array<number>} Clip coordinates.
     */
    CanvasReplayGroup.prototype.getClipCoords = function getClipCoords (transform) {
      var maxExtent = this.maxExtent_;
      var minX = maxExtent[0];
      var minY = maxExtent[1];
      var maxX = maxExtent[2];
      var maxY = maxExtent[3];
      var flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];
      transform2D(
        flatClipCoords, 0, 8, 2, transform, flatClipCoords);
      return flatClipCoords;
    };

    /**
     * @inheritDoc
     */
    CanvasReplayGroup.prototype.getReplay = function getReplay (zIndex, replayType) {
      var zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
      var replays = this.replaysByZIndex_[zIndexKey];
      if (replays === undefined) {
        replays = {};
        this.replaysByZIndex_[zIndexKey] = replays;
      }
      var replay = replays[replayType];
      if (replay === undefined) {
        var Constructor = BATCH_CONSTRUCTORS[replayType];
        replay = new Constructor(this.tolerance_, this.maxExtent_,
          this.resolution_, this.pixelRatio_, this.overlaps_, this.declutterTree_);
        replays[replayType] = replay;
      }
      return replay;
    };

    /**
     * @return {Object<string, Object<ReplayType, CanvasReplay>>} Replays.
     */
    CanvasReplayGroup.prototype.getReplays = function getReplays () {
      return this.replaysByZIndex_;
    };

    /**
     * @inheritDoc
     */
    CanvasReplayGroup.prototype.isEmpty = function isEmpty$1$$1 () {
      return isEmpty(this.replaysByZIndex_);
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
     * @param {Array<ReplayType>=} opt_replayTypes Ordered replay types to replay.
     *     Default is {@link module:ol/render/replay~ORDER}
     * @param {Object<string, import("../canvas.js").DeclutterGroup>=} opt_declutterReplays Declutter replays.
     */
    CanvasReplayGroup.prototype.replay = function replay (
      context,
      transform,
      viewRotation,
      skippedFeaturesHash,
      snapToPixel,
      opt_replayTypes,
      opt_declutterReplays
    ) {

      /** @type {Array<number>} */
      var zs = Object.keys(this.replaysByZIndex_).map(Number);
      zs.sort(numberSafeCompareFunction);

      // setup clipping so that the parts of over-simplified geometries are not
      // visible outside the current extent when panning
      context.save();
      this.clip(context, transform);

      var replayTypes = opt_replayTypes ? opt_replayTypes : ORDER;
      var i, ii, j, jj, replays, replay;
      for (i = 0, ii = zs.length; i < ii; ++i) {
        var zIndexKey = zs[i].toString();
        replays = this.replaysByZIndex_[zIndexKey];
        for (j = 0, jj = replayTypes.length; j < jj; ++j) {
          var replayType = replayTypes[j];
          replay = replays[replayType];
          if (replay !== undefined) {
            if (opt_declutterReplays &&
                (replayType == ReplayType.IMAGE || replayType == ReplayType.TEXT)) {
              var declutter = opt_declutterReplays[zIndexKey];
              if (!declutter) {
                opt_declutterReplays[zIndexKey] = [replay, transform.slice(0)];
              } else {
                declutter.push(replay, transform.slice(0));
              }
            } else {
              replay.replay(context, transform, viewRotation, skippedFeaturesHash, snapToPixel);
            }
          }
        }
      }

      context.restore();
    };

    return CanvasReplayGroup;
  }(ReplayGroup));


  /**
   * This cache is used for storing calculated pixel circles for increasing performance.
   * It is a static property to allow each Replaygroup to access it.
   * @type {Object<number, Array<Array<(boolean|undefined)>>>}
   */
  var circleArrayCache = {
    0: [[true]]
  };


  /**
   * This method fills a row in the array from the given coordinate to the
   * middle with `true`.
   * @param {Array<Array<(boolean|undefined)>>} array The array that will be altered.
   * @param {number} x X coordinate.
   * @param {number} y Y coordinate.
   */
  function fillCircleArrayRowToMiddle(array, x, y) {
    var i;
    var radius = Math.floor(array.length / 2);
    if (x >= radius) {
      for (i = radius; i < x; i++) {
        array[i][y] = true;
      }
    } else if (x < radius) {
      for (i = x + 1; i < radius; i++) {
        array[i][y] = true;
      }
    }
  }


  /**
   * This methods creates a circle inside a fitting array. Points inside the
   * circle are marked by true, points on the outside are undefined.
   * It uses the midpoint circle algorithm.
   * A cache is used to increase performance.
   * @param {number} radius Radius.
   * @returns {Array<Array<(boolean|undefined)>>} An array with marked circle points.
   */
  function getCircleArray(radius) {
    if (circleArrayCache[radius] !== undefined) {
      return circleArrayCache[radius];
    }

    var arraySize = radius * 2 + 1;
    var arr = new Array(arraySize);
    for (var i = 0; i < arraySize; i++) {
      arr[i] = new Array(arraySize);
    }

    var x = radius;
    var y = 0;
    var error = 0;

    while (x >= y) {
      fillCircleArrayRowToMiddle(arr, radius + x, radius + y);
      fillCircleArrayRowToMiddle(arr, radius + y, radius + x);
      fillCircleArrayRowToMiddle(arr, radius - y, radius + x);
      fillCircleArrayRowToMiddle(arr, radius - x, radius + y);
      fillCircleArrayRowToMiddle(arr, radius - x, radius - y);
      fillCircleArrayRowToMiddle(arr, radius - y, radius - x);
      fillCircleArrayRowToMiddle(arr, radius + y, radius - x);
      fillCircleArrayRowToMiddle(arr, radius + x, radius - y);

      y++;
      error += 1 + 2 * y;
      if (2 * (error - x) + 1 > 0) {
        x -= 1;
        error += 1 - 2 * x;
      }
    }

    circleArrayCache[radius] = arr;
    return arr;
  }


  /**
   * @param {!Object<string, Array<*>>} declutterReplays Declutter replays.
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} rotation Rotation.
   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
   */
  function replayDeclutter(declutterReplays, context, rotation, snapToPixel) {
    var zs = Object.keys(declutterReplays).map(Number).sort(numberSafeCompareFunction);
    var skippedFeatureUids = {};
    for (var z = 0, zz = zs.length; z < zz; ++z) {
      var replayData = declutterReplays[zs[z].toString()];
      for (var i = 0, ii = replayData.length; i < ii;) {
        var replay = replayData[i++];
        var transform = replayData[i++];
        replay.replay(context, transform, rotation, skippedFeatureUids, snapToPixel);
      }
    }
  }

  /**
   * @module ol/renderer/vector
   */


  /**
   * Tolerance for geometry simplification in device pixels.
   * @type {number}
   */
  var SIMPLIFY_TOLERANCE = 0.5;


  /**
   * @const
   * @type {Object<import("../geom/GeometryType.js").default,
   *                function(import("../render/ReplayGroup.js").default, import("../geom/Geometry.js").default,
   *                         import("../style/Style.js").default, Object)>}
   */
  var GEOMETRY_RENDERERS = {
    'Point': renderPointGeometry,
    'LineString': renderLineStringGeometry,
    'Polygon': renderPolygonGeometry,
    'MultiPoint': renderMultiPointGeometry,
    'MultiLineString': renderMultiLineStringGeometry,
    'MultiPolygon': renderMultiPolygonGeometry,
    'GeometryCollection': renderGeometryCollectionGeometry,
    'Circle': renderCircleGeometry
  };


  /**
   * @param {import("../Feature.js").FeatureLike} feature1 Feature 1.
   * @param {import("../Feature.js").FeatureLike} feature2 Feature 2.
   * @return {number} Order.
   */
  function defaultOrder(feature1, feature2) {
    return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);
  }


  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Squared pixel tolerance.
   */
  function getSquaredTolerance(resolution, pixelRatio) {
    var tolerance = getTolerance(resolution, pixelRatio);
    return tolerance * tolerance;
  }


  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Pixel tolerance.
   */
  function getTolerance(resolution, pixelRatio) {
    return SIMPLIFY_TOLERANCE * resolution / pixelRatio;
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/Circle.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   */
  function renderCircleGeometry(replayGroup, geometry, style, feature) {
    var fillStyle = style.getFill();
    var strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
      var circleReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.CIRCLE);
      circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      circleReplay.drawCircle(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {function(this: T, import("../events/Event.js").default)} listener Listener function.
   * @param {T} thisArg Value to use as `this` when executing `listener`.
   * @return {boolean} `true` if style is loading.
   * @template T
   */
  function renderFeature(replayGroup, feature, style, squaredTolerance, listener, thisArg) {
    var loading = false;
    var imageStyle = style.getImage();
    if (imageStyle) {
      var imageState = imageStyle.getImageState();
      if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {
        imageStyle.unlistenImageChange(listener, thisArg);
      } else {
        if (imageState == ImageState.IDLE) {
          imageStyle.load();
        }
        imageState = imageStyle.getImageState();
        imageStyle.listenImageChange(listener, thisArg);
        loading = true;
      }
    }
    renderFeatureInternal(replayGroup, feature, style, squaredTolerance);

    return loading;
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} squaredTolerance Squared tolerance.
   */
  function renderFeatureInternal(replayGroup, feature, style, squaredTolerance) {
    var geometry = style.getGeometryFunction()(feature);
    if (!geometry) {
      return;
    }
    var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);
    var renderer = style.getRenderer();
    if (renderer) {
      renderGeometry(replayGroup, simplifiedGeometry, style, feature);
    } else {
      var geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
      geometryRenderer(replayGroup, simplifiedGeometry, style, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderGeometry(replayGroup, geometry, style, feature) {
    if (geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {
      var geometries = /** @type {import("../geom/GeometryCollection.js").default} */ (geometry).getGeometries();
      for (var i = 0, ii = geometries.length; i < ii; ++i) {
        renderGeometry(replayGroup, geometries[i], style, feature);
      }
      return;
    }
    var replay = replayGroup.getReplay(style.getZIndex(), ReplayType.DEFAULT);
    replay.drawCustom(/** @type {import("../geom/SimpleGeometry.js").default} */ (geometry), feature, style.getRenderer());
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   */
  function renderGeometryCollectionGeometry(replayGroup, geometry, style, feature) {
    var geometries = geometry.getGeometriesArray();
    var i, ii;
    for (i = 0, ii = geometries.length; i < ii; ++i) {
      var geometryRenderer =
          GEOMETRY_RENDERERS[geometries[i].getType()];
      geometryRenderer(replayGroup, geometries[i], style, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderLineStringGeometry(replayGroup, geometry, style, feature) {
    var strokeStyle = style.getStroke();
    if (strokeStyle) {
      var lineStringReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.LINE_STRING);
      lineStringReplay.setFillStrokeStyle(null, strokeStyle);
      lineStringReplay.drawLineString(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderMultiLineStringGeometry(replayGroup, geometry, style, feature) {
    var strokeStyle = style.getStroke();
    if (strokeStyle) {
      var lineStringReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.LINE_STRING);
      lineStringReplay.setFillStrokeStyle(null, strokeStyle);
      lineStringReplay.drawMultiLineString(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   */
  function renderMultiPolygonGeometry(replayGroup, geometry, style, feature) {
    var fillStyle = style.getFill();
    var strokeStyle = style.getStroke();
    if (strokeStyle || fillStyle) {
      var polygonReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.POLYGON);
      polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      polygonReplay.drawMultiPolygon(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderPointGeometry(replayGroup, geometry, style, feature) {
    var imageStyle = style.getImage();
    if (imageStyle) {
      if (imageStyle.getImageState() != ImageState.LOADED) {
        return;
      }
      var imageReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.IMAGE);
      imageReplay.setImageStyle(imageStyle, replayGroup.addDeclutter(false));
      imageReplay.drawPoint(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(!!imageStyle));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderMultiPointGeometry(replayGroup, geometry, style, feature) {
    var imageStyle = style.getImage();
    if (imageStyle) {
      if (imageStyle.getImageState() != ImageState.LOADED) {
        return;
      }
      var imageReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.IMAGE);
      imageReplay.setImageStyle(imageStyle, replayGroup.addDeclutter(false));
      imageReplay.drawMultiPoint(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(!!imageStyle));
      textReplay.drawText(geometry, feature);
    }
  }


  /**
   * @param {import("../render/ReplayGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderPolygonGeometry(replayGroup, geometry, style, feature) {
    var fillStyle = style.getFill();
    var strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
      var polygonReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.POLYGON);
      polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      polygonReplay.drawPolygon(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle) {
      var textReplay = replayGroup.getReplay(style.getZIndex(), ReplayType.TEXT);
      textReplay.setTextStyle(textStyle, replayGroup.addDeclutter(false));
      textReplay.drawText(geometry, feature);
    }
  }

  /**
   * @module ol/renderer/canvas/VectorLayer
   */

  /**
   * @classdesc
   * Canvas renderer for vector layers.
   * @api
   */
  var CanvasVectorLayerRenderer = /*@__PURE__*/(function (CanvasLayerRenderer$$1) {
    function CanvasVectorLayerRenderer(vectorLayer) {

      CanvasLayerRenderer$$1.call(this, vectorLayer);

      /**
       * Declutter tree.
       * @private
       */
      this.declutterTree_ = vectorLayer.getDeclutter() ? rbush_1(9, undefined) : null;

      /**
       * @private
       * @type {boolean}
       */
      this.dirty_ = false;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.renderedResolution_ = NaN;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.renderedExtent_ = createEmpty();

      /**
       * @private
       * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}
       */
      this.renderedRenderOrder_ = null;

      /**
       * @private
       * @type {import("../../render/canvas/ReplayGroup.js").default}
       */
      this.replayGroup_ = null;

      /**
       * A new replay group had to be created by `prepareFrame()`
       * @type {boolean}
       */
      this.replayGroupChanged = true;

      /**
       * @type {CanvasRenderingContext2D}
       */
      this.context = createCanvasContext2D();

      listen(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);

    }

    if ( CanvasLayerRenderer$$1 ) CanvasVectorLayerRenderer.__proto__ = CanvasLayerRenderer$$1;
    CanvasVectorLayerRenderer.prototype = Object.create( CanvasLayerRenderer$$1 && CanvasLayerRenderer$$1.prototype );
    CanvasVectorLayerRenderer.prototype.constructor = CanvasVectorLayerRenderer;

    /**
     * @inheritDoc
     */
    CanvasVectorLayerRenderer.prototype.disposeInternal = function disposeInternal () {
      unlisten(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);
      CanvasLayerRenderer$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     */
    CanvasVectorLayerRenderer.prototype.compose = function compose (context, frameState, layerState) {
      var extent = frameState.extent;
      var pixelRatio = frameState.pixelRatio;
      var skippedFeatureUids = layerState.managed ?
        frameState.skippedFeatureUids : {};
      var viewState = frameState.viewState;
      var projection = viewState.projection;
      var rotation = viewState.rotation;
      var projectionExtent = projection.getExtent();
      var vectorSource = /** @type {import("../../source/Vector.js").default} */ (this.getLayer().getSource());

      var transform = this.getTransform(frameState, 0);

      // clipped rendering if layer extent is set
      var clipExtent = layerState.extent;
      var clipped = clipExtent !== undefined;
      if (clipped) {
        this.clip(context, frameState, /** @type {import("../../extent.js").Extent} */ (clipExtent));
      }
      var replayGroup = this.replayGroup_;
      if (replayGroup && !replayGroup.isEmpty()) {
        if (this.declutterTree_) {
          this.declutterTree_.clear();
        }
        var layer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
        var drawOffsetX = 0;
        var drawOffsetY = 0;
        var replayContext;
        var transparentLayer = layerState.opacity !== 1;
        var hasRenderListeners = layer.hasListener(RenderEventType.RENDER);
        if (transparentLayer || hasRenderListeners) {
          var drawWidth = context.canvas.width;
          var drawHeight = context.canvas.height;
          if (rotation) {
            var drawSize = Math.round(Math.sqrt(drawWidth * drawWidth + drawHeight * drawHeight));
            drawOffsetX = (drawSize - drawWidth) / 2;
            drawOffsetY = (drawSize - drawHeight) / 2;
            drawWidth = drawHeight = drawSize;
          }
          // resize and clear
          this.context.canvas.width = drawWidth;
          this.context.canvas.height = drawHeight;
          replayContext = this.context;
        } else {
          replayContext = context;
        }

        var alpha = replayContext.globalAlpha;
        if (!transparentLayer) {
          // for performance reasons, context.save / context.restore is not used
          // to save and restore the transformation matrix and the opacity.
          // see http://jsperf.com/context-save-restore-versus-variable
          replayContext.globalAlpha = layerState.opacity;
        }

        if (replayContext != context) {
          replayContext.translate(drawOffsetX, drawOffsetY);
        }

        var viewHints = frameState.viewHints;
        var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
        var width = frameState.size[0] * pixelRatio;
        var height = frameState.size[1] * pixelRatio;
        rotateAtOffset(replayContext, -rotation,
          width / 2, height / 2);
        replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids, snapToPixel);
        if (vectorSource.getWrapX() && projection.canWrapX() &&
            !containsExtent(projectionExtent, extent)) {
          var startX = extent[0];
          var worldWidth = getWidth(projectionExtent);
          var world = 0;
          var offsetX;
          while (startX < projectionExtent[0]) {
            --world;
            offsetX = worldWidth * world;
            transform = this.getTransform(frameState, offsetX);
            replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids, snapToPixel);
            startX += worldWidth;
          }
          world = 0;
          startX = extent[2];
          while (startX > projectionExtent[2]) {
            ++world;
            offsetX = worldWidth * world;
            transform = this.getTransform(frameState, offsetX);
            replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids, snapToPixel);
            startX -= worldWidth;
          }
        }
        rotateAtOffset(replayContext, rotation,
          width / 2, height / 2);

        if (hasRenderListeners) {
          this.dispatchRenderEvent(replayContext, frameState, transform);
        }
        if (replayContext != context) {
          if (transparentLayer) {
            var mainContextAlpha = context.globalAlpha;
            context.globalAlpha = layerState.opacity;
            context.drawImage(replayContext.canvas, -drawOffsetX, -drawOffsetY);
            context.globalAlpha = mainContextAlpha;
          } else {
            context.drawImage(replayContext.canvas, -drawOffsetX, -drawOffsetY);
          }
          replayContext.translate(-drawOffsetX, -drawOffsetY);
        }

        if (!transparentLayer) {
          replayContext.globalAlpha = alpha;
        }
      }

      if (clipped) {
        context.restore();
      }
    };

    /**
     * @inheritDoc
     */
    CanvasVectorLayerRenderer.prototype.composeFrame = function composeFrame (frameState, layerState, context) {
      var transform = this.getTransform(frameState, 0);
      this.preCompose(context, frameState, transform);
      this.compose(context, frameState, layerState);
      this.postCompose(context, frameState, layerState, transform);
    };

    /**
     * @inheritDoc
     */
    CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (coordinate, frameState, hitTolerance, callback, thisArg) {
      if (!this.replayGroup_) {
        return undefined;
      } else {
        var resolution = frameState.viewState.resolution;
        var rotation = frameState.viewState.rotation;
        var layer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
        /** @type {!Object<string, boolean>} */
        var features = {};
        var result = this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {},
          /**
           * @param {import("../../Feature.js").FeatureLike} feature Feature.
           * @return {?} Callback result.
           */
          function(feature) {
            var key = getUid(feature);
            if (!(key in features)) {
              features[key] = true;
              return callback.call(thisArg, feature, layer);
            }
          }, null);
        return result;
      }
    };

    /**
     * @param {import("../../events/Event.js").default} event Event.
     */
    CanvasVectorLayerRenderer.prototype.handleFontsChanged_ = function handleFontsChanged_ (event) {
      var layer = this.getLayer();
      if (layer.getVisible() && this.replayGroup_) {
        layer.changed();
      }
    };

    /**
     * Handle changes in image style state.
     * @param {import("../../events/Event.js").default} event Image style change event.
     * @private
     */
    CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function handleStyleImageChange_ (event) {
      this.renderIfReadyAndVisible();
    };

    /**
     * @inheritDoc
     */
    CanvasVectorLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState) {
      var vectorLayer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      var vectorSource = /** @type {import("../../source/Vector.js").default} */ (vectorLayer.getSource());

      var animating = frameState.viewHints[ViewHint.ANIMATING];
      var interacting = frameState.viewHints[ViewHint.INTERACTING];
      var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
      var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();

      if (!this.dirty_ && (!updateWhileAnimating && animating) ||
          (!updateWhileInteracting && interacting)) {
        return true;
      }

      var frameStateExtent = frameState.extent;
      var viewState = frameState.viewState;
      var projection = viewState.projection;
      var resolution = viewState.resolution;
      var pixelRatio = frameState.pixelRatio;
      var vectorLayerRevision = vectorLayer.getRevision();
      var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
      var vectorLayerRenderOrder = vectorLayer.getRenderOrder();

      if (vectorLayerRenderOrder === undefined) {
        vectorLayerRenderOrder = defaultOrder;
      }

      var extent = buffer(frameStateExtent,
        vectorLayerRenderBuffer * resolution);
      var projectionExtent = viewState.projection.getExtent();

      if (vectorSource.getWrapX() && viewState.projection.canWrapX() &&
          !containsExtent(projectionExtent, frameState.extent)) {
        // For the replay group, we need an extent that intersects the real world
        // (-180° to +180°). To support geometries in a coordinate range from -540°
        // to +540°, we add at least 1 world width on each side of the projection
        // extent. If the viewport is wider than the world, we need to add half of
        // the viewport width to make sure we cover the whole viewport.
        var worldWidth = getWidth(projectionExtent);
        var gutter = Math.max(getWidth(extent) / 2, worldWidth);
        extent[0] = projectionExtent[0] - gutter;
        extent[2] = projectionExtent[2] + gutter;
      }

      if (!this.dirty_ &&
          this.renderedResolution_ == resolution &&
          this.renderedRevision_ == vectorLayerRevision &&
          this.renderedRenderOrder_ == vectorLayerRenderOrder &&
          containsExtent(this.renderedExtent_, extent)) {
        this.replayGroupChanged = false;
        return true;
      }

      this.replayGroup_ = null;

      this.dirty_ = false;

      var replayGroup = new CanvasReplayGroup(
        getTolerance(resolution, pixelRatio), extent, resolution,
        pixelRatio, vectorSource.getOverlaps(), this.declutterTree_, vectorLayer.getRenderBuffer());
      vectorSource.loadFeatures(extent, resolution, projection);
      /**
       * @param {import("../../Feature.js").default} feature Feature.
       * @this {CanvasVectorLayerRenderer}
       */
      var render = function(feature) {
        var styles;
        var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
        if (styleFunction) {
          styles = styleFunction(feature, resolution);
        }
        if (styles) {
          var dirty = this.renderFeature(
            feature, resolution, pixelRatio, styles, replayGroup);
          this.dirty_ = this.dirty_ || dirty;
        }
      }.bind(this);
      if (vectorLayerRenderOrder) {
        /** @type {Array<import("../../Feature.js").default>} */
        var features = [];
        vectorSource.forEachFeatureInExtent(extent,
          /**
           * @param {import("../../Feature.js").default} feature Feature.
           */
          function(feature) {
            features.push(feature);
          });
        features.sort(vectorLayerRenderOrder);
        for (var i = 0, ii = features.length; i < ii; ++i) {
          render(features[i]);
        }
      } else {
        vectorSource.forEachFeatureInExtent(extent, render);
      }
      replayGroup.finish();

      this.renderedResolution_ = resolution;
      this.renderedRevision_ = vectorLayerRevision;
      this.renderedRenderOrder_ = vectorLayerRenderOrder;
      this.renderedExtent_ = extent;
      this.replayGroup_ = replayGroup;

      this.replayGroupChanged = true;
      return true;
    };

    /**
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
     * @param {import("../../render/canvas/ReplayGroup.js").default} replayGroup Replay group.
     * @return {boolean} `true` if an image is loading.
     */
    CanvasVectorLayerRenderer.prototype.renderFeature = function renderFeature$1 (feature, resolution, pixelRatio, styles, replayGroup) {
      if (!styles) {
        return false;
      }
      var loading = false;
      if (Array.isArray(styles)) {
        for (var i = 0, ii = styles.length; i < ii; ++i) {
          loading = renderFeature(
            replayGroup, feature, styles[i],
            getSquaredTolerance(resolution, pixelRatio),
            this.handleStyleImageChange_, this) || loading;
        }
      } else {
        loading = renderFeature(
          replayGroup, feature, styles,
          getSquaredTolerance(resolution, pixelRatio),
          this.handleStyleImageChange_, this);
      }
      return loading;
    };

    return CanvasVectorLayerRenderer;
  }(CanvasLayerRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  CanvasVectorLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.VECTOR;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {CanvasVectorLayerRenderer} The layer renderer.
   */
  CanvasVectorLayerRenderer['create'] = function(mapRenderer, layer) {
    return new CanvasVectorLayerRenderer(/** @type {import("../../layer/Vector.js").default} */ (layer));
  };

  /**
   * @module ol/layer/VectorTileRenderType
   */

  /**
   * @enum {string}
   * Render mode for vector tiles:
   *  * `'image'`: Vector tiles are rendered as images. Great performance, but
   *    point symbols and texts are always rotated with the view and pixels are
   *    scaled during zoom animations.
   *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels
   *    are scaled during zoom animations. Point symbols and texts are accurately
   *    rendered as vectors and can stay upright on rotated views.
   *  * `'vector'`: Vector tiles are rendered as vectors. Most accurate rendering
   *    even during animations, but slower performance than the other options.
   * @api
   */
  var VectorTileRenderType = {
    IMAGE: 'image',
    HYBRID: 'hybrid',
    VECTOR: 'vector'
  };

  /**
   * @module ol/renderer/canvas/VectorTileLayer
   */


  /**
   * @type {!Object<string, Array<import("../../render/ReplayType.js").default>>}
   */
  var IMAGE_REPLAYS = {
    'image': [ReplayType.POLYGON, ReplayType.CIRCLE,
      ReplayType.LINE_STRING, ReplayType.IMAGE, ReplayType.TEXT],
    'hybrid': [ReplayType.POLYGON, ReplayType.LINE_STRING]
  };


  /**
   * @type {!Object<string, Array<import("../../render/ReplayType.js").default>>}
   */
  var VECTOR_REPLAYS = {
    'image': [ReplayType.DEFAULT],
    'hybrid': [ReplayType.IMAGE, ReplayType.TEXT, ReplayType.DEFAULT],
    'vector': ORDER
  };


  /**
   * @classdesc
   * Canvas renderer for vector tile layers.
   * @api
   */
  var CanvasVectorTileLayerRenderer = /*@__PURE__*/(function (CanvasTileLayerRenderer$$1) {
    function CanvasVectorTileLayerRenderer(layer) {

      CanvasTileLayerRenderer$$1.call(this, layer, true);

      /**
       * Declutter tree.
       * @private
       */
      this.declutterTree_ = layer.getDeclutter() ? rbush_1(9, undefined) : null;

      /**
       * @private
       * @type {boolean}
       */
      this.dirty_ = false;

      /**
       * @private
       * @type {number}
       */
      this.renderedLayerRevision_;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.tmpTransform_ = create();

      var renderMode = layer.getRenderMode();

      // Use lower resolution for pure vector rendering. Closest resolution otherwise.
      this.zDirection = renderMode === VectorTileRenderType.VECTOR ? 1 : 0;

      if (renderMode !== VectorTileRenderType.VECTOR) {
        this.context = createCanvasContext2D();
      }


      listen(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);

    }

    if ( CanvasTileLayerRenderer$$1 ) CanvasVectorTileLayerRenderer.__proto__ = CanvasTileLayerRenderer$$1;
    CanvasVectorTileLayerRenderer.prototype = Object.create( CanvasTileLayerRenderer$$1 && CanvasTileLayerRenderer$$1.prototype );
    CanvasVectorTileLayerRenderer.prototype.constructor = CanvasVectorTileLayerRenderer;

    /**
     * @inheritDoc
     */
    CanvasVectorTileLayerRenderer.prototype.disposeInternal = function disposeInternal () {
      unlisten(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);
      CanvasTileLayerRenderer$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @inheritDoc
     */
    CanvasVectorTileLayerRenderer.prototype.getTile = function getTile (z, x, y, pixelRatio, projection) {
      var tile = CanvasTileLayerRenderer$$1.prototype.getTile.call(this, z, x, y, pixelRatio, projection);
      if (tile.getState() === TileState.LOADED) {
        this.createReplayGroup_(/** @type {import("../../VectorImageTile.js").default} */ (tile), pixelRatio, projection);
        if (this.context) {
          this.renderTileImage_(/** @type {import("../../VectorImageTile.js").default} */ (tile), pixelRatio, projection);
        }
      }
      return tile;
    };

    /**
     * @inheritDoc
     */
    CanvasVectorTileLayerRenderer.prototype.getTileImage = function getTileImage (tile) {
      var tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      return /** @type {import("../../VectorImageTile.js").default} */ (tile).getImage(tileLayer);
    };

    /**
     * @inheritDoc
     */
    CanvasVectorTileLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState) {
      var layer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      var layerRevision = layer.getRevision();
      if (this.renderedLayerRevision_ != layerRevision) {
        this.renderedTiles.length = 0;
      }
      this.renderedLayerRevision_ = layerRevision;
      return CanvasTileLayerRenderer$$1.prototype.prepareFrame.call(this, frameState, layerState);
    };

    /**
     * @param {import("../../VectorImageTile.js").default} tile Tile.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection.js").default} projection Projection.
     * @private
     */
    CanvasVectorTileLayerRenderer.prototype.createReplayGroup_ = function createReplayGroup_ (tile, pixelRatio, projection) {
      var this$1 = this;

      var layer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      var revision = layer.getRevision();
      var renderOrder = /** @type {import("../../render.js").OrderFunction} */ (layer.getRenderOrder()) || null;

      var replayState = tile.getReplayState(layer);
      if (!replayState.dirty && replayState.renderedRevision == revision &&
          replayState.renderedRenderOrder == renderOrder) {
        return;
      }

      var source = /** @type {import("../../source/VectorTile.js").default} */ (layer.getSource());
      var sourceTileGrid = source.getTileGrid();
      var tileGrid = source.getTileGridForProjection(projection);
      var resolution = tileGrid.getResolution(tile.tileCoord[0]);
      var tileExtent = tile.extent;

      var loop = function ( t, tt ) {
        var sourceTile = tile.getTile(tile.tileKeys[t]);
        if (sourceTile.getState() != TileState.LOADED) {
          return;
        }

        var sourceTileCoord = sourceTile.tileCoord;
        var sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
        var sharedExtent = getIntersection(tileExtent, sourceTileExtent);
        var bufferedExtent = equals$2(sourceTileExtent, sharedExtent) ? null :
          buffer(sharedExtent, layer.getRenderBuffer() * resolution, this$1.tmpExtent);
        var tileProjection = sourceTile.getProjection();
        var reproject = false;
        if (!equivalent(projection, tileProjection)) {
          reproject = true;
          sourceTile.setProjection(projection);
        }
        replayState.dirty = false;
        var replayGroup = new CanvasReplayGroup(0, sharedExtent, resolution,
          pixelRatio, source.getOverlaps(), this$1.declutterTree_, layer.getRenderBuffer());
        var squaredTolerance = getSquaredTolerance(resolution, pixelRatio);

        /**
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         * @this {CanvasVectorTileLayerRenderer}
         */
        var render = function(feature) {
          var styles;
          var styleFunction = feature.getStyleFunction() || layer.getStyleFunction();
          if (styleFunction) {
            styles = styleFunction(feature, resolution);
          }
          if (styles) {
            var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup);
            this.dirty_ = this.dirty_ || dirty;
            replayState.dirty = replayState.dirty || dirty;
          }
        };

        var features = sourceTile.getFeatures();
        if (renderOrder && renderOrder !== replayState.renderedRenderOrder) {
          features.sort(renderOrder);
        }
        for (var i = 0, ii = features.length; i < ii; ++i) {
          var feature = features[i];
          if (reproject) {
            if (tileProjection.getUnits() == Units.TILE_PIXELS) {
              // projected tile extent
              tileProjection.setWorldExtent(sourceTileExtent);
              // tile extent in tile pixel space
              tileProjection.setExtent(sourceTile.getExtent());
            }
            feature.getGeometry().transform(tileProjection, projection);
          }
          if (!bufferedExtent || intersects(bufferedExtent, feature.getGeometry().getExtent())) {
            render.call(this$1, feature);
          }
        }
        replayGroup.finish();
        sourceTile.setReplayGroup(layer, tile.tileCoord.toString(), replayGroup);
      };

      for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) loop( t, tt );
      replayState.renderedRevision = revision;
      replayState.renderedRenderOrder = renderOrder;
    };

    /**
     * @inheritDoc
     */
    CanvasVectorTileLayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (coordinate, frameState, hitTolerance, callback, thisArg) {
      var resolution = frameState.viewState.resolution;
      var rotation = frameState.viewState.rotation;
      hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;
      var layer = this.getLayer();
      /** @type {!Object<string, boolean>} */
      var features = {};

      var renderedTiles = /** @type {Array<import("../../VectorImageTile.js").default>} */ (this.renderedTiles);

      var bufferedExtent, found;
      var i, ii;
      for (i = 0, ii = renderedTiles.length; i < ii; ++i) {
        var tile = renderedTiles[i];
        bufferedExtent = buffer(tile.extent, hitTolerance * resolution, bufferedExtent);
        if (!containsCoordinate(bufferedExtent, coordinate)) {
          continue;
        }
        for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) {
          var sourceTile = tile.getTile(tile.tileKeys[t]);
          if (sourceTile.getState() != TileState.LOADED) {
            continue;
          }
          var replayGroup = /** @type {CanvasReplayGroup} */ (sourceTile.getReplayGroup(layer,
            tile.tileCoord.toString()));
          found = found || replayGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {},
            /**
             * @param {import("../../Feature.js").FeatureLike} feature Feature.
             * @return {?} Callback result.
             */
            function(feature) {
              var key = getUid(feature);
              if (!(key in features)) {
                features[key] = true;
                return callback.call(thisArg, feature, layer);
              }
            }, null);
        }
      }
      return found;
    };

    /**
     * @param {import("../../VectorTile.js").default} tile Tile.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @return {import("../../transform.js").Transform} transform Transform.
     * @private
     */
    CanvasVectorTileLayerRenderer.prototype.getReplayTransform_ = function getReplayTransform_ (tile, frameState) {
      var layer = this.getLayer();
      var source = /** @type {import("../../source/VectorTile.js").default} */ (layer.getSource());
      var tileGrid = source.getTileGrid();
      var tileCoord = tile.tileCoord;
      var tileResolution = tileGrid.getResolution(tileCoord[0]);
      var viewState = frameState.viewState;
      var pixelRatio = frameState.pixelRatio;
      var renderResolution = viewState.resolution / pixelRatio;
      var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
      var center = viewState.center;
      var origin = getTopLeft(tileExtent);
      var size = frameState.size;
      var offsetX = Math.round(pixelRatio * size[0] / 2);
      var offsetY = Math.round(pixelRatio * size[1] / 2);
      return compose(this.tmpTransform_,
        offsetX, offsetY,
        tileResolution / renderResolution, tileResolution / renderResolution,
        viewState.rotation,
        (origin[0] - center[0]) / tileResolution,
        (center[1] - origin[1]) / tileResolution);
    };

    /**
     * @param {import("../../events/Event.js").default} event Event.
     */
    CanvasVectorTileLayerRenderer.prototype.handleFontsChanged_ = function handleFontsChanged_ (event) {
      var layer = this.getLayer();
      if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {
        layer.changed();
      }
    };

    /**
     * Handle changes in image style state.
     * @param {import("../../events/Event.js").default} event Image style change event.
     * @private
     */
    CanvasVectorTileLayerRenderer.prototype.handleStyleImageChange_ = function handleStyleImageChange_ (event) {
      this.renderIfReadyAndVisible();
    };

    /**
     * @inheritDoc
     */
    CanvasVectorTileLayerRenderer.prototype.postCompose = function postCompose (context, frameState, layerState) {
      var layer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      var renderMode = layer.getRenderMode();
      if (renderMode != VectorTileRenderType.IMAGE) {
        var declutterReplays = layer.getDeclutter() ? {} : null;
        var source = /** @type {import("../../source/VectorTile.js").default} */ (layer.getSource());
        var replayTypes = VECTOR_REPLAYS[renderMode];
        var pixelRatio = frameState.pixelRatio;
        var rotation = frameState.viewState.rotation;
        var size = frameState.size;
        var offsetX, offsetY;
        if (rotation) {
          offsetX = Math.round(pixelRatio * size[0] / 2);
          offsetY = Math.round(pixelRatio * size[1] / 2);
          rotateAtOffset(context, -rotation, offsetX, offsetY);
        }
        if (declutterReplays) {
          this.declutterTree_.clear();
        }
        var viewHints = frameState.viewHints;
        var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
        var tiles = this.renderedTiles;
        var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
        var clips = [];
        var zs = [];
        for (var i = tiles.length - 1; i >= 0; --i) {
          var tile = /** @type {import("../../VectorImageTile.js").default} */ (tiles[i]);
          if (tile.getState() == TileState.ABORT) {
            continue;
          }
          var tileCoord = tile.tileCoord;
          var worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tile.extent[0];
          var transform$$1 = undefined;
          for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) {
            var sourceTile = tile.getTile(tile.tileKeys[t]);
            if (sourceTile.getState() != TileState.LOADED) {
              continue;
            }
            var replayGroup = /** @type {CanvasReplayGroup} */ (sourceTile.getReplayGroup(layer, tileCoord.toString()));
            if (!replayGroup || !replayGroup.hasReplays(replayTypes)) {
              // sourceTile was not yet loaded when this.createReplayGroup_() was
              // called, or it has no replays of the types we want to render
              continue;
            }
            if (!transform$$1) {
              transform$$1 = this.getTransform(frameState, worldOffset);
            }
            var currentZ = sourceTile.tileCoord[0];
            var currentClip = replayGroup.getClipCoords(transform$$1);
            context.save();
            context.globalAlpha = layerState.opacity;
            // Create a clip mask for regions in this low resolution tile that are
            // already filled by a higher resolution tile
            for (var j = 0, jj = clips.length; j < jj; ++j) {
              var clip = clips[j];
              if (currentZ < zs[j]) {
                context.beginPath();
                // counter-clockwise (outer ring) for current tile
                context.moveTo(currentClip[0], currentClip[1]);
                context.lineTo(currentClip[2], currentClip[3]);
                context.lineTo(currentClip[4], currentClip[5]);
                context.lineTo(currentClip[6], currentClip[7]);
                // clockwise (inner ring) for higher resolution tile
                context.moveTo(clip[6], clip[7]);
                context.lineTo(clip[4], clip[5]);
                context.lineTo(clip[2], clip[3]);
                context.lineTo(clip[0], clip[1]);
                context.clip();
              }
            }
            replayGroup.replay(context, transform$$1, rotation, {}, snapToPixel, replayTypes, declutterReplays);
            context.restore();
            clips.push(currentClip);
            zs.push(currentZ);
          }
        }
        if (declutterReplays) {
          replayDeclutter(declutterReplays, context, rotation, snapToPixel);
        }
        if (rotation) {
          rotateAtOffset(context, rotation,
            /** @type {number} */ (offsetX), /** @type {number} */ (offsetY));
        }
      }
      CanvasTileLayerRenderer$$1.prototype.postCompose.call(this, context, frameState, layerState);
    };

    /**
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
     * @param {import("../../render/canvas/ReplayGroup.js").default} replayGroup Replay group.
     * @return {boolean} `true` if an image is loading.
     */
    CanvasVectorTileLayerRenderer.prototype.renderFeature = function renderFeature$1 (feature, squaredTolerance, styles, replayGroup) {
      if (!styles) {
        return false;
      }
      var loading = false;
      if (Array.isArray(styles)) {
        for (var i = 0, ii = styles.length; i < ii; ++i) {
          loading = renderFeature(
            replayGroup, feature, styles[i], squaredTolerance,
            this.handleStyleImageChange_, this) || loading;
        }
      } else {
        loading = renderFeature(
          replayGroup, feature, styles, squaredTolerance,
          this.handleStyleImageChange_, this);
      }
      return loading;
    };

    /**
     * @param {import("../../VectorImageTile.js").default} tile Tile.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection.js").default} projection Projection.
     * @private
     */
    CanvasVectorTileLayerRenderer.prototype.renderTileImage_ = function renderTileImage_ (tile, pixelRatio, projection) {
      var layer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      var replayState = tile.getReplayState(layer);
      var revision = layer.getRevision();
      var replays = IMAGE_REPLAYS[layer.getRenderMode()];
      if (replays && replayState.renderedTileRevision !== revision) {
        replayState.renderedTileRevision = revision;
        var tileCoord = tile.wrappedTileCoord;
        var z = tileCoord[0];
        var source = /** @type {import("../../source/VectorTile.js").default} */ (layer.getSource());
        var tileGrid = source.getTileGridForProjection(projection);
        var resolution = tileGrid.getResolution(z);
        var context = tile.getContext(layer);
        var size = source.getTilePixelSize(z, pixelRatio, projection);
        context.canvas.width = size[0];
        context.canvas.height = size[1];
        var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
        for (var i = 0, ii = tile.tileKeys.length; i < ii; ++i) {
          var sourceTile = tile.getTile(tile.tileKeys[i]);
          if (sourceTile.getState() != TileState.LOADED) {
            continue;
          }
          var pixelScale = pixelRatio / resolution;
          var transform$$1 = reset(this.tmpTransform_);
          scale$2(transform$$1, pixelScale, -pixelScale);
          translate$1(transform$$1, -tileExtent[0], -tileExtent[3]);
          var replayGroup = /** @type {CanvasReplayGroup} */ (sourceTile.getReplayGroup(layer,
            tile.tileCoord.toString()));
          replayGroup.replay(context, transform$$1, 0, {}, true, replays);
        }
      }
    };

    return CanvasVectorTileLayerRenderer;
  }(CanvasTileLayerRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  CanvasVectorTileLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.VECTOR_TILE;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {CanvasVectorTileLayerRenderer} The layer renderer.
   */
  CanvasVectorTileLayerRenderer['create'] = function(mapRenderer, layer) {
    return new CanvasVectorTileLayerRenderer(/** @type {import("../../layer/VectorTile.js").default} */ (layer));
  };

  /**
   * @module ol/Map
   */

  /**
   * @classdesc
   * The map is the core component of OpenLayers. For a map to render, a view,
   * one or more layers, and a target container are needed:
   *
   *     import Map from 'ol/Map';
   *     import View from 'ol/View';
   *     import TileLayer from 'ol/layer/Tile';
   *     import OSM from 'ol/source/OSM';
   *
   *     var map = new Map({
   *       view: new View({
   *         center: [0, 0],
   *         zoom: 1
   *       }),
   *       layers: [
   *         new TileLayer({
   *           source: new OSM()
   *         })
   *       ],
   *       target: 'map'
   *     });
   *
   * The above snippet creates a map using a {@link module:ol/layer/Tile} to
   * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
   * element with the id `map`.
   *
   * The constructor places a viewport container (with CSS class name
   * `ol-viewport`) in the target element (see `getViewport()`), and then two
   * further elements within the viewport: one with CSS class name
   * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
   * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
   * option of {@link module:ol/Overlay~Overlay} for the difference). The map
   * itself is placed in a further element within the viewport.
   *
   * Layers are stored as a {@link module:ol/Collection~Collection} in
   * layerGroups. A top-level group is provided by the library. This is what is
   * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
   * options are added to this group, and `addLayer` and `removeLayer` change the
   * layer collection in the group. `getLayers` is a convenience function for
   * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}
   * is a subclass of {@link module:ol/layer/Base}, so layers entered in the
   * options or added with `addLayer` can be groups, which can contain further
   * groups, and so on.
   *
   * @fires import("./MapBrowserEvent.js").MapBrowserEvent
   * @fires import("./MapEvent.js").MapEvent
   * @fires module:ol/render/Event~RenderEvent#postcompose
   * @fires module:ol/render/Event~RenderEvent#precompose
   * @api
   */
  var Map = /*@__PURE__*/(function (PluggableMap$$1) {
    function Map(options) {
      options = assign({}, options);
      if (!options.controls) {
        options.controls = defaults();
      }
      if (!options.interactions) {
        options.interactions = defaults$1();
      }

      PluggableMap$$1.call(this, options);
    }

    if ( PluggableMap$$1 ) Map.__proto__ = PluggableMap$$1;
    Map.prototype = Object.create( PluggableMap$$1 && PluggableMap$$1.prototype );
    Map.prototype.constructor = Map;

    Map.prototype.createRenderer = function createRenderer () {
      var renderer = new CanvasMapRenderer(this);
      renderer.registerLayerRenderers([
        CanvasImageLayerRenderer,
        CanvasTileLayerRenderer,
        CanvasVectorLayerRenderer,
        CanvasVectorTileLayerRenderer
      ]);
      return renderer;
    };

    return Map;
  }(PluggableMap));

  /**
   * @module ol/OverlayPositioning
   */

  /**
   * Overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,
   * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
   * `'top-center'`, `'top-right'`
   * @enum {string}
   */
  var OverlayPositioning = {
    BOTTOM_LEFT: 'bottom-left',
    BOTTOM_CENTER: 'bottom-center',
    BOTTOM_RIGHT: 'bottom-right',
    CENTER_LEFT: 'center-left',
    CENTER_CENTER: 'center-center',
    CENTER_RIGHT: 'center-right',
    TOP_LEFT: 'top-left',
    TOP_CENTER: 'top-center',
    TOP_RIGHT: 'top-right'
  };

  /**
   * @module ol/Overlay
   */


  /**
   * @typedef {Object} Options
   * @property {number|string} [id] Set the overlay id. The overlay id can be used
   * with the {@link module:ol/Map~Map#getOverlayById} method.
   * @property {HTMLElement} [element] The overlay element.
   * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning
   * the overlay. The first element in the
   * array is the horizontal offset. A positive value shifts the overlay right.
   * The second element in the array is the vertical offset. A positive value
   * shifts the overlay down.
   * @property {import("./coordinate.js").Coordinate} [position] The overlay position
   * in map projection.
   * @property {OverlayPositioning} [positioning='top-left'] Defines how
   * the overlay is actually positioned with respect to its `position` property.
   * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,
   * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
   * `'top-center'`, and `'top-right'`.
   * @property {boolean} [stopEvent=true] Whether event propagation to the map
   * viewport should be stopped. If `true` the overlay is placed in the same
   * container as that of the controls (CSS class name
   * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container
   * with CSS class name specified by the `className` property.
   * @property {boolean} [insertFirst=true] Whether the overlay is inserted first
   * in the overlay container, or appended. If the overlay is placed in the same
   * container as that of the controls (see the `stopEvent` option) you will
   * probably set `insertFirst` to `true` so the overlay is displayed below the
   * controls.
   * @property {boolean} [autoPan=false] If set to `true` the map is panned when
   * calling `setPosition`, so that the overlay is entirely visible in the current
   * viewport.
   * @property {PanOptions} [autoPanAnimation] The
   * animation options used to pan the overlay into view. This animation is only
   * used when `autoPan` is enabled. A `duration` and `easing` may be provided to
   * customize the animation.
   * @property {number} [autoPanMargin=20] The margin (in pixels) between the
   * overlay and the borders of the map when autopanning.
   * @property {string} [className='ol-overlay-container ol-selectable'] CSS class
   * name.
   */


  /**
   * @typedef {Object} PanOptions
   * @property {number} [duration=1000] The duration of the animation in
   * milliseconds.
   * @property {function(number):number} [easing] The easing function to use. Can
   * be one from {@link module:ol/easing} or a custom function.
   * Default is {@link module:ol/easing~inAndOut}.
   */


  /**
   * @enum {string}
   * @protected
   */
  var Property$3 = {
    ELEMENT: 'element',
    MAP: 'map',
    OFFSET: 'offset',
    POSITION: 'position',
    POSITIONING: 'positioning'
  };


  /**
   * @classdesc
   * An element to be displayed over the map and attached to a single map
   * location.  Like {@link module:ol/control/Control~Control}, Overlays are
   * visible widgets. Unlike Controls, they are not in a fixed position on the
   * screen, but are tied to a geographical coordinate, so panning the map will
   * move an Overlay but not a Control.
   *
   * Example:
   *
   *     import Overlay from 'ol/Overlay';
   *
   *     var popup = new Overlay({
   *       element: document.getElementById('popup')
   *     });
   *     popup.setPosition(coordinate);
   *     map.addOverlay(popup);
   *
   * @api
   */
  var Overlay = /*@__PURE__*/(function (BaseObject$$1) {
    function Overlay(options) {

      BaseObject$$1.call(this);

      /**
       * @protected
       * @type {Options}
       */
      this.options = options;

      /**
       * @protected
       * @type {number|string|undefined}
       */
      this.id = options.id;

      /**
       * @protected
       * @type {boolean}
       */
      this.insertFirst = options.insertFirst !== undefined ?
        options.insertFirst : true;

      /**
       * @protected
       * @type {boolean}
       */
      this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.element = document.createElement('div');
      this.element.className = options.className !== undefined ?
        options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;
      this.element.style.position = 'absolute';

      /**
       * @protected
       * @type {boolean}
       */
      this.autoPan = options.autoPan !== undefined ? options.autoPan : false;

      /**
       * @protected
       * @type {PanOptions}
       */
      this.autoPanAnimation = options.autoPanAnimation || /** @type {PanOptions} */ ({});

      /**
       * @protected
       * @type {number}
       */
      this.autoPanMargin = options.autoPanMargin !== undefined ?
        options.autoPanMargin : 20;

      /**
       * @protected
       * @type {{bottom_: string,
       *         left_: string,
       *         right_: string,
       *         top_: string,
       *         visible: boolean}}
       */
      this.rendered = {
        bottom_: '',
        left_: '',
        right_: '',
        top_: '',
        visible: true
      };

      /**
       * @protected
       * @type {?import("./events.js").EventsKey}
       */
      this.mapPostrenderListenerKey = null;

      listen(
        this, getChangeEventType(Property$3.ELEMENT),
        this.handleElementChanged, this);

      listen(
        this, getChangeEventType(Property$3.MAP),
        this.handleMapChanged, this);

      listen(
        this, getChangeEventType(Property$3.OFFSET),
        this.handleOffsetChanged, this);

      listen(
        this, getChangeEventType(Property$3.POSITION),
        this.handlePositionChanged, this);

      listen(
        this, getChangeEventType(Property$3.POSITIONING),
        this.handlePositioningChanged, this);

      if (options.element !== undefined) {
        this.setElement(options.element);
      }

      this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);

      this.setPositioning(options.positioning !== undefined ?
        /** @type {OverlayPositioning} */ (options.positioning) :
        OverlayPositioning.TOP_LEFT);

      if (options.position !== undefined) {
        this.setPosition(options.position);
      }

    }

    if ( BaseObject$$1 ) Overlay.__proto__ = BaseObject$$1;
    Overlay.prototype = Object.create( BaseObject$$1 && BaseObject$$1.prototype );
    Overlay.prototype.constructor = Overlay;

    /**
     * Get the DOM element of this overlay.
     * @return {HTMLElement|undefined} The Element containing the overlay.
     * @observable
     * @api
     */
    Overlay.prototype.getElement = function getElement () {
      return /** @type {HTMLElement|undefined} */ (this.get(Property$3.ELEMENT));
    };

    /**
     * Get the overlay identifier which is set on constructor.
     * @return {number|string|undefined} Id.
     * @api
     */
    Overlay.prototype.getId = function getId () {
      return this.id;
    };

    /**
     * Get the map associated with this overlay.
     * @return {import("./PluggableMap.js").default|undefined} The map that the
     * overlay is part of.
     * @observable
     * @api
     */
    Overlay.prototype.getMap = function getMap () {
      return (
        /** @type {import("./PluggableMap.js").default|undefined} */ (this.get(Property$3.MAP))
      );
    };

    /**
     * Get the offset of this overlay.
     * @return {Array<number>} The offset.
     * @observable
     * @api
     */
    Overlay.prototype.getOffset = function getOffset () {
      return /** @type {Array<number>} */ (this.get(Property$3.OFFSET));
    };

    /**
     * Get the current position of this overlay.
     * @return {import("./coordinate.js").Coordinate|undefined} The spatial point that the overlay is
     *     anchored at.
     * @observable
     * @api
     */
    Overlay.prototype.getPosition = function getPosition () {
      return (
        /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(Property$3.POSITION))
      );
    };

    /**
     * Get the current positioning of this overlay.
     * @return {OverlayPositioning} How the overlay is positioned
     *     relative to its point on the map.
     * @observable
     * @api
     */
    Overlay.prototype.getPositioning = function getPositioning () {
      return (
        /** @type {OverlayPositioning} */ (this.get(Property$3.POSITIONING))
      );
    };

    /**
     * @protected
     */
    Overlay.prototype.handleElementChanged = function handleElementChanged () {
      removeChildren(this.element);
      var element = this.getElement();
      if (element) {
        this.element.appendChild(element);
      }
    };

    /**
     * @protected
     */
    Overlay.prototype.handleMapChanged = function handleMapChanged () {
      if (this.mapPostrenderListenerKey) {
        removeNode(this.element);
        unlistenByKey(this.mapPostrenderListenerKey);
        this.mapPostrenderListenerKey = null;
      }
      var map = this.getMap();
      if (map) {
        this.mapPostrenderListenerKey = listen(map,
          MapEventType.POSTRENDER, this.render, this);
        this.updatePixelPosition();
        var container = this.stopEvent ?
          map.getOverlayContainerStopEvent() : map.getOverlayContainer();
        if (this.insertFirst) {
          container.insertBefore(this.element, container.childNodes[0] || null);
        } else {
          container.appendChild(this.element);
        }
      }
    };

    /**
     * @protected
     */
    Overlay.prototype.render = function render () {
      this.updatePixelPosition();
    };

    /**
     * @protected
     */
    Overlay.prototype.handleOffsetChanged = function handleOffsetChanged () {
      this.updatePixelPosition();
    };

    /**
     * @protected
     */
    Overlay.prototype.handlePositionChanged = function handlePositionChanged () {
      this.updatePixelPosition();
      if (this.get(Property$3.POSITION) && this.autoPan) {
        this.panIntoView();
      }
    };

    /**
     * @protected
     */
    Overlay.prototype.handlePositioningChanged = function handlePositioningChanged () {
      this.updatePixelPosition();
    };

    /**
     * Set the DOM element to be associated with this overlay.
     * @param {HTMLElement|undefined} element The Element containing the overlay.
     * @observable
     * @api
     */
    Overlay.prototype.setElement = function setElement (element) {
      this.set(Property$3.ELEMENT, element);
    };

    /**
     * Set the map to be associated with this overlay.
     * @param {import("./PluggableMap.js").default|undefined} map The map that the
     * overlay is part of.
     * @observable
     * @api
     */
    Overlay.prototype.setMap = function setMap (map) {
      this.set(Property$3.MAP, map);
    };

    /**
     * Set the offset for this overlay.
     * @param {Array<number>} offset Offset.
     * @observable
     * @api
     */
    Overlay.prototype.setOffset = function setOffset (offset) {
      this.set(Property$3.OFFSET, offset);
    };

    /**
     * Set the position for this overlay. If the position is `undefined` the
     * overlay is hidden.
     * @param {import("./coordinate.js").Coordinate|undefined} position The spatial point that the overlay
     *     is anchored at.
     * @observable
     * @api
     */
    Overlay.prototype.setPosition = function setPosition (position) {
      this.set(Property$3.POSITION, position);
    };

    /**
     * Pan the map so that the overlay is entirely visible in the current viewport
     * (if necessary).
     * @protected
     */
    Overlay.prototype.panIntoView = function panIntoView () {
      var map = this.getMap();

      if (!map || !map.getTargetElement()) {
        return;
      }

      var mapRect = this.getRect(map.getTargetElement(), map.getSize());
      var element = this.getElement();
      var overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);

      var margin = this.autoPanMargin;
      if (!containsExtent(mapRect, overlayRect)) {
        // the overlay is not completely inside the viewport, so pan the map
        var offsetLeft = overlayRect[0] - mapRect[0];
        var offsetRight = mapRect[2] - overlayRect[2];
        var offsetTop = overlayRect[1] - mapRect[1];
        var offsetBottom = mapRect[3] - overlayRect[3];

        var delta = [0, 0];
        if (offsetLeft < 0) {
          // move map to the left
          delta[0] = offsetLeft - margin;
        } else if (offsetRight < 0) {
          // move map to the right
          delta[0] = Math.abs(offsetRight) + margin;
        }
        if (offsetTop < 0) {
          // move map up
          delta[1] = offsetTop - margin;
        } else if (offsetBottom < 0) {
          // move map down
          delta[1] = Math.abs(offsetBottom) + margin;
        }

        if (delta[0] !== 0 || delta[1] !== 0) {
          var center = /** @type {import("./coordinate.js").Coordinate} */ (map.getView().getCenter());
          var centerPx = map.getPixelFromCoordinate(center);
          var newCenterPx = [
            centerPx[0] + delta[0],
            centerPx[1] + delta[1]
          ];

          map.getView().animate({
            center: map.getCoordinateFromPixel(newCenterPx),
            duration: this.autoPanAnimation.duration,
            easing: this.autoPanAnimation.easing
          });
        }
      }
    };

    /**
     * Get the extent of an element relative to the document
     * @param {HTMLElement|undefined} element The element.
     * @param {import("./size.js").Size|undefined} size The size of the element.
     * @return {import("./extent.js").Extent} The extent.
     * @protected
     */
    Overlay.prototype.getRect = function getRect (element, size) {
      var box = element.getBoundingClientRect();
      var offsetX = box.left + window.pageXOffset;
      var offsetY = box.top + window.pageYOffset;
      return [
        offsetX,
        offsetY,
        offsetX + size[0],
        offsetY + size[1]
      ];
    };

    /**
     * Set the positioning for this overlay.
     * @param {OverlayPositioning} positioning how the overlay is
     *     positioned relative to its point on the map.
     * @observable
     * @api
     */
    Overlay.prototype.setPositioning = function setPositioning (positioning) {
      this.set(Property$3.POSITIONING, positioning);
    };

    /**
     * Modify the visibility of the element.
     * @param {boolean} visible Element visibility.
     * @protected
     */
    Overlay.prototype.setVisible = function setVisible (visible) {
      if (this.rendered.visible !== visible) {
        this.element.style.display = visible ? '' : 'none';
        this.rendered.visible = visible;
      }
    };

    /**
     * Update pixel position.
     * @protected
     */
    Overlay.prototype.updatePixelPosition = function updatePixelPosition () {
      var map = this.getMap();
      var position = this.getPosition();
      if (!map || !map.isRendered() || !position) {
        this.setVisible(false);
        return;
      }

      var pixel = map.getPixelFromCoordinate(position);
      var mapSize = map.getSize();
      this.updateRenderedPosition(pixel, mapSize);
    };

    /**
     * @param {import("./pixel.js").Pixel} pixel The pixel location.
     * @param {import("./size.js").Size|undefined} mapSize The map size.
     * @protected
     */
    Overlay.prototype.updateRenderedPosition = function updateRenderedPosition (pixel, mapSize) {
      var style = this.element.style;
      var offset = this.getOffset();

      var positioning = this.getPositioning();

      this.setVisible(true);

      var offsetX = offset[0];
      var offsetY = offset[1];
      if (positioning == OverlayPositioning.BOTTOM_RIGHT ||
          positioning == OverlayPositioning.CENTER_RIGHT ||
          positioning == OverlayPositioning.TOP_RIGHT) {
        if (this.rendered.left_ !== '') {
          this.rendered.left_ = style.left = '';
        }
        var right = Math.round(mapSize[0] - pixel[0] - offsetX) + 'px';
        if (this.rendered.right_ != right) {
          this.rendered.right_ = style.right = right;
        }
      } else {
        if (this.rendered.right_ !== '') {
          this.rendered.right_ = style.right = '';
        }
        if (positioning == OverlayPositioning.BOTTOM_CENTER ||
            positioning == OverlayPositioning.CENTER_CENTER ||
            positioning == OverlayPositioning.TOP_CENTER) {
          offsetX -= this.element.offsetWidth / 2;
        }
        var left = Math.round(pixel[0] + offsetX) + 'px';
        if (this.rendered.left_ != left) {
          this.rendered.left_ = style.left = left;
        }
      }
      if (positioning == OverlayPositioning.BOTTOM_LEFT ||
          positioning == OverlayPositioning.BOTTOM_CENTER ||
          positioning == OverlayPositioning.BOTTOM_RIGHT) {
        if (this.rendered.top_ !== '') {
          this.rendered.top_ = style.top = '';
        }
        var bottom = Math.round(mapSize[1] - pixel[1] - offsetY) + 'px';
        if (this.rendered.bottom_ != bottom) {
          this.rendered.bottom_ = style.bottom = bottom;
        }
      } else {
        if (this.rendered.bottom_ !== '') {
          this.rendered.bottom_ = style.bottom = '';
        }
        if (positioning == OverlayPositioning.CENTER_LEFT ||
            positioning == OverlayPositioning.CENTER_CENTER ||
            positioning == OverlayPositioning.CENTER_RIGHT) {
          offsetY -= this.element.offsetHeight / 2;
        }
        var top = Math.round(pixel[1] + offsetY) + 'px';
        if (this.rendered.top_ != top) {
          this.rendered.top_ = style.top = top;
        }
      }
    };

    /**
     * returns the options this Overlay has been created with
     * @return {Options} overlay options
     */
    Overlay.prototype.getOptions = function getOptions () {
      return this.options;
    };

    return Overlay;
  }(BaseObject));

  /**
   * @module ol/control/OverviewMap
   */


  /**
   * Maximum width and/or height extent ratio that determines when the overview
   * map should be zoomed out.
   * @type {number}
   */
  var MAX_RATIO = 0.75;


  /**
   * Minimum width and/or height extent ratio that determines when the overview
   * map should be zoomed in.
   * @type {number}
   */
  var MIN_RATIO = 0.1;


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-overviewmap'] CSS class name.
   * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).
   * @property {string|HTMLElement} [collapseLabel='«'] Text label to use for the
   * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.
   * @property {string|HTMLElement} [label='»'] Text label to use for the collapsed
   * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {Array<import("../layer/Layer.js").default>|import("../Collection.js").default<import("../layer/Layer.js").default>} [layers]
   * Layers for the overview map. If not set, then all main map layers are used
   * instead.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.
   * @property {import("../View.js").default} [view] Custom view for the overview map. If not provided,
   * a default view with an EPSG:3857 projection will be used.
   */


  /**
   * Create a new control with a map acting as an overview map for an other
   * defined map.
   *
   * @api
   */
  var OverviewMap = /*@__PURE__*/(function (Control$$1) {
    function OverviewMap(opt_options) {

      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        render: options.render || render$3,
        target: options.target
      });

      /**
       * @type {boolean}
       * @private
       */
      this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;

      /**
       * @private
       * @type {boolean}
       */
      this.collapsible_ = options.collapsible !== undefined ?
        options.collapsible : true;

      if (!this.collapsible_) {
        this.collapsed_ = false;
      }

      var className = options.className !== undefined ? options.className : 'ol-overviewmap';

      var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';

      var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00AB';

      if (typeof collapseLabel === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.collapseLabel_ = document.createElement('span');
        this.collapseLabel_.textContent = collapseLabel;
      } else {
        this.collapseLabel_ = collapseLabel;
      }

      var label = options.label !== undefined ? options.label : '\u00BB';


      if (typeof label === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.label_ = document.createElement('span');
        this.label_.textContent = label;
      } else {
        this.label_ = label;
      }

      var activeLabel = (this.collapsible_ && !this.collapsed_) ?
        this.collapseLabel_ : this.label_;
      var button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(activeLabel);

      listen(button, EventType.CLICK,
        this.handleClick_, this);

      /**
       * @type {HTMLElement}
       * @private
       */
      this.ovmapDiv_ = document.createElement('div');
      this.ovmapDiv_.className = 'ol-overviewmap-map';

      /**
       * @type {import("../Map.js").default}
       * @private
       */
      this.ovmap_ = new Map({
        controls: new Collection(),
        interactions: new Collection(),
        view: options.view
      });
      var ovmap = this.ovmap_;

      if (options.layers) {
        /** @type {Array<import("../layer/Layer.js").default>} */ (options.layers).forEach(
          /**
           * @param {import("../layer/Layer.js").default} layer Layer.
           */
          (function(layer) {
            ovmap.addLayer(layer);
          }).bind(this));
      }

      var box = document.createElement('div');
      box.className = 'ol-overviewmap-box';
      box.style.boxSizing = 'border-box';

      /**
       * @type {import("../Overlay.js").default}
       * @private
       */
      this.boxOverlay_ = new Overlay({
        position: [0, 0],
        positioning: OverlayPositioning.BOTTOM_LEFT,
        element: box
      });
      this.ovmap_.addOverlay(this.boxOverlay_);

      var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +
          (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
          (this.collapsible_ ? '' : ' ol-uncollapsible');
      var element = this.element;
      element.className = cssClasses;
      element.appendChild(this.ovmapDiv_);
      element.appendChild(button);

      /* Interactive map */

      var scope = this;

      var overlay = this.boxOverlay_;
      var overlayBox = this.boxOverlay_.getElement();

      /* Functions definition */

      var computeDesiredMousePosition = function(mousePosition) {
        return {
          clientX: mousePosition.clientX - (overlayBox.offsetWidth / 2),
          clientY: mousePosition.clientY + (overlayBox.offsetHeight / 2)
        };
      };

      var move = function(event) {
        var position = /** @type {?} */ (computeDesiredMousePosition(event));
        var coordinates = ovmap.getEventCoordinate(/** @type {Event} */ (position));

        overlay.setPosition(coordinates);
      };

      var endMoving = function(event) {
        var coordinates = ovmap.getEventCoordinate(event);

        scope.getMap().getView().setCenter(coordinates);

        window.removeEventListener('mousemove', move);
        window.removeEventListener('mouseup', endMoving);
      };

      /* Binding */

      overlayBox.addEventListener('mousedown', function() {
        window.addEventListener('mousemove', move);
        window.addEventListener('mouseup', endMoving);
      });
    }

    if ( Control$$1 ) OverviewMap.__proto__ = Control$$1;
    OverviewMap.prototype = Object.create( Control$$1 && Control$$1.prototype );
    OverviewMap.prototype.constructor = OverviewMap;

    /**
     * @inheritDoc
     * @api
     */
    OverviewMap.prototype.setMap = function setMap (map) {
      var oldMap = this.getMap();
      if (map === oldMap) {
        return;
      }
      if (oldMap) {
        var oldView = oldMap.getView();
        if (oldView) {
          this.unbindView_(oldView);
        }
        this.ovmap_.setTarget(null);
      }
      Control$$1.prototype.setMap.call(this, map);

      if (map) {
        this.ovmap_.setTarget(this.ovmapDiv_);
        this.listenerKeys.push(listen(
          map, ObjectEventType.PROPERTYCHANGE,
          this.handleMapPropertyChange_, this));

        // TODO: to really support map switching, this would need to be reworked
        if (this.ovmap_.getLayers().getLength() === 0) {
          this.ovmap_.setLayerGroup(map.getLayerGroup());
        }

        var view = map.getView();
        if (view) {
          this.bindView_(view);
          if (view.isDef()) {
            this.ovmap_.updateSize();
            this.resetExtent_();
          }
        }
      }
    };

    /**
     * Handle map property changes.  This only deals with changes to the map's view.
     * @param {import("../Object.js").ObjectEvent} event The propertychange event.
     * @private
     */
    OverviewMap.prototype.handleMapPropertyChange_ = function handleMapPropertyChange_ (event) {
      if (event.key === MapProperty.VIEW) {
        var oldView = /** @type {import("../View.js").default} */ (event.oldValue);
        if (oldView) {
          this.unbindView_(oldView);
        }
        var newView = this.getMap().getView();
        this.bindView_(newView);
      }
    };

    /**
     * Register listeners for view property changes.
     * @param {import("../View.js").default} view The view.
     * @private
     */
    OverviewMap.prototype.bindView_ = function bindView_ (view) {
      listen(view,
        getChangeEventType(ViewProperty.ROTATION),
        this.handleRotationChanged_, this);
    };

    /**
     * Unregister listeners for view property changes.
     * @param {import("../View.js").default} view The view.
     * @private
     */
    OverviewMap.prototype.unbindView_ = function unbindView_ (view) {
      unlisten(view,
        getChangeEventType(ViewProperty.ROTATION),
        this.handleRotationChanged_, this);
    };

    /**
     * Handle rotation changes to the main map.
     * TODO: This should rotate the extent rectrangle instead of the
     * overview map's view.
     * @private
     */
    OverviewMap.prototype.handleRotationChanged_ = function handleRotationChanged_ () {
      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());
    };

    /**
     * Reset the overview map extent if the box size (width or
     * height) is less than the size of the overview map size times minRatio
     * or is greater than the size of the overview size times maxRatio.
     *
     * If the map extent was not reset, the box size can fits in the defined
     * ratio sizes. This method then checks if is contained inside the overview
     * map current extent. If not, recenter the overview map to the current
     * main map center location.
     * @private
     */
    OverviewMap.prototype.validateExtent_ = function validateExtent_ () {
      var map = this.getMap();
      var ovmap = this.ovmap_;

      if (!map.isRendered() || !ovmap.isRendered()) {
        return;
      }

      var mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      var view = map.getView();
      var extent = view.calculateExtent(mapSize);

      var ovmapSize = /** @type {import("../size.js").Size} */ (ovmap.getSize());

      var ovview = ovmap.getView();
      var ovextent = ovview.calculateExtent(ovmapSize);

      var topLeftPixel =
          ovmap.getPixelFromCoordinate(getTopLeft(extent));
      var bottomRightPixel =
          ovmap.getPixelFromCoordinate(getBottomRight(extent));

      var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);
      var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);

      var ovmapWidth = ovmapSize[0];
      var ovmapHeight = ovmapSize[1];

      if (boxWidth < ovmapWidth * MIN_RATIO ||
          boxHeight < ovmapHeight * MIN_RATIO ||
          boxWidth > ovmapWidth * MAX_RATIO ||
          boxHeight > ovmapHeight * MAX_RATIO) {
        this.resetExtent_();
      } else if (!containsExtent(ovextent, extent)) {
        this.recenter_();
      }
    };

    /**
     * Reset the overview map extent to half calculated min and max ratio times
     * the extent of the main map.
     * @private
     */
    OverviewMap.prototype.resetExtent_ = function resetExtent_ () {

      var map = this.getMap();
      var ovmap = this.ovmap_;

      var mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      var view = map.getView();
      var extent = view.calculateExtent(mapSize);

      var ovview = ovmap.getView();

      // get how many times the current map overview could hold different
      // box sizes using the min and max ratio, pick the step in the middle used
      // to calculate the extent from the main map to set it to the overview map,
      var steps = Math.log(
        MAX_RATIO / MIN_RATIO) / Math.LN2;
      var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);
      scaleFromCenter(extent, ratio);
      ovview.fit(extent);
    };

    /**
     * Set the center of the overview map to the map center without changing its
     * resolution.
     * @private
     */
    OverviewMap.prototype.recenter_ = function recenter_ () {
      var map = this.getMap();
      var ovmap = this.ovmap_;

      var view = map.getView();

      var ovview = ovmap.getView();

      ovview.setCenter(view.getCenter());
    };

    /**
     * Update the box using the main map extent
     * @private
     */
    OverviewMap.prototype.updateBox_ = function updateBox_ () {
      var map = this.getMap();
      var ovmap = this.ovmap_;

      if (!map.isRendered() || !ovmap.isRendered()) {
        return;
      }

      var mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      var view = map.getView();

      var ovview = ovmap.getView();

      var rotation = view.getRotation();

      var overlay = this.boxOverlay_;
      var box = this.boxOverlay_.getElement();
      var extent = view.calculateExtent(mapSize);
      var ovresolution = ovview.getResolution();
      var bottomLeft = getBottomLeft(extent);
      var topRight = getTopRight(extent);

      // set position using bottom left coordinates
      var rotateBottomLeft = this.calculateCoordinateRotate_(rotation, bottomLeft);
      overlay.setPosition(rotateBottomLeft);

      // set box size calculated from map extent size and overview map resolution
      if (box) {
        box.style.width = Math.abs((bottomLeft[0] - topRight[0]) / ovresolution) + 'px';
        box.style.height = Math.abs((topRight[1] - bottomLeft[1]) / ovresolution) + 'px';
      }
    };

    /**
     * @param {number} rotation Target rotation.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {import("../coordinate.js").Coordinate|undefined} Coordinate for rotation and center anchor.
     * @private
     */
    OverviewMap.prototype.calculateCoordinateRotate_ = function calculateCoordinateRotate_ (rotation, coordinate) {
      var coordinateRotate;

      var map = this.getMap();
      var view = map.getView();

      var currentCenter = view.getCenter();

      if (currentCenter) {
        coordinateRotate = [
          coordinate[0] - currentCenter[0],
          coordinate[1] - currentCenter[1]
        ];
        rotate(coordinateRotate, rotation);
        add(coordinateRotate, currentCenter);
      }
      return coordinateRotate;
    };

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    OverviewMap.prototype.handleClick_ = function handleClick_ (event) {
      event.preventDefault();
      this.handleToggle_();
    };

    /**
     * @private
     */
    OverviewMap.prototype.handleToggle_ = function handleToggle_ () {
      this.element.classList.toggle(CLASS_COLLAPSED);
      if (this.collapsed_) {
        replaceNode(this.collapseLabel_, this.label_);
      } else {
        replaceNode(this.label_, this.collapseLabel_);
      }
      this.collapsed_ = !this.collapsed_;

      // manage overview map if it had not been rendered before and control
      // is expanded
      var ovmap = this.ovmap_;
      if (!this.collapsed_ && !ovmap.isRendered()) {
        ovmap.updateSize();
        this.resetExtent_();
        listenOnce(ovmap, MapEventType.POSTRENDER,
          function(event) {
            this.updateBox_();
          },
          this);
      }
    };

    /**
     * Return `true` if the overview map is collapsible, `false` otherwise.
     * @return {boolean} True if the widget is collapsible.
     * @api
     */
    OverviewMap.prototype.getCollapsible = function getCollapsible () {
      return this.collapsible_;
    };

    /**
     * Set whether the overview map should be collapsible.
     * @param {boolean} collapsible True if the widget is collapsible.
     * @api
     */
    OverviewMap.prototype.setCollapsible = function setCollapsible (collapsible) {
      if (this.collapsible_ === collapsible) {
        return;
      }
      this.collapsible_ = collapsible;
      this.element.classList.toggle('ol-uncollapsible');
      if (!collapsible && this.collapsed_) {
        this.handleToggle_();
      }
    };

    /**
     * Collapse or expand the overview map according to the passed parameter. Will
     * not do anything if the overview map isn't collapsible or if the current
     * collapsed state is already the one requested.
     * @param {boolean} collapsed True if the widget is collapsed.
     * @api
     */
    OverviewMap.prototype.setCollapsed = function setCollapsed (collapsed) {
      if (!this.collapsible_ || this.collapsed_ === collapsed) {
        return;
      }
      this.handleToggle_();
    };

    /**
     * Determine if the overview map is collapsed.
     * @return {boolean} The overview map is collapsed.
     * @api
     */
    OverviewMap.prototype.getCollapsed = function getCollapsed () {
      return this.collapsed_;
    };

    /**
     * Return the overview map.
     * @return {import("../PluggableMap.js").default} Overview map.
     * @api
     */
    OverviewMap.prototype.getOverviewMap = function getOverviewMap () {
      return this.ovmap_;
    };

    return OverviewMap;
  }(Control));


  /**
   * Update the overview map element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {OverviewMap}
   * @api
   */
  function render$3(mapEvent) {
    this.validateExtent_();
    this.updateBox_();
  }

  /**
   * @module ol/control/ScaleLine
   */


  /**
   * @type {string}
   */
  var UNITS_PROP = 'units';

  /**
   * Units for the scale line. Supported values are `'degrees'`, `'imperial'`,
   * `'nautical'`, `'metric'`, `'us'`.
   * @enum {string}
   */
  var Units$1 = {
    DEGREES: 'degrees',
    IMPERIAL: 'imperial',
    NAUTICAL: 'nautical',
    METRIC: 'metric',
    US: 'us'
  };


  /**
   * @const
   * @type {Array<number>}
   */
  var LEADING_DIGITS = [1, 2, 5];


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-scale-line'] CSS Class name.
   * @property {number} [minWidth=64] Minimum width in pixels.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {Units|string} [units='metric'] Units.
   */


  /**
   * @classdesc
   * A control displaying rough y-axis distances, calculated for the center of the
   * viewport. For conformal projections (e.g. EPSG:3857, the default view
   * projection in OpenLayers), the scale is valid for all directions.
   * No scale line will be shown when the y-axis distance of a pixel at the
   * viewport center cannot be calculated in the view projection.
   * By default the scale line will show in the bottom left portion of the map,
   * but this can be changed by using the css selector `.ol-scale-line`.
   *
   * @api
   */
  var ScaleLine = /*@__PURE__*/(function (Control$$1) {
    function ScaleLine(opt_options) {

      var options = opt_options ? opt_options : {};

      var className = options.className !== undefined ? options.className : 'ol-scale-line';

      Control$$1.call(this, {
        element: document.createElement('div'),
        render: options.render || render$4,
        target: options.target
      });

      /**
       * @private
       * @type {HTMLElement}
       */
      this.innerElement_ = document.createElement('div');
      this.innerElement_.className = className + '-inner';

      this.element.className = className + ' ' + CLASS_UNSELECTABLE;
      this.element.appendChild(this.innerElement_);

      /**
       * @private
       * @type {?import("../View.js").State}
       */
      this.viewState_ = null;

      /**
       * @private
       * @type {number}
       */
      this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = false;

      /**
       * @private
       * @type {number|undefined}
       */
      this.renderedWidth_ = undefined;

      /**
       * @private
       * @type {string}
       */
      this.renderedHTML_ = '';

      listen(
        this, getChangeEventType(UNITS_PROP),
        this.handleUnitsChanged_, this);

      this.setUnits(/** @type {Units} */ (options.units) || Units$1.METRIC);

    }

    if ( Control$$1 ) ScaleLine.__proto__ = Control$$1;
    ScaleLine.prototype = Object.create( Control$$1 && Control$$1.prototype );
    ScaleLine.prototype.constructor = ScaleLine;

    /**
     * Return the units to use in the scale line.
     * @return {Units} The units
     * to use in the scale line.
     * @observable
     * @api
     */
    ScaleLine.prototype.getUnits = function getUnits () {
      return this.get(UNITS_PROP);
    };

    /**
     * @private
     */
    ScaleLine.prototype.handleUnitsChanged_ = function handleUnitsChanged_ () {
      this.updateElement_();
    };

    /**
     * Set the units to use in the scale line.
     * @param {Units} units The units to use in the scale line.
     * @observable
     * @api
     */
    ScaleLine.prototype.setUnits = function setUnits (units) {
      this.set(UNITS_PROP, units);
    };

    /**
     * @private
     */
    ScaleLine.prototype.updateElement_ = function updateElement_ () {
      var viewState = this.viewState_;

      if (!viewState) {
        if (this.renderedVisible_) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      var center = viewState.center;
      var projection = viewState.projection;
      var units = this.getUnits();
      var pointResolutionUnits = units == Units$1.DEGREES ?
        Units.DEGREES :
        Units.METERS;
      var pointResolution =
          getPointResolution(projection, viewState.resolution, center, pointResolutionUnits);
      if (projection.getUnits() != Units.DEGREES && projection.getMetersPerUnit()
        && pointResolutionUnits == Units.METERS) {
        pointResolution *= projection.getMetersPerUnit();
      }

      var nominalCount = this.minWidth_ * pointResolution;
      var suffix = '';
      if (units == Units$1.DEGREES) {
        var metersPerDegree = METERS_PER_UNIT[Units.DEGREES];
        if (projection.getUnits() == Units.DEGREES) {
          nominalCount *= metersPerDegree;
        } else {
          pointResolution /= metersPerDegree;
        }
        if (nominalCount < metersPerDegree / 60) {
          suffix = '\u2033'; // seconds
          pointResolution *= 3600;
        } else if (nominalCount < metersPerDegree) {
          suffix = '\u2032'; // minutes
          pointResolution *= 60;
        } else {
          suffix = '\u00b0'; // degrees
        }
      } else if (units == Units$1.IMPERIAL) {
        if (nominalCount < 0.9144) {
          suffix = 'in';
          pointResolution /= 0.0254;
        } else if (nominalCount < 1609.344) {
          suffix = 'ft';
          pointResolution /= 0.3048;
        } else {
          suffix = 'mi';
          pointResolution /= 1609.344;
        }
      } else if (units == Units$1.NAUTICAL) {
        pointResolution /= 1852;
        suffix = 'nm';
      } else if (units == Units$1.METRIC) {
        if (nominalCount < 0.001) {
          suffix = 'μm';
          pointResolution *= 1000000;
        } else if (nominalCount < 1) {
          suffix = 'mm';
          pointResolution *= 1000;
        } else if (nominalCount < 1000) {
          suffix = 'm';
        } else {
          suffix = 'km';
          pointResolution /= 1000;
        }
      } else if (units == Units$1.US) {
        if (nominalCount < 0.9144) {
          suffix = 'in';
          pointResolution *= 39.37;
        } else if (nominalCount < 1609.344) {
          suffix = 'ft';
          pointResolution /= 0.30480061;
        } else {
          suffix = 'mi';
          pointResolution /= 1609.3472;
        }
      } else {
        assert(false, 33); // Invalid units
      }

      var i = 3 * Math.floor(
        Math.log(this.minWidth_ * pointResolution) / Math.log(10));
      var count, width;
      while (true) {
        count = LEADING_DIGITS[((i % 3) + 3) % 3] *
            Math.pow(10, Math.floor(i / 3));
        width = Math.round(count / pointResolution);
        if (isNaN(width)) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
          return;
        } else if (width >= this.minWidth_) {
          break;
        }
        ++i;
      }

      var html = count + ' ' + suffix;
      if (this.renderedHTML_ != html) {
        this.innerElement_.innerHTML = html;
        this.renderedHTML_ = html;
      }

      if (this.renderedWidth_ != width) {
        this.innerElement_.style.width = width + 'px';
        this.renderedWidth_ = width;
      }

      if (!this.renderedVisible_) {
        this.element.style.display = '';
        this.renderedVisible_ = true;
      }

    };

    return ScaleLine;
  }(Control));


  /**
   * Update the scale line element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {ScaleLine}
   * @api
   */
  function render$4(mapEvent) {
    var frameState = mapEvent.frameState;
    if (!frameState) {
      this.viewState_ = null;
    } else {
      this.viewState_ = frameState.viewState;
    }
    this.updateElement_();
  }

  /**
   * @module ol/control/ZoomSlider
   */


  /**
   * The enum for available directions.
   *
   * @enum {number}
   */
  var Direction = {
    VERTICAL: 0,
    HORIZONTAL: 1
  };


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-zoomslider'] CSS class name.
   * @property {number} [duration=200] Animation duration in milliseconds.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   */


  /**
   * @classdesc
   * A slider type of control for zooming.
   *
   * Example:
   *
   *     map.addControl(new ZoomSlider());
   *
   * @api
   */
  var ZoomSlider = /*@__PURE__*/(function (Control$$1) {
    function ZoomSlider(opt_options) {

      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        render: options.render || render$5
      });

      /**
        * @type {!Array.<import("../events.js").EventsKey>}
        * @private
        */
      this.dragListenerKeys_ = [];

      /**
       * Will hold the current resolution of the view.
       *
       * @type {number|undefined}
       * @private
       */
      this.currentResolution_ = undefined;

      /**
       * The direction of the slider. Will be determined from actual display of the
       * container and defaults to Direction.VERTICAL.
       *
       * @type {Direction}
       * @private
       */
      this.direction_ = Direction.VERTICAL;

      /**
       * @type {boolean}
       * @private
       */
      this.dragging_;

      /**
       * @type {number}
       * @private
       */
      this.heightLimit_ = 0;

      /**
       * @type {number}
       * @private
       */
      this.widthLimit_ = 0;

      /**
       * @type {number|undefined}
       * @private
       */
      this.previousX_;

      /**
       * @type {number|undefined}
       * @private
       */
      this.previousY_;

      /**
       * The calculated thumb size (border box plus margins).  Set when initSlider_
       * is called.
       * @type {import("../size.js").Size}
       * @private
       */
      this.thumbSize_ = null;

      /**
       * Whether the slider is initialized.
       * @type {boolean}
       * @private
       */
      this.sliderInitialized_ = false;

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 200;

      var className = options.className !== undefined ? options.className : 'ol-zoomslider';
      var thumbElement = document.createElement('button');
      thumbElement.setAttribute('type', 'button');
      thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;
      var containerElement = this.element;
      containerElement.className = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      containerElement.appendChild(thumbElement);
      /**
       * @type {PointerEventHandler}
       * @private
       */
      this.dragger_ = new PointerEventHandler(containerElement);

      listen(this.dragger_, PointerEventType.POINTERDOWN,
        this.handleDraggerStart_, this);
      listen(this.dragger_, PointerEventType.POINTERMOVE,
        this.handleDraggerDrag_, this);
      listen(this.dragger_, PointerEventType.POINTERUP,
        this.handleDraggerEnd_, this);

      listen(containerElement, EventType.CLICK, this.handleContainerClick_, this);
      listen(thumbElement, EventType.CLICK, stopPropagation);
    }

    if ( Control$$1 ) ZoomSlider.__proto__ = Control$$1;
    ZoomSlider.prototype = Object.create( Control$$1 && Control$$1.prototype );
    ZoomSlider.prototype.constructor = ZoomSlider;

    /**
     * @inheritDoc
     */
    ZoomSlider.prototype.disposeInternal = function disposeInternal () {
      this.dragger_.dispose();
      Control$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @inheritDoc
     */
    ZoomSlider.prototype.setMap = function setMap (map) {
      Control$$1.prototype.setMap.call(this, map);
      if (map) {
        map.render();
      }
    };

    /**
     * Initializes the slider element. This will determine and set this controls
     * direction_ and also constrain the dragging of the thumb to always be within
     * the bounds of the container.
     *
     * @private
     */
    ZoomSlider.prototype.initSlider_ = function initSlider_ () {
      var container = this.element;
      var containerSize = {
        width: container.offsetWidth, height: container.offsetHeight
      };

      var thumb = /** @type {HTMLElement} */ (container.firstElementChild);
      var computedStyle = getComputedStyle(thumb);
      var thumbWidth = thumb.offsetWidth +
          parseFloat(computedStyle['marginRight']) +
          parseFloat(computedStyle['marginLeft']);
      var thumbHeight = thumb.offsetHeight +
          parseFloat(computedStyle['marginTop']) +
          parseFloat(computedStyle['marginBottom']);
      this.thumbSize_ = [thumbWidth, thumbHeight];

      if (containerSize.width > containerSize.height) {
        this.direction_ = Direction.HORIZONTAL;
        this.widthLimit_ = containerSize.width - thumbWidth;
      } else {
        this.direction_ = Direction.VERTICAL;
        this.heightLimit_ = containerSize.height - thumbHeight;
      }
      this.sliderInitialized_ = true;
    };

    /**
     * @param {MouseEvent} event The browser event to handle.
     * @private
     */
    ZoomSlider.prototype.handleContainerClick_ = function handleContainerClick_ (event) {
      var view = this.getMap().getView();

      var relativePosition = this.getRelativePosition_(
        event.offsetX - this.thumbSize_[0] / 2,
        event.offsetY - this.thumbSize_[1] / 2);

      var resolution = this.getResolutionForPosition_(relativePosition);

      view.animate({
        resolution: view.constrainResolution(resolution),
        duration: this.duration_,
        easing: easeOut
      });
    };

    /**
     * Handle dragger start events.
     * @param {import("../pointer/PointerEvent.js").default} event The drag event.
     * @private
     */
    ZoomSlider.prototype.handleDraggerStart_ = function handleDraggerStart_ (event) {
      if (!this.dragging_ && event.originalEvent.target === this.element.firstElementChild) {
        this.getMap().getView().setHint(ViewHint.INTERACTING, 1);
        this.previousX_ = event.clientX;
        this.previousY_ = event.clientY;
        this.dragging_ = true;

        if (this.dragListenerKeys_.length === 0) {
          var drag = this.handleDraggerDrag_;
          var end = this.handleDraggerEnd_;
          this.dragListenerKeys_.push(
            listen(document, EventType.MOUSEMOVE, drag, this),
            listen(document, PointerEventType.POINTERMOVE, drag, this),
            listen(document, EventType.MOUSEUP, end, this),
            listen(document, PointerEventType.POINTERUP, end, this)
          );
        }
      }
    };

    /**
     * Handle dragger drag events.
     *
     * @param {import("../pointer/PointerEvent.js").default} event The drag event.
     * @private
     */
    ZoomSlider.prototype.handleDraggerDrag_ = function handleDraggerDrag_ (event) {
      if (this.dragging_) {
        var element = /** @type {HTMLElement} */ (this.element.firstElementChild);
        var deltaX = event.clientX - this.previousX_ + parseFloat(element.style.left);
        var deltaY = event.clientY - this.previousY_ + parseFloat(element.style.top);
        var relativePosition = this.getRelativePosition_(deltaX, deltaY);
        this.currentResolution_ = this.getResolutionForPosition_(relativePosition);
        this.getMap().getView().setResolution(this.currentResolution_);
        this.setThumbPosition_(this.currentResolution_);
        this.previousX_ = event.clientX;
        this.previousY_ = event.clientY;
      }
    };

    /**
     * Handle dragger end events.
     * @param {import("../pointer/PointerEvent.js").default} event The drag event.
     * @private
     */
    ZoomSlider.prototype.handleDraggerEnd_ = function handleDraggerEnd_ (event) {
      if (this.dragging_) {
        var view = this.getMap().getView();
        view.setHint(ViewHint.INTERACTING, -1);

        view.animate({
          resolution: view.constrainResolution(this.currentResolution_),
          duration: this.duration_,
          easing: easeOut
        });

        this.dragging_ = false;
        this.previousX_ = undefined;
        this.previousY_ = undefined;
        this.dragListenerKeys_.forEach(unlistenByKey);
        this.dragListenerKeys_.length = 0;
      }
    };

    /**
     * Positions the thumb inside its container according to the given resolution.
     *
     * @param {number} res The res.
     * @private
     */
    ZoomSlider.prototype.setThumbPosition_ = function setThumbPosition_ (res) {
      var position = this.getPositionForResolution_(res);
      var thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);

      if (this.direction_ == Direction.HORIZONTAL) {
        thumb.style.left = this.widthLimit_ * position + 'px';
      } else {
        thumb.style.top = this.heightLimit_ * position + 'px';
      }
    };

    /**
     * Calculates the relative position of the thumb given x and y offsets.  The
     * relative position scales from 0 to 1.  The x and y offsets are assumed to be
     * in pixel units within the dragger limits.
     *
     * @param {number} x Pixel position relative to the left of the slider.
     * @param {number} y Pixel position relative to the top of the slider.
     * @return {number} The relative position of the thumb.
     * @private
     */
    ZoomSlider.prototype.getRelativePosition_ = function getRelativePosition_ (x, y) {
      var amount;
      if (this.direction_ === Direction.HORIZONTAL) {
        amount = x / this.widthLimit_;
      } else {
        amount = y / this.heightLimit_;
      }
      return clamp(amount, 0, 1);
    };

    /**
     * Calculates the corresponding resolution of the thumb given its relative
     * position (where 0 is the minimum and 1 is the maximum).
     *
     * @param {number} position The relative position of the thumb.
     * @return {number} The corresponding resolution.
     * @private
     */
    ZoomSlider.prototype.getResolutionForPosition_ = function getResolutionForPosition_ (position) {
      var fn = this.getMap().getView().getResolutionForValueFunction();
      return fn(1 - position);
    };

    /**
     * Determines the relative position of the slider for the given resolution.  A
     * relative position of 0 corresponds to the minimum view resolution.  A
     * relative position of 1 corresponds to the maximum view resolution.
     *
     * @param {number} res The resolution.
     * @return {number} The relative position value (between 0 and 1).
     * @private
     */
    ZoomSlider.prototype.getPositionForResolution_ = function getPositionForResolution_ (res) {
      var fn = this.getMap().getView().getValueForResolutionFunction();
      return 1 - fn(res);
    };

    return ZoomSlider;
  }(Control));


  /**
   * Update the zoomslider element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {ZoomSlider}
   * @api
   */
  function render$5(mapEvent) {
    if (!mapEvent.frameState) {
      return;
    }
    if (!this.sliderInitialized_) {
      this.initSlider_();
    }
    var res = mapEvent.frameState.viewState.resolution;
    if (res !== this.currentResolution_) {
      this.currentResolution_ = res;
      this.setThumbPosition_(res);
    }
  }

  /**
   * @module ol/control/ZoomToExtent
   */


  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-zoom-extent'] Class name.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {string|HTMLElement} [label='E'] Text label to use for the button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.
   * @property {import("../extent.js").Extent} [extent] The extent to zoom to. If undefined the validity
   * extent of the view projection is used.
   */


  /**
   * @classdesc
   * A button control which, when pressed, changes the map view to a specific
   * extent. To style this control use the css selector `.ol-zoom-extent`.
   *
   * @api
   */
  var ZoomToExtent = /*@__PURE__*/(function (Control$$1) {
    function ZoomToExtent(opt_options) {
      var options = opt_options ? opt_options : {};

      Control$$1.call(this, {
        element: document.createElement('div'),
        target: options.target
      });

      /**
       * @type {import("../extent.js").Extent}
       * @protected
       */
      this.extent = options.extent ? options.extent : null;

      var className = options.className !== undefined ? options.className : 'ol-zoom-extent';

      var label = options.label !== undefined ? options.label : 'E';
      var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';
      var button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(
        typeof label === 'string' ? document.createTextNode(label) : label
      );

      listen(button, EventType.CLICK, this.handleClick_, this);

      var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      var element = this.element;
      element.className = cssClasses;
      element.appendChild(button);
    }

    if ( Control$$1 ) ZoomToExtent.__proto__ = Control$$1;
    ZoomToExtent.prototype = Object.create( Control$$1 && Control$$1.prototype );
    ZoomToExtent.prototype.constructor = ZoomToExtent;

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    ZoomToExtent.prototype.handleClick_ = function handleClick_ (event) {
      event.preventDefault();
      this.handleZoomToExtent();
    };

    /**
     * @protected
     */
    ZoomToExtent.prototype.handleZoomToExtent = function handleZoomToExtent () {
      var map = this.getMap();
      var view = map.getView();
      var extent = !this.extent ? view.getProjection().getExtent() : this.extent;
      view.fit(extent);
    };

    return ZoomToExtent;
  }(Control));

  /**
   * @module ol/control
   */

  /**
   * @module ol/webgl/Shader
   */

  /**
   * @abstract
   */
  var WebGLShader = function WebGLShader(source) {

    /**
     * @private
     * @type {string}
     */
    this.source_ = source;

  };

  /**
   * @return {boolean} Is animated?
   */
  WebGLShader.prototype.isAnimated = function isAnimated () {
    return false;
  };

  /**
   * @abstract
   * @return {number} Type.
   */
  WebGLShader.prototype.getType = function getType () {
    return abstract();
  };

  /**
   * @return {string} Source.
   */
  WebGLShader.prototype.getSource = function getSource () {
    return this.source_;
  };

  /**
   * @module ol/webgl/Fragment
   */

  var WebGLFragment = /*@__PURE__*/(function (WebGLShader$$1) {
    function WebGLFragment(source) {
      WebGLShader$$1.call(this, source);
    }

    if ( WebGLShader$$1 ) WebGLFragment.__proto__ = WebGLShader$$1;
    WebGLFragment.prototype = Object.create( WebGLShader$$1 && WebGLShader$$1.prototype );
    WebGLFragment.prototype.constructor = WebGLFragment;

    /**
     * @inheritDoc
     */
    WebGLFragment.prototype.getType = function getType () {
      return FRAGMENT_SHADER;
    };

    return WebGLFragment;
  }(WebGLShader));

  /**
   * @module ol/webgl/Vertex
   */

  var WebGLVertex = /*@__PURE__*/(function (WebGLShader$$1) {
    function WebGLVertex(source) {
      WebGLShader$$1.call(this, source);
    }

    if ( WebGLShader$$1 ) WebGLVertex.__proto__ = WebGLShader$$1;
    WebGLVertex.prototype = Object.create( WebGLShader$$1 && WebGLShader$$1.prototype );
    WebGLVertex.prototype.constructor = WebGLVertex;

    /**
     * @inheritDoc
     */
    WebGLVertex.prototype.getType = function getType () {
      return VERTEX_SHADER;
    };

    return WebGLVertex;
  }(WebGLShader));

  /**
   * @module ol/render/webgl/circlereplay/defaultshader
   */

  var fragment = new WebGLFragment('precision mediump float;\nvarying vec2 v_center;\nvarying vec2 v_offset;\nvarying float v_halfWidth;\nvarying float v_pixelRatio;\n\n\n\nuniform float u_opacity;\nuniform vec4 u_fillColor;\nuniform vec4 u_strokeColor;\nuniform vec2 u_size;\n\nvoid main(void) {\n  vec2 windowCenter = vec2((v_center.x + 1.0) / 2.0 * u_size.x * v_pixelRatio,\n      (v_center.y + 1.0) / 2.0 * u_size.y * v_pixelRatio);\n  vec2 windowOffset = vec2((v_offset.x + 1.0) / 2.0 * u_size.x * v_pixelRatio,\n      (v_offset.y + 1.0) / 2.0 * u_size.y * v_pixelRatio);\n  float radius = length(windowCenter - windowOffset);\n  float dist = length(windowCenter - gl_FragCoord.xy);\n  if (dist > radius + v_halfWidth) {\n    if (u_strokeColor.a == 0.0) {\n      gl_FragColor = u_fillColor;\n    } else {\n      gl_FragColor = u_strokeColor;\n    }\n    gl_FragColor.a = gl_FragColor.a - (dist - (radius + v_halfWidth));\n  } else if (u_fillColor.a == 0.0) {\n    // Hooray, no fill, just stroke. We can use real antialiasing.\n    gl_FragColor = u_strokeColor;\n    if (dist < radius - v_halfWidth) {\n      gl_FragColor.a = gl_FragColor.a - (radius - v_halfWidth - dist);\n    }\n  } else {\n    gl_FragColor = u_fillColor;\n    float strokeDist = radius - v_halfWidth;\n    float antialias = 2.0 * v_pixelRatio;\n    if (dist > strokeDist) {\n      gl_FragColor = u_strokeColor;\n    } else if (dist >= strokeDist - antialias) {\n      float step = smoothstep(strokeDist - antialias, strokeDist, dist);\n      gl_FragColor = mix(u_fillColor, u_strokeColor, step);\n    }\n  }\n  gl_FragColor.a = gl_FragColor.a * u_opacity;\n  if (gl_FragColor.a <= 0.0) {\n    discard;\n  }\n}\n');

  var vertex = new WebGLVertex('varying vec2 v_center;\nvarying vec2 v_offset;\nvarying float v_halfWidth;\nvarying float v_pixelRatio;\n\n\nattribute vec2 a_position;\nattribute float a_instruction;\nattribute float a_radius;\n\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_lineWidth;\nuniform float u_pixelRatio;\n\nvoid main(void) {\n  mat4 offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;\n  v_center = vec4(u_projectionMatrix * vec4(a_position, 0.0, 1.0)).xy;\n  v_pixelRatio = u_pixelRatio;\n  float lineWidth = u_lineWidth * u_pixelRatio;\n  v_halfWidth = lineWidth / 2.0;\n  if (lineWidth == 0.0) {\n    lineWidth = 2.0 * u_pixelRatio;\n  }\n  vec2 offset;\n  // Radius with anitaliasing (roughly).\n  float radius = a_radius + 3.0 * u_pixelRatio;\n  // Until we get gl_VertexID in WebGL, we store an instruction.\n  if (a_instruction == 0.0) {\n    // Offsetting the edges of the triangle by lineWidth / 2 is necessary, however\n    // we should also leave some space for the antialiasing, thus we offset by lineWidth.\n    offset = vec2(-1.0, 1.0);\n  } else if (a_instruction == 1.0) {\n    offset = vec2(-1.0, -1.0);\n  } else if (a_instruction == 2.0) {\n    offset = vec2(1.0, -1.0);\n  } else {\n    offset = vec2(1.0, 1.0);\n  }\n\n  gl_Position = u_projectionMatrix * vec4(a_position + offset * radius, 0.0, 1.0) +\n      offsetMatrix * vec4(offset * lineWidth, 0.0, 0.0);\n  v_offset = vec4(u_projectionMatrix * vec4(a_position.x + a_radius, a_position.y,\n      0.0, 1.0)).xy;\n\n  if (distance(v_center, v_offset) > 20000.0) {\n    gl_Position = vec4(v_center, 0.0, 1.0);\n  }\n}\n\n\n');

  /**
   * @module ol/render/webgl/circlereplay/defaultshader/Locations
   */

  var Locations = function Locations(gl, program) {

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_projectionMatrix = gl.getUniformLocation(
      program, 'u_projectionMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetScaleMatrix = gl.getUniformLocation(
      program, 'u_offsetScaleMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetRotateMatrix = gl.getUniformLocation(
      program, 'u_offsetRotateMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_lineWidth = gl.getUniformLocation(
      program, 'u_lineWidth');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_pixelRatio = gl.getUniformLocation(
      program, 'u_pixelRatio');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_opacity = gl.getUniformLocation(
      program, 'u_opacity');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_fillColor = gl.getUniformLocation(
      program, 'u_fillColor');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_strokeColor = gl.getUniformLocation(
      program, 'u_strokeColor');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_size = gl.getUniformLocation(
      program, 'u_size');

    /**
     * @type {number}
     */
    this.a_position = gl.getAttribLocation(
      program, 'a_position');

    /**
     * @type {number}
     */
    this.a_instruction = gl.getAttribLocation(
      program, 'a_instruction');

    /**
     * @type {number}
     */
    this.a_radius = gl.getAttribLocation(
      program, 'a_radius');

  };

  /**
   * @module ol/vec/mat4
   */


  /**
   * @return {Array<number>} 4x4 matrix representing a 3D identity transform.
   */
  function create$1() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  }


  /**
   * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.
   * @param {import("../transform.js").Transform} transform Transformation matrix.
   * @return {Array<number>} 2D transformation matrix as flattened 4x4 matrix.
   */
  function fromTransform(mat4, transform) {
    mat4[0] = transform[0];
    mat4[1] = transform[1];
    mat4[4] = transform[2];
    mat4[5] = transform[3];
    mat4[12] = transform[4];
    mat4[13] = transform[5];
    return mat4;
  }

  /**
   * @module ol/render/webgl/Replay
   */

  var WebGLReplay = /*@__PURE__*/(function (VectorContext$$1) {
    function WebGLReplay(tolerance, maxExtent) {
      VectorContext$$1.call(this);

      /**
       * @protected
       * @type {number}
       */
      this.tolerance = tolerance;

      /**
       * @protected
       * @const
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent = maxExtent;

      /**
       * The origin of the coordinate system for the point coordinates sent to
       * the GPU. To eliminate jitter caused by precision problems in the GPU
       * we use the "Rendering Relative to Eye" technique described in the "3D
       * Engine Design for Virtual Globes" book.
       * @protected
       * @type {import("../../coordinate.js").Coordinate}
       */
      this.origin = getCenter(maxExtent);

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.projectionMatrix_ = create();

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.offsetRotateMatrix_ = create();

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.offsetScaleMatrix_ = create();

      /**
       * @private
       * @type {Array<number>}
       */
      this.tmpMat4_ = create$1();

      /**
       * @protected
       * @type {Array<number>}
       */
      this.indices = [];

      /**
       * @protected
       * @type {?import("../../webgl/Buffer.js").default}
       */
      this.indicesBuffer = null;

      /**
       * Start index per feature (the index).
       * @protected
       * @type {Array<number>}
       */
      this.startIndices = [];

      /**
       * Start index per feature (the feature).
       * @protected
       * @type {Array<import("../../Feature.js").default|import("../Feature.js").default>}
       */
      this.startIndicesFeature = [];

      /**
       * @protected
       * @type {Array<number>}
       */
      this.vertices = [];

      /**
       * @protected
       * @type {?import("../../webgl/Buffer.js").default}
       */
      this.verticesBuffer = null;

      /**
       * Optional parameter for PolygonReplay instances.
       * @protected
       * @type {import("./LineStringReplay.js").default|undefined}
       */
      this.lineStringReplay = undefined;

    }

    if ( VectorContext$$1 ) WebGLReplay.__proto__ = VectorContext$$1;
    WebGLReplay.prototype = Object.create( VectorContext$$1 && VectorContext$$1.prototype );
    WebGLReplay.prototype.constructor = WebGLReplay;

    /**
     * @abstract
     * @param {import("../../webgl/Context.js").default} context WebGL context.
     * @return {function()} Delete resources function.
     */
    WebGLReplay.prototype.getDeleteResourcesFunction = function getDeleteResourcesFunction (context) {
      return abstract();
    };

    /**
     * @abstract
     * @param {import("../../webgl/Context.js").default} context Context.
     */
    WebGLReplay.prototype.finish = function finish (context) {
      abstract();
    };

    /**
     * @abstract
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {import("../../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @return {import("./circlereplay/defaultshader/Locations.js").default|
       import("./linestringreplay/defaultshader/Locations.js").default|
       import("./polygonreplay/defaultshader/Locations.js").default|
       import("./texturereplay/defaultshader/Locations.js").default} Locations.
     */
    WebGLReplay.prototype.setUpProgram = function setUpProgram (gl, context, size, pixelRatio) {
      return abstract();
    };

    /**
     * @abstract
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("./circlereplay/defaultshader/Locations.js").default|
       import("./linestringreplay/defaultshader/Locations.js").default|
       import("./polygonreplay/defaultshader/Locations.js").default|
       import("./texturereplay/defaultshader/Locations.js").default} locations Locations.
     */
    WebGLReplay.prototype.shutDownProgram = function shutDownProgram (gl, locations) {
      abstract();
    };

    /**
     * @abstract
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {boolean} hitDetection Hit detection mode.
     */
    WebGLReplay.prototype.drawReplay = function drawReplay (gl, context, skippedFeaturesHash, hitDetection) {
      abstract();
    };

    /**
     * @abstract
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} featureCallback Feature callback.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Hit extent: Only features intersecting this extent are checked.
     * @return {T|undefined} Callback result.
     * @template T
     */
    WebGLReplay.prototype.drawHitDetectionReplayOneByOne = function drawHitDetectionReplayOneByOne (gl, context, skippedFeaturesHash, featureCallback, opt_hitExtent) {
      return abstract();
    };

    /**
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} featureCallback Feature callback.
     * @param {boolean} oneByOne Draw features one-by-one for the hit-detecion.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Hit extent: Only features intersecting this extent are checked.
     * @return {T|undefined} Callback result.
     * @template T
     */
    WebGLReplay.prototype.drawHitDetectionReplay = function drawHitDetectionReplay (gl, context, skippedFeaturesHash, featureCallback, oneByOne, opt_hitExtent) {
      if (!oneByOne) {
        // draw all hit-detection features in "once" (by texture group)
        return this.drawHitDetectionReplayAll(gl, context,
          skippedFeaturesHash, featureCallback);
      } else {
        // draw hit-detection features one by one
        return this.drawHitDetectionReplayOneByOne(gl, context,
          skippedFeaturesHash, featureCallback, opt_hitExtent);
      }
    };

    /**
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} featureCallback Feature callback.
     * @return {T|undefined} Callback result.
     * @template T
     */
    WebGLReplay.prototype.drawHitDetectionReplayAll = function drawHitDetectionReplayAll (gl, context, skippedFeaturesHash, featureCallback) {
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      this.drawReplay(gl, context, skippedFeaturesHash, true);

      var result = featureCallback(null);
      if (result) {
        return result;
      } else {
        return undefined;
      }
    };

    /**
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} opacity Global opacity.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} featureCallback Feature callback.
     * @param {boolean} oneByOne Draw features one-by-one for the hit-detecion.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Hit extent: Only features intersecting this extent are checked.
     * @return {T|undefined} Callback result.
     * @template T
     */
    WebGLReplay.prototype.replay = function replay (
      context,
      center,
      resolution,
      rotation,
      size,
      pixelRatio,
      opacity,
      skippedFeaturesHash,
      featureCallback,
      oneByOne,
      opt_hitExtent
    ) {
      var gl = context.getGL();
      var tmpStencil, tmpStencilFunc, tmpStencilMaskVal, tmpStencilRef, tmpStencilMask,
          tmpStencilOpFail, tmpStencilOpPass, tmpStencilOpZFail;

      if (this.lineStringReplay) {
        tmpStencil = gl.isEnabled(gl.STENCIL_TEST);
        tmpStencilFunc = gl.getParameter(gl.STENCIL_FUNC);
        tmpStencilMaskVal = gl.getParameter(gl.STENCIL_VALUE_MASK);
        tmpStencilRef = gl.getParameter(gl.STENCIL_REF);
        tmpStencilMask = gl.getParameter(gl.STENCIL_WRITEMASK);
        tmpStencilOpFail = gl.getParameter(gl.STENCIL_FAIL);
        tmpStencilOpPass = gl.getParameter(gl.STENCIL_PASS_DEPTH_PASS);
        tmpStencilOpZFail = gl.getParameter(gl.STENCIL_PASS_DEPTH_FAIL);

        gl.enable(gl.STENCIL_TEST);
        gl.clear(gl.STENCIL_BUFFER_BIT);
        gl.stencilMask(255);
        gl.stencilFunc(gl.ALWAYS, 1, 255);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);

        this.lineStringReplay.replay(context,
          center, resolution, rotation, size, pixelRatio,
          opacity, skippedFeaturesHash,
          featureCallback, oneByOne, opt_hitExtent);

        gl.stencilMask(0);
        gl.stencilFunc(gl.NOTEQUAL, 1, 255);
      }

      context.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);

      context.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);

      var locations = this.setUpProgram(gl, context, size, pixelRatio);

      // set the "uniform" values
      var projectionMatrix = reset(this.projectionMatrix_);
      scale$2(projectionMatrix, 2 / (resolution * size[0]), 2 / (resolution * size[1]));
      rotate$2(projectionMatrix, -rotation);
      translate$1(projectionMatrix, -(center[0] - this.origin[0]), -(center[1] - this.origin[1]));

      var offsetScaleMatrix = reset(this.offsetScaleMatrix_);
      scale$2(offsetScaleMatrix, 2 / size[0], 2 / size[1]);

      var offsetRotateMatrix = reset(this.offsetRotateMatrix_);
      if (rotation !== 0) {
        rotate$2(offsetRotateMatrix, -rotation);
      }

      gl.uniformMatrix4fv(locations.u_projectionMatrix, false,
        fromTransform(this.tmpMat4_, projectionMatrix));
      gl.uniformMatrix4fv(locations.u_offsetScaleMatrix, false,
        fromTransform(this.tmpMat4_, offsetScaleMatrix));
      gl.uniformMatrix4fv(locations.u_offsetRotateMatrix, false,
        fromTransform(this.tmpMat4_, offsetRotateMatrix));
      gl.uniform1f(locations.u_opacity, opacity);

      // draw!
      var result;
      if (featureCallback === undefined) {
        this.drawReplay(gl, context, skippedFeaturesHash, false);
      } else {
        // draw feature by feature for the hit-detection
        result = this.drawHitDetectionReplay(gl, context, skippedFeaturesHash,
          featureCallback, oneByOne, opt_hitExtent);
      }

      // disable the vertex attrib arrays
      this.shutDownProgram(gl, locations);

      if (this.lineStringReplay) {
        if (!tmpStencil) {
          gl.disable(gl.STENCIL_TEST);
        }
        gl.clear(gl.STENCIL_BUFFER_BIT);
        gl.stencilFunc(/** @type {number} */ (tmpStencilFunc),
          /** @type {number} */ (tmpStencilRef), /** @type {number} */ (tmpStencilMaskVal));
        gl.stencilMask(/** @type {number} */ (tmpStencilMask));
        gl.stencilOp(/** @type {number} */ (tmpStencilOpFail),
          /** @type {number} */ (tmpStencilOpZFail), /** @type {number} */ (tmpStencilOpPass));
      }

      return result;
    };

    /**
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {number} start Start index.
     * @param {number} end End index.
     */
    WebGLReplay.prototype.drawElements = function drawElements (gl, context, start, end) {
      var elementType = context.hasOESElementIndexUint ?
        UNSIGNED_INT : UNSIGNED_SHORT;
      var elementSize = context.hasOESElementIndexUint ? 4 : 2;

      var numItems = end - start;
      var offsetInBytes = start * elementSize;
      gl.drawElements(TRIANGLES, numItems, elementType, offsetInBytes);
    };

    return WebGLReplay;
  }(VectorContext));

  /**
   * @module ol/render/webgl
   */


  /**
   * @const
   * @type {string}
   */
  var DEFAULT_FONT = '10px sans-serif';


  /**
   * @const
   * @type {import("../color.js").Color}
   */
  var DEFAULT_FILLSTYLE = [0.0, 0.0, 0.0, 1.0];


  /**
   * @const
   * @type {string}
   */
  var DEFAULT_LINECAP = 'round';


  /**
   * @const
   * @type {Array<number>}
   */
  var DEFAULT_LINEDASH = [];


  /**
   * @const
   * @type {number}
   */
  var DEFAULT_LINEDASHOFFSET = 0;


  /**
   * @const
   * @type {string}
   */
  var DEFAULT_LINEJOIN = 'round';


  /**
   * @const
   * @type {number}
   */
  var DEFAULT_MITERLIMIT = 10;

  /**
   * @const
   * @type {import("../color.js").Color}
   */
  var DEFAULT_STROKESTYLE = [0.0, 0.0, 0.0, 1.0];


  /**
   * @const
   * @type {number}
   */
  var DEFAULT_TEXTALIGN = 0.5;


  /**
   * @const
   * @type {number}
   */
  var DEFAULT_TEXTBASELINE = 0.5;


  /**
   * @const
   * @type {number}
   */
  var DEFAULT_LINEWIDTH = 1;

  /**
   * @const
   * @type {number}
   */
  var EPSILON = Number.EPSILON || 2.220446049250313e-16;

  /**
   * Calculates the orientation of a triangle based on the determinant method.
   * @param {number} x1 First X coordinate.
   * @param {number} y1 First Y coordinate.
   * @param {number} x2 Second X coordinate.
   * @param {number} y2 Second Y coordinate.
   * @param {number} x3 Third X coordinate.
   * @param {number} y3 Third Y coordinate.
   * @return {boolean|undefined} Triangle is clockwise.
   */
  var triangleIsCounterClockwise = function(x1, y1, x2, y2, x3, y3) {
    var area = (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1);
    return (area <= EPSILON && area >= -EPSILON) ?
      undefined : area > 0;
  };

  /**
   * @module ol/webgl/Buffer
   */

  /**
   * @enum {number}
   */
  var BufferUsage = {
    STATIC_DRAW: STATIC_DRAW,
    STREAM_DRAW: STREAM_DRAW,
    DYNAMIC_DRAW: DYNAMIC_DRAW
  };


  var WebGLBuffer = function WebGLBuffer(opt_arr, opt_usage) {

    /**
     * @private
     * @type {Array<number>}
     */
    this.arr_ = opt_arr !== undefined ? opt_arr : [];

    /**
     * @private
     * @type {number}
     */
    this.usage_ = opt_usage !== undefined ? opt_usage : BufferUsage.STATIC_DRAW;

  };

  /**
   * @return {Array<number>} Array.
   */
  WebGLBuffer.prototype.getArray = function getArray () {
    return this.arr_;
  };

  /**
   * @return {number} Usage.
   */
  WebGLBuffer.prototype.getUsage = function getUsage () {
    return this.usage_;
  };

  /**
   * @module ol/render/webgl/CircleReplay
   */

  var WebGLCircleReplay = /*@__PURE__*/(function (WebGLReplay$$1) {
    function WebGLCircleReplay(tolerance, maxExtent) {
      WebGLReplay$$1.call(this, tolerance, maxExtent);

      /**
       * @private
       * @type {import("./circlereplay/defaultshader/Locations.js").default}
       */
      this.defaultLocations_ = null;

      /**
       * @private
       * @type {Array<Array<Array<number>|number>>}
       */
      this.styles_ = [];

      /**
       * @private
       * @type {Array<number>}
       */
      this.styleIndices_ = [];

      /**
       * @private
       * @type {number}
       */
      this.radius_ = 0;

      /**
       * @private
       * @type {{fillColor: (Array<number>|null),
       *         strokeColor: (Array<number>|null),
       *         lineDash: Array<number>,
       *         lineDashOffset: (number|undefined),
       *         lineWidth: (number|undefined),
       *         changed: boolean}|null}
       */
      this.state_ = {
        fillColor: null,
        strokeColor: null,
        lineDash: null,
        lineDashOffset: undefined,
        lineWidth: undefined,
        changed: false
      };

    }

    if ( WebGLReplay$$1 ) WebGLCircleReplay.__proto__ = WebGLReplay$$1;
    WebGLCircleReplay.prototype = Object.create( WebGLReplay$$1 && WebGLReplay$$1.prototype );
    WebGLCircleReplay.prototype.constructor = WebGLCircleReplay;

    /**
     * @private
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     */
    WebGLCircleReplay.prototype.drawCoordinates_ = function drawCoordinates_ (flatCoordinates, offset, end, stride) {
      var numVertices = this.vertices.length;
      var numIndices = this.indices.length;
      var n = numVertices / 4;
      var i, ii;
      for (i = offset, ii = end; i < ii; i += stride) {
        this.vertices[numVertices++] = flatCoordinates[i];
        this.vertices[numVertices++] = flatCoordinates[i + 1];
        this.vertices[numVertices++] = 0;
        this.vertices[numVertices++] = this.radius_;

        this.vertices[numVertices++] = flatCoordinates[i];
        this.vertices[numVertices++] = flatCoordinates[i + 1];
        this.vertices[numVertices++] = 1;
        this.vertices[numVertices++] = this.radius_;

        this.vertices[numVertices++] = flatCoordinates[i];
        this.vertices[numVertices++] = flatCoordinates[i + 1];
        this.vertices[numVertices++] = 2;
        this.vertices[numVertices++] = this.radius_;

        this.vertices[numVertices++] = flatCoordinates[i];
        this.vertices[numVertices++] = flatCoordinates[i + 1];
        this.vertices[numVertices++] = 3;
        this.vertices[numVertices++] = this.radius_;

        this.indices[numIndices++] = n;
        this.indices[numIndices++] = n + 1;
        this.indices[numIndices++] = n + 2;

        this.indices[numIndices++] = n + 2;
        this.indices[numIndices++] = n + 3;
        this.indices[numIndices++] = n;

        n += 4;
      }
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.drawCircle = function drawCircle (circleGeometry, feature) {
      var radius = circleGeometry.getRadius();
      var stride = circleGeometry.getStride();
      if (radius) {
        this.startIndices.push(this.indices.length);
        this.startIndicesFeature.push(feature);
        if (this.state_.changed) {
          this.styleIndices_.push(this.indices.length);
          this.state_.changed = false;
        }

        this.radius_ = radius;
        var flatCoordinates = circleGeometry.getFlatCoordinates();
        flatCoordinates = translate(flatCoordinates, 0, 2,
          stride, -this.origin[0], -this.origin[1]);
        this.drawCoordinates_(flatCoordinates, 0, 2, stride);
      } else {
        if (this.state_.changed) {
          this.styles_.pop();
          if (this.styles_.length) {
            var lastState = this.styles_[this.styles_.length - 1];
            this.state_.fillColor = /** @type {Array<number>} */ (lastState[0]);
            this.state_.strokeColor = /** @type {Array<number>} */ (lastState[1]);
            this.state_.lineWidth = /** @type {number} */ (lastState[2]);
            this.state_.changed = false;
          }
        }
      }
    };

    /**
     * @inheritDoc
     **/
    WebGLCircleReplay.prototype.finish = function finish (context) {
      // create, bind, and populate the vertices buffer
      this.verticesBuffer = new WebGLBuffer(this.vertices);

      // create, bind, and populate the indices buffer
      this.indicesBuffer = new WebGLBuffer(this.indices);

      this.startIndices.push(this.indices.length);

      //Clean up, if there is nothing to draw
      if (this.styleIndices_.length === 0 && this.styles_.length > 0) {
        this.styles_ = [];
      }

      this.vertices = null;
      this.indices = null;
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.getDeleteResourcesFunction = function getDeleteResourcesFunction (context) {
      // We only delete our stuff here. The shaders and the program may
      // be used by other CircleReplay instances (for other layers). And
      // they will be deleted when disposing of the import("../../webgl/Context.js").WebGLContext
      // object.
      var verticesBuffer = this.verticesBuffer;
      var indicesBuffer = this.indicesBuffer;
      return function() {
        context.deleteBuffer(verticesBuffer);
        context.deleteBuffer(indicesBuffer);
      };
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.setUpProgram = function setUpProgram (gl, context, size, pixelRatio) {
      // get the program
      var program = context.getProgram(fragment, vertex);

      // get the locations
      var locations;
      if (!this.defaultLocations_) {
        locations = new Locations(gl, program);
        this.defaultLocations_ = locations;
      } else {
        locations = this.defaultLocations_;
      }

      context.useProgram(program);

      // enable the vertex attrib arrays
      gl.enableVertexAttribArray(locations.a_position);
      gl.vertexAttribPointer(locations.a_position, 2, FLOAT,
        false, 16, 0);

      gl.enableVertexAttribArray(locations.a_instruction);
      gl.vertexAttribPointer(locations.a_instruction, 1, FLOAT,
        false, 16, 8);

      gl.enableVertexAttribArray(locations.a_radius);
      gl.vertexAttribPointer(locations.a_radius, 1, FLOAT,
        false, 16, 12);

      // Enable renderer specific uniforms.
      gl.uniform2fv(locations.u_size, size);
      gl.uniform1f(locations.u_pixelRatio, pixelRatio);

      return locations;
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.shutDownProgram = function shutDownProgram (gl, locations) {
      gl.disableVertexAttribArray(locations.a_position);
      gl.disableVertexAttribArray(locations.a_instruction);
      gl.disableVertexAttribArray(locations.a_radius);
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.drawReplay = function drawReplay (gl, context, skippedFeaturesHash, hitDetection) {
      if (!isEmpty(skippedFeaturesHash)) {
        this.drawReplaySkipping_(gl, context, skippedFeaturesHash);
      } else {
        //Draw by style groups to minimize drawElements() calls.
        var i, start, end, nextStyle;
        end = this.startIndices[this.startIndices.length - 1];
        for (i = this.styleIndices_.length - 1; i >= 0; --i) {
          start = this.styleIndices_[i];
          nextStyle = this.styles_[i];
          this.setFillStyle_(gl, /** @type {Array<number>} */ (nextStyle[0]));
          this.setStrokeStyle_(gl, /** @type {Array<number>} */ (nextStyle[1]),
            /** @type {number} */ (nextStyle[2]));
          this.drawElements(gl, context, start, end);
          end = start;
        }
      }
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.drawHitDetectionReplayOneByOne = function drawHitDetectionReplayOneByOne (gl, context, skippedFeaturesHash, featureCallback, opt_hitExtent) {
      var i, start, end, nextStyle, groupStart, feature, featureIndex;
      featureIndex = this.startIndices.length - 2;
      end = this.startIndices[featureIndex + 1];
      for (i = this.styleIndices_.length - 1; i >= 0; --i) {
        nextStyle = this.styles_[i];
        this.setFillStyle_(gl, /** @type {Array<number>} */ (nextStyle[0]));
        this.setStrokeStyle_(gl, /** @type {Array<number>} */ (nextStyle[1]),
          /** @type {number} */ (nextStyle[2]));
        groupStart = this.styleIndices_[i];

        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          start = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)] === undefined &&
              feature.getGeometry() &&
              (opt_hitExtent === undefined || intersects(
                /** @type {Array<number>} */ (opt_hitExtent),
                feature.getGeometry().getExtent()))) {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            this.drawElements(gl, context, start, end);

            var result = featureCallback(feature);

            if (result) {
              return result;
            }

          }
          featureIndex--;
          end = start;
        }
      }
      return undefined;
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object} skippedFeaturesHash Ids of features to skip.
     */
    WebGLCircleReplay.prototype.drawReplaySkipping_ = function drawReplaySkipping_ (gl, context, skippedFeaturesHash) {
      var i, start, end, nextStyle, groupStart, feature, featureIndex, featureStart;
      featureIndex = this.startIndices.length - 2;
      end = start = this.startIndices[featureIndex + 1];
      for (i = this.styleIndices_.length - 1; i >= 0; --i) {
        nextStyle = this.styles_[i];
        this.setFillStyle_(gl, /** @type {Array<number>} */ (nextStyle[0]));
        this.setStrokeStyle_(gl, /** @type {Array<number>} */ (nextStyle[1]),
          /** @type {number} */ (nextStyle[2]));
        groupStart = this.styleIndices_[i];

        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          featureStart = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)]) {
            if (start !== end) {
              this.drawElements(gl, context, start, end);
            }
            end = featureStart;
          }
          featureIndex--;
          start = featureStart;
        }
        if (start !== end) {
          this.drawElements(gl, context, start, end);
        }
        start = end = groupStart;
      }
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {Array<number>} color Color.
     */
    WebGLCircleReplay.prototype.setFillStyle_ = function setFillStyle_ (gl, color) {
      gl.uniform4fv(this.defaultLocations_.u_fillColor, color);
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {Array<number>} color Color.
     * @param {number} lineWidth Line width.
     */
    WebGLCircleReplay.prototype.setStrokeStyle_ = function setStrokeStyle_ (gl, color, lineWidth) {
      gl.uniform4fv(this.defaultLocations_.u_strokeColor, color);
      gl.uniform1f(this.defaultLocations_.u_lineWidth, lineWidth);
    };

    /**
     * @inheritDoc
     */
    WebGLCircleReplay.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {
      var strokeStyleColor, strokeStyleWidth;
      if (strokeStyle) {
        var strokeStyleLineDash = strokeStyle.getLineDash();
        this.state_.lineDash = strokeStyleLineDash ?
          strokeStyleLineDash : DEFAULT_LINEDASH;
        var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
        this.state_.lineDashOffset = strokeStyleLineDashOffset ?
          strokeStyleLineDashOffset : DEFAULT_LINEDASHOFFSET;
        strokeStyleColor = strokeStyle.getColor();
        if (!(strokeStyleColor instanceof CanvasGradient) &&
            !(strokeStyleColor instanceof CanvasPattern)) {
          strokeStyleColor = asArray(strokeStyleColor).map(function(c, i) {
            return i != 3 ? c / 255 : c;
          }) || DEFAULT_STROKESTYLE;
        } else {
          strokeStyleColor = DEFAULT_STROKESTYLE;
        }
        strokeStyleWidth = strokeStyle.getWidth();
        strokeStyleWidth = strokeStyleWidth !== undefined ?
          strokeStyleWidth : DEFAULT_LINEWIDTH;
      } else {
        strokeStyleColor = [0, 0, 0, 0];
        strokeStyleWidth = 0;
      }
      var fillStyleColor = fillStyle ? fillStyle.getColor() : [0, 0, 0, 0];
      if (!(fillStyleColor instanceof CanvasGradient) &&
          !(fillStyleColor instanceof CanvasPattern)) {
        fillStyleColor = asArray(fillStyleColor).map(function(c, i) {
          return i != 3 ? c / 255 : c;
        }) || DEFAULT_FILLSTYLE;
      } else {
        fillStyleColor = DEFAULT_FILLSTYLE;
      }
      if (!this.state_.strokeColor || !equals(this.state_.strokeColor, strokeStyleColor) ||
          !this.state_.fillColor || !equals(this.state_.fillColor, fillStyleColor) ||
          this.state_.lineWidth !== strokeStyleWidth) {
        this.state_.changed = true;
        this.state_.fillColor = fillStyleColor;
        this.state_.strokeColor = strokeStyleColor;
        this.state_.lineWidth = strokeStyleWidth;
        this.styles_.push([fillStyleColor, strokeStyleColor, strokeStyleWidth]);
      }
    };

    return WebGLCircleReplay;
  }(WebGLReplay));

  /**
   * @module ol/render/webgl/texturereplay/defaultshader
   */

  var fragment$1 = new WebGLFragment('precision mediump float;\nvarying vec2 v_texCoord;\nvarying float v_opacity;\n\nuniform float u_opacity;\nuniform sampler2D u_image;\n\nvoid main(void) {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n  gl_FragColor.rgb = texColor.rgb;\n  float alpha = texColor.a * v_opacity * u_opacity;\n  if (alpha == 0.0) {\n    discard;\n  }\n  gl_FragColor.a = alpha;\n}\n');

  var vertex$1 = new WebGLVertex('varying vec2 v_texCoord;\nvarying float v_opacity;\n\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nattribute vec2 a_offsets;\nattribute float a_opacity;\nattribute float a_rotateWithView;\n\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\n\nvoid main(void) {\n  mat4 offsetMatrix = u_offsetScaleMatrix;\n  if (a_rotateWithView == 1.0) {\n    offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;\n  }\n  vec4 offsets = offsetMatrix * vec4(a_offsets, 0.0, 0.0);\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n  v_texCoord = a_texCoord;\n  v_opacity = a_opacity;\n}\n\n\n');

  /**
   * @module ol/render/webgl/texturereplay/defaultshader/Locations
   */

  var Locations$1 = function Locations(gl, program) {

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_projectionMatrix = gl.getUniformLocation(
      program, 'u_projectionMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetScaleMatrix = gl.getUniformLocation(
      program, 'u_offsetScaleMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetRotateMatrix = gl.getUniformLocation(
      program, 'u_offsetRotateMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_opacity = gl.getUniformLocation(
      program, 'u_opacity');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_image = gl.getUniformLocation(
      program, 'u_image');

    /**
     * @type {number}
     */
    this.a_position = gl.getAttribLocation(
      program, 'a_position');

    /**
     * @type {number}
     */
    this.a_texCoord = gl.getAttribLocation(
      program, 'a_texCoord');

    /**
     * @type {number}
     */
    this.a_offsets = gl.getAttribLocation(
      program, 'a_offsets');

    /**
     * @type {number}
     */
    this.a_opacity = gl.getAttribLocation(
      program, 'a_opacity');

    /**
     * @type {number}
     */
    this.a_rotateWithView = gl.getAttribLocation(
      program, 'a_rotateWithView');

  };

  /**
   * @module ol/webgl/ContextEventType
   */

  /**
   * @enum {string}
   */
  var ContextEventType = {
    LOST: 'webglcontextlost',
    RESTORED: 'webglcontextrestored'
  };

  /**
   * @module ol/webgl/Context
   */


  /**
   * @typedef {Object} BufferCacheEntry
   * @property {import("./Buffer.js").default} buf
   * @property {WebGLBuffer} buffer
   */


  /**
   * @classdesc
   * A WebGL context for accessing low-level WebGL capabilities.
   */
  var WebGLContext = /*@__PURE__*/(function (Disposable$$1) {
    function WebGLContext(canvas, gl) {
      Disposable$$1.call(this);

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = canvas;

      /**
       * @private
       * @type {WebGLRenderingContext}
       */
      this.gl_ = gl;

      /**
       * @private
       * @type {!Object<string, BufferCacheEntry>}
       */
      this.bufferCache_ = {};

      /**
       * @private
       * @type {!Object<string, WebGLShader>}
       */
      this.shaderCache_ = {};

      /**
       * @private
       * @type {!Object<string, WebGLProgram>}
       */
      this.programCache_ = {};

      /**
       * @private
       * @type {WebGLProgram}
       */
      this.currentProgram_ = null;

      /**
       * @private
       * @type {WebGLFramebuffer}
       */
      this.hitDetectionFramebuffer_ = null;

      /**
       * @private
       * @type {WebGLTexture}
       */
      this.hitDetectionTexture_ = null;

      /**
       * @private
       * @type {WebGLRenderbuffer}
       */
      this.hitDetectionRenderbuffer_ = null;

      /**
       * @type {boolean}
       */
      this.hasOESElementIndexUint = includes(EXTENSIONS, 'OES_element_index_uint');

      // use the OES_element_index_uint extension if available
      if (this.hasOESElementIndexUint) {
        gl.getExtension('OES_element_index_uint');
      }

      listen(this.canvas_, ContextEventType.LOST,
        this.handleWebGLContextLost, this);
      listen(this.canvas_, ContextEventType.RESTORED,
        this.handleWebGLContextRestored, this);

    }

    if ( Disposable$$1 ) WebGLContext.__proto__ = Disposable$$1;
    WebGLContext.prototype = Object.create( Disposable$$1 && Disposable$$1.prototype );
    WebGLContext.prototype.constructor = WebGLContext;

    /**
     * Just bind the buffer if it's in the cache. Otherwise create
     * the WebGL buffer, bind it, populate it, and add an entry to
     * the cache.
     * @param {number} target Target.
     * @param {import("./Buffer.js").default} buf Buffer.
     */
    WebGLContext.prototype.bindBuffer = function bindBuffer (target, buf) {
      var gl = this.getGL();
      var arr = buf.getArray();
      var bufferKey = getUid(buf);
      if (bufferKey in this.bufferCache_) {
        var bufferCacheEntry = this.bufferCache_[bufferKey];
        gl.bindBuffer(target, bufferCacheEntry.buffer);
      } else {
        var buffer = gl.createBuffer();
        gl.bindBuffer(target, buffer);
        var /** @type {ArrayBufferView} */ arrayBuffer;
        if (target == ARRAY_BUFFER) {
          arrayBuffer = new Float32Array(arr);
        } else if (target == ELEMENT_ARRAY_BUFFER) {
          arrayBuffer = this.hasOESElementIndexUint ?
            new Uint32Array(arr) : new Uint16Array(arr);
        }
        gl.bufferData(target, arrayBuffer, buf.getUsage());
        this.bufferCache_[bufferKey] = {
          buf: buf,
          buffer: buffer
        };
      }
    };

    /**
     * @param {import("./Buffer.js").default} buf Buffer.
     */
    WebGLContext.prototype.deleteBuffer = function deleteBuffer (buf) {
      var gl = this.getGL();
      var bufferKey = getUid(buf);
      var bufferCacheEntry = this.bufferCache_[bufferKey];
      if (!gl.isContextLost()) {
        gl.deleteBuffer(bufferCacheEntry.buffer);
      }
      delete this.bufferCache_[bufferKey];
    };

    /**
     * @inheritDoc
     */
    WebGLContext.prototype.disposeInternal = function disposeInternal () {
      unlistenAll(this.canvas_);
      var gl = this.getGL();
      if (!gl.isContextLost()) {
        for (var key in this.bufferCache_) {
          gl.deleteBuffer(this.bufferCache_[key].buffer);
        }
        for (var key$1 in this.programCache_) {
          gl.deleteProgram(this.programCache_[key$1]);
        }
        for (var key$2 in this.shaderCache_) {
          gl.deleteShader(this.shaderCache_[key$2]);
        }
        // delete objects for hit-detection
        gl.deleteFramebuffer(this.hitDetectionFramebuffer_);
        gl.deleteRenderbuffer(this.hitDetectionRenderbuffer_);
        gl.deleteTexture(this.hitDetectionTexture_);
      }
    };

    /**
     * @return {HTMLCanvasElement} Canvas.
     */
    WebGLContext.prototype.getCanvas = function getCanvas () {
      return this.canvas_;
    };

    /**
     * Get the WebGL rendering context
     * @return {WebGLRenderingContext} The rendering context.
     * @api
     */
    WebGLContext.prototype.getGL = function getGL () {
      return this.gl_;
    };

    /**
     * Get the frame buffer for hit detection.
     * @return {WebGLFramebuffer} The hit detection frame buffer.
     */
    WebGLContext.prototype.getHitDetectionFramebuffer = function getHitDetectionFramebuffer () {
      if (!this.hitDetectionFramebuffer_) {
        this.initHitDetectionFramebuffer_();
      }
      return this.hitDetectionFramebuffer_;
    };

    /**
     * Get shader from the cache if it's in the cache. Otherwise, create
     * the WebGL shader, compile it, and add entry to cache.
     * @param {import("./Shader.js").default} shaderObject Shader object.
     * @return {WebGLShader} Shader.
     */
    WebGLContext.prototype.getShader = function getShader (shaderObject) {
      var shaderKey = getUid(shaderObject);
      if (shaderKey in this.shaderCache_) {
        return this.shaderCache_[shaderKey];
      } else {
        var gl = this.getGL();
        var shader = gl.createShader(shaderObject.getType());
        gl.shaderSource(shader, shaderObject.getSource());
        gl.compileShader(shader);
        this.shaderCache_[shaderKey] = shader;
        return shader;
      }
    };

    /**
     * Get the program from the cache if it's in the cache. Otherwise create
     * the WebGL program, attach the shaders to it, and add an entry to the
     * cache.
     * @param {import("./Fragment.js").default} fragmentShaderObject Fragment shader.
     * @param {import("./Vertex.js").default} vertexShaderObject Vertex shader.
     * @return {WebGLProgram} Program.
     */
    WebGLContext.prototype.getProgram = function getProgram (fragmentShaderObject, vertexShaderObject) {
      var programKey = getUid(fragmentShaderObject) + '/' + getUid(vertexShaderObject);
      if (programKey in this.programCache_) {
        return this.programCache_[programKey];
      } else {
        var gl = this.getGL();
        var program = gl.createProgram();
        gl.attachShader(program, this.getShader(fragmentShaderObject));
        gl.attachShader(program, this.getShader(vertexShaderObject));
        gl.linkProgram(program);
        this.programCache_[programKey] = program;
        return program;
      }
    };

    /**
     * FIXME empty description for jsdoc
     */
    WebGLContext.prototype.handleWebGLContextLost = function handleWebGLContextLost () {
      clear(this.bufferCache_);
      clear(this.shaderCache_);
      clear(this.programCache_);
      this.currentProgram_ = null;
      this.hitDetectionFramebuffer_ = null;
      this.hitDetectionTexture_ = null;
      this.hitDetectionRenderbuffer_ = null;
    };

    /**
     * FIXME empty description for jsdoc
     */
    WebGLContext.prototype.handleWebGLContextRestored = function handleWebGLContextRestored () {
    };

    /**
     * Creates a 1x1 pixel framebuffer for the hit-detection.
     * @private
     */
    WebGLContext.prototype.initHitDetectionFramebuffer_ = function initHitDetectionFramebuffer_ () {
      var gl = this.gl_;
      var framebuffer = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);

      var texture = createEmptyTexture(gl, 1, 1);
      var renderbuffer = gl.createRenderbuffer();
      gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, 1, 1);
      gl.framebufferTexture2D(
        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT,
        gl.RENDERBUFFER, renderbuffer);

      gl.bindTexture(gl.TEXTURE_2D, null);
      gl.bindRenderbuffer(gl.RENDERBUFFER, null);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);

      this.hitDetectionFramebuffer_ = framebuffer;
      this.hitDetectionTexture_ = texture;
      this.hitDetectionRenderbuffer_ = renderbuffer;
    };

    /**
     * Use a program.  If the program is already in use, this will return `false`.
     * @param {WebGLProgram} program Program.
     * @return {boolean} Changed.
     * @api
     */
    WebGLContext.prototype.useProgram = function useProgram (program) {
      if (program == this.currentProgram_) {
        return false;
      } else {
        var gl = this.getGL();
        gl.useProgram(program);
        this.currentProgram_ = program;
        return true;
      }
    };

    return WebGLContext;
  }(Disposable));


  /**
   * @param {WebGLRenderingContext} gl WebGL rendering context.
   * @param {number=} opt_wrapS wrapS.
   * @param {number=} opt_wrapT wrapT.
   * @return {WebGLTexture} The texture.
   */
  function createTextureInternal(gl, opt_wrapS, opt_wrapT) {
    var texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

    if (opt_wrapS !== undefined) {
      gl.texParameteri(
        TEXTURE_2D, TEXTURE_WRAP_S, opt_wrapS);
    }
    if (opt_wrapT !== undefined) {
      gl.texParameteri(
        TEXTURE_2D, TEXTURE_WRAP_T, opt_wrapT);
    }

    return texture;
  }


  /**
   * @param {WebGLRenderingContext} gl WebGL rendering context.
   * @param {number} width Width.
   * @param {number} height Height.
   * @param {number=} opt_wrapS wrapS.
   * @param {number=} opt_wrapT wrapT.
   * @return {WebGLTexture} The texture.
   */
  function createEmptyTexture(gl, width, height, opt_wrapS, opt_wrapT) {
    var texture = createTextureInternal(gl, opt_wrapS, opt_wrapT);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
    return texture;
  }


  /**
   * @param {WebGLRenderingContext} gl WebGL rendering context.
   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
   * @param {number=} opt_wrapS wrapS.
   * @param {number=} opt_wrapT wrapT.
   * @return {WebGLTexture} The texture.
   */
  function createTexture(gl, image, opt_wrapS, opt_wrapT) {
    var texture = createTextureInternal(gl, opt_wrapS, opt_wrapT);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
    return texture;
  }

  /**
   * @module ol/render/webgl/TextureReplay
   */

  var WebGLTextureReplay = /*@__PURE__*/(function (WebGLReplay$$1) {
    function WebGLTextureReplay(tolerance, maxExtent) {
      WebGLReplay$$1.call(this, tolerance, maxExtent);

      /**
       * @type {number|undefined}
       * @protected
       */
      this.anchorX = undefined;

      /**
       * @type {number|undefined}
       * @protected
       */
      this.anchorY = undefined;

      /**
       * @type {Array<number>}
       * @protected
       */
      this.groupIndices = [];

      /**
       * @type {Array<number>}
       * @protected
       */
      this.hitDetectionGroupIndices = [];

      /**
       * @type {number|undefined}
       * @protected
       */
      this.height = undefined;

      /**
       * @type {number|undefined}
       * @protected
       */
      this.imageHeight = undefined;

      /**
       * @type {number|undefined}
       * @protected
       */
      this.imageWidth = undefined;

      /**
       * @protected
       * @type {import("./texturereplay/defaultshader/Locations.js").default}
       */
      this.defaultLocations = null;

      /**
       * @protected
       * @type {number|undefined}
       */
      this.opacity = undefined;

      /**
       * @type {number|undefined}
       * @protected
       */
      this.originX = undefined;

      /**
       * @type {number|undefined}
       * @protected
       */
      this.originY = undefined;

      /**
       * @protected
       * @type {boolean|undefined}
       */
      this.rotateWithView = undefined;

      /**
       * @protected
       * @type {number|undefined}
       */
      this.rotation = undefined;

      /**
       * @protected
       * @type {number|undefined}
       */
      this.scale = undefined;

      /**
       * @type {number|undefined}
       * @protected
       */
      this.width = undefined;
    }

    if ( WebGLReplay$$1 ) WebGLTextureReplay.__proto__ = WebGLReplay$$1;
    WebGLTextureReplay.prototype = Object.create( WebGLReplay$$1 && WebGLReplay$$1.prototype );
    WebGLTextureReplay.prototype.constructor = WebGLTextureReplay;

    /**
     * @inheritDoc
     */
    WebGLTextureReplay.prototype.getDeleteResourcesFunction = function getDeleteResourcesFunction (context) {
      var verticesBuffer = this.verticesBuffer;
      var indicesBuffer = this.indicesBuffer;
      var textures = this.getTextures(true);
      var gl = context.getGL();
      return function() {
        if (!gl.isContextLost()) {
          var i, ii;
          for (i = 0, ii = textures.length; i < ii; ++i) {
            gl.deleteTexture(textures[i]);
          }
        }
        context.deleteBuffer(verticesBuffer);
        context.deleteBuffer(indicesBuffer);
      };
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {number} My end.
     * @protected
     */
    WebGLTextureReplay.prototype.drawCoordinates = function drawCoordinates (flatCoordinates, offset, end, stride) {
      var anchorX = /** @type {number} */ (this.anchorX);
      var anchorY = /** @type {number} */ (this.anchorY);
      var height = /** @type {number} */ (this.height);
      var imageHeight = /** @type {number} */ (this.imageHeight);
      var imageWidth = /** @type {number} */ (this.imageWidth);
      var opacity = /** @type {number} */ (this.opacity);
      var originX = /** @type {number} */ (this.originX);
      var originY = /** @type {number} */ (this.originY);
      var rotateWithView = this.rotateWithView ? 1.0 : 0.0;
      // this.rotation_ is anti-clockwise, but rotation is clockwise
      var rotation = /** @type {number} */ (-this.rotation);
      var scale = /** @type {number} */ (this.scale);
      var width = /** @type {number} */ (this.width);
      var cos = Math.cos(rotation);
      var sin = Math.sin(rotation);
      var numIndices = this.indices.length;
      var numVertices = this.vertices.length;
      var i, n, offsetX, offsetY, x, y;
      for (i = offset; i < end; i += stride) {
        x = flatCoordinates[i] - this.origin[0];
        y = flatCoordinates[i + 1] - this.origin[1];

        // There are 4 vertices per [x, y] point, one for each corner of the
        // rectangle we're going to draw. We'd use 1 vertex per [x, y] point if
        // WebGL supported Geometry Shaders (which can emit new vertices), but that
        // is not currently the case.
        //
        // And each vertex includes 8 values: the x and y coordinates, the x and
        // y offsets used to calculate the position of the corner, the u and
        // v texture coordinates for the corner, the opacity, and whether the
        // the image should be rotated with the view (rotateWithView).

        n = numVertices / 8;

        // bottom-left corner
        offsetX = -scale * anchorX;
        offsetY = -scale * (height - anchorY);
        this.vertices[numVertices++] = x;
        this.vertices[numVertices++] = y;
        this.vertices[numVertices++] = offsetX * cos - offsetY * sin;
        this.vertices[numVertices++] = offsetX * sin + offsetY * cos;
        this.vertices[numVertices++] = originX / imageWidth;
        this.vertices[numVertices++] = (originY + height) / imageHeight;
        this.vertices[numVertices++] = opacity;
        this.vertices[numVertices++] = rotateWithView;

        // bottom-right corner
        offsetX = scale * (width - anchorX);
        offsetY = -scale * (height - anchorY);
        this.vertices[numVertices++] = x;
        this.vertices[numVertices++] = y;
        this.vertices[numVertices++] = offsetX * cos - offsetY * sin;
        this.vertices[numVertices++] = offsetX * sin + offsetY * cos;
        this.vertices[numVertices++] = (originX + width) / imageWidth;
        this.vertices[numVertices++] = (originY + height) / imageHeight;
        this.vertices[numVertices++] = opacity;
        this.vertices[numVertices++] = rotateWithView;

        // top-right corner
        offsetX = scale * (width - anchorX);
        offsetY = scale * anchorY;
        this.vertices[numVertices++] = x;
        this.vertices[numVertices++] = y;
        this.vertices[numVertices++] = offsetX * cos - offsetY * sin;
        this.vertices[numVertices++] = offsetX * sin + offsetY * cos;
        this.vertices[numVertices++] = (originX + width) / imageWidth;
        this.vertices[numVertices++] = originY / imageHeight;
        this.vertices[numVertices++] = opacity;
        this.vertices[numVertices++] = rotateWithView;

        // top-left corner
        offsetX = -scale * anchorX;
        offsetY = scale * anchorY;
        this.vertices[numVertices++] = x;
        this.vertices[numVertices++] = y;
        this.vertices[numVertices++] = offsetX * cos - offsetY * sin;
        this.vertices[numVertices++] = offsetX * sin + offsetY * cos;
        this.vertices[numVertices++] = originX / imageWidth;
        this.vertices[numVertices++] = originY / imageHeight;
        this.vertices[numVertices++] = opacity;
        this.vertices[numVertices++] = rotateWithView;

        this.indices[numIndices++] = n;
        this.indices[numIndices++] = n + 1;
        this.indices[numIndices++] = n + 2;
        this.indices[numIndices++] = n;
        this.indices[numIndices++] = n + 2;
        this.indices[numIndices++] = n + 3;
      }

      return numVertices;
    };

    /**
     * @protected
     * @param {Array<WebGLTexture>} textures Textures.
     * @param {Array<HTMLCanvasElement|HTMLImageElement|HTMLVideoElement>} images Images.
     * @param {!Object<string, WebGLTexture>} texturePerImage Texture cache.
     * @param {WebGLRenderingContext} gl Gl.
     */
    WebGLTextureReplay.prototype.createTextures = function createTextures (textures, images, texturePerImage, gl) {
      var texture, image, uid, i;
      var ii = images.length;
      for (i = 0; i < ii; ++i) {
        image = images[i];

        uid = getUid(image);
        if (uid in texturePerImage) {
          texture = texturePerImage[uid];
        } else {
          texture = createTexture(
            gl, image, CLAMP_TO_EDGE, CLAMP_TO_EDGE);
          texturePerImage[uid] = texture;
        }
        textures[i] = texture;
      }
    };

    /**
     * @inheritDoc
     */
    WebGLTextureReplay.prototype.setUpProgram = function setUpProgram (gl, context, size, pixelRatio) {
      // get the program
      var program = context.getProgram(fragment$1, vertex$1);

      // get the locations
      var locations;
      if (!this.defaultLocations) {
        locations = new Locations$1(gl, program);
        this.defaultLocations = locations;
      } else {
        locations = this.defaultLocations;
      }

      // use the program (FIXME: use the return value)
      context.useProgram(program);

      // enable the vertex attrib arrays
      gl.enableVertexAttribArray(locations.a_position);
      gl.vertexAttribPointer(locations.a_position, 2, FLOAT,
        false, 32, 0);

      gl.enableVertexAttribArray(locations.a_offsets);
      gl.vertexAttribPointer(locations.a_offsets, 2, FLOAT,
        false, 32, 8);

      gl.enableVertexAttribArray(locations.a_texCoord);
      gl.vertexAttribPointer(locations.a_texCoord, 2, FLOAT,
        false, 32, 16);

      gl.enableVertexAttribArray(locations.a_opacity);
      gl.vertexAttribPointer(locations.a_opacity, 1, FLOAT,
        false, 32, 24);

      gl.enableVertexAttribArray(locations.a_rotateWithView);
      gl.vertexAttribPointer(locations.a_rotateWithView, 1, FLOAT,
        false, 32, 28);

      return locations;
    };

    /**
     * @inheritDoc
     */
    WebGLTextureReplay.prototype.shutDownProgram = function shutDownProgram (gl, locations) {
      gl.disableVertexAttribArray(locations.a_position);
      gl.disableVertexAttribArray(locations.a_offsets);
      gl.disableVertexAttribArray(locations.a_texCoord);
      gl.disableVertexAttribArray(locations.a_opacity);
      gl.disableVertexAttribArray(locations.a_rotateWithView);
    };

    /**
     * @inheritDoc
     */
    WebGLTextureReplay.prototype.drawReplay = function drawReplay (gl, context, skippedFeaturesHash, hitDetection) {
      var textures = hitDetection ? this.getHitDetectionTextures() : this.getTextures();
      var groupIndices = hitDetection ? this.hitDetectionGroupIndices : this.groupIndices;

      if (!isEmpty(skippedFeaturesHash)) {
        this.drawReplaySkipping(gl, context, skippedFeaturesHash, textures, groupIndices);
      } else {
        var i, ii, start;
        for (i = 0, ii = textures.length, start = 0; i < ii; ++i) {
          gl.bindTexture(TEXTURE_2D, textures[i]);
          var end = groupIndices[i];
          this.drawElements(gl, context, start, end);
          start = end;
        }
      }
    };

    /**
     * Draw the replay while paying attention to skipped features.
     *
     * This functions creates groups of features that can be drawn to together,
     * so that the number of `drawElements` calls is minimized.
     *
     * For example given the following texture groups:
     *
     *    Group 1: A B C
     *    Group 2: D [E] F G
     *
     * If feature E should be skipped, the following `drawElements` calls will be
     * made:
     *
     *    drawElements with feature A, B and C
     *    drawElements with feature D
     *    drawElements with feature F and G
     *
     * @protected
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features
     *  to skip.
     * @param {Array<WebGLTexture>} textures Textures.
     * @param {Array<number>} groupIndices Texture group indices.
     */
    WebGLTextureReplay.prototype.drawReplaySkipping = function drawReplaySkipping (gl, context, skippedFeaturesHash, textures, groupIndices) {
      var featureIndex = 0;

      var i, ii;
      for (i = 0, ii = textures.length; i < ii; ++i) {
        gl.bindTexture(TEXTURE_2D, textures[i]);
        var groupStart = (i > 0) ? groupIndices[i - 1] : 0;
        var groupEnd = groupIndices[i];

        var start = groupStart;
        var end = groupStart;
        while (featureIndex < this.startIndices.length &&
            this.startIndices[featureIndex] <= groupEnd) {
          var feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)] !== undefined) {
            // feature should be skipped
            if (start !== end) {
              // draw the features so far
              this.drawElements(gl, context, start, end);
            }
            // continue with the next feature
            start = (featureIndex === this.startIndices.length - 1) ?
              groupEnd : this.startIndices[featureIndex + 1];
            end = start;
          } else {
            // the feature is not skipped, augment the end index
            end = (featureIndex === this.startIndices.length - 1) ?
              groupEnd : this.startIndices[featureIndex + 1];
          }
          featureIndex++;
        }

        if (start !== end) {
          // draw the remaining features (in case there was no skipped feature
          // in this texture group, all features of a group are drawn together)
          this.drawElements(gl, context, start, end);
        }
      }
    };

    /**
     * @inheritDoc
     */
    WebGLTextureReplay.prototype.drawHitDetectionReplayOneByOne = function drawHitDetectionReplayOneByOne (gl, context, skippedFeaturesHash, featureCallback, opt_hitExtent) {
      var i, groupStart, start, end, feature;
      var featureIndex = this.startIndices.length - 1;
      var hitDetectionTextures = this.getHitDetectionTextures();
      for (i = hitDetectionTextures.length - 1; i >= 0; --i) {
        gl.bindTexture(TEXTURE_2D, hitDetectionTextures[i]);
        groupStart = (i > 0) ? this.hitDetectionGroupIndices[i - 1] : 0;
        end = this.hitDetectionGroupIndices[i];

        // draw all features for this texture group
        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          start = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)] === undefined &&
              feature.getGeometry() &&
              (opt_hitExtent === undefined || intersects(
                /** @type {Array<number>} */ (opt_hitExtent),
                feature.getGeometry().getExtent()))) {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            this.drawElements(gl, context, start, end);

            var result = featureCallback(feature);
            if (result) {
              return result;
            }
          }

          end = start;
          featureIndex--;
        }
      }
      return undefined;
    };

    /**
     * @inheritDoc
     */
    WebGLTextureReplay.prototype.finish = function finish (context) {
      this.anchorX = undefined;
      this.anchorY = undefined;
      this.height = undefined;
      this.imageHeight = undefined;
      this.imageWidth = undefined;
      this.indices = null;
      this.opacity = undefined;
      this.originX = undefined;
      this.originY = undefined;
      this.rotateWithView = undefined;
      this.rotation = undefined;
      this.scale = undefined;
      this.vertices = null;
      this.width = undefined;
    };

    /**
     * @abstract
     * @protected
     * @param {boolean=} opt_all Return hit detection textures with regular ones.
     * @return {Array<WebGLTexture>} Textures.
     */
    WebGLTextureReplay.prototype.getTextures = function getTextures (opt_all) {
      return abstract();
    };

    /**
     * @abstract
     * @protected
     * @return {Array<WebGLTexture>} Textures.
     */
    WebGLTextureReplay.prototype.getHitDetectionTextures = function getHitDetectionTextures () {
      return abstract();
    };

    return WebGLTextureReplay;
  }(WebGLReplay));

  /**
   * @module ol/render/webgl/ImageReplay
   */

  var WebGLImageReplay = /*@__PURE__*/(function (WebGLTextureReplay$$1) {
    function WebGLImageReplay(tolerance, maxExtent) {
      WebGLTextureReplay$$1.call(this, tolerance, maxExtent);

      /**
       * @type {Array<HTMLCanvasElement|HTMLImageElement|HTMLVideoElement>}
       * @protected
       */
      this.images_ = [];

      /**
       * @type {Array<HTMLCanvasElement|HTMLImageElement|HTMLVideoElement>}
       * @protected
       */
      this.hitDetectionImages_ = [];

      /**
       * @type {Array<WebGLTexture>}
       * @private
       */
      this.textures_ = [];

      /**
       * @type {Array<WebGLTexture>}
       * @private
       */
      this.hitDetectionTextures_ = [];

    }

    if ( WebGLTextureReplay$$1 ) WebGLImageReplay.__proto__ = WebGLTextureReplay$$1;
    WebGLImageReplay.prototype = Object.create( WebGLTextureReplay$$1 && WebGLTextureReplay$$1.prototype );
    WebGLImageReplay.prototype.constructor = WebGLImageReplay;

    /**
     * @inheritDoc
     */
    WebGLImageReplay.prototype.drawMultiPoint = function drawMultiPoint (multiPointGeometry, feature) {
      this.startIndices.push(this.indices.length);
      this.startIndicesFeature.push(feature);
      var flatCoordinates = multiPointGeometry.getFlatCoordinates();
      var stride = multiPointGeometry.getStride();
      this.drawCoordinates(
        flatCoordinates, 0, flatCoordinates.length, stride);
    };

    /**
     * @inheritDoc
     */
    WebGLImageReplay.prototype.drawPoint = function drawPoint (pointGeometry, feature) {
      this.startIndices.push(this.indices.length);
      this.startIndicesFeature.push(feature);
      var flatCoordinates = pointGeometry.getFlatCoordinates();
      var stride = pointGeometry.getStride();
      this.drawCoordinates(
        flatCoordinates, 0, flatCoordinates.length, stride);
    };

    /**
     * @inheritDoc
     */
    WebGLImageReplay.prototype.finish = function finish (context) {
      var gl = context.getGL();

      this.groupIndices.push(this.indices.length);
      this.hitDetectionGroupIndices.push(this.indices.length);

      // create, bind, and populate the vertices buffer
      this.verticesBuffer = new WebGLBuffer(this.vertices);

      var indices = this.indices;

      // create, bind, and populate the indices buffer
      this.indicesBuffer = new WebGLBuffer(indices);

      // create textures
      /** @type {Object<string, WebGLTexture>} */
      var texturePerImage = {};

      this.createTextures(this.textures_, this.images_, texturePerImage, gl);

      this.createTextures(this.hitDetectionTextures_, this.hitDetectionImages_,
        texturePerImage, gl);

      this.images_ = null;
      this.hitDetectionImages_ = null;
      WebGLTextureReplay$$1.prototype.finish.call(this, context);
    };

    /**
     * @inheritDoc
     */
    WebGLImageReplay.prototype.setImageStyle = function setImageStyle (imageStyle) {
      var anchor = imageStyle.getAnchor();
      var image = imageStyle.getImage(1);
      var imageSize = imageStyle.getImageSize();
      var hitDetectionImage = imageStyle.getHitDetectionImage(1);
      var opacity = imageStyle.getOpacity();
      var origin = imageStyle.getOrigin();
      var rotateWithView = imageStyle.getRotateWithView();
      var rotation = imageStyle.getRotation();
      var size = imageStyle.getSize();
      var scale = imageStyle.getScale();

      var currentImage;
      if (this.images_.length === 0) {
        this.images_.push(image);
      } else {
        currentImage = this.images_[this.images_.length - 1];
        if (getUid(currentImage) != getUid(image)) {
          this.groupIndices.push(this.indices.length);
          this.images_.push(image);
        }
      }

      if (this.hitDetectionImages_.length === 0) {
        this.hitDetectionImages_.push(hitDetectionImage);
      } else {
        currentImage =
            this.hitDetectionImages_[this.hitDetectionImages_.length - 1];
        if (getUid(currentImage) != getUid(hitDetectionImage)) {
          this.hitDetectionGroupIndices.push(this.indices.length);
          this.hitDetectionImages_.push(hitDetectionImage);
        }
      }

      this.anchorX = anchor[0];
      this.anchorY = anchor[1];
      this.height = size[1];
      this.imageHeight = imageSize[1];
      this.imageWidth = imageSize[0];
      this.opacity = opacity;
      this.originX = origin[0];
      this.originY = origin[1];
      this.rotation = rotation;
      this.rotateWithView = rotateWithView;
      this.scale = scale;
      this.width = size[0];
    };

    /**
     * @inheritDoc
     */
    WebGLImageReplay.prototype.getTextures = function getTextures (opt_all) {
      return opt_all ? this.textures_.concat(this.hitDetectionTextures_) : this.textures_;
    };

    /**
     * @inheritDoc
     */
    WebGLImageReplay.prototype.getHitDetectionTextures = function getHitDetectionTextures () {
      return this.hitDetectionTextures_;
    };

    return WebGLImageReplay;
  }(WebGLTextureReplay));

  /**
   * @module ol/geom/flat/topology
   */

  /**
   * Check if the linestring is a boundary.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {boolean} The linestring is a boundary.
   */
  function lineStringIsClosed(flatCoordinates, offset, end, stride) {
    var lastCoord = end - stride;
    if (flatCoordinates[offset] === flatCoordinates[lastCoord] &&
        flatCoordinates[offset + 1] === flatCoordinates[lastCoord + 1] && (end - offset) / stride > 3) {
      return !!linearRing(flatCoordinates, offset, end, stride);
    }
    return false;
  }

  /**
   * @module ol/render/webgl/linestringreplay/defaultshader
   */

  var fragment$2 = new WebGLFragment('precision mediump float;\nvarying float v_round;\nvarying vec2 v_roundVertex;\nvarying float v_halfWidth;\n\n\n\nuniform float u_opacity;\nuniform vec4 u_color;\nuniform vec2 u_size;\nuniform float u_pixelRatio;\n\nvoid main(void) {\n  if (v_round > 0.0) {\n    vec2 windowCoords = vec2((v_roundVertex.x + 1.0) / 2.0 * u_size.x * u_pixelRatio,\n        (v_roundVertex.y + 1.0) / 2.0 * u_size.y * u_pixelRatio);\n    if (length(windowCoords - gl_FragCoord.xy) > v_halfWidth * u_pixelRatio) {\n      discard;\n    }\n  }\n  gl_FragColor = u_color;\n  float alpha = u_color.a * u_opacity;\n  if (alpha == 0.0) {\n    discard;\n  }\n  gl_FragColor.a = alpha;\n}\n');

  var vertex$2 = new WebGLVertex('varying float v_round;\nvarying vec2 v_roundVertex;\nvarying float v_halfWidth;\n\n\nattribute vec2 a_lastPos;\nattribute vec2 a_position;\nattribute vec2 a_nextPos;\nattribute float a_direction;\n\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_lineWidth;\nuniform float u_miterLimit;\n\nbool nearlyEquals(in float value, in float ref) {\n  float epsilon = 0.000000000001;\n  return value >= ref - epsilon && value <= ref + epsilon;\n}\n\nvoid alongNormal(out vec2 offset, in vec2 nextP, in float turnDir, in float direction) {\n  vec2 dirVect = nextP - a_position;\n  vec2 normal = normalize(vec2(-turnDir * dirVect.y, turnDir * dirVect.x));\n  offset = u_lineWidth / 2.0 * normal * direction;\n}\n\nvoid miterUp(out vec2 offset, out float round, in bool isRound, in float direction) {\n  float halfWidth = u_lineWidth / 2.0;\n  vec2 tangent = normalize(normalize(a_nextPos - a_position) + normalize(a_position - a_lastPos));\n  vec2 normal = vec2(-tangent.y, tangent.x);\n  vec2 dirVect = a_nextPos - a_position;\n  vec2 tmpNormal = normalize(vec2(-dirVect.y, dirVect.x));\n  float miterLength = abs(halfWidth / dot(normal, tmpNormal));\n  offset = normal * direction * miterLength;\n  round = 0.0;\n  if (isRound) {\n    round = 1.0;\n  } else if (miterLength > u_miterLimit + u_lineWidth) {\n    offset = halfWidth * tmpNormal * direction;\n  }\n}\n\nbool miterDown(out vec2 offset, in vec4 projPos, in mat4 offsetMatrix, in float direction) {\n  bool degenerate = false;\n  vec2 tangent = normalize(normalize(a_nextPos - a_position) + normalize(a_position - a_lastPos));\n  vec2 normal = vec2(-tangent.y, tangent.x);\n  vec2 dirVect = a_lastPos - a_position;\n  vec2 tmpNormal = normalize(vec2(-dirVect.y, dirVect.x));\n  vec2 longOffset, shortOffset, longVertex;\n  vec4 shortProjVertex;\n  float halfWidth = u_lineWidth / 2.0;\n  if (length(a_nextPos - a_position) > length(a_lastPos - a_position)) {\n    longOffset = tmpNormal * direction * halfWidth;\n    shortOffset = normalize(vec2(dirVect.y, -dirVect.x)) * direction * halfWidth;\n    longVertex = a_nextPos;\n    shortProjVertex = u_projectionMatrix * vec4(a_lastPos, 0.0, 1.0);\n  } else {\n    shortOffset = tmpNormal * direction * halfWidth;\n    longOffset = normalize(vec2(dirVect.y, -dirVect.x)) * direction * halfWidth;\n    longVertex = a_lastPos;\n    shortProjVertex = u_projectionMatrix * vec4(a_nextPos, 0.0, 1.0);\n  }\n  //Intersection algorithm based on theory by Paul Bourke (http://paulbourke.net/geometry/pointlineplane/).\n  vec4 p1 = u_projectionMatrix * vec4(longVertex, 0.0, 1.0) + offsetMatrix * vec4(longOffset, 0.0, 0.0);\n  vec4 p2 = projPos + offsetMatrix * vec4(longOffset, 0.0, 0.0);\n  vec4 p3 = shortProjVertex + offsetMatrix * vec4(-shortOffset, 0.0, 0.0);\n  vec4 p4 = shortProjVertex + offsetMatrix * vec4(shortOffset, 0.0, 0.0);\n  float denom = (p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y);\n  float firstU = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / denom;\n  float secondU = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / denom;\n  float epsilon = 0.000000000001;\n  if (firstU > epsilon && firstU < 1.0 - epsilon && secondU > epsilon && secondU < 1.0 - epsilon) {\n    shortProjVertex.x = p1.x + firstU * (p2.x - p1.x);\n    shortProjVertex.y = p1.y + firstU * (p2.y - p1.y);\n    offset = shortProjVertex.xy;\n    degenerate = true;\n  } else {\n    float miterLength = abs(halfWidth / dot(normal, tmpNormal));\n    offset = normal * direction * miterLength;\n  }\n  return degenerate;\n}\n\nvoid squareCap(out vec2 offset, out float round, in bool isRound, in vec2 nextP,\n    in float turnDir, in float direction) {\n  round = 0.0;\n  vec2 dirVect = a_position - nextP;\n  vec2 firstNormal = normalize(dirVect);\n  vec2 secondNormal = vec2(turnDir * firstNormal.y * direction, -turnDir * firstNormal.x * direction);\n  vec2 hypotenuse = normalize(firstNormal - secondNormal);\n  vec2 normal = vec2(turnDir * hypotenuse.y * direction, -turnDir * hypotenuse.x * direction);\n  float length = sqrt(v_halfWidth * v_halfWidth * 2.0);\n  offset = normal * length;\n  if (isRound) {\n    round = 1.0;\n  }\n}\n\nvoid main(void) {\n  bool degenerate = false;\n  float direction = float(sign(a_direction));\n  mat4 offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;\n  vec2 offset;\n  vec4 projPos = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\n  bool round = nearlyEquals(mod(a_direction, 2.0), 0.0);\n\n  v_round = 0.0;\n  v_halfWidth = u_lineWidth / 2.0;\n  v_roundVertex = projPos.xy;\n\n  if (nearlyEquals(mod(a_direction, 3.0), 0.0) || nearlyEquals(mod(a_direction, 17.0), 0.0)) {\n    alongNormal(offset, a_nextPos, 1.0, direction);\n  } else if (nearlyEquals(mod(a_direction, 5.0), 0.0) || nearlyEquals(mod(a_direction, 13.0), 0.0)) {\n    alongNormal(offset, a_lastPos, -1.0, direction);\n  } else if (nearlyEquals(mod(a_direction, 23.0), 0.0)) {\n    miterUp(offset, v_round, round, direction);\n  } else if (nearlyEquals(mod(a_direction, 19.0), 0.0)) {\n    degenerate = miterDown(offset, projPos, offsetMatrix, direction);\n  } else if (nearlyEquals(mod(a_direction, 7.0), 0.0)) {\n    squareCap(offset, v_round, round, a_nextPos, 1.0, direction);\n  } else if (nearlyEquals(mod(a_direction, 11.0), 0.0)) {\n    squareCap(offset, v_round, round, a_lastPos, -1.0, direction);\n  }\n  if (!degenerate) {\n    vec4 offsets = offsetMatrix * vec4(offset, 0.0, 0.0);\n    gl_Position = projPos + offsets;\n  } else {\n    gl_Position = vec4(offset, 0.0, 1.0);\n  }\n}\n\n\n');

  /**
   * @module ol/render/webgl/linestringreplay/defaultshader/Locations
   */

  var Locations$2 = function Locations(gl, program) {

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_projectionMatrix = gl.getUniformLocation(
      program, 'u_projectionMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetScaleMatrix = gl.getUniformLocation(
      program, 'u_offsetScaleMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetRotateMatrix = gl.getUniformLocation(
      program, 'u_offsetRotateMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_lineWidth = gl.getUniformLocation(
      program, 'u_lineWidth');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_miterLimit = gl.getUniformLocation(
      program, 'u_miterLimit');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_opacity = gl.getUniformLocation(
      program, 'u_opacity');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_color = gl.getUniformLocation(
      program, 'u_color');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_size = gl.getUniformLocation(
      program, 'u_size');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_pixelRatio = gl.getUniformLocation(
      program, 'u_pixelRatio');

    /**
     * @type {number}
     */
    this.a_lastPos = gl.getAttribLocation(
      program, 'a_lastPos');

    /**
     * @type {number}
     */
    this.a_position = gl.getAttribLocation(
      program, 'a_position');

    /**
     * @type {number}
     */
    this.a_nextPos = gl.getAttribLocation(
      program, 'a_nextPos');

    /**
     * @type {number}
     */
    this.a_direction = gl.getAttribLocation(
      program, 'a_direction');

  };

  /**
   * @module ol/render/webgl/LineStringReplay
   */


  /**
   * @enum {number}
   */
  var Instruction$1 = {
    ROUND: 2,
    BEGIN_LINE: 3,
    END_LINE: 5,
    BEGIN_LINE_CAP: 7,
    END_LINE_CAP: 11,
    BEVEL_FIRST: 13,
    BEVEL_SECOND: 17,
    MITER_BOTTOM: 19,
    MITER_TOP: 23
  };


  var WebGLLineStringReplay = /*@__PURE__*/(function (WebGLReplay$$1) {
    function WebGLLineStringReplay(tolerance, maxExtent) {
      WebGLReplay$$1.call(this, tolerance, maxExtent);

      /**
       * @private
       * @type {import("./linestringreplay/defaultshader/Locations.js").default}
       */
      this.defaultLocations_ = null;

      /**
       * @private
       * @type {Array<Array<?>>}
       */
      this.styles_ = [];

      /**
       * @private
       * @type {Array<number>}
       */
      this.styleIndices_ = [];

      /**
       * @private
       * @type {{strokeColor: (Array<number>|null),
       *         lineCap: (string|undefined),
       *         lineDash: Array<number>,
       *         lineDashOffset: (number|undefined),
       *         lineJoin: (string|undefined),
       *         lineWidth: (number|undefined),
       *         miterLimit: (number|undefined),
       *         changed: boolean}|null}
       */
      this.state_ = {
        strokeColor: null,
        lineCap: undefined,
        lineDash: null,
        lineDashOffset: undefined,
        lineJoin: undefined,
        lineWidth: undefined,
        miterLimit: undefined,
        changed: false
      };

    }

    if ( WebGLReplay$$1 ) WebGLLineStringReplay.__proto__ = WebGLReplay$$1;
    WebGLLineStringReplay.prototype = Object.create( WebGLReplay$$1 && WebGLReplay$$1.prototype );
    WebGLLineStringReplay.prototype.constructor = WebGLLineStringReplay;

    /**
     * Draw one segment.
     * @private
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     */
    WebGLLineStringReplay.prototype.drawCoordinates_ = function drawCoordinates_ (flatCoordinates, offset, end, stride) {

      var i, ii;
      var numVertices = this.vertices.length;
      var numIndices = this.indices.length;
      //To save a vertex, the direction of a point is a product of the sign (1 or -1), a prime from
      //Instruction, and a rounding factor (1 or 2). If the product is even,
      //we round it. If it is odd, we don't.
      var lineJoin = this.state_.lineJoin === 'bevel' ? 0 :
        this.state_.lineJoin === 'miter' ? 1 : 2;
      var lineCap = this.state_.lineCap === 'butt' ? 0 :
        this.state_.lineCap === 'square' ? 1 : 2;
      var closed = lineStringIsClosed(flatCoordinates, offset, end, stride);
      var startCoords, sign, n;
      var lastIndex = numIndices;
      var lastSign = 1;
      //We need the adjacent vertices to define normals in joins. p0 = last, p1 = current, p2 = next.
      var p0, p1, p2;

      for (i = offset, ii = end; i < ii; i += stride) {

        n = numVertices / 7;

        p0 = p1;
        p1 = p2 || [flatCoordinates[i], flatCoordinates[i + 1]];
        //First vertex.
        if (i === offset) {
          p2 = [flatCoordinates[i + stride], flatCoordinates[i + stride + 1]];
          if (end - offset === stride * 2 && equals(p1, p2)) {
            break;
          }
          if (closed) {
            //A closed line! Complete the circle.
            p0 = [flatCoordinates[end - stride * 2],
              flatCoordinates[end - stride * 2 + 1]];

            startCoords = p2;
          } else {
            //Add the first two/four vertices.

            if (lineCap) {
              numVertices = this.addVertices_([0, 0], p1, p2,
                lastSign * Instruction$1.BEGIN_LINE_CAP * lineCap, numVertices);

              numVertices = this.addVertices_([0, 0], p1, p2,
                -lastSign * Instruction$1.BEGIN_LINE_CAP * lineCap, numVertices);

              this.indices[numIndices++] = n + 2;
              this.indices[numIndices++] = n;
              this.indices[numIndices++] = n + 1;

              this.indices[numIndices++] = n + 1;
              this.indices[numIndices++] = n + 3;
              this.indices[numIndices++] = n + 2;

            }

            numVertices = this.addVertices_([0, 0], p1, p2,
              lastSign * Instruction$1.BEGIN_LINE * (lineCap || 1), numVertices);

            numVertices = this.addVertices_([0, 0], p1, p2,
              -lastSign * Instruction$1.BEGIN_LINE * (lineCap || 1), numVertices);

            lastIndex = numVertices / 7 - 1;

            continue;
          }
        } else if (i === end - stride) {
          //Last vertex.
          if (closed) {
            //Same as the first vertex.
            p2 = startCoords;
            break;
          } else {
            p0 = p0 || [0, 0];

            numVertices = this.addVertices_(p0, p1, [0, 0],
              lastSign * Instruction$1.END_LINE * (lineCap || 1), numVertices);

            numVertices = this.addVertices_(p0, p1, [0, 0],
              -lastSign * Instruction$1.END_LINE * (lineCap || 1), numVertices);

            this.indices[numIndices++] = n;
            this.indices[numIndices++] = lastIndex - 1;
            this.indices[numIndices++] = lastIndex;

            this.indices[numIndices++] = lastIndex;
            this.indices[numIndices++] = n + 1;
            this.indices[numIndices++] = n;

            if (lineCap) {
              numVertices = this.addVertices_(p0, p1, [0, 0],
                lastSign * Instruction$1.END_LINE_CAP * lineCap, numVertices);

              numVertices = this.addVertices_(p0, p1, [0, 0],
                -lastSign * Instruction$1.END_LINE_CAP * lineCap, numVertices);

              this.indices[numIndices++] = n + 2;
              this.indices[numIndices++] = n;
              this.indices[numIndices++] = n + 1;

              this.indices[numIndices++] = n + 1;
              this.indices[numIndices++] = n + 3;
              this.indices[numIndices++] = n + 2;

            }

            break;
          }
        } else {
          p2 = [flatCoordinates[i + stride], flatCoordinates[i + stride + 1]];
        }

        // We group CW and straight lines, thus the not so inituitive CCW checking function.
        sign = triangleIsCounterClockwise(p0[0], p0[1], p1[0], p1[1], p2[0], p2[1])
          ? -1 : 1;

        numVertices = this.addVertices_(p0, p1, p2,
          sign * Instruction$1.BEVEL_FIRST * (lineJoin || 1), numVertices);

        numVertices = this.addVertices_(p0, p1, p2,
          sign * Instruction$1.BEVEL_SECOND * (lineJoin || 1), numVertices);

        numVertices = this.addVertices_(p0, p1, p2,
          -sign * Instruction$1.MITER_BOTTOM * (lineJoin || 1), numVertices);

        if (i > offset) {
          this.indices[numIndices++] = n;
          this.indices[numIndices++] = lastIndex - 1;
          this.indices[numIndices++] = lastIndex;

          this.indices[numIndices++] = n + 2;
          this.indices[numIndices++] = n;
          this.indices[numIndices++] = lastSign * sign > 0 ? lastIndex : lastIndex - 1;
        }

        this.indices[numIndices++] = n;
        this.indices[numIndices++] = n + 2;
        this.indices[numIndices++] = n + 1;

        lastIndex = n + 2;
        lastSign = sign;

        //Add miter
        if (lineJoin) {
          numVertices = this.addVertices_(p0, p1, p2,
            sign * Instruction$1.MITER_TOP * lineJoin, numVertices);

          this.indices[numIndices++] = n + 1;
          this.indices[numIndices++] = n + 3;
          this.indices[numIndices++] = n;
        }
      }

      if (closed) {
        n = n || numVertices / 7;
        sign = linearRingIsClockwise([p0[0], p0[1], p1[0], p1[1], p2[0], p2[1]], 0, 6, 2)
          ? 1 : -1;

        numVertices = this.addVertices_(p0, p1, p2,
          sign * Instruction$1.BEVEL_FIRST * (lineJoin || 1), numVertices);

        numVertices = this.addVertices_(p0, p1, p2,
          -sign * Instruction$1.MITER_BOTTOM * (lineJoin || 1), numVertices);

        this.indices[numIndices++] = n;
        this.indices[numIndices++] = lastIndex - 1;
        this.indices[numIndices++] = lastIndex;

        this.indices[numIndices++] = n + 1;
        this.indices[numIndices++] = n;
        this.indices[numIndices++] = lastSign * sign > 0 ? lastIndex : lastIndex - 1;
      }
    };

    /**
     * @param {Array<number>} p0 Last coordinates.
     * @param {Array<number>} p1 Current coordinates.
     * @param {Array<number>} p2 Next coordinates.
     * @param {number} product Sign, instruction, and rounding product.
     * @param {number} numVertices Vertex counter.
     * @return {number} Vertex counter.
     * @private
     */
    WebGLLineStringReplay.prototype.addVertices_ = function addVertices_ (p0, p1, p2, product, numVertices) {
      this.vertices[numVertices++] = p0[0];
      this.vertices[numVertices++] = p0[1];
      this.vertices[numVertices++] = p1[0];
      this.vertices[numVertices++] = p1[1];
      this.vertices[numVertices++] = p2[0];
      this.vertices[numVertices++] = p2[1];
      this.vertices[numVertices++] = product;

      return numVertices;
    };

    /**
     * Check if the linestring can be drawn (i. e. valid).
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {boolean} The linestring can be drawn.
     * @private
     */
    WebGLLineStringReplay.prototype.isValid_ = function isValid_ (flatCoordinates, offset, end, stride) {
      var range = end - offset;
      if (range < stride * 2) {
        return false;
      } else if (range === stride * 2) {
        var firstP = [flatCoordinates[offset], flatCoordinates[offset + 1]];
        var lastP = [flatCoordinates[offset + stride], flatCoordinates[offset + stride + 1]];
        return !equals(firstP, lastP);
      }

      return true;
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.drawLineString = function drawLineString (lineStringGeometry, feature) {
      var flatCoordinates = lineStringGeometry.getFlatCoordinates();
      var stride = lineStringGeometry.getStride();
      if (this.isValid_(flatCoordinates, 0, flatCoordinates.length, stride)) {
        flatCoordinates = translate(flatCoordinates, 0, flatCoordinates.length,
          stride, -this.origin[0], -this.origin[1]);
        if (this.state_.changed) {
          this.styleIndices_.push(this.indices.length);
          this.state_.changed = false;
        }
        this.startIndices.push(this.indices.length);
        this.startIndicesFeature.push(feature);
        this.drawCoordinates_(
          flatCoordinates, 0, flatCoordinates.length, stride);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.drawMultiLineString = function drawMultiLineString (multiLineStringGeometry, feature) {
      var indexCount = this.indices.length;
      var ends = multiLineStringGeometry.getEnds();
      ends.unshift(0);
      var flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
      var stride = multiLineStringGeometry.getStride();
      var i, ii;
      if (ends.length > 1) {
        for (i = 1, ii = ends.length; i < ii; ++i) {
          if (this.isValid_(flatCoordinates, ends[i - 1], ends[i], stride)) {
            var lineString = translate(flatCoordinates, ends[i - 1], ends[i],
              stride, -this.origin[0], -this.origin[1]);
            this.drawCoordinates_(
              lineString, 0, lineString.length, stride);
          }
        }
      }
      if (this.indices.length > indexCount) {
        this.startIndices.push(indexCount);
        this.startIndicesFeature.push(feature);
        if (this.state_.changed) {
          this.styleIndices_.push(indexCount);
          this.state_.changed = false;
        }
      }
    };

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {Array<Array<number>>} holeFlatCoordinates Hole flat coordinates.
     * @param {number} stride Stride.
     */
    WebGLLineStringReplay.prototype.drawPolygonCoordinates = function drawPolygonCoordinates (flatCoordinates, holeFlatCoordinates, stride) {
      if (!lineStringIsClosed(flatCoordinates, 0, flatCoordinates.length, stride)) {
        flatCoordinates.push(flatCoordinates[0]);
        flatCoordinates.push(flatCoordinates[1]);
      }
      this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
      if (holeFlatCoordinates.length) {
        var i, ii;
        for (i = 0, ii = holeFlatCoordinates.length; i < ii; ++i) {
          if (!lineStringIsClosed(holeFlatCoordinates[i], 0, holeFlatCoordinates[i].length, stride)) {
            holeFlatCoordinates[i].push(holeFlatCoordinates[i][0]);
            holeFlatCoordinates[i].push(holeFlatCoordinates[i][1]);
          }
          this.drawCoordinates_(holeFlatCoordinates[i], 0,
            holeFlatCoordinates[i].length, stride);
        }
      }
    };

    /**
     * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
     * @param {number=} opt_index Index count.
     */
    WebGLLineStringReplay.prototype.setPolygonStyle = function setPolygonStyle (feature, opt_index) {
      var index = opt_index === undefined ? this.indices.length : opt_index;
      this.startIndices.push(index);
      this.startIndicesFeature.push(feature);
      if (this.state_.changed) {
        this.styleIndices_.push(index);
        this.state_.changed = false;
      }
    };

    /**
     * @return {number} Current index.
     */
    WebGLLineStringReplay.prototype.getCurrentIndex = function getCurrentIndex () {
      return this.indices.length;
    };

    /**
     * @inheritDoc
     **/
    WebGLLineStringReplay.prototype.finish = function finish (context) {
      // create, bind, and populate the vertices buffer
      this.verticesBuffer = new WebGLBuffer(this.vertices);

      // create, bind, and populate the indices buffer
      this.indicesBuffer = new WebGLBuffer(this.indices);

      this.startIndices.push(this.indices.length);

      //Clean up, if there is nothing to draw
      if (this.styleIndices_.length === 0 && this.styles_.length > 0) {
        this.styles_ = [];
      }

      this.vertices = null;
      this.indices = null;
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.getDeleteResourcesFunction = function getDeleteResourcesFunction (context) {
      var verticesBuffer = this.verticesBuffer;
      var indicesBuffer = this.indicesBuffer;
      return function() {
        context.deleteBuffer(verticesBuffer);
        context.deleteBuffer(indicesBuffer);
      };
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.setUpProgram = function setUpProgram (gl, context, size, pixelRatio) {
      // get the program
      var program = context.getProgram(fragment$2, vertex$2);

      // get the locations
      var locations;
      if (!this.defaultLocations_) {
        locations = new Locations$2(gl, program);
        this.defaultLocations_ = locations;
      } else {
        locations = this.defaultLocations_;
      }

      context.useProgram(program);

      // enable the vertex attrib arrays
      gl.enableVertexAttribArray(locations.a_lastPos);
      gl.vertexAttribPointer(locations.a_lastPos, 2, FLOAT,
        false, 28, 0);

      gl.enableVertexAttribArray(locations.a_position);
      gl.vertexAttribPointer(locations.a_position, 2, FLOAT,
        false, 28, 8);

      gl.enableVertexAttribArray(locations.a_nextPos);
      gl.vertexAttribPointer(locations.a_nextPos, 2, FLOAT,
        false, 28, 16);

      gl.enableVertexAttribArray(locations.a_direction);
      gl.vertexAttribPointer(locations.a_direction, 1, FLOAT,
        false, 28, 24);

      // Enable renderer specific uniforms.
      gl.uniform2fv(locations.u_size, size);
      gl.uniform1f(locations.u_pixelRatio, pixelRatio);

      return locations;
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.shutDownProgram = function shutDownProgram (gl, locations) {
      gl.disableVertexAttribArray(locations.a_lastPos);
      gl.disableVertexAttribArray(locations.a_position);
      gl.disableVertexAttribArray(locations.a_nextPos);
      gl.disableVertexAttribArray(locations.a_direction);
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.drawReplay = function drawReplay (gl, context, skippedFeaturesHash, hitDetection) {
      //Save GL parameters.
      var tmpDepthFunc = /** @type {number} */ (gl.getParameter(gl.DEPTH_FUNC));
      var tmpDepthMask = /** @type {boolean} */ (gl.getParameter(gl.DEPTH_WRITEMASK));

      if (!hitDetection) {
        gl.enable(gl.DEPTH_TEST);
        gl.depthMask(true);
        gl.depthFunc(gl.NOTEQUAL);
      }

      if (!isEmpty(skippedFeaturesHash)) {
        this.drawReplaySkipping_(gl, context, skippedFeaturesHash);
      } else {
        //Draw by style groups to minimize drawElements() calls.
        var i, start, end, nextStyle;
        end = this.startIndices[this.startIndices.length - 1];
        for (i = this.styleIndices_.length - 1; i >= 0; --i) {
          start = this.styleIndices_[i];
          nextStyle = this.styles_[i];
          this.setStrokeStyle_(gl, nextStyle[0], nextStyle[1], nextStyle[2]);
          this.drawElements(gl, context, start, end);
          gl.clear(gl.DEPTH_BUFFER_BIT);
          end = start;
        }
      }
      if (!hitDetection) {
        gl.disable(gl.DEPTH_TEST);
        gl.clear(gl.DEPTH_BUFFER_BIT);
        //Restore GL parameters.
        gl.depthMask(tmpDepthMask);
        gl.depthFunc(tmpDepthFunc);
      }
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object} skippedFeaturesHash Ids of features to skip.
     */
    WebGLLineStringReplay.prototype.drawReplaySkipping_ = function drawReplaySkipping_ (gl, context, skippedFeaturesHash) {
      var i, start, end, nextStyle, groupStart, feature, featureIndex, featureStart;
      featureIndex = this.startIndices.length - 2;
      end = start = this.startIndices[featureIndex + 1];
      for (i = this.styleIndices_.length - 1; i >= 0; --i) {
        nextStyle = this.styles_[i];
        this.setStrokeStyle_(gl, nextStyle[0], nextStyle[1], nextStyle[2]);
        groupStart = this.styleIndices_[i];

        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          featureStart = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)]) {
            if (start !== end) {
              this.drawElements(gl, context, start, end);
              gl.clear(gl.DEPTH_BUFFER_BIT);
            }
            end = featureStart;
          }
          featureIndex--;
          start = featureStart;
        }
        if (start !== end) {
          this.drawElements(gl, context, start, end);
          gl.clear(gl.DEPTH_BUFFER_BIT);
        }
        start = end = groupStart;
      }
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.drawHitDetectionReplayOneByOne = function drawHitDetectionReplayOneByOne (gl, context, skippedFeaturesHash, featureCallback, opt_hitExtent) {
      var i, start, end, nextStyle, groupStart, feature, featureIndex;
      featureIndex = this.startIndices.length - 2;
      end = this.startIndices[featureIndex + 1];
      for (i = this.styleIndices_.length - 1; i >= 0; --i) {
        nextStyle = this.styles_[i];
        this.setStrokeStyle_(gl, nextStyle[0], nextStyle[1], nextStyle[2]);
        groupStart = this.styleIndices_[i];

        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          start = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)] === undefined &&
              feature.getGeometry() &&
              (opt_hitExtent === undefined || intersects(
                /** @type {Array<number>} */ (opt_hitExtent),
                feature.getGeometry().getExtent()))) {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            this.drawElements(gl, context, start, end);

            var result = featureCallback(feature);

            if (result) {
              return result;
            }

          }
          featureIndex--;
          end = start;
        }
      }
      return undefined;
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {Array<number>} color Color.
     * @param {number} lineWidth Line width.
     * @param {number} miterLimit Miter limit.
     */
    WebGLLineStringReplay.prototype.setStrokeStyle_ = function setStrokeStyle_ (gl, color, lineWidth, miterLimit) {
      gl.uniform4fv(this.defaultLocations_.u_color, color);
      gl.uniform1f(this.defaultLocations_.u_lineWidth, lineWidth);
      gl.uniform1f(this.defaultLocations_.u_miterLimit, miterLimit);
    };

    /**
     * @inheritDoc
     */
    WebGLLineStringReplay.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {
      var strokeStyleLineCap = strokeStyle.getLineCap();
      this.state_.lineCap = strokeStyleLineCap !== undefined ?
        strokeStyleLineCap : DEFAULT_LINECAP;
      var strokeStyleLineDash = strokeStyle.getLineDash();
      this.state_.lineDash = strokeStyleLineDash ?
        strokeStyleLineDash : DEFAULT_LINEDASH;
      var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
      this.state_.lineDashOffset = strokeStyleLineDashOffset ?
        strokeStyleLineDashOffset : DEFAULT_LINEDASHOFFSET;
      var strokeStyleLineJoin = strokeStyle.getLineJoin();
      this.state_.lineJoin = strokeStyleLineJoin !== undefined ?
        strokeStyleLineJoin : DEFAULT_LINEJOIN;
      var strokeStyleColor = strokeStyle.getColor();
      if (!(strokeStyleColor instanceof CanvasGradient) &&
          !(strokeStyleColor instanceof CanvasPattern)) {
        strokeStyleColor = asArray(strokeStyleColor).map(function(c, i) {
          return i != 3 ? c / 255 : c;
        }) || DEFAULT_STROKESTYLE;
      } else {
        strokeStyleColor = DEFAULT_STROKESTYLE;
      }
      var strokeStyleWidth = strokeStyle.getWidth();
      strokeStyleWidth = strokeStyleWidth !== undefined ?
        strokeStyleWidth : DEFAULT_LINEWIDTH;
      var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
      strokeStyleMiterLimit = strokeStyleMiterLimit !== undefined ?
        strokeStyleMiterLimit : DEFAULT_MITERLIMIT;
      if (!this.state_.strokeColor || !equals(this.state_.strokeColor, strokeStyleColor) ||
          this.state_.lineWidth !== strokeStyleWidth || this.state_.miterLimit !== strokeStyleMiterLimit) {
        this.state_.changed = true;
        this.state_.strokeColor = strokeStyleColor;
        this.state_.lineWidth = strokeStyleWidth;
        this.state_.miterLimit = strokeStyleMiterLimit;
        this.styles_.push([strokeStyleColor, strokeStyleWidth, strokeStyleMiterLimit]);
      }
    };

    return WebGLLineStringReplay;
  }(WebGLReplay));

  /**
   * @module ol/render/webgl/polygonreplay/defaultshader
   */

  var fragment$3 = new WebGLFragment('precision mediump float;\n\n\n\nuniform vec4 u_color;\nuniform float u_opacity;\n\nvoid main(void) {\n  gl_FragColor = u_color;\n  float alpha = u_color.a * u_opacity;\n  if (alpha == 0.0) {\n    discard;\n  }\n  gl_FragColor.a = alpha;\n}\n');

  var vertex$3 = new WebGLVertex('\n\nattribute vec2 a_position;\n\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\n\nvoid main(void) {\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\n}\n\n\n');

  /**
   * @module ol/render/webgl/polygonreplay/defaultshader/Locations
   */

  var Locations$3 = function Locations(gl, program) {

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_projectionMatrix = gl.getUniformLocation(
      program, 'u_projectionMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetScaleMatrix = gl.getUniformLocation(
      program, 'u_offsetScaleMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_offsetRotateMatrix = gl.getUniformLocation(
      program, 'u_offsetRotateMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_color = gl.getUniformLocation(
      program, 'u_color');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_opacity = gl.getUniformLocation(
      program, 'u_opacity');

    /**
     * @type {number}
     */
    this.a_position = gl.getAttribLocation(
      program, 'a_position');

  };

  /**
   * @module ol/structs/LinkedList
   */


  /**
   * @typedef {Object} Item
   * @property {Item} [prev]
   * @property {Item} [next]
   * @property {?} data
   */

  /**
   * @classdesc
   * Creates an empty linked list structure.
   */
  var LinkedList = function LinkedList(opt_circular) {

    /**
     * @private
     * @type {Item|undefined}
     */
    this.first_;

    /**
     * @private
     * @type {Item|undefined}
     */
    this.last_;

    /**
     * @private
     * @type {Item|undefined}
     */
    this.head_;

    /**
     * @private
     * @type {boolean}
     */
    this.circular_ = opt_circular === undefined ? true : opt_circular;

    /**
     * @private
     * @type {number}
     */
    this.length_ = 0;

  };

  /**
   * Inserts an item into the linked list right after the current one.
   *
   * @param {?} data Item data.
   */
  LinkedList.prototype.insertItem = function insertItem (data) {

    /** @type {Item} */
    var item = {
      prev: undefined,
      next: undefined,
      data: data
    };

    var head = this.head_;

    //Initialize the list.
    if (!head) {
      this.first_ = item;
      this.last_ = item;
      if (this.circular_) {
        item.next = item;
        item.prev = item;
      }
    } else {
      //Link the new item to the adjacent ones.
      var next = head.next;
      item.prev = head;
      item.next = next;
      head.next = item;
      if (next) {
        next.prev = item;
      }

      if (head === this.last_) {
        this.last_ = item;
      }
    }
    this.head_ = item;
    this.length_++;
  };

  /**
   * Removes the current item from the list. Sets the cursor to the next item,
   * if possible.
   */
  LinkedList.prototype.removeItem = function removeItem () {
    var head = this.head_;
    if (head) {
      var next = head.next;
      var prev = head.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      this.head_ = next || prev;

      if (this.first_ === this.last_) {
        this.head_ = undefined;
        this.first_ = undefined;
        this.last_ = undefined;
      } else if (this.first_ === head) {
        this.first_ = this.head_;
      } else if (this.last_ === head) {
        this.last_ = prev ? this.head_.prev : this.head_;
      }
      this.length_--;
    }
  };

  /**
   * Sets the cursor to the first item, and returns the associated data.
   *
   * @return {?} Item data.
   */
  LinkedList.prototype.firstItem = function firstItem () {
    this.head_ = this.first_;
    if (this.head_) {
      return this.head_.data;
    }
    return undefined;
  };

  /**
  * Sets the cursor to the last item, and returns the associated data.
  *
  * @return {?} Item data.
  */
  LinkedList.prototype.lastItem = function lastItem () {
    this.head_ = this.last_;
    if (this.head_) {
      return this.head_.data;
    }
    return undefined;
  };

  /**
   * Sets the cursor to the next item, and returns the associated data.
   *
   * @return {?} Item data.
   */
  LinkedList.prototype.nextItem = function nextItem () {
    if (this.head_ && this.head_.next) {
      this.head_ = this.head_.next;
      return this.head_.data;
    }
    return undefined;
  };

  /**
   * Returns the next item's data without moving the cursor.
   *
   * @return {?} Item data.
   */
  LinkedList.prototype.getNextItem = function getNextItem () {
    if (this.head_ && this.head_.next) {
      return this.head_.next.data;
    }
    return undefined;
  };

  /**
   * Sets the cursor to the previous item, and returns the associated data.
   *
   * @return {?} Item data.
   */
  LinkedList.prototype.prevItem = function prevItem () {
    if (this.head_ && this.head_.prev) {
      this.head_ = this.head_.prev;
      return this.head_.data;
    }
    return undefined;
  };

  /**
   * Returns the previous item's data without moving the cursor.
   *
   * @return {?} Item data.
   */
  LinkedList.prototype.getPrevItem = function getPrevItem () {
    if (this.head_ && this.head_.prev) {
      return this.head_.prev.data;
    }
    return undefined;
  };

  /**
   * Returns the current item's data.
   *
   * @return {?} Item data.
   */
  LinkedList.prototype.getCurrItem = function getCurrItem () {
    if (this.head_) {
      return this.head_.data;
    }
    return undefined;
  };

  /**
   * Sets the first item of the list. This only works for circular lists, and sets
   * the last item accordingly.
   */
  LinkedList.prototype.setFirstItem = function setFirstItem () {
    if (this.circular_ && this.head_) {
      this.first_ = this.head_;
      this.last_ = this.head_.prev;
    }
  };

  /**
   * Concatenates two lists.
   * @param {LinkedList} list List to merge into the current list.
   */
  LinkedList.prototype.concat = function concat (list) {
    if (list.head_) {
      if (this.head_) {
        var end = this.head_.next;
        this.head_.next = list.first_;
        list.first_.prev = this.head_;
        end.prev = list.last_;
        list.last_.next = end;
        this.length_ += list.length_;
      } else {
        this.head_ = list.head_;
        this.first_ = list.first_;
        this.last_ = list.last_;
        this.length_ = list.length_;
      }
      list.head_ = undefined;
      list.first_ = undefined;
      list.last_ = undefined;
      list.length_ = 0;
    }
  };

  /**
   * Returns the current length of the list.
   *
   * @return {number} Length.
   */
  LinkedList.prototype.getLength = function getLength () {
    return this.length_;
  };

  /**
   * @module ol/render/webgl/PolygonReplay
   */


  /**
   * @typedef {Object} PolygonVertex
   * @property {number} x
   * @property {number} y
   * @property {number} i
   * @property {boolean} [reflex]
   */

  /**
   * @typedef {Object} PolygonSegment
   * @property {PolygonVertex} p0
   * @property {PolygonVertex} p1
   */


  var WebGLPolygonReplay = /*@__PURE__*/(function (WebGLReplay$$1) {
    function WebGLPolygonReplay(tolerance, maxExtent) {
      WebGLReplay$$1.call(this, tolerance, maxExtent);

      this.lineStringReplay = new WebGLLineStringReplay(
        tolerance, maxExtent);

      /**
       * @private
       * @type {import("./polygonreplay/defaultshader/Locations.js").default}
       */
      this.defaultLocations_ = null;

      /**
       * @private
       * @type {Array<Array<number>>}
       */
      this.styles_ = [];

      /**
       * @private
       * @type {Array<number>}
       */
      this.styleIndices_ = [];

      /**
       * @private
       * @type {{fillColor: (Array<number>|null),
       *         changed: boolean}|null}
       */
      this.state_ = {
        fillColor: null,
        changed: false
      };

    }

    if ( WebGLReplay$$1 ) WebGLPolygonReplay.__proto__ = WebGLReplay$$1;
    WebGLPolygonReplay.prototype = Object.create( WebGLReplay$$1 && WebGLReplay$$1.prototype );
    WebGLPolygonReplay.prototype.constructor = WebGLPolygonReplay;

    /**
     * Draw one polygon.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {Array<Array<number>>} holeFlatCoordinates Hole flat coordinates.
     * @param {number} stride Stride.
     * @private
     */
    WebGLPolygonReplay.prototype.drawCoordinates_ = function drawCoordinates_ (flatCoordinates, holeFlatCoordinates, stride) {
      // Triangulate the polygon
      var outerRing = new LinkedList();
      var rtree = new RBush();
      // Initialize the outer ring
      this.processFlatCoordinates_(flatCoordinates, stride, outerRing, rtree, true);
      var maxCoords = this.getMaxCoords_(outerRing);

      // Eliminate holes, if there are any
      if (holeFlatCoordinates.length) {
        var i, ii;
        var holeLists = [];
        for (i = 0, ii = holeFlatCoordinates.length; i < ii; ++i) {
          var holeList = {
            list: new LinkedList(),
            maxCoords: undefined,
            rtree: new RBush()
          };
          holeLists.push(holeList);
          this.processFlatCoordinates_(holeFlatCoordinates[i],
            stride, holeList.list, holeList.rtree, false);
          this.classifyPoints_(holeList.list, holeList.rtree, true);
          holeList.maxCoords = this.getMaxCoords_(holeList.list);
        }
        holeLists.sort(function(a, b) {
          return b.maxCoords[0] === a.maxCoords[0] ?
            a.maxCoords[1] - b.maxCoords[1] : b.maxCoords[0] - a.maxCoords[0];
        });
        for (i = 0; i < holeLists.length; ++i) {
          var currList = holeLists[i].list;
          var start = currList.firstItem();
          var currItem = start;
          var intersection = (void 0);
          do {
            //TODO: Triangulate holes when they intersect the outer ring.
            if (this.getIntersections_(currItem, rtree).length) {
              intersection = true;
              break;
            }
            currItem = currList.nextItem();
          } while (start !== currItem);
          if (!intersection) {
            if (this.bridgeHole_(currList, holeLists[i].maxCoords[0], outerRing, maxCoords[0], rtree)) {
              rtree.concat(holeLists[i].rtree);
              this.classifyPoints_(outerRing, rtree, false);
            }
          }
        }
      } else {
        this.classifyPoints_(outerRing, rtree, false);
      }
      this.triangulate_(outerRing, rtree);
    };

    /**
     * Inserts flat coordinates in a linked list and adds them to the vertex buffer.
     * @private
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} stride Stride.
     * @param {import("../../structs/LinkedList.js").default} list Linked list.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @param {boolean} clockwise Coordinate order should be clockwise.
     */
    WebGLPolygonReplay.prototype.processFlatCoordinates_ = function processFlatCoordinates_ (flatCoordinates, stride, list, rtree, clockwise) {
      var isClockwise = linearRingIsClockwise(flatCoordinates,
        0, flatCoordinates.length, stride);
      var i, ii;
      var n = this.vertices.length / 2;
      /** @type {PolygonVertex} */
      var start;
      /** @type {PolygonVertex} */
      var p0;
      /** @type {PolygonVertex} */
      var p1;
      var extents = [];
      var segments = [];
      if (clockwise === isClockwise) {
        start = this.createPoint_(flatCoordinates[0], flatCoordinates[1], n++);
        p0 = start;
        for (i = stride, ii = flatCoordinates.length; i < ii; i += stride) {
          p1 = this.createPoint_(flatCoordinates[i], flatCoordinates[i + 1], n++);
          segments.push(this.insertItem_(p0, p1, list));
          extents.push([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y), Math.max(p0.x, p1.x),
            Math.max(p0.y, p1.y)]);
          p0 = p1;
        }
        segments.push(this.insertItem_(p1, start, list));
        extents.push([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y), Math.max(p0.x, p1.x),
          Math.max(p0.y, p1.y)]);
      } else {
        var end = flatCoordinates.length - stride;
        start = this.createPoint_(flatCoordinates[end], flatCoordinates[end + 1], n++);
        p0 = start;
        for (i = end - stride, ii = 0; i >= ii; i -= stride) {
          p1 = this.createPoint_(flatCoordinates[i], flatCoordinates[i + 1], n++);
          segments.push(this.insertItem_(p0, p1, list));
          extents.push([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y), Math.max(p0.x, p1.x),
            Math.max(p0.y, p1.y)]);
          p0 = p1;
        }
        segments.push(this.insertItem_(p1, start, list));
        extents.push([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y), Math.max(p0.x, p1.x),
          Math.max(p0.y, p1.y)]);
      }
      rtree.load(extents, segments);
    };

    /**
     * Returns the rightmost coordinates of a polygon on the X axis.
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Polygons ring.
     * @return {Array<number>} Max X coordinates.
     */
    WebGLPolygonReplay.prototype.getMaxCoords_ = function getMaxCoords_ (list) {
      var start = list.firstItem();
      var seg = start;
      var maxCoords = [seg.p0.x, seg.p0.y];

      do {
        seg = list.nextItem();
        if (seg.p0.x > maxCoords[0]) {
          maxCoords = [seg.p0.x, seg.p0.y];
        }
      } while (seg !== start);

      return maxCoords;
    };

    /**
     * Classifies the points of a polygon list as convex, reflex. Removes collinear vertices.
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Polygon ring.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @param {boolean} ccw The orientation of the polygon is counter-clockwise.
     * @return {boolean} There were reclassified points.
     */
    WebGLPolygonReplay.prototype.classifyPoints_ = function classifyPoints_ (list, rtree, ccw) {
      var start = list.firstItem();
      var s0 = start;
      var s1 = list.nextItem();
      var pointsReclassified = false;
      do {
        var reflex = ccw ? triangleIsCounterClockwise(s1.p1.x,
          s1.p1.y, s0.p1.x, s0.p1.y, s0.p0.x, s0.p0.y) :
          triangleIsCounterClockwise(s0.p0.x, s0.p0.y, s0.p1.x,
            s0.p1.y, s1.p1.x, s1.p1.y);
        if (reflex === undefined) {
          this.removeItem_(s0, s1, list, rtree);
          pointsReclassified = true;
          if (s1 === start) {
            start = list.getNextItem();
          }
          s1 = s0;
          list.prevItem();
        } else if (s0.p1.reflex !== reflex) {
          s0.p1.reflex = reflex;
          pointsReclassified = true;
        }
        s0 = s1;
        s1 = list.nextItem();
      } while (s0 !== start);
      return pointsReclassified;
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} hole Linked list of the hole.
     * @param {number} holeMaxX Maximum X value of the hole.
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @param {number} listMaxX Maximum X value of the polygon.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @return {boolean} Bridging was successful.
     */
    WebGLPolygonReplay.prototype.bridgeHole_ = function bridgeHole_ (hole, holeMaxX, list, listMaxX, rtree) {
      var seg = hole.firstItem();
      while (seg.p1.x !== holeMaxX) {
        seg = hole.nextItem();
      }

      var p1 = seg.p1;
      /** @type {PolygonVertex} */
      var p2 = {x: listMaxX, y: p1.y, i: -1};
      var minDist = Infinity;
      var i, ii, bestPoint;
      /** @type {PolygonVertex} */
      var p5;

      var intersectingSegments = this.getIntersections_({p0: p1, p1: p2}, rtree, true);
      for (i = 0, ii = intersectingSegments.length; i < ii; ++i) {
        var currSeg = intersectingSegments[i];
        var intersection = this.calculateIntersection_(p1, p2, currSeg.p0,
          currSeg.p1, true);
        var dist = Math.abs(p1.x - intersection[0]);
        if (dist < minDist && triangleIsCounterClockwise(p1.x, p1.y,
          currSeg.p0.x, currSeg.p0.y, currSeg.p1.x, currSeg.p1.y) !== undefined) {
          minDist = dist;
          p5 = {x: intersection[0], y: intersection[1], i: -1};
          seg = currSeg;
        }
      }
      if (minDist === Infinity) {
        return false;
      }
      bestPoint = seg.p1;

      if (minDist > 0) {
        var pointsInTriangle = this.getPointsInTriangle_(p1, p5, seg.p1, rtree);
        if (pointsInTriangle.length) {
          var theta = Infinity;
          for (i = 0, ii = pointsInTriangle.length; i < ii; ++i) {
            var currPoint = pointsInTriangle[i];
            var currTheta = Math.atan2(p1.y - currPoint.y, p2.x - currPoint.x);
            if (currTheta < theta || (currTheta === theta && currPoint.x < bestPoint.x)) {
              theta = currTheta;
              bestPoint = currPoint;
            }
          }
        }
      }

      seg = list.firstItem();
      while (seg.p1.x !== bestPoint.x || seg.p1.y !== bestPoint.y) {
        seg = list.nextItem();
      }

      //We clone the bridge points as they can have different convexity.
      var p0Bridge = {x: p1.x, y: p1.y, i: p1.i, reflex: undefined};
      var p1Bridge = {x: seg.p1.x, y: seg.p1.y, i: seg.p1.i, reflex: undefined};

      hole.getNextItem().p0 = p0Bridge;
      this.insertItem_(p1, seg.p1, hole, rtree);
      this.insertItem_(p1Bridge, p0Bridge, hole, rtree);
      seg.p1 = p1Bridge;
      hole.setFirstItem();
      list.concat(hole);

      return true;
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     */
    WebGLPolygonReplay.prototype.triangulate_ = function triangulate_ (list, rtree) {
      var ccw = false;
      var simple = this.isSimple_(list, rtree);

      // Start clipping ears
      while (list.getLength() > 3) {
        if (simple) {
          if (!this.clipEars_(list, rtree, simple, ccw)) {
            if (!this.classifyPoints_(list, rtree, ccw)) {
              // Due to the behavior of OL's PIP algorithm, the ear clipping cannot
              // introduce touching segments. However, the original data may have some.
              if (!this.resolveSelfIntersections_(list, rtree, true)) {
                break;
              }
            }
          }
        } else {
          if (!this.clipEars_(list, rtree, simple, ccw)) {
            // We ran out of ears, try to reclassify.
            if (!this.classifyPoints_(list, rtree, ccw)) {
              // We have a bad polygon, try to resolve local self-intersections.
              if (!this.resolveSelfIntersections_(list, rtree)) {
                simple = this.isSimple_(list, rtree);
                if (!simple) {
                  // We have a really bad polygon, try more time consuming methods.
                  this.splitPolygon_(list, rtree);
                  break;
                } else {
                  ccw = !this.isClockwise_(list);
                  this.classifyPoints_(list, rtree, ccw);
                }
              }
            }
          }
        }
      }
      if (list.getLength() === 3) {
        var numIndices = this.indices.length;
        this.indices[numIndices++] = list.getPrevItem().p0.i;
        this.indices[numIndices++] = list.getCurrItem().p0.i;
        this.indices[numIndices++] = list.getNextItem().p0.i;
      }
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @param {boolean} simple The polygon is simple.
     * @param {boolean} ccw Orientation of the polygon is counter-clockwise.
     * @return {boolean} There were processed ears.
     */
    WebGLPolygonReplay.prototype.clipEars_ = function clipEars_ (list, rtree, simple, ccw) {
      var numIndices = this.indices.length;
      var start = list.firstItem();
      var s0 = list.getPrevItem();
      var s1 = start;
      var s2 = list.nextItem();
      var s3 = list.getNextItem();
      var p0, p1, p2;
      var processedEars = false;
      do {
        p0 = s1.p0;
        p1 = s1.p1;
        p2 = s2.p1;
        if (p1.reflex === false) {
          // We might have a valid ear
          var variableCriterion = (void 0);
          if (simple) {
            variableCriterion = this.getPointsInTriangle_(p0, p1, p2, rtree, true).length === 0;
          } else {
            variableCriterion = ccw ? this.diagonalIsInside_(s3.p1, p2, p1, p0,
              s0.p0) : this.diagonalIsInside_(s0.p0, p0, p1, p2, s3.p1);
          }
          if ((simple || this.getIntersections_({p0: p0, p1: p2}, rtree).length === 0) &&
              variableCriterion) {
            //The diagonal is completely inside the polygon
            if (simple || p0.reflex === false || p2.reflex === false ||
                linearRingIsClockwise([s0.p0.x, s0.p0.y, p0.x,
                  p0.y, p1.x, p1.y, p2.x, p2.y, s3.p1.x, s3.p1.y], 0, 10, 2) === !ccw) {
              //The diagonal is persumably valid, we have an ear
              this.indices[numIndices++] = p0.i;
              this.indices[numIndices++] = p1.i;
              this.indices[numIndices++] = p2.i;
              this.removeItem_(s1, s2, list, rtree);
              if (s2 === start) {
                start = s3;
              }
              processedEars = true;
            }
          }
        }
        // Else we have a reflex point.
        s0 = list.getPrevItem();
        s1 = list.getCurrItem();
        s2 = list.nextItem();
        s3 = list.getNextItem();
      } while (s1 !== start && list.getLength() > 3);

      return processedEars;
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @param {boolean=} opt_touch Resolve touching segments.
     * @return {boolean} There were resolved intersections.
    */
    WebGLPolygonReplay.prototype.resolveSelfIntersections_ = function resolveSelfIntersections_ (list, rtree, opt_touch) {
      var start = list.firstItem();
      list.nextItem();
      var s0 = start;
      var s1 = list.nextItem();
      var resolvedIntersections = false;

      do {
        var intersection = this.calculateIntersection_(s0.p0, s0.p1, s1.p0, s1.p1,
          opt_touch);
        if (intersection) {
          var breakCond = false;
          var numVertices = this.vertices.length;
          var numIndices = this.indices.length;
          var n = numVertices / 2;
          var seg = list.prevItem();
          list.removeItem();
          rtree.remove(seg);
          breakCond = (seg === start);
          var p = (void 0);
          if (opt_touch) {
            if (intersection[0] === s0.p0.x && intersection[1] === s0.p0.y) {
              list.prevItem();
              p = s0.p0;
              s1.p0 = p;
              rtree.remove(s0);
              breakCond = breakCond || (s0 === start);
            } else {
              p = s1.p1;
              s0.p1 = p;
              rtree.remove(s1);
              breakCond = breakCond || (s1 === start);
            }
            list.removeItem();
          } else {
            p = this.createPoint_(intersection[0], intersection[1], n);
            s0.p1 = p;
            s1.p0 = p;
            rtree.update([Math.min(s0.p0.x, s0.p1.x), Math.min(s0.p0.y, s0.p1.y),
              Math.max(s0.p0.x, s0.p1.x), Math.max(s0.p0.y, s0.p1.y)], s0);
            rtree.update([Math.min(s1.p0.x, s1.p1.x), Math.min(s1.p0.y, s1.p1.y),
              Math.max(s1.p0.x, s1.p1.x), Math.max(s1.p0.y, s1.p1.y)], s1);
          }

          this.indices[numIndices++] = seg.p0.i;
          this.indices[numIndices++] = seg.p1.i;
          this.indices[numIndices++] = p.i;

          resolvedIntersections = true;
          if (breakCond) {
            break;
          }
        }

        s0 = list.getPrevItem();
        s1 = list.nextItem();
      } while (s0 !== start);
      return resolvedIntersections;
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @return {boolean} The polygon is simple.
     */
    WebGLPolygonReplay.prototype.isSimple_ = function isSimple_ (list, rtree) {
      var start = list.firstItem();
      var seg = start;
      do {
        if (this.getIntersections_(seg, rtree).length) {
          return false;
        }
        seg = list.nextItem();
      } while (seg !== start);
      return true;
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @return {boolean} Orientation is clockwise.
     */
    WebGLPolygonReplay.prototype.isClockwise_ = function isClockwise_ (list) {
      var length = list.getLength() * 2;
      var flatCoordinates = new Array(length);
      var start = list.firstItem();
      var seg = start;
      var i = 0;
      do {
        flatCoordinates[i++] = seg.p0.x;
        flatCoordinates[i++] = seg.p0.y;
        seg = list.nextItem();
      } while (seg !== start);
      return linearRingIsClockwise(flatCoordinates, 0, length, 2);
    };

    /**
     * @private
     * @param {import("../../structs/LinkedList.js").default} list Linked list of the polygon.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     */
    WebGLPolygonReplay.prototype.splitPolygon_ = function splitPolygon_ (list, rtree) {
      var start = list.firstItem();
      var s0 = start;
      do {
        var intersections = this.getIntersections_(s0, rtree);
        if (intersections.length) {
          var s1 = intersections[0];
          var n = this.vertices.length / 2;
          var intersection = this.calculateIntersection_(s0.p0,
            s0.p1, s1.p0, s1.p1);
          var p = this.createPoint_(intersection[0], intersection[1], n);
          var newPolygon = new LinkedList();
          var newRtree = new RBush();
          this.insertItem_(p, s0.p1, newPolygon, newRtree);
          s0.p1 = p;
          rtree.update([Math.min(s0.p0.x, p.x), Math.min(s0.p0.y, p.y),
            Math.max(s0.p0.x, p.x), Math.max(s0.p0.y, p.y)], s0);
          var currItem = list.nextItem();
          while (currItem !== s1) {
            this.insertItem_(currItem.p0, currItem.p1, newPolygon, newRtree);
            rtree.remove(currItem);
            list.removeItem();
            currItem = list.getCurrItem();
          }
          this.insertItem_(s1.p0, p, newPolygon, newRtree);
          s1.p0 = p;
          rtree.update([Math.min(s1.p1.x, p.x), Math.min(s1.p1.y, p.y),
            Math.max(s1.p1.x, p.x), Math.max(s1.p1.y, p.y)], s1);
          this.classifyPoints_(list, rtree, false);
          this.triangulate_(list, rtree);
          this.classifyPoints_(newPolygon, newRtree, false);
          this.triangulate_(newPolygon, newRtree);
          break;
        }
        s0 = list.nextItem();
      } while (s0 !== start);
    };

    /**
     * @private
     * @param {number} x X coordinate.
     * @param {number} y Y coordinate.
     * @param {number} i Index.
     * @return {PolygonVertex} List item.
     */
    WebGLPolygonReplay.prototype.createPoint_ = function createPoint_ (x, y, i) {
      var numVertices = this.vertices.length;
      this.vertices[numVertices++] = x;
      this.vertices[numVertices++] = y;
      /** @type {PolygonVertex} */
      var p = {
        x: x,
        y: y,
        i: i,
        reflex: undefined
      };
      return p;
    };

    /**
     * @private
     * @param {PolygonVertex} p0 First point of segment.
     * @param {PolygonVertex} p1 Second point of segment.
     * @param {import("../../structs/LinkedList.js").default} list Polygon ring.
     * @param {import("../../structs/RBush.js").default=} opt_rtree Insert the segment into the R-Tree.
     * @return {PolygonSegment} segment.
     */
    WebGLPolygonReplay.prototype.insertItem_ = function insertItem_ (p0, p1, list, opt_rtree) {
      var seg = {
        p0: p0,
        p1: p1
      };
      list.insertItem(seg);
      if (opt_rtree) {
        opt_rtree.insert([Math.min(p0.x, p1.x), Math.min(p0.y, p1.y),
          Math.max(p0.x, p1.x), Math.max(p0.y, p1.y)], seg);
      }
      return seg;
    };

    /**
      * @private
      * @param {PolygonSegment} s0 Segment before the remove candidate.
      * @param {PolygonSegment} s1 Remove candidate segment.
      * @param {import("../../structs/LinkedList.js").default} list Polygon ring.
      * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
      */
    WebGLPolygonReplay.prototype.removeItem_ = function removeItem_ (s0, s1, list, rtree) {
      if (list.getCurrItem() === s1) {
        list.removeItem();
        s0.p1 = s1.p1;
        rtree.remove(s1);
        rtree.update([Math.min(s0.p0.x, s0.p1.x), Math.min(s0.p0.y, s0.p1.y),
          Math.max(s0.p0.x, s0.p1.x), Math.max(s0.p0.y, s0.p1.y)], s0);
      }
    };

    /**
     * @private
     * @param {PolygonVertex} p0 First point.
     * @param {PolygonVertex} p1 Second point.
     * @param {PolygonVertex} p2 Third point.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @param {boolean=} opt_reflex Only include reflex points.
     * @return {Array<PolygonVertex>} Points in the triangle.
     */
    WebGLPolygonReplay.prototype.getPointsInTriangle_ = function getPointsInTriangle_ (p0, p1, p2, rtree, opt_reflex) {
      var result = [];
      var segmentsInExtent = rtree.getInExtent([Math.min(p0.x, p1.x, p2.x),
        Math.min(p0.y, p1.y, p2.y), Math.max(p0.x, p1.x, p2.x), Math.max(p0.y,
          p1.y, p2.y)]);
      for (var i = 0, ii = segmentsInExtent.length; i < ii; ++i) {
        for (var j in segmentsInExtent[i]) {
          var p = segmentsInExtent[i][j];
          if (typeof p === 'object' && (!opt_reflex || p.reflex)) {
            if ((p.x !== p0.x || p.y !== p0.y) && (p.x !== p1.x || p.y !== p1.y) &&
                (p.x !== p2.x || p.y !== p2.y) && result.indexOf(p) === -1 &&
                linearRingContainsXY([p0.x, p0.y, p1.x, p1.y, p2.x, p2.y], 0, 6, 2, p.x, p.y)) {
              result.push(p);
            }
          }
        }
      }
      return result;
    };

    /**
     * @private
     * @param {PolygonSegment} segment Segment.
     * @param {import("../../structs/RBush.js").default} rtree R-Tree of the polygon.
     * @param {boolean=} opt_touch Touching segments should be considered an intersection.
     * @return {Array<PolygonSegment>} Intersecting segments.
     */
    WebGLPolygonReplay.prototype.getIntersections_ = function getIntersections_ (segment, rtree, opt_touch) {
      var p0 = segment.p0;
      var p1 = segment.p1;
      var segmentsInExtent = rtree.getInExtent([Math.min(p0.x, p1.x),
        Math.min(p0.y, p1.y), Math.max(p0.x, p1.x), Math.max(p0.y, p1.y)]);
      var result = [];
      for (var i = 0, ii = segmentsInExtent.length; i < ii; ++i) {
        var currSeg = segmentsInExtent[i];
        if (segment !== currSeg && (opt_touch || currSeg.p0 !== p1 || currSeg.p1 !== p0) &&
            this.calculateIntersection_(p0, p1, currSeg.p0, currSeg.p1, opt_touch)) {
          result.push(currSeg);
        }
      }
      return result;
    };

    /**
     * Line intersection algorithm by Paul Bourke.
     * See http://paulbourke.net/geometry/pointlineplane/.
     *
     * @private
     * @param {PolygonVertex} p0 First point.
     * @param {PolygonVertex} p1 Second point.
     * @param {PolygonVertex} p2 Third point.
     * @param {PolygonVertex} p3 Fourth point.
     * @param {boolean=} opt_touch Touching segments should be considered an intersection.
     * @return {Array<number>|undefined} Intersection coordinates.
     */
    WebGLPolygonReplay.prototype.calculateIntersection_ = function calculateIntersection_ (p0, p1, p2, p3, opt_touch) {
      var denom = (p3.y - p2.y) * (p1.x - p0.x) - (p3.x - p2.x) * (p1.y - p0.y);
      if (denom !== 0) {
        var ua = ((p3.x - p2.x) * (p0.y - p2.y) - (p3.y - p2.y) * (p0.x - p2.x)) / denom;
        var ub = ((p1.x - p0.x) * (p0.y - p2.y) - (p1.y - p0.y) * (p0.x - p2.x)) / denom;
        if ((!opt_touch && ua > EPSILON && ua < 1 - EPSILON &&
            ub > EPSILON && ub < 1 - EPSILON) || (opt_touch &&
            ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1)) {
          return [p0.x + ua * (p1.x - p0.x), p0.y + ua * (p1.y - p0.y)];
        }
      }
      return undefined;
    };

    /**
     * @private
     * @param {PolygonVertex} p0 Point before the start of the diagonal.
     * @param {PolygonVertex} p1 Start point of the diagonal.
     * @param {PolygonVertex} p2 Ear candidate.
     * @param {PolygonVertex} p3 End point of the diagonal.
     * @param {PolygonVertex} p4 Point after the end of the diagonal.
     * @return {boolean} Diagonal is inside the polygon.
     */
    WebGLPolygonReplay.prototype.diagonalIsInside_ = function diagonalIsInside_ (p0, p1, p2, p3, p4) {
      if (p1.reflex === undefined || p3.reflex === undefined) {
        return false;
      }
      var p1IsLeftOf = (p2.x - p3.x) * (p1.y - p3.y) > (p2.y - p3.y) * (p1.x - p3.x);
      var p1IsRightOf = (p4.x - p3.x) * (p1.y - p3.y) < (p4.y - p3.y) * (p1.x - p3.x);
      var p3IsLeftOf = (p0.x - p1.x) * (p3.y - p1.y) > (p0.y - p1.y) * (p3.x - p1.x);
      var p3IsRightOf = (p2.x - p1.x) * (p3.y - p1.y) < (p2.y - p1.y) * (p3.x - p1.x);
      var p1InCone = p3.reflex ? p1IsRightOf || p1IsLeftOf : p1IsRightOf && p1IsLeftOf;
      var p3InCone = p1.reflex ? p3IsRightOf || p3IsLeftOf : p3IsRightOf && p3IsLeftOf;
      return p1InCone && p3InCone;
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.drawMultiPolygon = function drawMultiPolygon (multiPolygonGeometry, feature) {
      var endss = multiPolygonGeometry.getEndss();
      var stride = multiPolygonGeometry.getStride();
      var currIndex = this.indices.length;
      var currLineIndex = this.lineStringReplay.getCurrentIndex();
      var flatCoordinates = multiPolygonGeometry.getFlatCoordinates();
      var i, ii, j, jj;
      var start = 0;
      for (i = 0, ii = endss.length; i < ii; ++i) {
        var ends = endss[i];
        if (ends.length > 0) {
          var outerRing = translate(flatCoordinates, start, ends[0],
            stride, -this.origin[0], -this.origin[1]);
          if (outerRing.length) {
            var holes = [];
            var holeFlatCoords = (void 0);
            for (j = 1, jj = ends.length; j < jj; ++j) {
              if (ends[j] !== ends[j - 1]) {
                holeFlatCoords = translate(flatCoordinates, ends[j - 1],
                  ends[j], stride, -this.origin[0], -this.origin[1]);
                holes.push(holeFlatCoords);
              }
            }
            this.lineStringReplay.drawPolygonCoordinates(outerRing, holes, stride);
            this.drawCoordinates_(outerRing, holes, stride);
          }
        }
        start = ends[ends.length - 1];
      }
      if (this.indices.length > currIndex) {
        this.startIndices.push(currIndex);
        this.startIndicesFeature.push(feature);
        if (this.state_.changed) {
          this.styleIndices_.push(currIndex);
          this.state_.changed = false;
        }
      }
      if (this.lineStringReplay.getCurrentIndex() > currLineIndex) {
        this.lineStringReplay.setPolygonStyle(feature, currLineIndex);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.drawPolygon = function drawPolygon (polygonGeometry, feature) {
      var ends = polygonGeometry.getEnds();
      var stride = polygonGeometry.getStride();
      if (ends.length > 0) {
        var flatCoordinates = polygonGeometry.getFlatCoordinates().map(Number);
        var outerRing = translate(flatCoordinates, 0, ends[0],
          stride, -this.origin[0], -this.origin[1]);
        if (outerRing.length) {
          var holes = [];
          var i, ii, holeFlatCoords;
          for (i = 1, ii = ends.length; i < ii; ++i) {
            if (ends[i] !== ends[i - 1]) {
              holeFlatCoords = translate(flatCoordinates, ends[i - 1],
                ends[i], stride, -this.origin[0], -this.origin[1]);
              holes.push(holeFlatCoords);
            }
          }

          this.startIndices.push(this.indices.length);
          this.startIndicesFeature.push(feature);
          if (this.state_.changed) {
            this.styleIndices_.push(this.indices.length);
            this.state_.changed = false;
          }
          this.lineStringReplay.setPolygonStyle(feature);

          this.lineStringReplay.drawPolygonCoordinates(outerRing, holes, stride);
          this.drawCoordinates_(outerRing, holes, stride);
        }
      }
    };

    /**
     * @inheritDoc
     **/
    WebGLPolygonReplay.prototype.finish = function finish (context) {
      // create, bind, and populate the vertices buffer
      this.verticesBuffer = new WebGLBuffer(this.vertices);

      // create, bind, and populate the indices buffer
      this.indicesBuffer = new WebGLBuffer(this.indices);

      this.startIndices.push(this.indices.length);

      this.lineStringReplay.finish(context);

      //Clean up, if there is nothing to draw
      if (this.styleIndices_.length === 0 && this.styles_.length > 0) {
        this.styles_ = [];
      }

      this.vertices = null;
      this.indices = null;
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.getDeleteResourcesFunction = function getDeleteResourcesFunction (context) {
      var verticesBuffer = this.verticesBuffer;
      var indicesBuffer = this.indicesBuffer;
      var lineDeleter = this.lineStringReplay.getDeleteResourcesFunction(context);
      return function() {
        context.deleteBuffer(verticesBuffer);
        context.deleteBuffer(indicesBuffer);
        lineDeleter();
      };
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.setUpProgram = function setUpProgram (gl, context, size, pixelRatio) {
      // get the program
      var program = context.getProgram(fragment$3, vertex$3);

      // get the locations
      var locations;
      if (!this.defaultLocations_) {
        locations = new Locations$3(gl, program);
        this.defaultLocations_ = locations;
      } else {
        locations = this.defaultLocations_;
      }

      context.useProgram(program);

      // enable the vertex attrib arrays
      gl.enableVertexAttribArray(locations.a_position);
      gl.vertexAttribPointer(locations.a_position, 2, FLOAT,
        false, 8, 0);

      return locations;
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.shutDownProgram = function shutDownProgram (gl, locations) {
      gl.disableVertexAttribArray(locations.a_position);
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.drawReplay = function drawReplay (gl, context, skippedFeaturesHash, hitDetection) {
      //Save GL parameters.
      var tmpDepthFunc = /** @type {number} */ (gl.getParameter(gl.DEPTH_FUNC));
      var tmpDepthMask = /** @type {boolean} */ (gl.getParameter(gl.DEPTH_WRITEMASK));

      if (!hitDetection) {
        gl.enable(gl.DEPTH_TEST);
        gl.depthMask(true);
        gl.depthFunc(gl.NOTEQUAL);
      }

      if (!isEmpty(skippedFeaturesHash)) {
        this.drawReplaySkipping_(gl, context, skippedFeaturesHash);
      } else {
        //Draw by style groups to minimize drawElements() calls.
        var i, start, end, nextStyle;
        end = this.startIndices[this.startIndices.length - 1];
        for (i = this.styleIndices_.length - 1; i >= 0; --i) {
          start = this.styleIndices_[i];
          nextStyle = this.styles_[i];
          this.setFillStyle_(gl, nextStyle);
          this.drawElements(gl, context, start, end);
          end = start;
        }
      }
      if (!hitDetection) {
        gl.disable(gl.DEPTH_TEST);
        gl.clear(gl.DEPTH_BUFFER_BIT);
        //Restore GL parameters.
        gl.depthMask(tmpDepthMask);
        gl.depthFunc(tmpDepthFunc);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.drawHitDetectionReplayOneByOne = function drawHitDetectionReplayOneByOne (gl, context, skippedFeaturesHash, featureCallback, opt_hitExtent) {
      var i, start, end, nextStyle, groupStart, feature, featureIndex;
      featureIndex = this.startIndices.length - 2;
      end = this.startIndices[featureIndex + 1];
      for (i = this.styleIndices_.length - 1; i >= 0; --i) {
        nextStyle = this.styles_[i];
        this.setFillStyle_(gl, nextStyle);
        groupStart = this.styleIndices_[i];

        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          start = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)] === undefined &&
              feature.getGeometry() &&
              (opt_hitExtent === undefined || intersects(
                /** @type {Array<number>} */ (opt_hitExtent),
                feature.getGeometry().getExtent()))) {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            this.drawElements(gl, context, start, end);

            var result = featureCallback(feature);

            if (result) {
              return result;
            }

          }
          featureIndex--;
          end = start;
        }
      }
      return undefined;
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {Object} skippedFeaturesHash Ids of features to skip.
     */
    WebGLPolygonReplay.prototype.drawReplaySkipping_ = function drawReplaySkipping_ (gl, context, skippedFeaturesHash) {
      var i, start, end, nextStyle, groupStart, feature, featureIndex, featureStart;
      featureIndex = this.startIndices.length - 2;
      end = start = this.startIndices[featureIndex + 1];
      for (i = this.styleIndices_.length - 1; i >= 0; --i) {
        nextStyle = this.styles_[i];
        this.setFillStyle_(gl, nextStyle);
        groupStart = this.styleIndices_[i];

        while (featureIndex >= 0 &&
            this.startIndices[featureIndex] >= groupStart) {
          featureStart = this.startIndices[featureIndex];
          feature = this.startIndicesFeature[featureIndex];

          if (skippedFeaturesHash[getUid(feature)]) {
            if (start !== end) {
              this.drawElements(gl, context, start, end);
              gl.clear(gl.DEPTH_BUFFER_BIT);
            }
            end = featureStart;
          }
          featureIndex--;
          start = featureStart;
        }
        if (start !== end) {
          this.drawElements(gl, context, start, end);
          gl.clear(gl.DEPTH_BUFFER_BIT);
        }
        start = end = groupStart;
      }
    };

    /**
     * @private
     * @param {WebGLRenderingContext} gl gl.
     * @param {Array<number>} color Color.
     */
    WebGLPolygonReplay.prototype.setFillStyle_ = function setFillStyle_ (gl, color) {
      gl.uniform4fv(this.defaultLocations_.u_color, color);
    };

    /**
     * @inheritDoc
     */
    WebGLPolygonReplay.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {
      var fillStyleColor = fillStyle ? fillStyle.getColor() : [0, 0, 0, 0];
      if (!(fillStyleColor instanceof CanvasGradient) &&
          !(fillStyleColor instanceof CanvasPattern)) {
        fillStyleColor = asArray(fillStyleColor).map(function(c, i) {
          return i != 3 ? c / 255 : c;
        }) || DEFAULT_FILLSTYLE;
      } else {
        fillStyleColor = DEFAULT_FILLSTYLE;
      }
      if (!this.state_.fillColor || !equals(fillStyleColor, this.state_.fillColor)) {
        this.state_.fillColor = fillStyleColor;
        this.state_.changed = true;
        this.styles_.push(fillStyleColor);
      }
      //Provide a null stroke style, if no strokeStyle is provided. Required for the draw interaction to work.
      if (strokeStyle) {
        this.lineStringReplay.setFillStrokeStyle(null, strokeStyle);
      } else {
        var nullStrokeStyle = new Stroke({
          color: [0, 0, 0, 0],
          width: 0
        });
        this.lineStringReplay.setFillStrokeStyle(null, nullStrokeStyle);
      }
    };

    return WebGLPolygonReplay;
  }(WebGLReplay));

  /**
   * @module ol/style/Atlas
   */


  /**
   * @typedef {Object} AtlasBlock
   * @property {number} x
   * @property {number} y
   * @property {number} width
   * @property {number} height
   */

  /**
   * Provides information for an image inside an atlas.
   * `offsetX` and `offsetY` are the position of the image inside the atlas image `image`.
   * @typedef {Object} AtlasInfo
   * @property {number} offsetX
   * @property {number} offsetY
   * @property {HTMLCanvasElement} image
   */


  /**
   * @classesc
   * This class facilitates the creation of image atlases.
   *
   * Images added to an atlas will be rendered onto a single
   * atlas canvas. The distribution of images on the canvas is
   * managed with the bin packing algorithm described in:
   * http://www.blackpawn.com/texts/lightmaps/
   *
   * @param {number} size The size in pixels of the sprite image.
   * @param {number} space The space in pixels between images.
   *    Because texture coordinates are float values, the edges of
   *    images might not be completely correct (in a way that the
   *    edges overlap when being rendered). To avoid this we add a
   *    padding around each image.
   */
  var Atlas = function Atlas(size, space) {

    /**
     * @private
     * @type {number}
     */
    this.space_ = space;

    /**
     * @private
     * @type {Array<AtlasBlock>}
     */
    this.emptyBlocks_ = [{x: 0, y: 0, width: size, height: size}];

    /**
     * @private
     * @type {Object<string, AtlasInfo>}
     */
    this.entries_ = {};

    /**
     * @private
     * @type {CanvasRenderingContext2D}
     */
    this.context_ = createCanvasContext2D(size, size);

    /**
     * @private
     * @type {HTMLCanvasElement}
     */
    this.canvas_ = this.context_.canvas;
  };

  /**
   * @param {string} id The identifier of the entry to check.
   * @return {?AtlasInfo} The atlas info.
   */
  Atlas.prototype.get = function get (id) {
    return this.entries_[id] || null;
  };

  /**
   * @param {string} id The identifier of the entry to add.
   * @param {number} width The width.
   * @param {number} height The height.
   * @param {function(CanvasRenderingContext2D, number, number)} renderCallback
   *  Called to render the new image onto an atlas image.
   * @param {Object=} opt_this Value to use as `this` when executing
   *  `renderCallback`.
   * @return {?AtlasInfo} The position and atlas image for the entry.
   */
  Atlas.prototype.add = function add (id, width, height, renderCallback, opt_this) {
    for (var i = 0, ii = this.emptyBlocks_.length; i < ii; ++i) {
      var block = this.emptyBlocks_[i];
      if (block.width >= width + this.space_ &&
          block.height >= height + this.space_) {
        // we found a block that is big enough for our entry
        var entry = {
          offsetX: block.x + this.space_,
          offsetY: block.y + this.space_,
          image: this.canvas_
        };
        this.entries_[id] = entry;

        // render the image on the atlas image
        renderCallback.call(opt_this, this.context_,
          block.x + this.space_, block.y + this.space_);

        // split the block after the insertion, either horizontally or vertically
        this.split_(i, block, width + this.space_, height + this.space_);

        return entry;
      }
    }

    // there is no space for the new entry in this atlas
    return null;
  };

  /**
   * @private
   * @param {number} index The index of the block.
   * @param {AtlasBlock} block The block to split.
   * @param {number} width The width of the entry to insert.
   * @param {number} height The height of the entry to insert.
   */
  Atlas.prototype.split_ = function split_ (index, block, width, height) {
    var deltaWidth = block.width - width;
    var deltaHeight = block.height - height;

    /** @type {AtlasBlock} */
    var newBlock1;
    /** @type {AtlasBlock} */
    var newBlock2;

    if (deltaWidth > deltaHeight) {
      // split vertically
      // block right of the inserted entry
      newBlock1 = {
        x: block.x + width,
        y: block.y,
        width: block.width - width,
        height: block.height
      };

      // block below the inserted entry
      newBlock2 = {
        x: block.x,
        y: block.y + height,
        width: width,
        height: block.height - height
      };
      this.updateBlocks_(index, newBlock1, newBlock2);
    } else {
      // split horizontally
      // block right of the inserted entry
      newBlock1 = {
        x: block.x + width,
        y: block.y,
        width: block.width - width,
        height: height
      };

      // block below the inserted entry
      newBlock2 = {
        x: block.x,
        y: block.y + height,
        width: block.width,
        height: block.height - height
      };
      this.updateBlocks_(index, newBlock1, newBlock2);
    }
  };

  /**
   * Remove the old block and insert new blocks at the same array position.
   * The new blocks are inserted at the same position, so that splitted
   * blocks (that are potentially smaller) are filled first.
   * @private
   * @param {number} index The index of the block to remove.
   * @param {AtlasBlock} newBlock1 The 1st block to add.
   * @param {AtlasBlock} newBlock2 The 2nd block to add.
   */
  Atlas.prototype.updateBlocks_ = function updateBlocks_ (index, newBlock1, newBlock2) {
    var args = /** @type {Array<*>} */ ([index, 1]);
    if (newBlock1.width > 0 && newBlock1.height > 0) {
      args.push(newBlock1);
    }
    if (newBlock2.width > 0 && newBlock2.height > 0) {
      args.push(newBlock2);
    }
    this.emptyBlocks_.splice.apply(this.emptyBlocks_, args);
  };

  /**
   * @module ol/style/AtlasManager
   */


  /**
   * @typedef {Object} Options
   * @property {number} [initialSize=256] The size in pixels of the first atlas image.
   * @property {number} [maxSize] The maximum size in pixels of atlas images. Default is
   * `webgl/MAX_TEXTURE_SIZE` or 2048 if WebGL is not supported.
   * @property {number} [space=1] The space in pixels between images.
   */


  /**
   * Provides information for an image inside an atlas manager.
   * `offsetX` and `offsetY` is the position of the image inside
   * the atlas image `image` and the position of the hit-detection image
   * inside the hit-detection atlas image `hitImage`.
   * @typedef {Object} AtlasManagerInfo
   * @property {number} offsetX
   * @property {number} offsetY
   * @property {HTMLCanvasElement} image
   * @property {HTMLCanvasElement} hitImage
   */


  /**
   * The size in pixels of the first atlas image.
   * @type {number}
   */
  var INITIAL_ATLAS_SIZE = 256;


  /**
   * @classdesc
   * Manages the creation of image atlases.
   *
   * Images added to this manager will be inserted into an atlas, which
   * will be used for rendering.
   * The `size` given in the constructor is the size for the first
   * atlas. After that, when new atlases are created, they will have
   * twice the size as the latest atlas (until `maxSize` is reached).
   *
   * If an application uses many images or very large images, it is recommended
   * to set a higher `size` value to avoid the creation of too many atlases.
   * @api
   */
  var AtlasManager = function AtlasManager(opt_options) {

    var options = opt_options || {};

    /**
     * The size in pixels of the latest atlas image.
     * @private
     * @type {number}
     */
    this.currentSize_ = options.initialSize !== undefined ?
      options.initialSize : INITIAL_ATLAS_SIZE;

    /**
     * The maximum size in pixels of atlas images.
     * @private
     * @type {number}
     */
    this.maxSize_ = options.maxSize !== undefined ?
      options.maxSize : MAX_TEXTURE_SIZE !== undefined ?
          MAX_TEXTURE_SIZE : 2048;

    /**
     * The size in pixels between images.
     * @private
     * @type {number}
     */
    this.space_ = options.space !== undefined ? options.space : 1;

    /**
     * @private
     * @type {Array<import("./Atlas.js").default>}
     */
    this.atlases_ = [new Atlas(this.currentSize_, this.space_)];

    /**
     * The size in pixels of the latest atlas image for hit-detection images.
     * @private
     * @type {number}
     */
    this.currentHitSize_ = this.currentSize_;

    /**
     * @private
     * @type {Array<import("./Atlas.js").default>}
     */
    this.hitAtlases_ = [new Atlas(this.currentHitSize_, this.space_)];
  };

  /**
   * @param {string} id The identifier of the entry to check.
   * @return {?AtlasManagerInfo} The position and atlas image for the
   *  entry, or `null` if the entry is not part of the atlas manager.
   */
  AtlasManager.prototype.getInfo = function getInfo (id) {
    /** @type {?import("./Atlas.js").AtlasInfo} */
    var info = this.getInfo_(this.atlases_, id);

    if (!info) {
      return null;
    }
    var hitInfo = /** @type {import("./Atlas.js").AtlasInfo} */ (this.getInfo_(this.hitAtlases_, id));

    return this.mergeInfos_(info, hitInfo);
  };

  /**
   * @private
   * @param {Array<import("./Atlas.js").default>} atlases The atlases to search.
   * @param {string} id The identifier of the entry to check.
   * @return {?import("./Atlas.js").AtlasInfo} The position and atlas image for the entry,
   *  or `null` if the entry is not part of the atlases.
   */
  AtlasManager.prototype.getInfo_ = function getInfo_ (atlases, id) {
    for (var i = 0, ii = atlases.length; i < ii; ++i) {
      var atlas = atlases[i];
      var info = atlas.get(id);
      if (info) {
        return info;
      }
    }
    return null;
  };

  /**
   * @private
   * @param {import("./Atlas.js").AtlasInfo} info The info for the real image.
   * @param {import("./Atlas.js").AtlasInfo} hitInfo The info for the hit-detection
   *  image.
   * @return {?AtlasManagerInfo} The position and atlas image for the
   *  entry, or `null` if the entry is not part of the atlases.
   */
  AtlasManager.prototype.mergeInfos_ = function mergeInfos_ (info, hitInfo) {
    return (
      /** @type {AtlasManagerInfo} */ ({
        offsetX: info.offsetX,
        offsetY: info.offsetY,
        image: info.image,
        hitImage: hitInfo.image
      })
    );
  };

  /**
   * Add an image to the atlas manager.
   *
   * If an entry for the given id already exists, the entry will
   * be overridden (but the space on the atlas graphic will not be freed).
   *
   * If `renderHitCallback` is provided, the image (or the hit-detection version
   * of the image) will be rendered into a separate hit-detection atlas image.
   *
   * @param {string} id The identifier of the entry to add.
   * @param {number} width The width.
   * @param {number} height The height.
   * @param {function(CanvasRenderingContext2D, number, number)} renderCallback
   *  Called to render the new image onto an atlas image.
   * @param {function(CanvasRenderingContext2D, number, number)=} opt_renderHitCallback Called to render a hit-detection image onto a hit
   *  detection atlas image.
   * @param {Object=} opt_this Value to use as `this` when executing
   *  `renderCallback` and `renderHitCallback`.
   * @return {?AtlasManagerInfo}The position and atlas image for the
   *  entry, or `null` if the image is too big.
   */
  AtlasManager.prototype.add = function add (id, width, height, renderCallback, opt_renderHitCallback, opt_this) {
    if (width + this.space_ > this.maxSize_ ||
        height + this.space_ > this.maxSize_) {
      return null;
    }

    /** @type {?import("./Atlas.js").AtlasInfo} */
    var info = this.add_(false, id, width, height, renderCallback, opt_this);
    if (!info) {
      return null;
    }

    // even if no hit-detection entry is requested, we insert a fake entry into
    // the hit-detection atlas, to make sure that the offset is the same for
    // the original image and the hit-detection image.
    var renderHitCallback = opt_renderHitCallback !== undefined ?
      opt_renderHitCallback : VOID;

    var hitInfo = /** @type {import("./Atlas.js").AtlasInfo} */ (this.add_(true,
      id, width, height, renderHitCallback, opt_this));

    return this.mergeInfos_(info, hitInfo);
  };

  /**
   * @private
   * @param {boolean} isHitAtlas If the hit-detection atlases are used.
   * @param {string} id The identifier of the entry to add.
   * @param {number} width The width.
   * @param {number} height The height.
   * @param {function(CanvasRenderingContext2D, number, number)} renderCallback
   *  Called to render the new image onto an atlas image.
   * @param {Object=} opt_this Value to use as `this` when executing
   *  `renderCallback` and `renderHitCallback`.
   * @return {?import("./Atlas.js").AtlasInfo}The position and atlas image for the entry,
   *  or `null` if the image is too big.
   */
  AtlasManager.prototype.add_ = function add_ (isHitAtlas, id, width, height, renderCallback, opt_this) {
    var atlases = (isHitAtlas) ? this.hitAtlases_ : this.atlases_;
    var atlas, info, i, ii;
    for (i = 0, ii = atlases.length; i < ii; ++i) {
      atlas = atlases[i];
      info = atlas.add(id, width, height, renderCallback, opt_this);
      if (info) {
        return info;
      } else if (!info && i === ii - 1) {
        // the entry could not be added to one of the existing atlases,
        // create a new atlas that is twice as big and try to add to this one.
        var size = (void 0);
        if (isHitAtlas) {
          size = Math.min(this.currentHitSize_ * 2, this.maxSize_);
          this.currentHitSize_ = size;
        } else {
          size = Math.min(this.currentSize_ * 2, this.maxSize_);
          this.currentSize_ = size;
        }
        atlas = new Atlas(size, this.space_);
        atlases.push(atlas);
        // run the loop another time
        ++ii;
      }
    }
    return null;
  };

  /**
   * @module ol/render/webgl/TextReplay
   */

  /**
   * @typedef {Object} GlyphAtlas
   * @property {import("../../style/AtlasManager.js").default} atlas
   * @property {Object<string, number>} width
   * @property {number} height
   */


  var WebGLTextReplay = /*@__PURE__*/(function (WebGLTextureReplay$$1) {
    function WebGLTextReplay(tolerance, maxExtent) {
      WebGLTextureReplay$$1.call(this, tolerance, maxExtent);

      /**
       * @private
       * @type {Array<HTMLCanvasElement>}
       */
      this.images_ = [];

      /**
       * @private
       * @type {Array<WebGLTexture>}
       */
      this.textures_ = [];

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.measureCanvas_ = createCanvasContext2D(0, 0).canvas;

      /**
       * @private
       * @type {{strokeColor: (import("../../colorlike.js").ColorLike|null),
       *         lineCap: (string|undefined),
       *         lineDash: Array<number>,
       *         lineDashOffset: (number|undefined),
       *         lineJoin: (string|undefined),
       *         lineWidth: number,
       *         miterLimit: (number|undefined),
       *         fillColor: (import("../../colorlike.js").ColorLike|null),
       *         font: (string|undefined),
       *         scale: (number|undefined)}}
       */
      this.state_ = {
        strokeColor: null,
        lineCap: undefined,
        lineDash: null,
        lineDashOffset: undefined,
        lineJoin: undefined,
        lineWidth: 0,
        miterLimit: undefined,
        fillColor: null,
        font: undefined,
        scale: undefined
      };

      /**
       * @private
       * @type {string}
       */
      this.text_ = '';

      /**
       * @private
       * @type {number|undefined}
       */
      this.textAlign_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.textBaseline_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.offsetX_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.offsetY_ = undefined;

      /**
       * @private
       * @type {Object<string, GlyphAtlas>}
       */
      this.atlases_ = {};

      /**
       * @private
       * @type {GlyphAtlas|undefined}
       */
      this.currAtlas_ = undefined;

      this.scale = 1;

      this.opacity = 1;

    }

    if ( WebGLTextureReplay$$1 ) WebGLTextReplay.__proto__ = WebGLTextureReplay$$1;
    WebGLTextReplay.prototype = Object.create( WebGLTextureReplay$$1 && WebGLTextureReplay$$1.prototype );
    WebGLTextReplay.prototype.constructor = WebGLTextReplay;

    /**
     * @inheritDoc
     */
    WebGLTextReplay.prototype.drawText = function drawText (geometry, feature) {
      if (this.text_) {
        var flatCoordinates = null;
        var offset = 0;
        var end = 2;
        var stride = 2;
        switch (geometry.getType()) {
          case GeometryType.POINT:
          case GeometryType.MULTI_POINT:
            flatCoordinates = geometry.getFlatCoordinates();
            end = flatCoordinates.length;
            stride = geometry.getStride();
            break;
          case GeometryType.CIRCLE:
            flatCoordinates = /** @type {import("../../geom/Circle.js").default} */ (geometry).getCenter();
            break;
          case GeometryType.LINE_STRING:
            flatCoordinates = /** @type {import("../../geom/LineString.js").default} */ (geometry).getFlatMidpoint();
            break;
          case GeometryType.MULTI_LINE_STRING:
            flatCoordinates = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry).getFlatMidpoints();
            end = flatCoordinates.length;
            break;
          case GeometryType.POLYGON:
            flatCoordinates = /** @type {import("../../geom/Polygon.js").default} */ (geometry).getFlatInteriorPoint();
            break;
          case GeometryType.MULTI_POLYGON:
            flatCoordinates = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getFlatInteriorPoints();
            end = flatCoordinates.length;
            break;
          default:
        }
        this.startIndices.push(this.indices.length);
        this.startIndicesFeature.push(feature);

        var glyphAtlas = this.currAtlas_;
        var lines = this.text_.split('\n');
        var textSize = this.getTextSize_(lines);
        var i, ii, j, jj, currX, currY, charArr, charInfo;
        var anchorX = Math.round(textSize[0] * this.textAlign_ - this.offsetX_);
        var anchorY = Math.round(textSize[1] * this.textBaseline_ - this.offsetY_);
        var lineWidth = (this.state_.lineWidth / 2) * this.state_.scale;

        for (i = 0, ii = lines.length; i < ii; ++i) {
          currX = 0;
          currY = glyphAtlas.height * i;
          charArr = lines[i].split('');

          for (j = 0, jj = charArr.length; j < jj; ++j) {
            charInfo = glyphAtlas.atlas.getInfo(charArr[j]);

            if (charInfo) {
              var image = charInfo.image;

              this.anchorX = anchorX - currX;
              this.anchorY = anchorY - currY;
              this.originX = j === 0 ? charInfo.offsetX - lineWidth : charInfo.offsetX;
              this.originY = charInfo.offsetY;
              this.height = glyphAtlas.height;
              this.width = j === 0 || j === charArr.length - 1 ?
                glyphAtlas.width[charArr[j]] + lineWidth : glyphAtlas.width[charArr[j]];
              this.imageHeight = image.height;
              this.imageWidth = image.width;

              if (this.images_.length === 0) {
                this.images_.push(image);
              } else {
                var currentImage = this.images_[this.images_.length - 1];
                if (getUid(currentImage) != getUid(image)) {
                  this.groupIndices.push(this.indices.length);
                  this.images_.push(image);
                }
              }

              this.drawText_(flatCoordinates, offset, end, stride);
            }
            currX += this.width;
          }
        }
      }
    };

    /**
     * @private
     * @param {Array<string>} lines Label to draw split to lines.
     * @return {Array<number>} Size of the label in pixels.
     */
    WebGLTextReplay.prototype.getTextSize_ = function getTextSize_ (lines) {
      var self = this;
      var glyphAtlas = this.currAtlas_;
      var textHeight = lines.length * glyphAtlas.height;
      //Split every line to an array of chars, sum up their width, and select the longest.
      var textWidth = lines.map(function(str) {
        var sum = 0;
        for (var i = 0, ii = str.length; i < ii; ++i) {
          var curr = str[i];
          if (!glyphAtlas.width[curr]) {
            self.addCharToAtlas_(curr);
          }
          sum += glyphAtlas.width[curr] ? glyphAtlas.width[curr] : 0;
        }
        return sum;
      }).reduce(function(max, curr) {
        return Math.max(max, curr);
      });

      return [textWidth, textHeight];
    };

    /**
     * @private
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     */
    WebGLTextReplay.prototype.drawText_ = function drawText_ (flatCoordinates, offset, end, stride) {
      for (var i = offset, ii = end; i < ii; i += stride) {
        this.drawCoordinates(flatCoordinates, offset, end, stride);
      }
    };

    /**
     * @private
     * @param {string} char Character.
     */
    WebGLTextReplay.prototype.addCharToAtlas_ = function addCharToAtlas_ (char) {
      if (char.length === 1) {
        var glyphAtlas = this.currAtlas_;
        var state = this.state_;
        var mCtx = this.measureCanvas_.getContext('2d');
        mCtx.font = state.font;
        var width = Math.ceil(mCtx.measureText(char).width * state.scale);

        var info = glyphAtlas.atlas.add(char, width, glyphAtlas.height,
          function(ctx, x, y) {
            //Parameterize the canvas
            ctx.font = /** @type {string} */ (state.font);
            ctx.fillStyle = state.fillColor;
            ctx.strokeStyle = state.strokeColor;
            ctx.lineWidth = state.lineWidth;
            ctx.lineCap = /** @type {CanvasLineCap} */ (state.lineCap);
            ctx.lineJoin = /** @type {CanvasLineJoin} */ (state.lineJoin);
            ctx.miterLimit = /** @type {number} */ (state.miterLimit);
            ctx.textAlign = 'left';
            ctx.textBaseline = 'top';
            if (CANVAS_LINE_DASH && state.lineDash) {
              //FIXME: use pixelRatio
              ctx.setLineDash(state.lineDash);
              ctx.lineDashOffset = /** @type {number} */ (state.lineDashOffset);
            }
            if (state.scale !== 1) {
              //FIXME: use pixelRatio
              ctx.setTransform(/** @type {number} */ (state.scale), 0, 0,
                /** @type {number} */ (state.scale), 0, 0);
            }

            //Draw the character on the canvas
            if (state.strokeColor) {
              ctx.strokeText(char, x, y);
            }
            if (state.fillColor) {
              ctx.fillText(char, x, y);
            }
          });

        if (info) {
          glyphAtlas.width[char] = width;
        }
      }
    };

    /**
     * @inheritDoc
     */
    WebGLTextReplay.prototype.finish = function finish (context) {
      var gl = context.getGL();

      this.groupIndices.push(this.indices.length);
      this.hitDetectionGroupIndices = this.groupIndices;

      // create, bind, and populate the vertices buffer
      this.verticesBuffer = new WebGLBuffer(this.vertices);

      // create, bind, and populate the indices buffer
      this.indicesBuffer = new WebGLBuffer(this.indices);

      // create textures
      /** @type {Object<string, WebGLTexture>} */
      var texturePerImage = {};

      this.createTextures(this.textures_, this.images_, texturePerImage, gl);

      this.state_ = {
        strokeColor: null,
        lineCap: undefined,
        lineDash: null,
        lineDashOffset: undefined,
        lineJoin: undefined,
        lineWidth: 0,
        miterLimit: undefined,
        fillColor: null,
        font: undefined,
        scale: undefined
      };
      this.text_ = '';
      this.textAlign_ = undefined;
      this.textBaseline_ = undefined;
      this.offsetX_ = undefined;
      this.offsetY_ = undefined;
      this.images_ = null;
      this.atlases_ = {};
      this.currAtlas_ = undefined;
      WebGLTextureReplay$$1.prototype.finish.call(this, context);
    };

    /**
     * @inheritDoc
     */
    WebGLTextReplay.prototype.setTextStyle = function setTextStyle (textStyle) {
      var state = this.state_;
      var textFillStyle = textStyle.getFill();
      var textStrokeStyle = textStyle.getStroke();
      if (!textStyle || !textStyle.getText() || (!textFillStyle && !textStrokeStyle)) {
        this.text_ = '';
      } else {
        if (!textFillStyle) {
          state.fillColor = null;
        } else {
          var textFillStyleColor = textFillStyle.getColor();
          state.fillColor = asColorLike(textFillStyleColor ?
            textFillStyleColor : DEFAULT_FILLSTYLE);
        }
        if (!textStrokeStyle) {
          state.strokeColor = null;
          state.lineWidth = 0;
        } else {
          var textStrokeStyleColor = textStrokeStyle.getColor();
          state.strokeColor = asColorLike(textStrokeStyleColor ?
            textStrokeStyleColor : DEFAULT_STROKESTYLE);
          state.lineWidth = textStrokeStyle.getWidth() || DEFAULT_LINEWIDTH;
          state.lineCap = textStrokeStyle.getLineCap() || DEFAULT_LINECAP;
          state.lineDashOffset = textStrokeStyle.getLineDashOffset() || DEFAULT_LINEDASHOFFSET;
          state.lineJoin = textStrokeStyle.getLineJoin() || DEFAULT_LINEJOIN;
          state.miterLimit = textStrokeStyle.getMiterLimit() || DEFAULT_MITERLIMIT;
          var lineDash = textStrokeStyle.getLineDash();
          state.lineDash = lineDash ? lineDash.slice() : DEFAULT_LINEDASH;
        }
        state.font = textStyle.getFont() || DEFAULT_FONT;
        state.scale = textStyle.getScale() || 1;
        this.text_ = /** @type {string} */ (textStyle.getText());
        var textAlign = TEXT_ALIGN[textStyle.getTextAlign()];
        var textBaseline = TEXT_ALIGN[textStyle.getTextBaseline()];
        this.textAlign_ = textAlign === undefined ?
          DEFAULT_TEXTALIGN : textAlign;
        this.textBaseline_ = textBaseline === undefined ?
          DEFAULT_TEXTBASELINE : textBaseline;
        this.offsetX_ = textStyle.getOffsetX() || 0;
        this.offsetY_ = textStyle.getOffsetY() || 0;
        this.rotateWithView = !!textStyle.getRotateWithView();
        this.rotation = textStyle.getRotation() || 0;

        this.currAtlas_ = this.getAtlas_(state);
      }
    };

    /**
     * @private
     * @param {Object} state Font attributes.
     * @return {GlyphAtlas} Glyph atlas.
     */
    WebGLTextReplay.prototype.getAtlas_ = function getAtlas_ (state) {
      var params = [];
      for (var i in state) {
        if (state[i] || state[i] === 0) {
          if (Array.isArray(state[i])) {
            params = params.concat(state[i]);
          } else {
            params.push(state[i]);
          }
        }
      }
      var hash = this.calculateHash_(params);
      if (!this.atlases_[hash]) {
        var mCtx = this.measureCanvas_.getContext('2d');
        mCtx.font = state.font;
        var height = Math.ceil((mCtx.measureText('M').width * 1.5 +
            state.lineWidth / 2) * state.scale);

        this.atlases_[hash] = {
          atlas: new AtlasManager({
            space: state.lineWidth + 1
          }),
          width: {},
          height: height
        };
      }
      return this.atlases_[hash];
    };

    /**
     * @private
     * @param {Array<string|number>} params Array of parameters.
     * @return {string} Hash string.
     */
    WebGLTextReplay.prototype.calculateHash_ = function calculateHash_ (params) {
      //TODO: Create a more performant, reliable, general hash function.
      var hash = '';
      for (var i = 0, ii = params.length; i < ii; ++i) {
        hash += params[i];
      }
      return hash;
    };

    /**
     * @inheritDoc
     */
    WebGLTextReplay.prototype.getTextures = function getTextures (opt_all) {
      return this.textures_;
    };

    /**
     * @inheritDoc
     */
    WebGLTextReplay.prototype.getHitDetectionTextures = function getHitDetectionTextures () {
      return this.textures_;
    };

    return WebGLTextReplay;
  }(WebGLTextureReplay));

  /**
   * @module ol/render/webgl/ReplayGroup
   */

  /**
   * @type {Array<number>}
   */
  var HIT_DETECTION_SIZE = [1, 1];

  /**
   * @type {Object<import("../ReplayType.js").default, typeof import("./Replay.js").default>}
   */
  var BATCH_CONSTRUCTORS$1 = {
    'Circle': WebGLCircleReplay,
    'Image': WebGLImageReplay,
    'LineString': WebGLLineStringReplay,
    'Polygon': WebGLPolygonReplay,
    'Text': WebGLTextReplay
  };


  var WebGLReplayGroup = /*@__PURE__*/(function (ReplayGroup$$1) {
    function WebGLReplayGroup(tolerance, maxExtent, opt_renderBuffer) {
      ReplayGroup$$1.call(this);

      /**
       * @type {import("../../extent.js").Extent}
       * @private
       */
      this.maxExtent_ = maxExtent;

      /**
       * @type {number}
       * @private
       */
      this.tolerance_ = tolerance;

      /**
       * @type {number|undefined}
       * @private
       */
      this.renderBuffer_ = opt_renderBuffer;

      /**
       * @private
       * @type {!Object<string,
       *        Object<import("../ReplayType.js").default, import("./Replay.js").default>>}
       */
      this.replaysByZIndex_ = {};

    }

    if ( ReplayGroup$$1 ) WebGLReplayGroup.__proto__ = ReplayGroup$$1;
    WebGLReplayGroup.prototype = Object.create( ReplayGroup$$1 && ReplayGroup$$1.prototype );
    WebGLReplayGroup.prototype.constructor = WebGLReplayGroup;

    /**
     * @inheritDoc
     */
    WebGLReplayGroup.prototype.addDeclutter = function addDeclutter (group) {
      return [];
    };

    /**
     * @param {import("../../webgl/Context.js").default} context WebGL context.
     * @return {function()} Delete resources function.
     */
    WebGLReplayGroup.prototype.getDeleteResourcesFunction = function getDeleteResourcesFunction (context) {
      var functions = [];
      var zKey;
      for (zKey in this.replaysByZIndex_) {
        var replays = this.replaysByZIndex_[zKey];
        for (var replayKey in replays) {
          functions.push(
            replays[replayKey].getDeleteResourcesFunction(context));
        }
      }
      return function() {
        var arguments$1 = arguments;

        var length = functions.length;
        var result;
        for (var i = 0; i < length; i++) {
          result = functions[i].apply(this, arguments$1);
        }
        return result;
      };
    };

    /**
     * @param {import("../../webgl/Context.js").default} context Context.
     */
    WebGLReplayGroup.prototype.finish = function finish (context) {
      var zKey;
      for (zKey in this.replaysByZIndex_) {
        var replays = this.replaysByZIndex_[zKey];
        for (var replayKey in replays) {
          replays[replayKey].finish(context);
        }
      }
    };

    /**
     * @inheritDoc
     */
    WebGLReplayGroup.prototype.getReplay = function getReplay (zIndex, replayType) {
      var zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
      var replays = this.replaysByZIndex_[zIndexKey];
      if (replays === undefined) {
        replays = {};
        this.replaysByZIndex_[zIndexKey] = replays;
      }
      var replay = replays[replayType];
      if (replay === undefined) {
        var Constructor = BATCH_CONSTRUCTORS$1[replayType];
        replay = new Constructor(this.tolerance_, this.maxExtent_);
        replays[replayType] = replay;
      }
      return replay;
    };

    /**
     * @inheritDoc
     */
    WebGLReplayGroup.prototype.isEmpty = function isEmpty$1$$1 () {
      return isEmpty(this.replaysByZIndex_);
    };

    /**
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} opacity Global opacity.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     */
    WebGLReplayGroup.prototype.replay = function replay (
      context,
      center,
      resolution,
      rotation,
      size,
      pixelRatio,
      opacity,
      skippedFeaturesHash
    ) {
      /** @type {Array<number>} */
      var zs = Object.keys(this.replaysByZIndex_).map(Number);
      zs.sort(numberSafeCompareFunction);

      var i, ii, j, jj, replays, replay;
      for (i = 0, ii = zs.length; i < ii; ++i) {
        replays = this.replaysByZIndex_[zs[i].toString()];
        for (j = 0, jj = ORDER.length; j < jj; ++j) {
          replay = replays[ORDER[j]];
          if (replay !== undefined) {
            replay.replay(context,
              center, resolution, rotation, size, pixelRatio,
              opacity, skippedFeaturesHash,
              undefined, false);
          }
        }
      }
    };

    /**
     * @private
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} opacity Global opacity.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} featureCallback Feature callback.
     * @param {boolean} oneByOne Draw features one-by-one for the hit-detecion.
     * @param {import("../../extent.js").Extent=} opt_hitExtent Hit extent: Only features intersecting
     *  this extent are checked.
     * @return {T|undefined} Callback result.
     * @template T
     */
    WebGLReplayGroup.prototype.replayHitDetection_ = function replayHitDetection_ (
      context,
      center,
      resolution,
      rotation,
      size,
      pixelRatio,
      opacity,
      skippedFeaturesHash,
      featureCallback,
      oneByOne,
      opt_hitExtent
    ) {
      /** @type {Array<number>} */
      var zs = Object.keys(this.replaysByZIndex_).map(Number);
      zs.sort(function(a, b) {
        return b - a;
      });

      var i, ii, j, replays, replay, result;
      for (i = 0, ii = zs.length; i < ii; ++i) {
        replays = this.replaysByZIndex_[zs[i].toString()];
        for (j = ORDER.length - 1; j >= 0; --j) {
          replay = replays[ORDER[j]];
          if (replay !== undefined) {
            result = replay.replay(context,
              center, resolution, rotation, size, pixelRatio, opacity,
              skippedFeaturesHash, featureCallback, oneByOne, opt_hitExtent);
            if (result) {
              return result;
            }
          }
        }
      }
      return undefined;
    };

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} opacity Global opacity.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @param {function((import("../../Feature.js").default|import("../Feature.js").default)): T|undefined} callback Feature callback.
     * @return {T|undefined} Callback result.
     * @template T
     */
    WebGLReplayGroup.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (
      coordinate,
      context,
      center,
      resolution,
      rotation,
      size,
      pixelRatio,
      opacity,
      skippedFeaturesHash,
      callback
    ) {
      var gl = context.getGL();
      gl.bindFramebuffer(
        gl.FRAMEBUFFER, context.getHitDetectionFramebuffer());


      /**
       * @type {import("../../extent.js").Extent}
       */
      var hitExtent;
      if (this.renderBuffer_ !== undefined) {
        // build an extent around the coordinate, so that only features that
        // intersect this extent are checked
        hitExtent = buffer(createOrUpdateFromCoordinate(coordinate), resolution * this.renderBuffer_);
      }

      return this.replayHitDetection_(context,
        coordinate, resolution, rotation, HIT_DETECTION_SIZE,
        pixelRatio, opacity, skippedFeaturesHash,
        /**
         * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
         * @return {?} Callback result.
         */
        function(feature) {
          var imageData = new Uint8Array(4);
          gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, imageData);

          if (imageData[3] > 0) {
            var result = callback(feature);
            if (result) {
              return result;
            }
          }
        }, true, hitExtent);
    };

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} opacity Global opacity.
     * @param {Object<string, boolean>} skippedFeaturesHash Ids of features to skip.
     * @return {boolean} Is there a feature at the given coordinate?
     */
    WebGLReplayGroup.prototype.hasFeatureAtCoordinate = function hasFeatureAtCoordinate (
      coordinate,
      context,
      center,
      resolution,
      rotation,
      size,
      pixelRatio,
      opacity,
      skippedFeaturesHash
    ) {
      var gl = context.getGL();
      gl.bindFramebuffer(
        gl.FRAMEBUFFER, context.getHitDetectionFramebuffer());

      var hasFeature = this.replayHitDetection_(context,
        coordinate, resolution, rotation, HIT_DETECTION_SIZE,
        pixelRatio, opacity, skippedFeaturesHash,
        /**
         * @param {import("../../Feature.js").default|import("../Feature.js").default} feature Feature.
         * @return {boolean} Is there a feature?
         */
        function(feature) {
          var imageData = new Uint8Array(4);
          gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, imageData);
          return imageData[3] > 0;
        }, false);

      return hasFeature !== undefined;
    };

    return WebGLReplayGroup;
  }(ReplayGroup));

  /**
   * @module ol/render/webgl/Immediate
   */

  var WebGLImmediateRenderer = /*@__PURE__*/(function (VectorContext$$1) {
    function WebGLImmediateRenderer(context, center, resolution, rotation, size, extent, pixelRatio) {
      VectorContext$$1.call(this);

      /**
       * @private
       */
      this.context_ = context;

      /**
       * @private
       */
      this.center_ = center;

      /**
       * @private
       */
      this.extent_ = extent;

      /**
       * @private
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       */
      this.size_ = size;

      /**
       * @private
       */
      this.rotation_ = rotation;

      /**
       * @private
       */
      this.resolution_ = resolution;

      /**
       * @private
       * @type {import("../../style/Image.js").default}
       */
      this.imageStyle_ = null;

      /**
       * @private
       * @type {import("../../style/Fill.js").default}
       */
      this.fillStyle_ = null;

      /**
       * @private
       * @type {import("../../style/Stroke.js").default}
       */
      this.strokeStyle_ = null;

      /**
       * @private
       * @type {import("../../style/Text.js").default}
       */
      this.textStyle_ = null;

    }

    if ( VectorContext$$1 ) WebGLImmediateRenderer.__proto__ = VectorContext$$1;
    WebGLImmediateRenderer.prototype = Object.create( VectorContext$$1 && VectorContext$$1.prototype );
    WebGLImmediateRenderer.prototype.constructor = WebGLImmediateRenderer;

    /**
     * @param {import("./ReplayGroup.js").default} replayGroup Replay group.
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry Geometry.
     * @private
     */
    WebGLImmediateRenderer.prototype.drawText_ = function drawText_ (replayGroup, geometry) {
      var context = this.context_;
      var replay = /** @type {import("./TextReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.TEXT));
      replay.setTextStyle(this.textStyle_);
      replay.drawText(geometry, null);
      replay.finish(context);
      // default colors
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();
    };

    /**
     * Set the rendering style.  Note that since this is an immediate rendering API,
     * any `zIndex` on the provided style will be ignored.
     *
     * @param {import("../../style/Style.js").default} style The rendering style.
     * @override
     * @api
     */
    WebGLImmediateRenderer.prototype.setStyle = function setStyle (style) {
      this.setFillStrokeStyle(style.getFill(), style.getStroke());
      this.setImageStyle(style.getImage());
      this.setTextStyle(style.getText());
    };

    /**
     * Render a geometry into the canvas.  Call
     * {@link ol/render/webgl/Immediate#setStyle} first to set the rendering style.
     *
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
     * @override
     * @api
     */
    WebGLImmediateRenderer.prototype.drawGeometry = function drawGeometry (geometry) {
      var type = geometry.getType();
      switch (type) {
        case GeometryType.POINT:
          this.drawPoint(/** @type {import("../../geom/Point.js").default} */ (geometry), null);
          break;
        case GeometryType.LINE_STRING:
          this.drawLineString(/** @type {import("../../geom/LineString.js").default} */ (geometry), null);
          break;
        case GeometryType.POLYGON:
          this.drawPolygon(/** @type {import("../../geom/Polygon.js").default} */ (geometry), null);
          break;
        case GeometryType.MULTI_POINT:
          this.drawMultiPoint(/** @type {import("../../geom/MultiPoint.js").default} */ (geometry), null);
          break;
        case GeometryType.MULTI_LINE_STRING:
          this.drawMultiLineString(/** @type {import("../../geom/MultiLineString.js").default} */ (geometry), null);
          break;
        case GeometryType.MULTI_POLYGON:
          this.drawMultiPolygon(/** @type {import("../../geom/MultiPolygon.js").default} */ (geometry), null);
          break;
        case GeometryType.GEOMETRY_COLLECTION:
          this.drawGeometryCollection(/** @type {import("../../geom/GeometryCollection.js").default} */ (geometry), null);
          break;
        case GeometryType.CIRCLE:
          this.drawCircle(/** @type {import("../../geom/Circle.js").default} */ (geometry), null);
          break;
        default:
          // pass
      }
    };

    /**
     * @inheritDoc
     * @api
     */
    WebGLImmediateRenderer.prototype.drawFeature = function drawFeature (feature, style) {
      var geometry = style.getGeometryFunction()(feature);
      if (!geometry || !intersects(this.extent_, geometry.getExtent())) {
        return;
      }
      this.setStyle(style);
      this.drawGeometry(geometry);
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawGeometryCollection = function drawGeometryCollection (geometry, data) {
      var geometries = geometry.getGeometriesArray();
      var i, ii;
      for (i = 0, ii = geometries.length; i < ii; ++i) {
        this.drawGeometry(geometries[i]);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawPoint = function drawPoint (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./ImageReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.IMAGE));
      replay.setImageStyle(this.imageStyle_);
      replay.drawPoint(geometry, data);
      replay.finish(context);
      // default colors
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawMultiPoint = function drawMultiPoint (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./ImageReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.IMAGE));
      replay.setImageStyle(this.imageStyle_);
      replay.drawMultiPoint(geometry, data);
      replay.finish(context);
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawLineString = function drawLineString (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./LineStringReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.LINE_STRING));
      replay.setFillStrokeStyle(null, this.strokeStyle_);
      replay.drawLineString(geometry, data);
      replay.finish(context);
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawMultiLineString = function drawMultiLineString (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./LineStringReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.LINE_STRING));
      replay.setFillStrokeStyle(null, this.strokeStyle_);
      replay.drawMultiLineString(geometry, data);
      replay.finish(context);
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawPolygon = function drawPolygon (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./PolygonReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.POLYGON));
      replay.setFillStrokeStyle(this.fillStyle_, this.strokeStyle_);
      replay.drawPolygon(geometry, data);
      replay.finish(context);
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawMultiPolygon = function drawMultiPolygon (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./PolygonReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.POLYGON));
      replay.setFillStrokeStyle(this.fillStyle_, this.strokeStyle_);
      replay.drawMultiPolygon(geometry, data);
      replay.finish(context);
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.drawCircle = function drawCircle (geometry, data) {
      var context = this.context_;
      var replayGroup = new WebGLReplayGroup(1, this.extent_);
      var replay = /** @type {import("./CircleReplay.js").default} */ (
        replayGroup.getReplay(0, ReplayType.CIRCLE));
      replay.setFillStrokeStyle(this.fillStyle_, this.strokeStyle_);
      replay.drawCircle(geometry, data);
      replay.finish(context);
      var opacity = 1;
      /** @type {Object<string, boolean>} */
      var skippedFeatures = {};
      var featureCallback;
      var oneByOne = false;
      replay.replay(this.context_, this.center_, this.resolution_, this.rotation_,
        this.size_, this.pixelRatio_, opacity, skippedFeatures, featureCallback,
        oneByOne);
      replay.getDeleteResourcesFunction(context)();

      if (this.textStyle_) {
        this.drawText_(replayGroup, geometry);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.setImageStyle = function setImageStyle (imageStyle) {
      this.imageStyle_ = imageStyle;
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {
      this.fillStyle_ = fillStyle;
      this.strokeStyle_ = strokeStyle;
    };

    /**
     * @inheritDoc
     */
    WebGLImmediateRenderer.prototype.setTextStyle = function setTextStyle (textStyle) {
      this.textStyle_ = textStyle;
    };

    return WebGLImmediateRenderer;
  }(VectorContext));

  /**
   * @module ol/renderer/webgl/defaultmapshader
   */

  var fragment$4 = new WebGLFragment('precision mediump float;\nvarying vec2 v_texCoord;\n\n\nuniform float u_opacity;\nuniform sampler2D u_texture;\n\nvoid main(void) {\n  vec4 texColor = texture2D(u_texture, v_texCoord);\n  gl_FragColor.rgb = texColor.rgb;\n  gl_FragColor.a = texColor.a * u_opacity;\n}\n');

  var vertex$4 = new WebGLVertex('varying vec2 v_texCoord;\n\n\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\n\nuniform mat4 u_texCoordMatrix;\nuniform mat4 u_projectionMatrix;\n\nvoid main(void) {\n  gl_Position = u_projectionMatrix * vec4(a_position, 0., 1.);\n  v_texCoord = (u_texCoordMatrix * vec4(a_texCoord, 0., 1.)).st;\n}\n\n\n');

  /**
   * @module ol/renderer/webgl/defaultmapshader/Locations
   */

  var Locations$4 = function Locations(gl, program) {

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_texCoordMatrix = gl.getUniformLocation(
      program, 'u_texCoordMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_projectionMatrix = gl.getUniformLocation(
      program, 'u_projectionMatrix');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_opacity = gl.getUniformLocation(
      program, 'u_opacity');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_texture = gl.getUniformLocation(
      program, 'u_texture');

    /**
     * @type {number}
     */
    this.a_position = gl.getAttribLocation(
      program, 'a_position');

    /**
     * @type {number}
     */
    this.a_texCoord = gl.getAttribLocation(
      program, 'a_texCoord');

  };

  /**
   * @module ol/renderer/webgl/Layer
   */

  /**
   * @abstract
   */
  var WebGLLayerRenderer = /*@__PURE__*/(function (LayerRenderer$$1) {
    function WebGLLayerRenderer(mapRenderer, layer) {

      LayerRenderer$$1.call(this, layer);

      /**
       * @protected
       * @type {import("./Map.js").default}
       */
      this.mapRenderer = mapRenderer;

      /**
       * @private
       * @type {import("../../webgl/Buffer.js").default}
       */
      this.arrayBuffer_ = new WebGLBuffer([
        -1, -1, 0, 0,
        1, -1, 1, 0,
        -1, 1, 0, 1,
        1, 1, 1, 1
      ]);

      /**
       * @protected
       * @type {WebGLTexture}
       */
      this.texture = null;

      /**
       * @protected
       * @type {WebGLFramebuffer}
       */
      this.framebuffer = null;

      /**
       * @protected
       * @type {number|undefined}
       */
      this.framebufferDimension = undefined;

      /**
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.texCoordMatrix = create();

      /**
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.projectionMatrix = create();

      /**
       * @type {Array<number>}
       * @private
       */
      this.tmpMat4_ = create$1();

      /**
       * @private
       * @type {import("./defaultmapshader/Locations.js").default}
       */
      this.defaultLocations_ = null;

    }

    if ( LayerRenderer$$1 ) WebGLLayerRenderer.__proto__ = LayerRenderer$$1;
    WebGLLayerRenderer.prototype = Object.create( LayerRenderer$$1 && LayerRenderer$$1.prototype );
    WebGLLayerRenderer.prototype.constructor = WebGLLayerRenderer;

    /**
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} framebufferDimension Framebuffer dimension.
     * @protected
     */
    WebGLLayerRenderer.prototype.bindFramebuffer = function bindFramebuffer (frameState, framebufferDimension) {

      var gl = this.mapRenderer.getGL();

      if (this.framebufferDimension === undefined ||
          this.framebufferDimension != framebufferDimension) {
        /**
         * @param {WebGLRenderingContext} gl GL.
         * @param {WebGLFramebuffer} framebuffer Framebuffer.
         * @param {WebGLTexture} texture Texture.
         */
        var postRenderFunction = function(gl, framebuffer, texture) {
          if (!gl.isContextLost()) {
            gl.deleteFramebuffer(framebuffer);
            gl.deleteTexture(texture);
          }
        }.bind(null, gl, this.framebuffer, this.texture);

        frameState.postRenderFunctions.push(
          /** @type {import("../../PluggableMap.js").PostRenderFunction} */ (postRenderFunction)
        );

        var texture = createEmptyTexture(
          gl, framebufferDimension, framebufferDimension);

        var framebuffer = gl.createFramebuffer();
        gl.bindFramebuffer(FRAMEBUFFER, framebuffer);
        gl.framebufferTexture2D(FRAMEBUFFER,
          COLOR_ATTACHMENT0, TEXTURE_2D, texture, 0);

        this.texture = texture;
        this.framebuffer = framebuffer;
        this.framebufferDimension = framebufferDimension;

      } else {
        gl.bindFramebuffer(FRAMEBUFFER, this.framebuffer);
      }

    };

    /**
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     * @param {import("../../webgl/Context.js").default} context Context.
     */
    WebGLLayerRenderer.prototype.composeFrame = function composeFrame (frameState, layerState, context) {

      this.dispatchComposeEvent_(RenderEventType.PRECOMPOSE, context, frameState);

      context.bindBuffer(ARRAY_BUFFER, this.arrayBuffer_);

      var gl = context.getGL();

      var program = context.getProgram(fragment$4, vertex$4);

      var locations;
      if (!this.defaultLocations_) {
        locations = new Locations$4(gl, program);
        this.defaultLocations_ = locations;
      } else {
        locations = this.defaultLocations_;
      }

      if (context.useProgram(program)) {
        gl.enableVertexAttribArray(locations.a_position);
        gl.vertexAttribPointer(
          locations.a_position, 2, FLOAT, false, 16, 0);
        gl.enableVertexAttribArray(locations.a_texCoord);
        gl.vertexAttribPointer(
          locations.a_texCoord, 2, FLOAT, false, 16, 8);
        gl.uniform1i(locations.u_texture, 0);
      }

      gl.uniformMatrix4fv(locations.u_texCoordMatrix, false,
        fromTransform(this.tmpMat4_, this.getTexCoordMatrix()));
      gl.uniformMatrix4fv(locations.u_projectionMatrix, false,
        fromTransform(this.tmpMat4_, this.getProjectionMatrix()));
      gl.uniform1f(locations.u_opacity, layerState.opacity);
      gl.bindTexture(TEXTURE_2D, this.getTexture());
      gl.drawArrays(TRIANGLE_STRIP, 0, 4);

      this.dispatchComposeEvent_(RenderEventType.POSTCOMPOSE, context, frameState);
    };

    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {import("../../webgl/Context.js").default} context WebGL context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */
    WebGLLayerRenderer.prototype.dispatchComposeEvent_ = function dispatchComposeEvent_ (type, context, frameState) {
      var layer = this.getLayer();
      if (layer.hasListener(type)) {
        var viewState = frameState.viewState;
        var resolution = viewState.resolution;
        var pixelRatio = frameState.pixelRatio;
        var extent = frameState.extent;
        var center = viewState.center;
        var rotation = viewState.rotation;
        var size = frameState.size;

        var render = new WebGLImmediateRenderer(
          context, center, resolution, rotation, size, extent, pixelRatio);
        var composeEvent = new RenderEvent(
          type, render, frameState, null, context);
        layer.dispatchEvent(composeEvent);
      }
    };

    /**
     * @return {!import("../../transform.js").Transform} Matrix.
     */
    WebGLLayerRenderer.prototype.getTexCoordMatrix = function getTexCoordMatrix () {
      return this.texCoordMatrix;
    };

    /**
     * @return {WebGLTexture} Texture.
     */
    WebGLLayerRenderer.prototype.getTexture = function getTexture () {
      return this.texture;
    };

    /**
     * @return {!import("../../transform.js").Transform} Matrix.
     */
    WebGLLayerRenderer.prototype.getProjectionMatrix = function getProjectionMatrix () {
      return this.projectionMatrix;
    };

    /**
     * Handle webglcontextlost.
     */
    WebGLLayerRenderer.prototype.handleWebGLContextLost = function handleWebGLContextLost () {
      this.texture = null;
      this.framebuffer = null;
      this.framebufferDimension = undefined;
    };

    /**
     * @abstract
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../layer/Layer.js").State} layerState Layer state.
     * @param {import("../../webgl/Context.js").default} context Context.
     * @return {boolean} whether composeFrame should be called.
     */
    WebGLLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState, context) {
      return abstract();
    };

    /**
     * @abstract
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @param {import("../../PluggableMap.js").FrameState} frameState FrameState.
     * @param {function(this: S, import("../../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
     *     callback.
     * @param {S} thisArg Value to use as `this` when executing `callback`.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */
    WebGLLayerRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, callback, thisArg) {
      return abstract();
    };

    return WebGLLayerRenderer;
  }(LayerRenderer));

  /**
   * @module ol/renderer/webgl/ImageLayer
   */

  /**
   * @classdesc
   * WebGL renderer for image layers.
   * @api
   */
  var WebGLImageLayerRenderer = /*@__PURE__*/(function (WebGLLayerRenderer$$1) {
    function WebGLImageLayerRenderer(mapRenderer, imageLayer) {

      WebGLLayerRenderer$$1.call(this, mapRenderer, imageLayer);

      /**
       * The last rendered image.
       * @private
       * @type {?import("../../ImageBase.js").default}
       */
      this.image_ = null;

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.hitCanvasContext_ = null;

      /**
       * @private
       * @type {?import("../../transform.js").Transform}
       */
      this.hitTransformationMatrix_ = null;

    }

    if ( WebGLLayerRenderer$$1 ) WebGLImageLayerRenderer.__proto__ = WebGLLayerRenderer$$1;
    WebGLImageLayerRenderer.prototype = Object.create( WebGLLayerRenderer$$1 && WebGLLayerRenderer$$1.prototype );
    WebGLImageLayerRenderer.prototype.constructor = WebGLImageLayerRenderer;

    /**
     * @param {import("../../ImageBase.js").default} image Image.
     * @private
     * @return {WebGLTexture} Texture.
     */
    WebGLImageLayerRenderer.prototype.createTexture_ = function createTexture_ (image) {

      // We meet the conditions to work with non-power of two textures.
      // http://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences#Non-Power_of_Two_Texture_Support
      // http://learningwebgl.com/blog/?p=2101

      var imageElement = image.getImage();
      var gl = this.mapRenderer.getGL();

      return createTexture(
        gl, imageElement, CLAMP_TO_EDGE, CLAMP_TO_EDGE);
    };

    /**
     * @inheritDoc
     */
    WebGLImageLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState, context) {

      var gl = this.mapRenderer.getGL();

      var pixelRatio = frameState.pixelRatio;
      var viewState = frameState.viewState;
      var viewCenter = viewState.center;
      var viewResolution = viewState.resolution;
      var viewRotation = viewState.rotation;

      var image = this.image_;
      var texture = this.texture;
      var imageLayer = /** @type {import("../../layer/Image.js").default} */ (this.getLayer());
      var imageSource = /** @type {import("../../source/Image.js").default} */ (imageLayer.getSource());

      var hints = frameState.viewHints;

      var renderedExtent = frameState.extent;
      if (layerState.extent !== undefined) {
        renderedExtent = getIntersection(renderedExtent, layerState.extent);
      }
      if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] &&
          !isEmpty$1(renderedExtent)) {
        var projection = viewState.projection;
        var image_ = imageSource.getImage(renderedExtent, viewResolution,
          pixelRatio, projection);
        if (image_) {
          var loaded = this.loadImage(image_);
          if (loaded) {
            image = image_;
            texture = this.createTexture_(image_);
            if (this.texture) {
              /**
               * @param {WebGLRenderingContext} gl GL.
               * @param {WebGLTexture} texture Texture.
               */
              var postRenderFunction = function(gl, texture) {
                if (!gl.isContextLost()) {
                  gl.deleteTexture(texture);
                }
              }.bind(null, gl, this.texture);
              frameState.postRenderFunctions.push(
                /** @type {import("../../PluggableMap.js").PostRenderFunction} */ (postRenderFunction)
              );
            }
          }
        }
      }

      if (image) {
        var canvas = this.mapRenderer.getContext().getCanvas();

        this.updateProjectionMatrix_(canvas.width, canvas.height,
          pixelRatio, viewCenter, viewResolution, viewRotation,
          image.getExtent());
        this.hitTransformationMatrix_ = null;

        // Translate and scale to flip the Y coord.
        var texCoordMatrix = this.texCoordMatrix;
        reset(texCoordMatrix);
        scale$2(texCoordMatrix, 1, -1);
        translate$1(texCoordMatrix, 0, -1);

        this.image_ = image;
        this.texture = texture;
      }

      return !!image;
    };

    /**
     * @param {number} canvasWidth Canvas width.
     * @param {number} canvasHeight Canvas height.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../coordinate.js").Coordinate} viewCenter View center.
     * @param {number} viewResolution View resolution.
     * @param {number} viewRotation View rotation.
     * @param {import("../../extent.js").Extent} imageExtent Image extent.
     * @private
     */
    WebGLImageLayerRenderer.prototype.updateProjectionMatrix_ = function updateProjectionMatrix_ (
      canvasWidth,
      canvasHeight,
      pixelRatio,
      viewCenter,
      viewResolution,
      viewRotation,
      imageExtent
    ) {

      var canvasExtentWidth = canvasWidth * viewResolution;
      var canvasExtentHeight = canvasHeight * viewResolution;

      var projectionMatrix = this.projectionMatrix;
      reset(projectionMatrix);
      scale$2(projectionMatrix,
        pixelRatio * 2 / canvasExtentWidth,
        pixelRatio * 2 / canvasExtentHeight);
      rotate$2(projectionMatrix, -viewRotation);
      translate$1(projectionMatrix,
        imageExtent[0] - viewCenter[0],
        imageExtent[1] - viewCenter[1]);
      scale$2(projectionMatrix,
        (imageExtent[2] - imageExtent[0]) / 2,
        (imageExtent[3] - imageExtent[1]) / 2);
      translate$1(projectionMatrix, 1, 1);

    };

    /**
     * @inheritDoc
     */
    WebGLImageLayerRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, callback, thisArg) {
      if (!this.image_ || !this.image_.getImage()) {
        return undefined;
      }

      var imageSize =
          [this.image_.getImage().width, this.image_.getImage().height];

      if (!this.hitTransformationMatrix_) {
        this.hitTransformationMatrix_ = this.getHitTransformationMatrix_(
          frameState.size, imageSize);
      }

      var pixelOnFrameBuffer = apply(
        this.hitTransformationMatrix_, pixel.slice());

      if (pixelOnFrameBuffer[0] < 0 || pixelOnFrameBuffer[0] > imageSize[0] ||
          pixelOnFrameBuffer[1] < 0 || pixelOnFrameBuffer[1] > imageSize[1]) {
        // outside the image, no need to check
        return undefined;
      }

      if (!this.hitCanvasContext_) {
        this.hitCanvasContext_ = createCanvasContext2D(1, 1);
      }

      this.hitCanvasContext_.clearRect(0, 0, 1, 1);
      this.hitCanvasContext_.drawImage(this.image_.getImage(),
        pixelOnFrameBuffer[0], pixelOnFrameBuffer[1], 1, 1, 0, 0, 1, 1);

      var imageData = this.hitCanvasContext_.getImageData(0, 0, 1, 1).data;
      if (imageData[3] > 0) {
        return callback.call(thisArg, this.getLayer(), imageData);
      } else {
        return undefined;
      }
    };

    /**
     * The transformation matrix to get the pixel on the image for a
     * pixel on the map.
     * @param {import("../../size.js").Size} mapSize The map size.
     * @param {import("../../size.js").Size} imageSize The image size.
     * @return {import("../../transform.js").Transform} The transformation matrix.
     * @private
     */
    WebGLImageLayerRenderer.prototype.getHitTransformationMatrix_ = function getHitTransformationMatrix_ (mapSize, imageSize) {
      // the first matrix takes a map pixel, flips the y-axis and scales to
      // a range between -1 ... 1
      var mapCoordTransform = create();
      translate$1(mapCoordTransform, -1, -1);
      scale$2(mapCoordTransform, 2 / mapSize[0], 2 / mapSize[1]);
      translate$1(mapCoordTransform, 0, mapSize[1]);
      scale$2(mapCoordTransform, 1, -1);

      // the second matrix is the inverse of the projection matrix used in the
      // shader for drawing
      var projectionMatrixInv = invert(this.projectionMatrix.slice());

      // the third matrix scales to the image dimensions and flips the y-axis again
      var transform = create();
      translate$1(transform, 0, imageSize[1]);
      scale$2(transform, 1, -1);
      scale$2(transform, imageSize[0] / 2, imageSize[1] / 2);
      translate$1(transform, 1, 1);

      multiply(transform, projectionMatrixInv);
      multiply(transform, mapCoordTransform);

      return transform;
    };

    return WebGLImageLayerRenderer;
  }(WebGLLayerRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  WebGLImageLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.IMAGE;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {WebGLImageLayerRenderer} The layer renderer.
   */
  WebGLImageLayerRenderer['create'] = function(mapRenderer, layer) {
    return new WebGLImageLayerRenderer(
      /** @type {import("./Map.js").default} */ (mapRenderer),
      /** @type {import("../../layer/Image.js").default} */ (layer)
    );
  };

  /**
   * @module ol/renderer/webgl/Map
   */


  /**
   * @typedef {Object} TextureCacheEntry
   * @property {number} magFilter
   * @property {number} minFilter
   * @property {WebGLTexture} texture
   */


  /**
   * Texture cache high water mark.
   * @type {number}
   */
  var WEBGL_TEXTURE_CACHE_HIGH_WATER_MARK = 1024;


  /**
   * @classdesc
   * WebGL map renderer.
   * @api
   */
  var WebGLMapRenderer = /*@__PURE__*/(function (MapRenderer$$1) {
    function WebGLMapRenderer(map) {
      MapRenderer$$1.call(this, map);

      var container = map.getViewport();

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = /** @type {HTMLCanvasElement} */
        (document.createElement('canvas'));
      this.canvas_.style.width = '100%';
      this.canvas_.style.height = '100%';
      this.canvas_.style.display = 'block';
      this.canvas_.className = CLASS_UNSELECTABLE;
      container.insertBefore(this.canvas_, container.childNodes[0] || null);

      /**
       * @private
       * @type {number}
       */
      this.clipTileCanvasWidth_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.clipTileCanvasHeight_ = 0;

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.clipTileContext_ = createCanvasContext2D();

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = true;

      /**
       * @private
       * @type {WebGLRenderingContext}
       */
      this.gl_ = getContext(this.canvas_, {
        antialias: true,
        depth: true,
        failIfMajorPerformanceCaveat: true,
        preserveDrawingBuffer: false,
        stencil: true
      });

      /**
       * @private
       * @type {import("../../webgl/Context.js").default}
       */
      this.context_ = new WebGLContext(this.canvas_, this.gl_);

      listen(this.canvas_, ContextEventType.LOST,
        this.handleWebGLContextLost, this);
      listen(this.canvas_, ContextEventType.RESTORED,
        this.handleWebGLContextRestored, this);

      /**
       * @private
       * @type {import("../../structs/LRUCache.js").default<TextureCacheEntry|null>}
       */
      this.textureCache_ = new LRUCache();

      /**
       * @private
       * @type {import("../../coordinate.js").Coordinate}
       */
      this.focus_ = null;

      /**
       * @private
       * @type {import("../../structs/PriorityQueue.js").default<Array>}
       */
      this.tileTextureQueue_ = new PriorityQueue(
        /**
         * @param {Array<*>} element Element.
         * @return {number} Priority.
         * @this {WebGLMapRenderer}
         */
        (function(element) {
          var tileCenter = /** @type {import("../../coordinate.js").Coordinate} */ (element[1]);
          var tileResolution = /** @type {number} */ (element[2]);
          var deltaX = tileCenter[0] - this.focus_[0];
          var deltaY = tileCenter[1] - this.focus_[1];
          return 65536 * Math.log(tileResolution) +
                Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;
        }).bind(this),
        /**
         * @param {Array<*>} element Element.
         * @return {string} Key.
         */
        function(element) {
          return (
            /** @type {import("../../Tile.js").default} */ (element[0]).getKey()
          );
        });


      /**
       * @param {import("../../PluggableMap.js").default} map Map.
       * @param {?import("../../PluggableMap.js").FrameState} frameState Frame state.
       * @return {boolean} false.
       * @this {WebGLMapRenderer}
       */
      this.loadNextTileTexture_ =
          function(map, frameState) {
            if (!this.tileTextureQueue_.isEmpty()) {
              this.tileTextureQueue_.reprioritize();
              var element = this.tileTextureQueue_.dequeue();
              var tile = /** @type {import("../../Tile.js").default} */ (element[0]);
              var tileSize = /** @type {import("../../size.js").Size} */ (element[3]);
              var tileGutter = /** @type {number} */ (element[4]);
              this.bindTileTexture(
                tile, tileSize, tileGutter, LINEAR, LINEAR);
            }
            return false;
          }.bind(this);


      /**
       * @private
       * @type {number}
       */
      this.textureCacheFrameMarkerCount_ = 0;

      this.initializeGL_();
    }

    if ( MapRenderer$$1 ) WebGLMapRenderer.__proto__ = MapRenderer$$1;
    WebGLMapRenderer.prototype = Object.create( MapRenderer$$1 && MapRenderer$$1.prototype );
    WebGLMapRenderer.prototype.constructor = WebGLMapRenderer;

    /**
     * @param {import("../../Tile.js").default} tile Tile.
     * @param {import("../../size.js").Size} tileSize Tile size.
     * @param {number} tileGutter Tile gutter.
     * @param {number} magFilter Mag filter.
     * @param {number} minFilter Min filter.
     */
    WebGLMapRenderer.prototype.bindTileTexture = function bindTileTexture (tile, tileSize, tileGutter, magFilter, minFilter) {
      var gl = this.getGL();
      var tileKey = tile.getKey();
      if (this.textureCache_.containsKey(tileKey)) {
        var textureCacheEntry = this.textureCache_.get(tileKey);
        gl.bindTexture(TEXTURE_2D, textureCacheEntry.texture);
        if (textureCacheEntry.magFilter != magFilter) {
          gl.texParameteri(
            TEXTURE_2D, TEXTURE_MAG_FILTER, magFilter);
          textureCacheEntry.magFilter = magFilter;
        }
        if (textureCacheEntry.minFilter != minFilter) {
          gl.texParameteri(
            TEXTURE_2D, TEXTURE_MIN_FILTER, minFilter);
          textureCacheEntry.minFilter = minFilter;
        }
      } else {
        var texture = gl.createTexture();
        var imageTile = /** @type {import("../../ImageTile.js").default} */ (tile);
        gl.bindTexture(TEXTURE_2D, texture);
        if (tileGutter > 0) {
          var clipTileCanvas = this.clipTileContext_.canvas;
          var clipTileContext = this.clipTileContext_;
          if (this.clipTileCanvasWidth_ !== tileSize[0] ||
              this.clipTileCanvasHeight_ !== tileSize[1]) {
            clipTileCanvas.width = tileSize[0];
            clipTileCanvas.height = tileSize[1];
            this.clipTileCanvasWidth_ = tileSize[0];
            this.clipTileCanvasHeight_ = tileSize[1];
          } else {
            clipTileContext.clearRect(0, 0, tileSize[0], tileSize[1]);
          }
          clipTileContext.drawImage(imageTile.getImage(), tileGutter, tileGutter,
            tileSize[0], tileSize[1], 0, 0, tileSize[0], tileSize[1]);
          gl.texImage2D(TEXTURE_2D, 0,
            RGBA, RGBA,
            UNSIGNED_BYTE, clipTileCanvas);
        } else {
          gl.texImage2D(TEXTURE_2D, 0,
            RGBA, RGBA,
            UNSIGNED_BYTE, imageTile.getImage());
        }
        gl.texParameteri(
          TEXTURE_2D, TEXTURE_MAG_FILTER, magFilter);
        gl.texParameteri(
          TEXTURE_2D, TEXTURE_MIN_FILTER, minFilter);
        gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S,
          CLAMP_TO_EDGE);
        gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T,
          CLAMP_TO_EDGE);
        this.textureCache_.set(tileKey, {
          texture: texture,
          magFilter: magFilter,
          minFilter: minFilter
        });
      }
    };

    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     */
    WebGLMapRenderer.prototype.dispatchRenderEvent = function dispatchRenderEvent (type, frameState) {
      var map = this.getMap();
      if (map.hasListener(type)) {
        var context = this.context_;

        var extent = frameState.extent;
        var size = frameState.size;
        var viewState = frameState.viewState;
        var pixelRatio = frameState.pixelRatio;

        var resolution = viewState.resolution;
        var center = viewState.center;
        var rotation = viewState.rotation;

        var vectorContext = new WebGLImmediateRenderer(context,
          center, resolution, rotation, size, extent, pixelRatio);
        var composeEvent = new RenderEvent(type, vectorContext,
          frameState, null, context);
        map.dispatchEvent(composeEvent);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLMapRenderer.prototype.disposeInternal = function disposeInternal () {
      var gl = this.getGL();
      if (!gl.isContextLost()) {
        this.textureCache_.forEach(
          /**
           * @param {?TextureCacheEntry} textureCacheEntry
           *     Texture cache entry.
           */
          function(textureCacheEntry) {
            if (textureCacheEntry) {
              gl.deleteTexture(textureCacheEntry.texture);
            }
          });
      }
      this.context_.dispose();
      MapRenderer$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @param {import("../../PluggableMap.js").default} map Map.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */
    WebGLMapRenderer.prototype.expireCache_ = function expireCache_ (map, frameState) {
      var gl = this.getGL();
      var textureCacheEntry;
      while (this.textureCache_.getCount() - this.textureCacheFrameMarkerCount_ >
          WEBGL_TEXTURE_CACHE_HIGH_WATER_MARK) {
        textureCacheEntry = this.textureCache_.peekLast();
        if (!textureCacheEntry) {
          if (+this.textureCache_.peekLastKey() == frameState.index) {
            break;
          } else {
            --this.textureCacheFrameMarkerCount_;
          }
        } else {
          gl.deleteTexture(textureCacheEntry.texture);
        }
        this.textureCache_.pop();
      }
    };

    /**
     * @return {import("../../webgl/Context.js").default} The context.
     */
    WebGLMapRenderer.prototype.getContext = function getContext$$1 () {
      return this.context_;
    };

    /**
     * @return {WebGLRenderingContext} GL.
     */
    WebGLMapRenderer.prototype.getGL = function getGL () {
      return this.gl_;
    };

    /**
     * @return {import("../../structs/PriorityQueue.js").default<Array>} Tile texture queue.
     */
    WebGLMapRenderer.prototype.getTileTextureQueue = function getTileTextureQueue () {
      return this.tileTextureQueue_;
    };

    /**
     * @param {import("../../events/Event.js").default} event Event.
     * @protected
     */
    WebGLMapRenderer.prototype.handleWebGLContextLost = function handleWebGLContextLost (event) {
      event.preventDefault();
      this.textureCache_.clear();
      this.textureCacheFrameMarkerCount_ = 0;

      var renderers = this.getLayerRenderers();
      for (var id in renderers) {
        var renderer = /** @type {import("./Layer.js").default} */ (renderers[id]);
        renderer.handleWebGLContextLost();
      }
    };

    /**
     * @protected
     */
    WebGLMapRenderer.prototype.handleWebGLContextRestored = function handleWebGLContextRestored () {
      this.initializeGL_();
      this.getMap().render();
    };

    /**
     * @private
     */
    WebGLMapRenderer.prototype.initializeGL_ = function initializeGL_ () {
      var gl = this.gl_;
      gl.activeTexture(TEXTURE0);
      gl.blendFuncSeparate(
        SRC_ALPHA, ONE_MINUS_SRC_ALPHA,
        ONE, ONE_MINUS_SRC_ALPHA);
      gl.disable(CULL_FACE);
      gl.disable(DEPTH_TEST);
      gl.disable(SCISSOR_TEST);
      gl.disable(STENCIL_TEST);
    };

    /**
     * @param {import("../../Tile.js").default} tile Tile.
     * @return {boolean} Is tile texture loaded.
     */
    WebGLMapRenderer.prototype.isTileTextureLoaded = function isTileTextureLoaded (tile) {
      return this.textureCache_.containsKey(tile.getKey());
    };

    /**
     * @inheritDoc
     */
    WebGLMapRenderer.prototype.renderFrame = function renderFrame (frameState) {

      var context = this.getContext();
      var gl = this.getGL();

      if (gl.isContextLost()) {
        return false;
      }

      if (!frameState) {
        if (this.renderedVisible_) {
          this.canvas_.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return false;
      }

      this.focus_ = frameState.focus;

      this.textureCache_.set((-frameState.index).toString(), null);
      ++this.textureCacheFrameMarkerCount_;

      this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);

      /** @type {Array<import("../../layer/Layer.js").State>} */
      var layerStatesToDraw = [];
      var layerStatesArray = frameState.layerStatesArray;
      stableSort(layerStatesArray, sortByZIndex);

      var viewResolution = frameState.viewState.resolution;
      var i, ii;
      for (i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        var layerState = layerStatesArray[i];
        if (visibleAtResolution(layerState, viewResolution) &&
            layerState.sourceState == SourceState.READY) {
          var layerRenderer = /** @type {import("./Layer.js").default} */ (this.getLayerRenderer(layerState.layer));
          if (layerRenderer.prepareFrame(frameState, layerState, context)) {
            layerStatesToDraw.push(layerState);
          }
        }
      }

      var width = frameState.size[0] * frameState.pixelRatio;
      var height = frameState.size[1] * frameState.pixelRatio;
      if (this.canvas_.width != width || this.canvas_.height != height) {
        this.canvas_.width = width;
        this.canvas_.height = height;
      }

      gl.bindFramebuffer(FRAMEBUFFER, null);

      gl.clearColor(0, 0, 0, 0);
      gl.clear(COLOR_BUFFER_BIT);
      gl.enable(BLEND);
      gl.viewport(0, 0, this.canvas_.width, this.canvas_.height);

      for (i = 0, ii = layerStatesToDraw.length; i < ii; ++i) {
        var layerState$1 = layerStatesToDraw[i];
        var layerRenderer$1 = /** @type {import("./Layer.js").default} */ (this.getLayerRenderer(layerState$1.layer));
        layerRenderer$1.composeFrame(frameState, layerState$1, context);
      }

      if (!this.renderedVisible_) {
        this.canvas_.style.display = '';
        this.renderedVisible_ = true;
      }

      this.calculateMatrices2D(frameState);

      if (this.textureCache_.getCount() - this.textureCacheFrameMarkerCount_ >
          WEBGL_TEXTURE_CACHE_HIGH_WATER_MARK) {
        frameState.postRenderFunctions.push(
          /** @type {import("../../PluggableMap.js").PostRenderFunction} */ (this.expireCache_.bind(this))
        );
      }

      if (!this.tileTextureQueue_.isEmpty()) {
        frameState.postRenderFunctions.push(this.loadNextTileTexture_);
        frameState.animate = true;
      }

      this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);

      this.scheduleRemoveUnusedLayerRenderers(frameState);
      this.scheduleExpireIconCache(frameState);

    };

    /**
     * @inheritDoc
     */
    WebGLMapRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (
      coordinate,
      frameState,
      hitTolerance,
      callback,
      thisArg,
      layerFilter,
      thisArg2
    ) {
      var result;

      if (this.getGL().isContextLost()) {
        return false;
      }

      var viewState = frameState.viewState;

      var layerStates = frameState.layerStatesArray;
      var numLayers = layerStates.length;
      var i;
      for (i = numLayers - 1; i >= 0; --i) {
        var layerState = layerStates[i];
        var layer = layerState.layer;
        if (visibleAtResolution(layerState, viewState.resolution) &&
            layerFilter.call(thisArg2, layer)) {
          var layerRenderer = this.getLayerRenderer(layer);
          result = layerRenderer.forEachFeatureAtCoordinate(
            coordinate, frameState, hitTolerance, callback);
          if (result) {
            return result;
          }
        }
      }
      return undefined;
    };

    /**
     * @inheritDoc
     */
    WebGLMapRenderer.prototype.hasFeatureAtCoordinate = function hasFeatureAtCoordinate (coordinate, frameState, hitTolerance, layerFilter, thisArg) {
      var hasFeature = false;

      if (this.getGL().isContextLost()) {
        return false;
      }

      var viewState = frameState.viewState;

      var layerStates = frameState.layerStatesArray;
      var numLayers = layerStates.length;
      var i;
      for (i = numLayers - 1; i >= 0; --i) {
        var layerState = layerStates[i];
        var layer = layerState.layer;
        if (visibleAtResolution(layerState, viewState.resolution) &&
            layerFilter.call(thisArg, layer)) {
          var layerRenderer = this.getLayerRenderer(layer);
          hasFeature =
              layerRenderer.hasFeatureAtCoordinate(coordinate, frameState);
          if (hasFeature) {
            return true;
          }
        }
      }
      return hasFeature;
    };

    /**
     * @inheritDoc
     */
    WebGLMapRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, hitTolerance, callback, thisArg, layerFilter, thisArg2) {
      if (this.getGL().isContextLost()) {
        return false;
      }

      var viewState = frameState.viewState;
      var result;

      var layerStates = frameState.layerStatesArray;
      var numLayers = layerStates.length;
      var i;
      for (i = numLayers - 1; i >= 0; --i) {
        var layerState = layerStates[i];
        var layer = layerState.layer;
        if (visibleAtResolution(layerState, viewState.resolution) &&
            layerFilter.call(thisArg, layer)) {
          var layerRenderer = /** @type {import("./Layer.js").default} */ (this.getLayerRenderer(layer));
          result = layerRenderer.forEachLayerAtPixel(
            pixel, frameState, callback, thisArg);
          if (result) {
            return result;
          }
        }
      }
      return undefined;
    };

    return WebGLMapRenderer;
  }(MapRenderer));

  /**
   * @module ol/Tile
   */


  /**
   * A function that takes an {@link module:ol/Tile} for the tile and a
   * `{string}` for the url as arguments. The default is
   * ```js
   * source.setTileLoadFunction(function(tile, src) {
   *   tile.getImage().src = src;
   * });
   * ```
   * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve
   * error handling:
   *
   * ```js
   * import TileState from 'ol/TileState';
   *
   * source.setTileLoadFunction(function(tile, src) {
   *   var xhr = new XMLHttpRequest();
   *   xhr.responseType = 'blob';
   *   xhr.addEventListener('loadend', function (evt) {
   *     var data = this.response;
   *     if (data !== undefined) {
   *       tile.getImage().src = URL.createObjectURL(data);
   *     } else {
   *       tile.setState(TileState.ERROR);
   *     }
   *   });
   *   xhr.addEventListener('error', function () {
   *     tile.setState(TileState.ERROR);
   *   });
   *   xhr.open('GET', src);
   *   xhr.send();
   * });
   * ```
   *
   * @typedef {function(Tile, string)} LoadFunction
   * @api
   */

  /**
   * {@link module:ol/source/Tile~Tile} sources use a function of this type to get
   * the url that provides a tile for a given tile coordinate.
   *
   * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile
   * coordinate, a `{number}` representing the pixel ratio and a
   * {@link module:ol/proj/Projection} for the projection  as arguments
   * and returns a `{string}` representing the tile URL, or undefined if no tile
   * should be requested for the passed tile coordinate.
   *
   * @typedef {function(import("./tilecoord.js").TileCoord, number,
   *           import("./proj/Projection.js").default): (string|undefined)} UrlFunction
   * @api
   */


  /**
   * @typedef {Object} Options
   * @property {number} [transition=250] A duration for tile opacity
   * transitions in milliseconds. A duration of 0 disables the opacity transition.
   * @api
   */


  /**
   * @classdesc
   * Base class for tiles.
   *
   * @abstract
   */
  var Tile = /*@__PURE__*/(function (EventTarget) {
    function Tile(tileCoord, state, opt_options) {
      EventTarget.call(this);

      var options = opt_options ? opt_options : {};

      /**
       * @type {import("./tilecoord.js").TileCoord}
       */
      this.tileCoord = tileCoord;

      /**
       * @protected
       * @type {TileState}
       */
      this.state = state;

      /**
       * An "interim" tile for this tile. The interim tile may be used while this
       * one is loading, for "smooth" transitions when changing params/dimensions
       * on the source.
       * @type {Tile}
       */
      this.interimTile = null;

      /**
       * A key assigned to the tile. This is used by the tile source to determine
       * if this tile can effectively be used, or if a new tile should be created
       * and this one be used as an interim tile for this new tile.
       * @type {string}
       */
      this.key = '';

      /**
       * The duration for the opacity transition.
       * @type {number}
       */
      this.transition_ = options.transition === undefined ? 250 : options.transition;

      /**
       * Lookup of start times for rendering transitions.  If the start time is
       * equal to -1, the transition is complete.
       * @type {Object<string, number>}
       */
      this.transitionStarts_ = {};

    }

    if ( EventTarget ) Tile.__proto__ = EventTarget;
    Tile.prototype = Object.create( EventTarget && EventTarget.prototype );
    Tile.prototype.constructor = Tile;

    /**
     * @protected
     */
    Tile.prototype.changed = function changed () {
      this.dispatchEvent(EventType.CHANGE);
    };

    /**
     * @return {string} Key.
     */
    Tile.prototype.getKey = function getKey () {
      return this.key + '/' + this.tileCoord;
    };

    /**
     * Get the interim tile most suitable for rendering using the chain of interim
     * tiles. This corresponds to the  most recent tile that has been loaded, if no
     * such tile exists, the original tile is returned.
     * @return {!Tile} Best tile for rendering.
     */
    Tile.prototype.getInterimTile = function getInterimTile () {
      if (!this.interimTile) {
        //empty chain
        return this;
      }
      var tile = this.interimTile;

      // find the first loaded tile and return it. Since the chain is sorted in
      // decreasing order of creation time, there is no need to search the remainder
      // of the list (all those tiles correspond to older requests and will be
      // cleaned up by refreshInterimChain)
      do {
        if (tile.getState() == TileState.LOADED) {
          return tile;
        }
        tile = tile.interimTile;
      } while (tile);

      // we can not find a better tile
      return this;
    };

    /**
     * Goes through the chain of interim tiles and discards sections of the chain
     * that are no longer relevant.
     */
    Tile.prototype.refreshInterimChain = function refreshInterimChain () {
      if (!this.interimTile) {
        return;
      }

      var tile = this.interimTile;
      var prev = /** @type {Tile} */ (this);

      do {
        if (tile.getState() == TileState.LOADED) {
          //we have a loaded tile, we can discard the rest of the list
          //we would could abort any LOADING tile request
          //older than this tile (i.e. any LOADING tile following this entry in the chain)
          tile.interimTile = null;
          break;
        } else if (tile.getState() == TileState.LOADING) {
          //keep this LOADING tile any loaded tiles later in the chain are
          //older than this tile, so we're still interested in the request
          prev = tile;
        } else if (tile.getState() == TileState.IDLE) {
          //the head of the list is the most current tile, we don't need
          //to start any other requests for this chain
          prev.interimTile = tile.interimTile;
        } else {
          prev = tile;
        }
        tile = prev.interimTile;
      } while (tile);
    };

    /**
     * Get the tile coordinate for this tile.
     * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
     * @api
     */
    Tile.prototype.getTileCoord = function getTileCoord () {
      return this.tileCoord;
    };

    /**
     * @return {TileState} State.
     */
    Tile.prototype.getState = function getState () {
      return this.state;
    };

    /**
     * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
     * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
     * when the tile cannot be loaded. Otherwise the tile cannot be removed from
     * the tile queue and will block other requests.
     * @param {TileState} state State.
     * @api
     */
    Tile.prototype.setState = function setState (state) {
      this.state = state;
      this.changed();
    };

    /**
     * Load the image or retry if loading previously failed.
     * Loading is taken care of by the tile queue, and calling this method is
     * only needed for preloading or for reloading in case of an error.
     * @abstract
     * @api
     */
    Tile.prototype.load = function load () {};

    /**
     * Get the alpha value for rendering.
     * @param {string} id An id for the renderer.
     * @param {number} time The render frame time.
     * @return {number} A number between 0 and 1.
     */
    Tile.prototype.getAlpha = function getAlpha (id, time) {
      if (!this.transition_) {
        return 1;
      }

      var start = this.transitionStarts_[id];
      if (!start) {
        start = time;
        this.transitionStarts_[id] = start;
      } else if (start === -1) {
        return 1;
      }

      var delta = time - start + (1000 / 60); // avoid rendering at 0
      if (delta >= this.transition_) {
        return 1;
      }
      return easeIn(delta / this.transition_);
    };

    /**
     * Determine if a tile is in an alpha transition.  A tile is considered in
     * transition if tile.getAlpha() has not yet been called or has been called
     * and returned 1.
     * @param {string} id An id for the renderer.
     * @return {boolean} The tile is in transition.
     */
    Tile.prototype.inTransition = function inTransition (id) {
      if (!this.transition_) {
        return false;
      }
      return this.transitionStarts_[id] !== -1;
    };

    /**
     * Mark a transition as complete.
     * @param {string} id An id for the renderer.
     */
    Tile.prototype.endTransition = function endTransition (id) {
      if (this.transition_) {
        this.transitionStarts_[id] = -1;
      }
    };

    return Tile;
  }(Target));

  /**
   * @module ol/ImageTile
   */


  var ImageTile = /*@__PURE__*/(function (Tile$$1) {
    function ImageTile(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {

      Tile$$1.call(this, tileCoord, state, opt_options);

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ = crossOrigin;

      /**
       * Image URI
       *
       * @private
       * @type {string}
       */
      this.src_ = src;

      /**
       * @private
       * @type {HTMLImageElement|HTMLCanvasElement}
       */
      this.image_ = new Image();
      if (crossOrigin !== null) {
        this.image_.crossOrigin = crossOrigin;
      }

      /**
       * @private
       * @type {Array<import("./events.js").EventsKey>}
       */
      this.imageListenerKeys_ = null;

      /**
       * @private
       * @type {import("./Tile.js").LoadFunction}
       */
      this.tileLoadFunction_ = tileLoadFunction;

    }

    if ( Tile$$1 ) ImageTile.__proto__ = Tile$$1;
    ImageTile.prototype = Object.create( Tile$$1 && Tile$$1.prototype );
    ImageTile.prototype.constructor = ImageTile;

    /**
     * @inheritDoc
     */
    ImageTile.prototype.disposeInternal = function disposeInternal () {
      if (this.state == TileState.LOADING) {
        this.unlistenImage_();
        this.image_ = getBlankImage();
      }
      if (this.interimTile) {
        this.interimTile.dispose();
      }
      this.state = TileState.ABORT;
      this.changed();
      Tile$$1.prototype.disposeInternal.call(this);
    };

    /**
     * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @api
     */
    ImageTile.prototype.getImage = function getImage () {
      return this.image_;
    };

    /**
     * @inheritDoc
     */
    ImageTile.prototype.getKey = function getKey () {
      return this.src_;
    };

    /**
     * Tracks loading or read errors.
     *
     * @private
     */
    ImageTile.prototype.handleImageError_ = function handleImageError_ () {
      this.state = TileState.ERROR;
      this.unlistenImage_();
      this.image_ = getBlankImage();
      this.changed();
    };

    /**
     * Tracks successful image load.
     *
     * @private
     */
    ImageTile.prototype.handleImageLoad_ = function handleImageLoad_ () {
      var image = /** @type {HTMLImageElement} */ (this.image_);
      if (image.naturalWidth && image.naturalHeight) {
        this.state = TileState.LOADED;
      } else {
        this.state = TileState.EMPTY;
      }
      this.unlistenImage_();
      this.changed();
    };

    /**
     * @inheritDoc
     * @api
     */
    ImageTile.prototype.load = function load () {
      if (this.state == TileState.ERROR) {
        this.state = TileState.IDLE;
        this.image_ = new Image();
        if (this.crossOrigin_ !== null) {
          this.image_.crossOrigin = this.crossOrigin_;
        }
      }
      if (this.state == TileState.IDLE) {
        this.state = TileState.LOADING;
        this.changed();
        this.imageListenerKeys_ = [
          listenOnce(this.image_, EventType.ERROR,
            this.handleImageError_, this),
          listenOnce(this.image_, EventType.LOAD,
            this.handleImageLoad_, this)
        ];
        this.tileLoadFunction_(this, this.src_);
      }
    };

    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */
    ImageTile.prototype.unlistenImage_ = function unlistenImage_ () {
      this.imageListenerKeys_.forEach(unlistenByKey);
      this.imageListenerKeys_ = null;
    };

    return ImageTile;
  }(Tile));


  /**
   * Get a 1-pixel blank image.
   * @return {HTMLCanvasElement} Blank image.
   */
  function getBlankImage() {
    var ctx = createCanvasContext2D(1, 1);
    ctx.fillStyle = 'rgba(0,0,0,0)';
    ctx.fillRect(0, 0, 1, 1);
    return ctx.canvas;
  }

  /**
   * @module ol/tilecoord
   */


  /**
   * An array of three numbers representing the location of a tile in a tile
   * grid. The order is `z`, `x`, and `y`. `z` is the zoom level.
   * @typedef {Array<number>} TileCoord
   * @api
   */


  /**
   * @param {number} z Z.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {TileCoord=} opt_tileCoord Tile coordinate.
   * @return {TileCoord} Tile coordinate.
   */
  function createOrUpdate$2(z, x, y, opt_tileCoord) {
    if (opt_tileCoord !== undefined) {
      opt_tileCoord[0] = z;
      opt_tileCoord[1] = x;
      opt_tileCoord[2] = y;
      return opt_tileCoord;
    } else {
      return [z, x, y];
    }
  }


  /**
   * @param {number} z Z.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {string} Key.
   */
  function getKeyZXY(z, x, y) {
    return z + '/' + x + '/' + y;
  }


  /**
   * Get the key for a tile coord.
   * @param {TileCoord} tileCoord The tile coord.
   * @return {string} Key.
   */
  function getKey$1(tileCoord) {
    return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
  }


  /**
   * Get a tile coord given a key.
   * @param {string} key The tile coord key.
   * @return {TileCoord} The tile coord.
   */
  function fromKey(key) {
    return key.split('/').map(Number);
  }


  /**
   * @param {TileCoord} tileCoord Tile coord.
   * @return {number} Hash.
   */
  function hash(tileCoord) {
    return (tileCoord[1] << tileCoord[0]) + tileCoord[2];
  }


  /**
   * @param {TileCoord} tileCoord Tile coordinate.
   * @param {!import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {boolean} Tile coordinate is within extent and zoom level range.
   */
  function withinExtentAndZ(tileCoord, tileGrid) {
    var z = tileCoord[0];
    var x = tileCoord[1];
    var y = tileCoord[2];

    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {
      return false;
    }
    var extent = tileGrid.getExtent();
    var tileRange;
    if (!extent) {
      tileRange = tileGrid.getFullTileRange(z);
    } else {
      tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
    }
    if (!tileRange) {
      return true;
    } else {
      return tileRange.containsXY(x, y);
    }
  }

  /**
   * @module ol/TileCache
   */

  var TileCache = /*@__PURE__*/(function (LRUCache$$1) {
    function TileCache(opt_highWaterMark) {

      LRUCache$$1.call(this, opt_highWaterMark);

    }

    if ( LRUCache$$1 ) TileCache.__proto__ = LRUCache$$1;
    TileCache.prototype = Object.create( LRUCache$$1 && LRUCache$$1.prototype );
    TileCache.prototype.constructor = TileCache;

    /**
     * @param {!Object<string, import("./TileRange.js").default>} usedTiles Used tiles.
     */
    TileCache.prototype.expireCache = function expireCache (usedTiles) {
      while (this.canExpireCache()) {
        var tile = this.peekLast();
        var zKey = tile.tileCoord[0].toString();
        if (zKey in usedTiles && usedTiles[zKey].contains(tile.tileCoord)) {
          break;
        } else {
          this.pop().dispose();
        }
      }
    };

    /**
     * Prune all tiles from the cache that don't have the same z as the newest tile.
     */
    TileCache.prototype.pruneExceptNewestZ = function pruneExceptNewestZ () {
      if (this.getCount() === 0) {
        return;
      }
      var key = this.peekFirstKey();
      var tileCoord = fromKey(key);
      var z = tileCoord[0];
      this.forEach(function(tile) {
        if (tile.tileCoord[0] !== z) {
          this.remove(getKey$1(tile.tileCoord));
          tile.dispose();
        }
      }, this);
    };

    return TileCache;
  }(LRUCache));

  /**
   * @module ol/tilegrid/TileGrid
   */


  /**
   * @private
   * @type {import("../tilecoord.js").TileCoord}
   */
  var tmpTileCoord = [0, 0, 0];


  /**
   * @typedef {Object} Options
   * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles outside this
   * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or
   * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
   * @property {number} [minZoom=0] Minimum zoom.
   * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e. where the `x`
   * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and upwards. If not
   * specified, `extent` or `origins` must be provided.
   * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins, i.e. where
   * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
   * should match the length of the `resolutions` array, i.e. each resolution can have a different
   * origin. Tile coordinates increase left to right and upwards. If not specified, `extent` or
   * `origin` must be provided.
   * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs
   * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
   * array will have a length of `maxZoom + 1`.
   * @property {Array<import("../size.js").Size>} [sizes] Sizes.
   * @property {number|import("../size.js").Size} [tileSize] Tile size.
   * Default is `[256, 256]`.
   * @property {Array<import("../size.js").Size>} [tileSizes] Tile sizes. If given, the array length
   * should match the length of the `resolutions` array, i.e. each resolution can have a different
   * tile size.
   */


  /**
   * @classdesc
   * Base class for setting the grid pattern for sources accessing tiled-image
   * servers.
   * @api
   */
  var TileGrid = function TileGrid(options) {

    /**
     * @protected
     * @type {number}
     */
    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;

    /**
     * @private
     * @type {!Array<number>}
     */
    this.resolutions_ = options.resolutions;
    assert(isSorted(this.resolutions_, function(a, b) {
      return b - a;
    }, true), 17); // `resolutions` must be sorted in descending order


    // check if we've got a consistent zoom factor and origin
    var zoomFactor;
    if (!options.origins) {
      for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {
        if (!zoomFactor) {
          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
        } else {
          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
            zoomFactor = undefined;
            break;
          }
        }
      }
    }


    /**
     * @private
     * @type {number|undefined}
     */
    this.zoomFactor_ = zoomFactor;


    /**
     * @protected
     * @type {number}
     */
    this.maxZoom = this.resolutions_.length - 1;

    /**
     * @private
     * @type {import("../coordinate.js").Coordinate}
     */
    this.origin_ = options.origin !== undefined ? options.origin : null;

    /**
     * @private
     * @type {Array<import("../coordinate.js").Coordinate>}
     */
    this.origins_ = null;
    if (options.origins !== undefined) {
      this.origins_ = options.origins;
      assert(this.origins_.length == this.resolutions_.length,
        20); // Number of `origins` and `resolutions` must be equal
    }

    var extent = options.extent;

    if (extent !== undefined &&
        !this.origin_ && !this.origins_) {
      this.origin_ = getTopLeft(extent);
    }

    assert(
      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),
      18); // Either `origin` or `origins` must be configured, never both

    /**
     * @private
     * @type {Array<number|import("../size.js").Size>}
     */
    this.tileSizes_ = null;
    if (options.tileSizes !== undefined) {
      this.tileSizes_ = options.tileSizes;
      assert(this.tileSizes_.length == this.resolutions_.length,
        19); // Number of `tileSizes` and `resolutions` must be equal
    }

    /**
     * @private
     * @type {number|import("../size.js").Size}
     */
    this.tileSize_ = options.tileSize !== undefined ?
      options.tileSize :
      !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;
    assert(
      (!this.tileSize_ && this.tileSizes_) ||
        (this.tileSize_ && !this.tileSizes_),
      22); // Either `tileSize` or `tileSizes` must be configured, never both

    /**
     * @private
     * @type {import("../extent.js").Extent}
     */
    this.extent_ = extent !== undefined ? extent : null;


    /**
     * @private
     * @type {Array<import("../TileRange.js").default>}
     */
    this.fullTileRanges_ = null;

    /**
     * @private
     * @type {import("../size.js").Size}
     */
    this.tmpSize_ = [0, 0];

    if (options.sizes !== undefined) {
      this.fullTileRanges_ = options.sizes.map(function(size, z) {
        var tileRange = new TileRange(
          Math.min(0, size[0]), Math.max(size[0] - 1, -1),
          Math.min(0, size[1]), Math.max(size[1] - 1, -1));
        return tileRange;
      }, this);
    } else if (extent) {
      this.calculateTileRanges_(extent);
    }

  };

  /**
   * Call a function with each tile coordinate for a given extent and zoom level.
   *
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} zoom Integer zoom level.
   * @param {function(import("../tilecoord.js").TileCoord)} callback Function called with each tile coordinate.
   * @api
   */
  TileGrid.prototype.forEachTileCoord = function forEachTileCoord (extent, zoom, callback) {
    var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);
    for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {
      for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {
        callback([zoom, i, j]);
      }
    }
  };

  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {function(this: T, number, import("../TileRange.js").default): boolean} callback Callback.
   * @param {T=} opt_this The object to use as `this` in `callback`.
   * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
   * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
   * @return {boolean} Callback succeeded.
   * @template T
   */
  TileGrid.prototype.forEachTileCoordParentTileRange = function forEachTileCoordParentTileRange (tileCoord, callback, opt_this, opt_tileRange, opt_extent) {
    var tileRange, x, y;
    var tileCoordExtent = null;
    var z = tileCoord[0] - 1;
    if (this.zoomFactor_ === 2) {
      x = tileCoord[1];
      y = tileCoord[2];
    } else {
      tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
    }
    while (z >= this.minZoom) {
      if (this.zoomFactor_ === 2) {
        x = Math.floor(x / 2);
        y = Math.floor(y / 2);
        tileRange = createOrUpdate$1(x, x, y, y, opt_tileRange);
      } else {
        tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);
      }
      if (callback.call(opt_this, z, tileRange)) {
        return true;
      }
      --z;
    }
    return false;
  };

  /**
   * Get the extent for this tile grid, if it was configured.
   * @return {import("../extent.js").Extent} Extent.
   */
  TileGrid.prototype.getExtent = function getExtent () {
    return this.extent_;
  };

  /**
   * Get the maximum zoom level for the grid.
   * @return {number} Max zoom.
   * @api
   */
  TileGrid.prototype.getMaxZoom = function getMaxZoom () {
    return this.maxZoom;
  };

  /**
   * Get the minimum zoom level for the grid.
   * @return {number} Min zoom.
   * @api
   */
  TileGrid.prototype.getMinZoom = function getMinZoom () {
    return this.minZoom;
  };

  /**
   * Get the origin for the grid at the given zoom level.
   * @param {number} z Integer zoom level.
   * @return {import("../coordinate.js").Coordinate} Origin.
   * @api
   */
  TileGrid.prototype.getOrigin = function getOrigin (z) {
    if (this.origin_) {
      return this.origin_;
    } else {
      return this.origins_[z];
    }
  };

  /**
   * Get the resolution for the given zoom level.
   * @param {number} z Integer zoom level.
   * @return {number} Resolution.
   * @api
   */
  TileGrid.prototype.getResolution = function getResolution (z) {
    return this.resolutions_[z];
  };

  /**
   * Get the list of resolutions for the tile grid.
   * @return {Array<number>} Resolutions.
   * @api
   */
  TileGrid.prototype.getResolutions = function getResolutions () {
    return this.resolutions_;
  };

  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
   * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
   * @return {import("../TileRange.js").default} Tile range.
   */
  TileGrid.prototype.getTileCoordChildTileRange = function getTileCoordChildTileRange (tileCoord, opt_tileRange, opt_extent) {
    if (tileCoord[0] < this.maxZoom) {
      if (this.zoomFactor_ === 2) {
        var minX = tileCoord[1] * 2;
        var minY = tileCoord[2] * 2;
        return createOrUpdate$1(minX, minX + 1, minY, minY + 1, opt_tileRange);
      }
      var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
      return this.getTileRangeForExtentAndZ(
        tileCoordExtent, tileCoord[0] + 1, opt_tileRange);
    }
    return null;
  };

  /**
   * Get the extent for a tile range.
   * @param {number} z Integer zoom level.
   * @param {import("../TileRange.js").default} tileRange Tile range.
   * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
   * @return {import("../extent.js").Extent} Extent.
   */
  TileGrid.prototype.getTileRangeExtent = function getTileRangeExtent (z, tileRange, opt_extent) {
    var origin = this.getOrigin(z);
    var resolution = this.getResolution(z);
    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
    var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;
    var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;
    var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;
    var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;
    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
  };

  /**
   * Get a tile range for the given extent and integer zoom level.
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} z Integer zoom level.
   * @param {import("../TileRange.js").default=} opt_tileRange Temporary tile range object.
   * @return {import("../TileRange.js").default} Tile range.
   */
  TileGrid.prototype.getTileRangeForExtentAndZ = function getTileRangeForExtentAndZ (extent, z, opt_tileRange) {
    var tileCoord = tmpTileCoord;
    this.getTileCoordForXYAndZ_(extent[0], extent[1], z, false, tileCoord);
    var minX = tileCoord[1];
    var minY = tileCoord[2];
    this.getTileCoordForXYAndZ_(extent[2], extent[3], z, true, tileCoord);
    return createOrUpdate$1(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);
  };

  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @return {import("../coordinate.js").Coordinate} Tile center.
   */
  TileGrid.prototype.getTileCoordCenter = function getTileCoordCenter (tileCoord) {
    var origin = this.getOrigin(tileCoord[0]);
    var resolution = this.getResolution(tileCoord[0]);
    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
    return [
      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
      origin[1] + (tileCoord[2] + 0.5) * tileSize[1] * resolution
    ];
  };

  /**
   * Get the extent of a tile coordinate.
   *
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("../extent.js").Extent=} opt_extent Temporary extent object.
   * @return {import("../extent.js").Extent} Extent.
   * @api
   */
  TileGrid.prototype.getTileCoordExtent = function getTileCoordExtent (tileCoord, opt_extent) {
    var origin = this.getOrigin(tileCoord[0]);
    var resolution = this.getResolution(tileCoord[0]);
    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
    var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
    var minY = origin[1] + tileCoord[2] * tileSize[1] * resolution;
    var maxX = minX + tileSize[0] * resolution;
    var maxY = minY + tileSize[1] * resolution;
    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
  };

  /**
   * Get the tile coordinate for the given map coordinate and resolution.This
   * method considers that coordinates that intersect tile boundaries should be
   * assigned the higher tile coordinate.
   *
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} resolution Resolution.
   * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @api
   */
  TileGrid.prototype.getTileCoordForCoordAndResolution = function getTileCoordForCoordAndResolution (coordinate, resolution, opt_tileCoord) {
    return this.getTileCoordForXYAndResolution_(
      coordinate[0], coordinate[1], resolution, false, opt_tileCoord);
  };

  /**
   * Note that this method should not be called for resolutions that correspond
   * to an integer zoom level.Instead call the `getTileCoordForXYAndZ_` method.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} resolution Resolution (for a non-integer zoom level).
   * @param {boolean} reverseIntersectionPolicy Instead of letting edge
   *   intersections go to the higher tile coordinate, let edge intersections
   *   go to the lower tile coordinate.
   * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @private
   */
  TileGrid.prototype.getTileCoordForXYAndResolution_ = function getTileCoordForXYAndResolution_ (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {
    var z = this.getZForResolution(resolution);
    var scale = resolution / this.getResolution(z);
    var origin = this.getOrigin(z);
    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);

    var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
    var adjustY = reverseIntersectionPolicy ? 0 : 0.5;
    var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
    var yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);
    var tileCoordX = scale * xFromOrigin / tileSize[0];
    var tileCoordY = scale * yFromOrigin / tileSize[1];

    if (reverseIntersectionPolicy) {
      tileCoordX = Math.ceil(tileCoordX) - 1;
      tileCoordY = Math.ceil(tileCoordY) - 1;
    } else {
      tileCoordX = Math.floor(tileCoordX);
      tileCoordY = Math.floor(tileCoordY);
    }

    return createOrUpdate$2(z, tileCoordX, tileCoordY, opt_tileCoord);
  };

  /**
   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
   * they should have separate implementations.This method is for integer zoom
   * levels.The other method should only be called for resolutions corresponding
   * to non-integer zoom levels.
   * @param {number} x Map x coordinate.
   * @param {number} y Map y coordinate.
   * @param {number} z Integer zoom level.
   * @param {boolean} reverseIntersectionPolicy Instead of letting edge
   *   intersections go to the higher tile coordinate, let edge intersections
   *   go to the lower tile coordinate.
   * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @private
   */
  TileGrid.prototype.getTileCoordForXYAndZ_ = function getTileCoordForXYAndZ_ (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
    var origin = this.getOrigin(z);
    var resolution = this.getResolution(z);
    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);

    var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
    var adjustY = reverseIntersectionPolicy ? 0 : 0.5;
    var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
    var yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);
    var tileCoordX = xFromOrigin / tileSize[0];
    var tileCoordY = yFromOrigin / tileSize[1];

    if (reverseIntersectionPolicy) {
      tileCoordX = Math.ceil(tileCoordX) - 1;
      tileCoordY = Math.ceil(tileCoordY) - 1;
    } else {
      tileCoordX = Math.floor(tileCoordX);
      tileCoordY = Math.floor(tileCoordY);
    }

    return createOrUpdate$2(z, tileCoordX, tileCoordY, opt_tileCoord);
  };

  /**
   * Get a tile coordinate given a map coordinate and zoom level.
   * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} z Zoom level.
   * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
   * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
   * @api
   */
  TileGrid.prototype.getTileCoordForCoordAndZ = function getTileCoordForCoordAndZ (coordinate, z, opt_tileCoord) {
    return this.getTileCoordForXYAndZ_(
      coordinate[0], coordinate[1], z, false, opt_tileCoord);
  };

  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @return {number} Tile resolution.
   */
  TileGrid.prototype.getTileCoordResolution = function getTileCoordResolution (tileCoord) {
    return this.resolutions_[tileCoord[0]];
  };

  /**
   * Get the tile size for a zoom level. The type of the return value matches the
   * `tileSize` or `tileSizes` that the tile grid was configured with. To always
   * get an `import("../size.js").Size`, run the result through `import("../size.js").Size.toSize()`.
   * @param {number} z Z.
   * @return {number|import("../size.js").Size} Tile size.
   * @api
   */
  TileGrid.prototype.getTileSize = function getTileSize (z) {
    if (this.tileSize_) {
      return this.tileSize_;
    } else {
      return this.tileSizes_[z];
    }
  };

  /**
   * @param {number} z Zoom level.
   * @return {import("../TileRange.js").default} Extent tile range for the specified zoom level.
   */
  TileGrid.prototype.getFullTileRange = function getFullTileRange (z) {
    if (!this.fullTileRanges_) {
      return null;
    } else {
      return this.fullTileRanges_[z];
    }
  };

  /**
   * @param {number} resolution Resolution.
   * @param {number=} opt_direction If 0, the nearest resolution will be used.
   *   If 1, the nearest lower resolution will be used. If -1, the nearest
   *   higher resolution will be used. Default is 0.
   * @return {number} Z.
   * @api
   */
  TileGrid.prototype.getZForResolution = function getZForResolution (resolution, opt_direction) {
    var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);
    return clamp(z, this.minZoom, this.maxZoom);
  };

  /**
   * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
   * @private
   */
  TileGrid.prototype.calculateTileRanges_ = function calculateTileRanges_ (extent) {
    var length = this.resolutions_.length;
    var fullTileRanges = new Array(length);
    for (var z = this.minZoom; z < length; ++z) {
      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);
    }
    this.fullTileRanges_ = fullTileRanges;
  };

  /**
   * @module ol/tilegrid
   */


  /**
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {!TileGrid} Default tile grid for the
   * passed projection.
   */
  function getForProjection(projection) {
    var tileGrid = projection.getDefaultTileGrid();
    if (!tileGrid) {
      tileGrid = createForProjection(projection);
      projection.setDefaultTileGrid(tileGrid);
    }
    return tileGrid;
  }


  /**
   * @param {TileGrid} tileGrid Tile grid.
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {import("./tilecoord.js").TileCoord} Tile coordinate.
   */
  function wrapX(tileGrid, tileCoord, projection) {
    var z = tileCoord[0];
    var center = tileGrid.getTileCoordCenter(tileCoord);
    var projectionExtent = extentFromProjection(projection);
    if (!containsCoordinate(projectionExtent, center)) {
      var worldWidth = getWidth(projectionExtent);
      var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
      center[0] += worldWidth * worldsAway;
      return tileGrid.getTileCoordForCoordAndZ(center, z);
    } else {
      return tileCoord;
    }
  }


  /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number=} opt_maxZoom Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {Corner=} opt_corner Extent corner (default is `'top-left'`).
   * @return {!TileGrid} TileGrid instance.
   */
  function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {
    var corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;

    var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);

    return new TileGrid({
      extent: extent,
      origin: getCorner(extent, corner),
      resolutions: resolutions,
      tileSize: opt_tileSize
    });
  }


  /**
   * @typedef {Object} XYZOptions
   * @property {import("./extent.js").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the
   * top-left corner of the extent. The zero level of the grid is defined by the resolution at which one tile fits in the
   * provided extent. If not provided, the extent of the EPSG:3857 projection is used.
   * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels
   * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.
   * @property {number} [minZoom=0] Minimum zoom.
   * @property {number|import("./size.js").Size} [tileSize=[256, 256]] Tile size in pixels.
   */


  /**
   * Creates a tile grid with a standard XYZ tiling scheme.
   * @param {XYZOptions=} opt_options Tile grid options.
   * @return {!TileGrid} Tile grid instance.
   * @api
   */
  function createXYZ(opt_options) {
    /** @type {XYZOptions} */
    var xyzOptions = opt_options || {};

    var extent = xyzOptions.extent || get$2('EPSG:3857').getExtent();

    /** @type {import("./tilegrid/TileGrid.js").Options} */
    var gridOptions = {
      extent: extent,
      minZoom: xyzOptions.minZoom,
      tileSize: xyzOptions.tileSize,
      resolutions: resolutionsFromExtent(
        extent,
        xyzOptions.maxZoom,
        xyzOptions.tileSize
      )
    };
    return new TileGrid(gridOptions);
  }


  /**
   * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number=} opt_maxZoom Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @return {!Array<number>} Resolutions array.
   */
  function resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize) {
    var maxZoom = opt_maxZoom !== undefined ?
      opt_maxZoom : DEFAULT_MAX_ZOOM;

    var height = getHeight(extent);
    var width = getWidth(extent);

    var tileSize = toSize(opt_tileSize !== undefined ?
      opt_tileSize : DEFAULT_TILE_SIZE);
    var maxResolution = Math.max(
      width / tileSize[0], height / tileSize[1]);

    var length = maxZoom + 1;
    var resolutions = new Array(length);
    for (var z = 0; z < length; ++z) {
      resolutions[z] = maxResolution / Math.pow(2, z);
    }
    return resolutions;
  }


  /**
   * @param {import("./proj.js").ProjectionLike} projection Projection.
   * @param {number=} opt_maxZoom Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {Corner=} opt_corner Extent corner (default is `'top-left'`).
   * @return {!TileGrid} TileGrid instance.
   */
  function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {
    var extent = extentFromProjection(projection);
    return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);
  }


  /**
   * Generate a tile grid extent from a projection.  If the projection has an
   * extent, it is used.  If not, a global extent is assumed.
   * @param {import("./proj.js").ProjectionLike} projection Projection.
   * @return {import("./extent.js").Extent} Extent.
   */
  function extentFromProjection(projection) {
    projection = get$2(projection);
    var extent = projection.getExtent();
    if (!extent) {
      var half = 180 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit();
      extent = createOrUpdate(-half, -half, half, half);
    }
    return extent;
  }

  /**
   * @module ol/source/Tile
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions]
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize]
   * @property {boolean} [opaque]
   * @property {number} [tilePixelRatio]
   * @property {import("../proj.js").ProjectionLike} [projection]
   * @property {import("./State.js").default} [state]
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
   * @property {boolean} [wrapX=true]
   * @property {number} [transition]
   * @property {string} [key]
   */


  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for sources providing images divided into a tile grid.
   * @abstract
   * @api
   */
  var TileSource = /*@__PURE__*/(function (Source$$1) {
    function TileSource(options) {

      Source$$1.call(this, {
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        projection: options.projection,
        state: options.state,
        wrapX: options.wrapX
      });

      /**
       * @private
       * @type {boolean}
       */
      this.opaque_ = options.opaque !== undefined ? options.opaque : false;

      /**
       * @private
       * @type {number}
       */
      this.tilePixelRatio_ = options.tilePixelRatio !== undefined ?
        options.tilePixelRatio : 1;

      /**
       * @protected
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;

      /**
       * @protected
       * @type {import("../TileCache.js").default}
       */
      this.tileCache = new TileCache(options.cacheSize);

      /**
       * @protected
       * @type {import("../size.js").Size}
       */
      this.tmpSize = [0, 0];

      /**
       * @private
       * @type {string}
       */
      this.key_ = options.key || '';

      /**
       * @protected
       * @type {import("../Tile.js").Options}
       */
      this.tileOptions = {transition: options.transition};

    }

    if ( Source$$1 ) TileSource.__proto__ = Source$$1;
    TileSource.prototype = Object.create( Source$$1 && Source$$1.prototype );
    TileSource.prototype.constructor = TileSource;

    /**
     * @return {boolean} Can expire cache.
     */
    TileSource.prototype.canExpireCache = function canExpireCache () {
      return this.tileCache.canExpireCache();
    };

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {!Object<string, import("../TileRange.js").default>} usedTiles Used tiles.
     */
    TileSource.prototype.expireCache = function expireCache (projection, usedTiles) {
      var tileCache = this.getTileCacheForProjection(projection);
      if (tileCache) {
        tileCache.expireCache(usedTiles);
      }
    };

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {number} z Zoom level.
     * @param {import("../TileRange.js").default} tileRange Tile range.
     * @param {function(import("../Tile.js").default):(boolean|void)} callback Called with each
     *     loaded tile.  If the callback returns `false`, the tile will not be
     *     considered loaded.
     * @return {boolean} The tile range is fully covered with loaded tiles.
     */
    TileSource.prototype.forEachLoadedTile = function forEachLoadedTile (projection, z, tileRange, callback) {
      var tileCache = this.getTileCacheForProjection(projection);
      if (!tileCache) {
        return false;
      }

      var covered = true;
      var tile, tileCoordKey, loaded;
      for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
        for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
          tileCoordKey = getKeyZXY(z, x, y);
          loaded = false;
          if (tileCache.containsKey(tileCoordKey)) {
            tile = /** @type {!import("../Tile.js").default} */ (tileCache.get(tileCoordKey));
            loaded = tile.getState() === TileState.LOADED;
            if (loaded) {
              loaded = (callback(tile) !== false);
            }
          }
          if (!loaded) {
            covered = false;
          }
        }
      }
      return covered;
    };

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {number} Gutter.
     */
    TileSource.prototype.getGutterForProjection = function getGutterForProjection (projection) {
      return 0;
    };

    /**
     * Return the key to be used for all tiles in the source.
     * @return {string} The key for all tiles.
     * @protected
     */
    TileSource.prototype.getKey = function getKey () {
      return this.key_;
    };

    /**
     * Set the value to be used as the key for all tiles in the source.
     * @param {string} key The key for tiles.
     * @protected
     */
    TileSource.prototype.setKey = function setKey (key) {
      if (this.key_ !== key) {
        this.key_ = key;
        this.changed();
      }
    };

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {boolean} Opaque.
     */
    TileSource.prototype.getOpaque = function getOpaque (projection) {
      return this.opaque_;
    };

    /**
     * @inheritDoc
     */
    TileSource.prototype.getResolutions = function getResolutions () {
      return this.tileGrid.getResolutions();
    };

    /**
     * @abstract
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../Tile.js").default} Tile.
     */
    TileSource.prototype.getTile = function getTile (z, x, y, pixelRatio, projection) {
      return abstract();
    };

    /**
     * Return the tile grid of the tile source.
     * @return {import("../tilegrid/TileGrid.js").default} Tile grid.
     * @api
     */
    TileSource.prototype.getTileGrid = function getTileGrid () {
      return this.tileGrid;
    };

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
     */
    TileSource.prototype.getTileGridForProjection = function getTileGridForProjection$1 (projection) {
      if (!this.tileGrid) {
        return getForProjection(projection);
      } else {
        return this.tileGrid;
      }
    };

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../TileCache.js").default} Tile cache.
     * @protected
     */
    TileSource.prototype.getTileCacheForProjection = function getTileCacheForProjection (projection) {
      var thisProj = this.getProjection();
      if (thisProj && !equivalent(thisProj, projection)) {
        return null;
      } else {
        return this.tileCache;
      }
    };

    /**
     * Get the tile pixel ratio for this source. Subclasses may override this
     * method, which is meant to return a supported pixel ratio that matches the
     * provided `pixelRatio` as close as possible.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Tile pixel ratio.
     */
    TileSource.prototype.getTilePixelRatio = function getTilePixelRatio (pixelRatio) {
      return this.tilePixelRatio_;
    };

    /**
     * @param {number} z Z.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../size.js").Size} Tile size.
     */
    TileSource.prototype.getTilePixelSize = function getTilePixelSize (z, pixelRatio, projection) {
      var tileGrid = this.getTileGridForProjection(projection);
      var tilePixelRatio = this.getTilePixelRatio(pixelRatio);
      var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
      if (tilePixelRatio == 1) {
        return tileSize;
      } else {
        return scale$3(tileSize, tilePixelRatio, this.tmpSize);
      }
    };

    /**
     * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
     * is outside the resolution and extent range of the tile grid, `null` will be
     * returned.
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../proj/Projection.js").default=} opt_projection Projection.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
     *     null if no tile URL should be created for the passed `tileCoord`.
     */
    TileSource.prototype.getTileCoordForTileUrlFunction = function getTileCoordForTileUrlFunction (tileCoord, opt_projection) {
      var projection = opt_projection !== undefined ?
        opt_projection : this.getProjection();
      var tileGrid = this.getTileGridForProjection(projection);
      if (this.getWrapX() && projection.isGlobal()) {
        tileCoord = wrapX(tileGrid, tileCoord, projection);
      }
      return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;
    };

    /**
     * @inheritDoc
     */
    TileSource.prototype.refresh = function refresh () {
      this.tileCache.clear();
      this.changed();
    };

    /**
     * Marks a tile coord as being used, without triggering a load.
     * @abstract
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */
    TileSource.prototype.useTile = function useTile (z, x, y, projection) {};

    return TileSource;
  }(Source));


  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this
   * type.
   */
  var TileSourceEvent = /*@__PURE__*/(function (Event$$1) {
    function TileSourceEvent(type, tile) {

      Event$$1.call(this, type);

      /**
       * The tile related to the event.
       * @type {import("../Tile.js").default}
       * @api
       */
      this.tile = tile;

    }

    if ( Event$$1 ) TileSourceEvent.__proto__ = Event$$1;
    TileSourceEvent.prototype = Object.create( Event$$1 && Event$$1.prototype );
    TileSourceEvent.prototype.constructor = TileSourceEvent;

    return TileSourceEvent;
  }(Event));

  /**
   * @module ol/renderer/webgl/tilelayershader
   */

  var fragment$5 = new WebGLFragment('precision mediump float;\nvarying vec2 v_texCoord;\n\n\nuniform sampler2D u_texture;\n\nvoid main(void) {\n  gl_FragColor = texture2D(u_texture, v_texCoord);\n}\n');

  var vertex$5 = new WebGLVertex('varying vec2 v_texCoord;\n\n\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nuniform vec4 u_tileOffset;\n\nvoid main(void) {\n  gl_Position = vec4(a_position * u_tileOffset.xy + u_tileOffset.zw, 0., 1.);\n  v_texCoord = a_texCoord;\n}\n\n\n');

  /**
   * @module ol/renderer/webgl/tilelayershader/Locations
   */

  var Locations$5 = function Locations(gl, program) {

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_tileOffset = gl.getUniformLocation(
      program, 'u_tileOffset');

    /**
     * @type {WebGLUniformLocation}
     */
    this.u_texture = gl.getUniformLocation(
      program, 'u_texture');

    /**
     * @type {number}
     */
    this.a_position = gl.getAttribLocation(
      program, 'a_position');

    /**
     * @type {number}
     */
    this.a_texCoord = gl.getAttribLocation(
      program, 'a_texCoord');

  };

  /**
   * @module ol/renderer/webgl/TileLayer
   */

  /**
   * @classdesc
   * WebGL renderer for tile layers.
   * @api
   */
  var WebGLTileLayerRenderer = /*@__PURE__*/(function (WebGLLayerRenderer$$1) {
    function WebGLTileLayerRenderer(mapRenderer, tileLayer) {

      WebGLLayerRenderer$$1.call(this, mapRenderer, tileLayer);

      /**
       * @private
       * @type {import("../../webgl/Fragment.js").default}
       */
      this.fragmentShader_ = fragment$5;

      /**
       * @private
       * @type {import("../../webgl/Vertex.js").default}
       */
      this.vertexShader_ = vertex$5;

      /**
       * @private
       * @type {import("./tilelayershader/Locations.js").default}
       */
      this.locations_ = null;

      /**
       * @private
       * @type {import("../../webgl/Buffer.js").default}
       */
      this.renderArrayBuffer_ = new WebGLBuffer([
        0, 0, 0, 1,
        1, 0, 1, 1,
        0, 1, 0, 0,
        1, 1, 1, 0
      ]);

      /**
       * @private
       * @type {import("../../TileRange.js").default}
       */
      this.renderedTileRange_ = null;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.renderedFramebufferExtent_ = null;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = -1;

      /**
       * @private
       * @type {import("../../size.js").Size}
       */
      this.tmpSize_ = [0, 0];

    }

    if ( WebGLLayerRenderer$$1 ) WebGLTileLayerRenderer.__proto__ = WebGLLayerRenderer$$1;
    WebGLTileLayerRenderer.prototype = Object.create( WebGLLayerRenderer$$1 && WebGLLayerRenderer$$1.prototype );
    WebGLTileLayerRenderer.prototype.constructor = WebGLTileLayerRenderer;

    /**
     * @inheritDoc
     */
    WebGLTileLayerRenderer.prototype.disposeInternal = function disposeInternal () {
      var context = this.mapRenderer.getContext();
      context.deleteBuffer(this.renderArrayBuffer_);
      WebGLLayerRenderer$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @inheritDoc
     */
    WebGLTileLayerRenderer.prototype.createLoadedTileFinder = function createLoadedTileFinder (source, projection, tiles) {
      var mapRenderer = this.mapRenderer;

      return (
        /**
         * @param {number} zoom Zoom level.
         * @param {import("../../TileRange.js").default} tileRange Tile range.
         * @return {boolean} The tile range is fully loaded.
         */
        function(zoom, tileRange) {
          function callback(tile) {
            var loaded = mapRenderer.isTileTextureLoaded(tile);
            if (loaded) {
              if (!tiles[zoom]) {
                tiles[zoom] = {};
              }
              tiles[zoom][tile.tileCoord.toString()] = tile;
            }
            return loaded;
          }
          return source.forEachLoadedTile(projection, zoom, tileRange, callback);
        }
      );
    };

    /**
     * @inheritDoc
     */
    WebGLTileLayerRenderer.prototype.handleWebGLContextLost = function handleWebGLContextLost () {
      WebGLLayerRenderer$$1.prototype.handleWebGLContextLost.call(this);
      this.locations_ = null;
    };

    /**
     * @inheritDoc
     */
    WebGLTileLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState, context) {

      var mapRenderer = this.mapRenderer;
      var gl = context.getGL();

      var viewState = frameState.viewState;
      var projection = viewState.projection;

      var tileLayer = /** @type {import("../../layer/Tile.js").default} */ (this.getLayer());
      var tileSource = tileLayer.getSource();
      if (!(tileSource instanceof TileSource)) {
        return true;
      }

      var tileGrid = tileSource.getTileGridForProjection(projection);
      var z = tileGrid.getZForResolution(viewState.resolution);
      var tileResolution = tileGrid.getResolution(z);

      var tilePixelSize =
          tileSource.getTilePixelSize(z, frameState.pixelRatio, projection);
      var pixelRatio = tilePixelSize[0] /
          toSize(tileGrid.getTileSize(z), this.tmpSize_)[0];
      var tilePixelResolution = tileResolution / pixelRatio;
      var tileGutter = tileSource.getTilePixelRatio(pixelRatio) * tileSource.getGutterForProjection(projection);

      var center = viewState.center;
      var extent = frameState.extent;
      var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);

      var framebufferExtent;
      if (this.renderedTileRange_ &&
          this.renderedTileRange_.equals(tileRange) &&
          this.renderedRevision_ == tileSource.getRevision()) {
        framebufferExtent = this.renderedFramebufferExtent_;
      } else {

        var tileRangeSize = tileRange.getSize();

        var maxDimension = Math.max(
          tileRangeSize[0] * tilePixelSize[0],
          tileRangeSize[1] * tilePixelSize[1]);
        var framebufferDimension = roundUpToPowerOfTwo(maxDimension);
        var framebufferExtentDimension = tilePixelResolution * framebufferDimension;
        var origin = tileGrid.getOrigin(z);
        var minX = origin[0] +
            tileRange.minX * tilePixelSize[0] * tilePixelResolution;
        var minY = origin[1] +
            tileRange.minY * tilePixelSize[1] * tilePixelResolution;
        framebufferExtent = [
          minX, minY,
          minX + framebufferExtentDimension, minY + framebufferExtentDimension
        ];

        this.bindFramebuffer(frameState, framebufferDimension);
        gl.viewport(0, 0, framebufferDimension, framebufferDimension);

        gl.clearColor(0, 0, 0, 0);
        gl.clear(COLOR_BUFFER_BIT);
        gl.disable(BLEND);

        var program = context.getProgram(this.fragmentShader_, this.vertexShader_);
        context.useProgram(program);
        if (!this.locations_) {
          this.locations_ = new Locations$5(gl, program);
        }

        context.bindBuffer(ARRAY_BUFFER, this.renderArrayBuffer_);
        gl.enableVertexAttribArray(this.locations_.a_position);
        gl.vertexAttribPointer(
          this.locations_.a_position, 2, FLOAT, false, 16, 0);
        gl.enableVertexAttribArray(this.locations_.a_texCoord);
        gl.vertexAttribPointer(
          this.locations_.a_texCoord, 2, FLOAT, false, 16, 8);
        gl.uniform1i(this.locations_.u_texture, 0);

        /**
         * @type {Object<number, Object<string, import("../../Tile.js").default>>}
         */
        var tilesToDrawByZ = {};
        tilesToDrawByZ[z] = {};

        var findLoadedTiles = this.createLoadedTileFinder(
          tileSource, projection, tilesToDrawByZ);

        var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
        var allTilesLoaded = true;
        var tmpExtent = createEmpty();
        var tmpTileRange = new TileRange(0, 0, 0, 0);
        var childTileRange, drawable, fullyLoaded, tile, tileState;
        var x, y, tileExtent;
        for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
          for (y = tileRange.minY; y <= tileRange.maxY; ++y) {

            tile = tileSource.getTile(z, x, y, pixelRatio, projection);
            if (layerState.extent !== undefined) {
              // ignore tiles outside layer extent
              tileExtent = tileGrid.getTileCoordExtent(tile.tileCoord, tmpExtent);
              if (!intersects(tileExtent, layerState.extent)) {
                continue;
              }
            }
            tileState = tile.getState();
            drawable = tileState == TileState.LOADED ||
                tileState == TileState.EMPTY ||
                tileState == TileState.ERROR && !useInterimTilesOnError;
            if (!drawable) {
              tile = tile.getInterimTile();
            }
            tileState = tile.getState();
            if (tileState == TileState.LOADED) {
              if (mapRenderer.isTileTextureLoaded(tile)) {
                tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
                continue;
              }
            } else if (tileState == TileState.EMPTY ||
                       (tileState == TileState.ERROR &&
                        !useInterimTilesOnError)) {
              continue;
            }

            allTilesLoaded = false;
            fullyLoaded = tileGrid.forEachTileCoordParentTileRange(
              tile.tileCoord, findLoadedTiles, null, tmpTileRange, tmpExtent);
            if (!fullyLoaded) {
              childTileRange = tileGrid.getTileCoordChildTileRange(
                tile.tileCoord, tmpTileRange, tmpExtent);
              if (childTileRange) {
                findLoadedTiles(z + 1, childTileRange);
              }
            }

          }

        }

        /** @type {Array<number>} */
        var zs = Object.keys(tilesToDrawByZ).map(Number);
        zs.sort(numberSafeCompareFunction);
        var u_tileOffset = new Float32Array(4);
        for (var i = 0, ii = zs.length; i < ii; ++i) {
          var tilesToDraw = tilesToDrawByZ[zs[i]];
          for (var tileKey in tilesToDraw) {
            tile = tilesToDraw[tileKey];

            if (!(tile instanceof ImageTile)) {
              continue;
            }

            tileExtent = tileGrid.getTileCoordExtent(tile.tileCoord, tmpExtent);
            u_tileOffset[0] = 2 * (tileExtent[2] - tileExtent[0]) /
                framebufferExtentDimension;
            u_tileOffset[1] = 2 * (tileExtent[3] - tileExtent[1]) /
                framebufferExtentDimension;
            u_tileOffset[2] = 2 * (tileExtent[0] - framebufferExtent[0]) /
                framebufferExtentDimension - 1;
            u_tileOffset[3] = 2 * (tileExtent[1] - framebufferExtent[1]) /
                framebufferExtentDimension - 1;
            gl.uniform4fv(this.locations_.u_tileOffset, u_tileOffset);
            mapRenderer.bindTileTexture(tile, tilePixelSize,
              tileGutter * pixelRatio, LINEAR, LINEAR);
            gl.drawArrays(TRIANGLE_STRIP, 0, 4);
          }
        }

        if (allTilesLoaded) {
          this.renderedTileRange_ = tileRange;
          this.renderedFramebufferExtent_ = framebufferExtent;
          this.renderedRevision_ = tileSource.getRevision();
        } else {
          this.renderedTileRange_ = null;
          this.renderedFramebufferExtent_ = null;
          this.renderedRevision_ = -1;
          frameState.animate = true;
        }

      }

      this.updateUsedTiles(frameState.usedTiles, tileSource, z, tileRange);
      var tileTextureQueue = mapRenderer.getTileTextureQueue();
      this.manageTilePyramid(
        frameState, tileSource, tileGrid, pixelRatio, projection, extent, z,
        tileLayer.getPreload(),
        /**
         * @param {import("../../Tile.js").default} tile Tile.
         */
        function(tile) {
          if (tile.getState() == TileState.LOADED &&
                !mapRenderer.isTileTextureLoaded(tile) &&
                !tileTextureQueue.isKeyQueued(tile.getKey())) {
            tileTextureQueue.enqueue([
              tile,
              tileGrid.getTileCoordCenter(tile.tileCoord),
              tileGrid.getResolution(tile.tileCoord[0]),
              tilePixelSize, tileGutter * pixelRatio
            ]);
          }
        }, this);
      this.scheduleExpireCache(frameState, tileSource);

      var texCoordMatrix = this.texCoordMatrix;
      reset(texCoordMatrix);
      translate$1(texCoordMatrix,
        (Math.round(center[0] / tileResolution) * tileResolution - framebufferExtent[0]) /
              (framebufferExtent[2] - framebufferExtent[0]),
        (Math.round(center[1] / tileResolution) * tileResolution - framebufferExtent[1]) /
              (framebufferExtent[3] - framebufferExtent[1]));
      if (viewState.rotation !== 0) {
        rotate$2(texCoordMatrix, viewState.rotation);
      }
      scale$2(texCoordMatrix,
        frameState.size[0] * viewState.resolution /
              (framebufferExtent[2] - framebufferExtent[0]),
        frameState.size[1] * viewState.resolution /
              (framebufferExtent[3] - framebufferExtent[1]));
      translate$1(texCoordMatrix, -0.5, -0.5);

      return true;
    };

    /**
     * @inheritDoc
     */
    WebGLTileLayerRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, callback, thisArg) {
      if (!this.framebuffer) {
        return undefined;
      }

      var pixelOnMapScaled = [
        pixel[0] / frameState.size[0],
        (frameState.size[1] - pixel[1]) / frameState.size[1]];

      var pixelOnFrameBufferScaled = apply(
        this.texCoordMatrix, pixelOnMapScaled.slice());
      var pixelOnFrameBuffer = [
        pixelOnFrameBufferScaled[0] * this.framebufferDimension,
        pixelOnFrameBufferScaled[1] * this.framebufferDimension];

      var gl = this.mapRenderer.getContext().getGL();
      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
      var imageData = new Uint8Array(4);
      gl.readPixels(pixelOnFrameBuffer[0], pixelOnFrameBuffer[1], 1, 1,
        gl.RGBA, gl.UNSIGNED_BYTE, imageData);

      if (imageData[3] > 0) {
        return callback.call(thisArg, this.getLayer(), imageData);
      } else {
        return undefined;
      }
    };

    return WebGLTileLayerRenderer;
  }(WebGLLayerRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  WebGLTileLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.TILE;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {WebGLTileLayerRenderer} The layer renderer.
   */
  WebGLTileLayerRenderer['create'] = function(mapRenderer, layer) {
    return new WebGLTileLayerRenderer(
      /** @type {import("./Map.js").default} */ (mapRenderer),
      /** @type {import("../../layer/Tile.js").default} */ (layer)
    );
  };

  /**
   * @module ol/renderer/webgl/VectorLayer
   */


  /**
   * @classdesc
   * WebGL renderer for vector layers.
   * @api
   */
  var WebGLVectorLayerRenderer = /*@__PURE__*/(function (WebGLLayerRenderer$$1) {
    function WebGLVectorLayerRenderer(mapRenderer, vectorLayer) {

      WebGLLayerRenderer$$1.call(this, mapRenderer, vectorLayer);

      /**
       * @private
       * @type {boolean}
       */
      this.dirty_ = false;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.renderedResolution_ = NaN;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.renderedExtent_ = createEmpty();

      /**
       * @private
       * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}
       */
      this.renderedRenderOrder_ = null;

      /**
       * @private
       * @type {import("../../render/webgl/ReplayGroup.js").default}
       */
      this.replayGroup_ = null;

      /**
       * The last layer state.
       * @private
       * @type {?import("../../layer/Layer.js").State}
       */
      this.layerState_ = null;

    }

    if ( WebGLLayerRenderer$$1 ) WebGLVectorLayerRenderer.__proto__ = WebGLLayerRenderer$$1;
    WebGLVectorLayerRenderer.prototype = Object.create( WebGLLayerRenderer$$1 && WebGLLayerRenderer$$1.prototype );
    WebGLVectorLayerRenderer.prototype.constructor = WebGLVectorLayerRenderer;

    /**
     * @inheritDoc
     */
    WebGLVectorLayerRenderer.prototype.composeFrame = function composeFrame (frameState, layerState, context) {
      this.layerState_ = layerState;
      var viewState = frameState.viewState;
      var replayGroup = this.replayGroup_;
      var size = frameState.size;
      var pixelRatio = frameState.pixelRatio;
      var gl = this.mapRenderer.getGL();
      if (replayGroup && !replayGroup.isEmpty()) {
        gl.enable(gl.SCISSOR_TEST);
        gl.scissor(0, 0, size[0] * pixelRatio, size[1] * pixelRatio);
        replayGroup.replay(context,
          viewState.center, viewState.resolution, viewState.rotation,
          size, pixelRatio, layerState.opacity,
          layerState.managed ? frameState.skippedFeatureUids : {});
        gl.disable(gl.SCISSOR_TEST);
      }

    };

    /**
     * @inheritDoc
     */
    WebGLVectorLayerRenderer.prototype.disposeInternal = function disposeInternal () {
      var replayGroup = this.replayGroup_;
      if (replayGroup) {
        var context = this.mapRenderer.getContext();
        replayGroup.getDeleteResourcesFunction(context)();
        this.replayGroup_ = null;
      }
      WebGLLayerRenderer$$1.prototype.disposeInternal.call(this);
    };

    /**
     * @inheritDoc
     */
    WebGLVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (coordinate, frameState, hitTolerance, callback, thisArg) {
      if (!this.replayGroup_ || !this.layerState_) {
        return undefined;
      } else {
        var context = this.mapRenderer.getContext();
        var viewState = frameState.viewState;
        var layer = this.getLayer();
        var layerState = this.layerState_;
        /** @type {!Object<string, boolean>} */
        var features = {};
        return this.replayGroup_.forEachFeatureAtCoordinate(coordinate,
          context, viewState.center, viewState.resolution, viewState.rotation,
          frameState.size, frameState.pixelRatio, layerState.opacity,
          {},
          /**
           * @param {import("../../Feature.js").FeatureLike} feature Feature.
           * @return {?} Callback result.
           */
          function(feature) {
            var key = getUid(feature);
            if (!(key in features)) {
              features[key] = true;
              return callback.call(thisArg, feature, layer);
            }
          });
      }
    };

    /**
     * @inheritDoc
     */
    WebGLVectorLayerRenderer.prototype.hasFeatureAtCoordinate = function hasFeatureAtCoordinate (coordinate, frameState) {
      if (!this.replayGroup_ || !this.layerState_) {
        return false;
      } else {
        var context = this.mapRenderer.getContext();
        var viewState = frameState.viewState;
        var layerState = this.layerState_;
        return this.replayGroup_.hasFeatureAtCoordinate(coordinate,
          context, viewState.center, viewState.resolution, viewState.rotation,
          frameState.size, frameState.pixelRatio, layerState.opacity,
          frameState.skippedFeatureUids);
      }
    };

    /**
     * @inheritDoc
     */
    WebGLVectorLayerRenderer.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, frameState, callback, thisArg) {
      var coordinate = apply(
        frameState.pixelToCoordinateTransform, pixel.slice());
      var hasFeature = this.hasFeatureAtCoordinate(coordinate, frameState);

      if (hasFeature) {
        return callback.call(thisArg, this.getLayer(), null);
      } else {
        return undefined;
      }
    };

    /**
     * Handle changes in image style state.
     * @param {import("../../events/Event.js").default} event Image style change event.
     * @private
     */
    WebGLVectorLayerRenderer.prototype.handleStyleImageChange_ = function handleStyleImageChange_ (event) {
      this.renderIfReadyAndVisible();
    };

    /**
     * @inheritDoc
     */
    WebGLVectorLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState, context) {
      var vectorLayer = /** @type {import("../../layer/Vector.js").default} */ (this.getLayer());
      var vectorSource = /** @type {import("../../source/Vector.js").default} */ (vectorLayer.getSource());

      var animating = frameState.viewHints[ViewHint.ANIMATING];
      var interacting = frameState.viewHints[ViewHint.INTERACTING];
      var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
      var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();

      if (!this.dirty_ && (!updateWhileAnimating && animating) ||
          (!updateWhileInteracting && interacting)) {
        return true;
      }

      var frameStateExtent = frameState.extent;
      var viewState = frameState.viewState;
      var projection = viewState.projection;
      var resolution = viewState.resolution;
      var pixelRatio = frameState.pixelRatio;
      var vectorLayerRevision = vectorLayer.getRevision();
      var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
      var vectorLayerRenderOrder = vectorLayer.getRenderOrder();

      if (vectorLayerRenderOrder === undefined) {
        vectorLayerRenderOrder = defaultOrder;
      }

      var extent = buffer(frameStateExtent,
        vectorLayerRenderBuffer * resolution);

      if (!this.dirty_ &&
          this.renderedResolution_ == resolution &&
          this.renderedRevision_ == vectorLayerRevision &&
          this.renderedRenderOrder_ == vectorLayerRenderOrder &&
          containsExtent(this.renderedExtent_, extent)) {
        return true;
      }

      if (this.replayGroup_) {
        frameState.postRenderFunctions.push(
          this.replayGroup_.getDeleteResourcesFunction(context));
      }

      this.dirty_ = false;

      var replayGroup = new WebGLReplayGroup(
        getTolerance(resolution, pixelRatio),
        extent, vectorLayer.getRenderBuffer());
      vectorSource.loadFeatures(extent, resolution, projection);
      /**
       * @param {import("../../Feature.js").default} feature Feature.
       * @this {WebGLVectorLayerRenderer}
       */
      var render = function(feature) {
        var styles;
        var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
        if (styleFunction) {
          styles = styleFunction(feature, resolution);
        }
        if (styles) {
          var dirty = this.renderFeature(
            feature, resolution, pixelRatio, styles, replayGroup);
          this.dirty_ = this.dirty_ || dirty;
        }
      }.bind(this);
      if (vectorLayerRenderOrder) {
        /** @type {Array<import("../../Feature.js").default>} */
        var features = [];
        vectorSource.forEachFeatureInExtent(extent,
          /**
           * @param {import("../../Feature.js").default} feature Feature.
           */
          function(feature) {
            features.push(feature);
          });
        features.sort(vectorLayerRenderOrder);
        features.forEach(render.bind(this));
      } else {
        vectorSource.forEachFeatureInExtent(extent, render);
      }
      replayGroup.finish(context);

      this.renderedResolution_ = resolution;
      this.renderedRevision_ = vectorLayerRevision;
      this.renderedRenderOrder_ = vectorLayerRenderOrder;
      this.renderedExtent_ = extent;
      this.replayGroup_ = replayGroup;

      return true;
    };

    /**
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of
     *     styles.
     * @param {import("../../render/webgl/ReplayGroup.js").default} replayGroup Replay group.
     * @return {boolean} `true` if an image is loading.
     */
    WebGLVectorLayerRenderer.prototype.renderFeature = function renderFeature$1 (feature, resolution, pixelRatio, styles, replayGroup) {
      if (!styles) {
        return false;
      }
      var loading = false;
      if (Array.isArray(styles)) {
        for (var i = styles.length - 1, ii = 0; i >= ii; --i) {
          loading = renderFeature(
            replayGroup, feature, styles[i],
            getSquaredTolerance(resolution, pixelRatio),
            this.handleStyleImageChange_, this) || loading;
        }
      } else {
        loading = renderFeature(
          replayGroup, feature, styles,
          getSquaredTolerance(resolution, pixelRatio),
          this.handleStyleImageChange_, this) || loading;
      }
      return loading;
    };

    return WebGLVectorLayerRenderer;
  }(WebGLLayerRenderer));


  /**
   * Determine if this renderer handles the provided layer.
   * @param {import("../../layer/Layer.js").default} layer The candidate layer.
   * @return {boolean} The renderer can render the layer.
   */
  WebGLVectorLayerRenderer['handles'] = function(layer) {
    return layer.getType() === LayerType.VECTOR;
  };


  /**
   * Create a layer renderer.
   * @param {import("../Map.js").default} mapRenderer The map renderer.
   * @param {import("../../layer/Layer.js").default} layer The layer to be rendererd.
   * @return {WebGLVectorLayerRenderer} The layer renderer.
   */
  WebGLVectorLayerRenderer['create'] = function(mapRenderer, layer) {
    return new WebGLVectorLayerRenderer(
      /** @type {import("./Map.js").default} */ (mapRenderer),
      /** @type {import("../../layer/Vector.js").default} */ (layer)
    );
  };

  /**
   * @module ol/WebGLMap
   */


  /**
   * @classdesc
   * The WebGLMap uses WebGL for rendering map layers.  This renderer has limited
   * support for vector data and no support for vector tiles.
   *
   *     import WebGLMap from 'ol/WebGLMap';
   *     import TileLayer from 'ol/layer/Tile';
   *     import OSM from 'ol/source/OSM';
   *     import View from 'ol/View';
   *
   *     var map = new WebGLMap({
   *       view: new View({
   *         center: [0, 0],
   *         zoom: 1
   *       }),
   *       layers: [
   *         new TileLayer({
   *           source: new OSM()
   *         })
   *       ],
   *       target: 'map'
   *     });
   *
   * The above snippet creates a map using a {@link module:ol/layer/Tile~Tile} to
   * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
   * element with the id `map`.
   *
   * The constructor places a viewport container (with CSS class name
   * `ol-viewport`) in the target element (see `getViewport()`), and then two
   * further elements within the viewport: one with CSS class name
   * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
   * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
   * option of {@link module:ol/Overlay~Overlay} for the difference). The map
   * itself is placed in a further element within the viewport.
   *
   * Layers are stored as a {@link module:ol/Collection~Collection} in
   * layerGroups. A top-level group is provided by the library. This is what is
   * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
   * options are added to this group, and `addLayer` and `removeLayer` change the
   * layer collection in the group. `getLayers` is a convenience function for
   * `getLayerGroup().getLayers()`.
   * Note that {@link module:ol/layer/Group~Group} is a subclass of
   * {@link module:ol/layer/Base}, so layers entered in the options or added
   * with `addLayer` can be groups, which can contain further groups, and so on.
   *
   * @fires import("./MapBrowserEvent.js").MapBrowserEvent
   * @fires import("./MapEvent.js").MapEvent
   * @fires module:ol/render/Event~RenderEvent#postcompose
   * @fires module:ol/render/Event~RenderEvent#precompose
   * @api
   */
  var WebGLMap = /*@__PURE__*/(function (PluggableMap$$1) {
    function WebGLMap(options) {
      options = assign({}, options);
      if (!options.controls) {
        options.controls = defaults();
      }
      if (!options.interactions) {
        options.interactions = defaults$1();
      }

      PluggableMap$$1.call(this, options);
    }

    if ( PluggableMap$$1 ) WebGLMap.__proto__ = PluggableMap$$1;
    WebGLMap.prototype = Object.create( PluggableMap$$1 && PluggableMap$$1.prototype );
    WebGLMap.prototype.constructor = WebGLMap;

    WebGLMap.prototype.createRenderer = function createRenderer () {
      var renderer = new WebGLMapRenderer(this);
      renderer.registerLayerRenderers([
        WebGLImageLayerRenderer,
        WebGLTileLayerRenderer,
        WebGLVectorLayerRenderer
      ]);
      return renderer;
    };

    return WebGLMap;
  }(PluggableMap));

  /**
   * @module ol/layer/TileProperty
   */

  /**
   * @enum {string}
   */
  var TileProperty = {
    PRELOAD: 'preload',
    USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError'
  };

  /**
   * @module ol/layer/Tile
   */


  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
   * means no preloading.
   * @property {import("../source/Tile.js").default} [source] Source for this layer.
   * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map#addLayer}.
   * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
   */

  /**
   * @classdesc
   * For layer sources that provide pre-rendered, tiled images in grids that are
   * organized by zoom levels for specific resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @api
   */
  var TileLayer = /*@__PURE__*/(function (Layer$$1) {
    function TileLayer(opt_options) {
      var options = opt_options ? opt_options : {};

      var baseOptions = assign({}, options);

      delete baseOptions.preload;
      delete baseOptions.useInterimTilesOnError;
      Layer$$1.call(this, baseOptions);

      this.setPreload(options.preload !== undefined ? options.preload : 0);
      this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ?
        options.useInterimTilesOnError : true);

      /**
      * The layer type.
      * @protected
      * @type {import("../LayerType.js").default}
      */
      this.type = LayerType.TILE;

    }

    if ( Layer$$1 ) TileLayer.__proto__ = Layer$$1;
    TileLayer.prototype = Object.create( Layer$$1 && Layer$$1.prototype );
    TileLayer.prototype.constructor = TileLayer;

    /**
    * Return the level as number to which we will preload tiles up to.
    * @return {number} The level to preload tiles up to.
    * @observable
    * @api
    */
    TileLayer.prototype.getPreload = function getPreload () {
      return /** @type {number} */ (this.get(TileProperty.PRELOAD));
    };

    /**
    * Set the level as number to which we will preload tiles up to.
    * @param {number} preload The level to preload tiles up to.
    * @observable
    * @api
    */
    TileLayer.prototype.setPreload = function setPreload (preload) {
      this.set(TileProperty.PRELOAD, preload);
    };

    /**
    * Whether we use interim tiles on error.
    * @return {boolean} Use interim tiles on error.
    * @observable
    * @api
    */
    TileLayer.prototype.getUseInterimTilesOnError = function getUseInterimTilesOnError () {
      return /** @type {boolean} */ (this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR));
    };

    /**
    * Set whether we use interim tiles on error.
    * @param {boolean} useInterimTilesOnError Use interim tiles on error.
    * @observable
    * @api
    */
    TileLayer.prototype.setUseInterimTilesOnError = function setUseInterimTilesOnError (useInterimTilesOnError) {
      this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
    };

    return TileLayer;
  }(Layer));


  /**
   * Return the associated {@link module:ol/source/Tile tilesource} of the layer.
   * @function
   * @return {import("../source/Tile.js").default} Source.
   * @api
   */
  TileLayer.prototype.getSource;

  /**
   * @module ol/reproj
   */


  /**
   * Calculates ideal resolution to use from the source in order to achieve
   * pixel mapping as close as possible to 1:1 during reprojection.
   * The resolution is calculated regardless of what resolutions
   * are actually available in the dataset (TileGrid, Image, ...).
   *
   * @param {import("./proj/Projection.js").default} sourceProj Source projection.
   * @param {import("./proj/Projection.js").default} targetProj Target projection.
   * @param {import("./coordinate.js").Coordinate} targetCenter Target center.
   * @param {number} targetResolution Target resolution.
   * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
   */
  function calculateSourceResolution(sourceProj, targetProj,
    targetCenter, targetResolution) {

    var sourceCenter = transform(targetCenter, targetProj, sourceProj);

    // calculate the ideal resolution of the source data
    var sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);

    var targetMetersPerUnit = targetProj.getMetersPerUnit();
    if (targetMetersPerUnit !== undefined) {
      sourceResolution *= targetMetersPerUnit;
    }
    var sourceMetersPerUnit = sourceProj.getMetersPerUnit();
    if (sourceMetersPerUnit !== undefined) {
      sourceResolution /= sourceMetersPerUnit;
    }

    // Based on the projection properties, the point resolution at the specified
    // coordinates may be slightly different. We need to reverse-compensate this
    // in order to achieve optimal results.

    var sourceExtent = sourceProj.getExtent();
    if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {
      var compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) /
          sourceResolution;
      if (isFinite(compensationFactor) && compensationFactor > 0) {
        sourceResolution /= compensationFactor;
      }
    }

    return sourceResolution;
  }


  /**
   * Enlarge the clipping triangle point by 1 pixel to ensure the edges overlap
   * in order to mask gaps caused by antialiasing.
   *
   * @param {number} centroidX Centroid of the triangle (x coordinate in pixels).
   * @param {number} centroidY Centroid of the triangle (y coordinate in pixels).
   * @param {number} x X coordinate of the point (in pixels).
   * @param {number} y Y coordinate of the point (in pixels).
   * @return {import("./coordinate.js").Coordinate} New point 1 px farther from the centroid.
   */
  function enlargeClipPoint(centroidX, centroidY, x, y) {
    var dX = x - centroidX;
    var dY = y - centroidY;
    var distance = Math.sqrt(dX * dX + dY * dY);
    return [Math.round(x + dX / distance), Math.round(y + dY / distance)];
  }


  /**
   * Renders the source data into new canvas based on the triangulation.
   *
   * @param {number} width Width of the canvas.
   * @param {number} height Height of the canvas.
   * @param {number} pixelRatio Pixel ratio.
   * @param {number} sourceResolution Source resolution.
   * @param {import("./extent.js").Extent} sourceExtent Extent of the data source.
   * @param {number} targetResolution Target resolution.
   * @param {import("./extent.js").Extent} targetExtent Target extent.
   * @param {import("./reproj/Triangulation.js").default} triangulation
   * Calculated triangulation.
   * @param {Array<{extent: import("./extent.js").Extent,
   *                 image: (HTMLCanvasElement|HTMLImageElement|HTMLVideoElement)}>} sources
   * Array of sources.
   * @param {number} gutter Gutter of the sources.
   * @param {boolean=} opt_renderEdges Render reprojection edges.
   * @return {HTMLCanvasElement} Canvas with reprojected data.
   */
  function render$6(width, height, pixelRatio,
    sourceResolution, sourceExtent, targetResolution, targetExtent,
    triangulation, sources, gutter, opt_renderEdges) {

    var context = createCanvasContext2D(Math.round(pixelRatio * width),
      Math.round(pixelRatio * height));

    if (sources.length === 0) {
      return context.canvas;
    }

    context.scale(pixelRatio, pixelRatio);

    var sourceDataExtent = createEmpty();
    sources.forEach(function(src, i, arr) {
      extend$1(sourceDataExtent, src.extent);
    });

    var canvasWidthInUnits = getWidth(sourceDataExtent);
    var canvasHeightInUnits = getHeight(sourceDataExtent);
    var stitchContext = createCanvasContext2D(
      Math.round(pixelRatio * canvasWidthInUnits / sourceResolution),
      Math.round(pixelRatio * canvasHeightInUnits / sourceResolution));

    var stitchScale = pixelRatio / sourceResolution;

    sources.forEach(function(src, i, arr) {
      var xPos = src.extent[0] - sourceDataExtent[0];
      var yPos = -(src.extent[3] - sourceDataExtent[3]);
      var srcWidth = getWidth(src.extent);
      var srcHeight = getHeight(src.extent);

      stitchContext.drawImage(
        src.image,
        gutter, gutter,
        src.image.width - 2 * gutter, src.image.height - 2 * gutter,
        xPos * stitchScale, yPos * stitchScale,
        srcWidth * stitchScale, srcHeight * stitchScale);
    });

    var targetTopLeft = getTopLeft(targetExtent);

    triangulation.getTriangles().forEach(function(triangle, i, arr) {
      /* Calculate affine transform (src -> dst)
       * Resulting matrix can be used to transform coordinate
       * from `sourceProjection` to destination pixels.
       *
       * To optimize number of context calls and increase numerical stability,
       * we also do the following operations:
       * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)
       * here before solving the linear system so [ui, vi] are pixel coordinates.
       *
       * Src points: xi, yi
       * Dst points: ui, vi
       * Affine coefficients: aij
       *
       * | x0 y0 1  0  0 0 |   |a00|   |u0|
       * | x1 y1 1  0  0 0 |   |a01|   |u1|
       * | x2 y2 1  0  0 0 | x |a02| = |u2|
       * |  0  0 0 x0 y0 1 |   |a10|   |v0|
       * |  0  0 0 x1 y1 1 |   |a11|   |v1|
       * |  0  0 0 x2 y2 1 |   |a12|   |v2|
       */
      var source = triangle.source;
      var target = triangle.target;
      var x0 = source[0][0], y0 = source[0][1];
      var x1 = source[1][0], y1 = source[1][1];
      var x2 = source[2][0], y2 = source[2][1];
      var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
      var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
      var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
      var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
      var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
      var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;

      // Shift all the source points to improve numerical stability
      // of all the subsequent calculations. The [x0, y0] is used here.
      // This is also used to simplify the linear system.
      var sourceNumericalShiftX = x0;
      var sourceNumericalShiftY = y0;
      x0 = 0;
      y0 = 0;
      x1 -= sourceNumericalShiftX;
      y1 -= sourceNumericalShiftY;
      x2 -= sourceNumericalShiftX;
      y2 -= sourceNumericalShiftY;

      var augmentedMatrix = [
        [x1, y1, 0, 0, u1 - u0],
        [x2, y2, 0, 0, u2 - u0],
        [0, 0, x1, y1, v1 - v0],
        [0, 0, x2, y2, v2 - v0]
      ];
      var affineCoefs = solveLinearSystem(augmentedMatrix);
      if (!affineCoefs) {
        return;
      }

      context.save();
      context.beginPath();
      var centroidX = (u0 + u1 + u2) / 3;
      var centroidY = (v0 + v1 + v2) / 3;
      var p0 = enlargeClipPoint(centroidX, centroidY, u0, v0);
      var p1 = enlargeClipPoint(centroidX, centroidY, u1, v1);
      var p2 = enlargeClipPoint(centroidX, centroidY, u2, v2);

      context.moveTo(p1[0], p1[1]);
      context.lineTo(p0[0], p0[1]);
      context.lineTo(p2[0], p2[1]);
      context.clip();

      context.transform(
        affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);

      context.translate(sourceDataExtent[0] - sourceNumericalShiftX,
        sourceDataExtent[3] - sourceNumericalShiftY);

      context.scale(sourceResolution / pixelRatio,
        -sourceResolution / pixelRatio);

      context.drawImage(stitchContext.canvas, 0, 0);
      context.restore();
    });

    if (opt_renderEdges) {
      context.save();

      context.strokeStyle = 'black';
      context.lineWidth = 1;

      triangulation.getTriangles().forEach(function(triangle, i, arr) {
        var target = triangle.target;
        var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
        var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
        var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
        var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
        var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
        var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;

        context.beginPath();
        context.moveTo(u1, v1);
        context.lineTo(u0, v0);
        context.lineTo(u2, v2);
        context.closePath();
        context.stroke();
      });

      context.restore();
    }
    return context.canvas;
  }

  /**
   * @module ol/reproj/Triangulation
   */


  /**
   * Single triangle; consists of 3 source points and 3 target points.
   * @typedef {Object} Triangle
   * @property {Array<import("../coordinate.js").Coordinate>} source
   * @property {Array<import("../coordinate.js").Coordinate>} target
   */


  /**
   * Maximum number of subdivision steps during raster reprojection triangulation.
   * Prevents high memory usage and large number of proj4 calls (for certain
   * transformations and areas). At most `2*(2^this)` triangles are created for
   * each triangulated extent (tile/image).
   * @type {number}
   */
  var MAX_SUBDIVISION = 10;


  /**
   * Maximum allowed size of triangle relative to world width. When transforming
   * corners of world extent between certain projections, the resulting
   * triangulation seems to have zero error and no subdivision is performed. If
   * the triangle width is more than this (relative to world width; 0-1),
   * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.
   * @type {number}
   */
  var MAX_TRIANGLE_WIDTH = 0.25;


  /**
   * @classdesc
   * Class containing triangulation of the given target extent.
   * Used for determining source data and the reprojection itself.
   */
  var Triangulation = function Triangulation(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold) {

    /**
     * @type {import("../proj/Projection.js").default}
     * @private
     */
    this.sourceProj_ = sourceProj;

    /**
     * @type {import("../proj/Projection.js").default}
     * @private
     */
    this.targetProj_ = targetProj;

    /** @type {!Object<string, import("../coordinate.js").Coordinate>} */
    var transformInvCache = {};
    var transformInv = getTransform(this.targetProj_, this.sourceProj_);

    /**
     * @param {import("../coordinate.js").Coordinate} c A coordinate.
     * @return {import("../coordinate.js").Coordinate} Transformed coordinate.
     * @private
     */
    this.transformInv_ = function(c) {
      var key = c[0] + '/' + c[1];
      if (!transformInvCache[key]) {
        transformInvCache[key] = transformInv(c);
      }
      return transformInvCache[key];
    };

    /**
     * @type {import("../extent.js").Extent}
     * @private
     */
    this.maxSourceExtent_ = maxSourceExtent;

    /**
     * @type {number}
     * @private
     */
    this.errorThresholdSquared_ = errorThreshold * errorThreshold;

    /**
     * @type {Array<Triangle>}
     * @private
     */
    this.triangles_ = [];

    /**
     * Indicates that the triangulation crosses edge of the source projection.
     * @type {boolean}
     * @private
     */
    this.wrapsXInSource_ = false;

    /**
     * @type {boolean}
     * @private
     */
    this.canWrapXInSource_ = this.sourceProj_.canWrapX() &&
        !!maxSourceExtent &&
        !!this.sourceProj_.getExtent() &&
        (getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent()));

    /**
     * @type {?number}
     * @private
     */
    this.sourceWorldWidth_ = this.sourceProj_.getExtent() ?
      getWidth(this.sourceProj_.getExtent()) : null;

    /**
     * @type {?number}
     * @private
     */
    this.targetWorldWidth_ = this.targetProj_.getExtent() ?
      getWidth(this.targetProj_.getExtent()) : null;

    var destinationTopLeft = getTopLeft(targetExtent);
    var destinationTopRight = getTopRight(targetExtent);
    var destinationBottomRight = getBottomRight(targetExtent);
    var destinationBottomLeft = getBottomLeft(targetExtent);
    var sourceTopLeft = this.transformInv_(destinationTopLeft);
    var sourceTopRight = this.transformInv_(destinationTopRight);
    var sourceBottomRight = this.transformInv_(destinationBottomRight);
    var sourceBottomLeft = this.transformInv_(destinationBottomLeft);

    this.addQuad_(
      destinationTopLeft, destinationTopRight,
      destinationBottomRight, destinationBottomLeft,
      sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft,
      MAX_SUBDIVISION);

    if (this.wrapsXInSource_) {
      var leftBound = Infinity;
      this.triangles_.forEach(function(triangle, i, arr) {
        leftBound = Math.min(leftBound,
          triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);
      });

      // Shift triangles to be as close to `leftBound` as possible
      // (if the distance is more than `worldWidth / 2` it can be closer.
      this.triangles_.forEach(function(triangle) {
        if (Math.max(triangle.source[0][0], triangle.source[1][0],
          triangle.source[2][0]) - leftBound > this.sourceWorldWidth_ / 2) {
          var newTriangle = [[triangle.source[0][0], triangle.source[0][1]],
            [triangle.source[1][0], triangle.source[1][1]],
            [triangle.source[2][0], triangle.source[2][1]]];
          if ((newTriangle[0][0] - leftBound) > this.sourceWorldWidth_ / 2) {
            newTriangle[0][0] -= this.sourceWorldWidth_;
          }
          if ((newTriangle[1][0] - leftBound) > this.sourceWorldWidth_ / 2) {
            newTriangle[1][0] -= this.sourceWorldWidth_;
          }
          if ((newTriangle[2][0] - leftBound) > this.sourceWorldWidth_ / 2) {
            newTriangle[2][0] -= this.sourceWorldWidth_;
          }

          // Rarely (if the extent contains both the dateline and prime meridian)
          // the shift can in turn break some triangles.
          // Detect this here and don't shift in such cases.
          var minX = Math.min(
            newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
          var maxX = Math.max(
            newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
          if ((maxX - minX) < this.sourceWorldWidth_ / 2) {
            triangle.source = newTriangle;
          }
        }
      }.bind(this));
    }

    transformInvCache = {};
  };

  /**
   * Adds triangle to the triangulation.
   * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
   * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
   * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
   * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
   * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
   * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
   * @private
   */
  Triangulation.prototype.addTriangle_ = function addTriangle_ (a, b, c, aSrc, bSrc, cSrc) {
    this.triangles_.push({
      source: [aSrc, bSrc, cSrc],
      target: [a, b, c]
    });
  };

  /**
   * Adds quad (points in clock-wise order) to the triangulation
   * (and reprojects the vertices) if valid.
   * Performs quad subdivision if needed to increase precision.
   *
   * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
   * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
   * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
   * @param {import("../coordinate.js").Coordinate} d The target d coordinate.
   * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
   * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
   * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
   * @param {import("../coordinate.js").Coordinate} dSrc The source d coordinate.
   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
   * @private
   */
  Triangulation.prototype.addQuad_ = function addQuad_ (a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {

    var sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);
    var sourceCoverageX = this.sourceWorldWidth_ ?
      getWidth(sourceQuadExtent) / this.sourceWorldWidth_ : null;
    var sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);

    // when the quad is wrapped in the source projection
    // it covers most of the projection extent, but not fully
    var wrapsX = this.sourceProj_.canWrapX() &&
                 sourceCoverageX > 0.5 && sourceCoverageX < 1;

    var needsSubdivision = false;

    if (maxSubdivision > 0) {
      if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
        var targetQuadExtent = boundingExtent([a, b, c, d]);
        var targetCoverageX = getWidth(targetQuadExtent) / this.targetWorldWidth_;
        needsSubdivision = targetCoverageX > MAX_TRIANGLE_WIDTH ||
          needsSubdivision;
      }
      if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {
        needsSubdivision = sourceCoverageX > MAX_TRIANGLE_WIDTH ||
            needsSubdivision;
      }
    }

    if (!needsSubdivision && this.maxSourceExtent_) {
      if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {
        // whole quad outside source projection extent -> ignore
        return;
      }
    }

    if (!needsSubdivision) {
      if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ||
          !isFinite(bSrc[0]) || !isFinite(bSrc[1]) ||
          !isFinite(cSrc[0]) || !isFinite(cSrc[1]) ||
          !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {
        if (maxSubdivision > 0) {
          needsSubdivision = true;
        } else {
          return;
        }
      }
    }

    if (maxSubdivision > 0) {
      if (!needsSubdivision) {
        var center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];
        var centerSrc = this.transformInv_(center);

        var dx;
        if (wrapsX) {
          var centerSrcEstimX =
              (modulo(aSrc[0], sourceWorldWidth) +
               modulo(cSrc[0], sourceWorldWidth)) / 2;
          dx = centerSrcEstimX -
              modulo(centerSrc[0], sourceWorldWidth);
        } else {
          dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];
        }
        var dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];
        var centerSrcErrorSquared = dx * dx + dy * dy;
        needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;
      }
      if (needsSubdivision) {
        if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {
          // split horizontally (top & bottom)
          var bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];
          var bcSrc = this.transformInv_(bc);
          var da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];
          var daSrc = this.transformInv_(da);

          this.addQuad_(
            a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);
          this.addQuad_(
            da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);
        } else {
          // split vertically (left & right)
          var ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];
          var abSrc = this.transformInv_(ab);
          var cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];
          var cdSrc = this.transformInv_(cd);

          this.addQuad_(
            a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);
          this.addQuad_(
            ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);
        }
        return;
      }
    }

    if (wrapsX) {
      if (!this.canWrapXInSource_) {
        return;
      }
      this.wrapsXInSource_ = true;
    }

    this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);
    this.addTriangle_(a, b, c, aSrc, bSrc, cSrc);
  };

  /**
   * Calculates extent of the 'source' coordinates from all the triangles.
   *
   * @return {import("../extent.js").Extent} Calculated extent.
   */
  Triangulation.prototype.calculateSourceExtent = function calculateSourceExtent () {
    var extent = createEmpty();

    this.triangles_.forEach(function(triangle, i, arr) {
      var src = triangle.source;
      extendCoordinate(extent, src[0]);
      extendCoordinate(extent, src[1]);
      extendCoordinate(extent, src[2]);
    });

    return extent;
  };

  /**
   * @return {Array<Triangle>} Array of the calculated triangles.
   */
  Triangulation.prototype.getTriangles = function getTriangles () {
    return this.triangles_;
  };

  /**
   * @module ol/reproj/Tile
   */


  /**
   * @typedef {function(number, number, number, number) : import("../Tile.js").default} FunctionType
   */


  /**
   * @classdesc
   * Class encapsulating single reprojected tile.
   * See {@link module:ol/source/TileImage~TileImage}.
   *
   */
  var ReprojTile = /*@__PURE__*/(function (Tile$$1) {
    function ReprojTile(
      sourceProj,
      sourceTileGrid,
      targetProj,
      targetTileGrid,
      tileCoord,
      wrappedTileCoord,
      pixelRatio,
      gutter,
      getTileFunction,
      opt_errorThreshold,
      opt_renderEdges
    ) {
      Tile$$1.call(this, tileCoord, TileState.IDLE);

      /**
       * @private
       * @type {boolean}
       */
      this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.gutter_ = gutter;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = null;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.sourceTileGrid_ = sourceTileGrid;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.targetTileGrid_ = targetTileGrid;

      /**
       * @private
       * @type {import("../tilecoord.js").TileCoord}
       */
      this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;

      /**
       * @private
       * @type {!Array<import("../Tile.js").default>}
       */
      this.sourceTiles_ = [];

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.sourcesListenerKeys_ = null;

      /**
       * @private
       * @type {number}
       */
      this.sourceZ_ = 0;

      var targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);
      var maxTargetExtent = this.targetTileGrid_.getExtent();
      var maxSourceExtent = this.sourceTileGrid_.getExtent();

      var limitedTargetExtent = maxTargetExtent ?
        getIntersection(targetExtent, maxTargetExtent) : targetExtent;

      if (getArea(limitedTargetExtent) === 0) {
        // Tile is completely outside range -> EMPTY
        // TODO: is it actually correct that the source even creates the tile ?
        this.state = TileState.EMPTY;
        return;
      }

      var sourceProjExtent = sourceProj.getExtent();
      if (sourceProjExtent) {
        if (!maxSourceExtent) {
          maxSourceExtent = sourceProjExtent;
        } else {
          maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);
        }
      }

      var targetResolution = targetTileGrid.getResolution(
        this.wrappedTileCoord_[0]);

      var targetCenter = getCenter(limitedTargetExtent);
      var sourceResolution = calculateSourceResolution(
        sourceProj, targetProj, targetCenter, targetResolution);

      if (!isFinite(sourceResolution) || sourceResolution <= 0) {
        // invalid sourceResolution -> EMPTY
        // probably edges of the projections when no extent is defined
        this.state = TileState.EMPTY;
        return;
      }

      var errorThresholdInPixels = opt_errorThreshold !== undefined ?
        opt_errorThreshold : ERROR_THRESHOLD;

      /**
       * @private
       * @type {!import("./Triangulation.js").default}
       */
      this.triangulation_ = new Triangulation(
        sourceProj, targetProj, limitedTargetExtent, maxSourceExtent,
        sourceResolution * errorThresholdInPixels);

      if (this.triangulation_.getTriangles().length === 0) {
        // no valid triangles -> EMPTY
        this.state = TileState.EMPTY;
        return;
      }

      this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
      var sourceExtent = this.triangulation_.calculateSourceExtent();

      if (maxSourceExtent) {
        if (sourceProj.canWrapX()) {
          sourceExtent[1] = clamp(
            sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);
          sourceExtent[3] = clamp(
            sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);
        } else {
          sourceExtent = getIntersection(sourceExtent, maxSourceExtent);
        }
      }

      if (!getArea(sourceExtent)) {
        this.state = TileState.EMPTY;
      } else {
        var sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(
          sourceExtent, this.sourceZ_);

        for (var srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {
          for (var srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {
            var tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);
            if (tile) {
              this.sourceTiles_.push(tile);
            }
          }
        }

        if (this.sourceTiles_.length === 0) {
          this.state = TileState.EMPTY;
        }
      }
    }

    if ( Tile$$1 ) ReprojTile.__proto__ = Tile$$1;
    ReprojTile.prototype = Object.create( Tile$$1 && Tile$$1.prototype );
    ReprojTile.prototype.constructor = ReprojTile;

    /**
     * @inheritDoc
     */
    ReprojTile.prototype.disposeInternal = function disposeInternal () {
      if (this.state == TileState.LOADING) {
        this.unlistenSources_();
      }
      Tile$$1.prototype.disposeInternal.call(this);
    };

    /**
     * Get the HTML Canvas element for this tile.
     * @return {HTMLCanvasElement} Canvas.
     */
    ReprojTile.prototype.getImage = function getImage () {
      return this.canvas_;
    };

    /**
     * @private
     */
    ReprojTile.prototype.reproject_ = function reproject_ () {
      var sources = [];
      this.sourceTiles_.forEach(function(tile, i, arr) {
        if (tile && tile.getState() == TileState.LOADED) {
          sources.push({
            extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
            image: tile.getImage()
          });
        }
      }.bind(this));
      this.sourceTiles_.length = 0;

      if (sources.length === 0) {
        this.state = TileState.ERROR;
      } else {
        var z = this.wrappedTileCoord_[0];
        var size = this.targetTileGrid_.getTileSize(z);
        var width = typeof size === 'number' ? size : size[0];
        var height = typeof size === 'number' ? size : size[1];
        var targetResolution = this.targetTileGrid_.getResolution(z);
        var sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);

        var targetExtent = this.targetTileGrid_.getTileCoordExtent(
          this.wrappedTileCoord_);
        this.canvas_ = render$6(width, height, this.pixelRatio_,
          sourceResolution, this.sourceTileGrid_.getExtent(),
          targetResolution, targetExtent, this.triangulation_, sources,
          this.gutter_, this.renderEdges_);

        this.state = TileState.LOADED;
      }
      this.changed();
    };

    /**
     * @inheritDoc
     */
    ReprojTile.prototype.load = function load () {
      if (this.state == TileState.IDLE) {
        this.state = TileState.LOADING;
        this.changed();

        var leftToLoad = 0;

        this.sourcesListenerKeys_ = [];
        this.sourceTiles_.forEach(function(tile, i, arr) {
          var state = tile.getState();
          if (state == TileState.IDLE || state == TileState.LOADING) {
            leftToLoad++;

            var sourceListenKey = listen(tile, EventType.CHANGE,
              function(e) {
                var state = tile.getState();
                if (state == TileState.LOADED ||
                      state == TileState.ERROR ||
                      state == TileState.EMPTY) {
                  unlistenByKey(sourceListenKey);
                  leftToLoad--;
                  if (leftToLoad === 0) {
                    this.unlistenSources_();
                    this.reproject_();
                  }
                }
              }, this);
            this.sourcesListenerKeys_.push(sourceListenKey);
          }
        }.bind(this));

        this.sourceTiles_.forEach(function(tile, i, arr) {
          var state = tile.getState();
          if (state == TileState.IDLE) {
            tile.load();
          }
        });

        if (leftToLoad === 0) {
          setTimeout(this.reproject_.bind(this), 0);
        }
      }
    };

    /**
     * @private
     */
    ReprojTile.prototype.unlistenSources_ = function unlistenSources_ () {
      this.sourcesListenerKeys_.forEach(unlistenByKey);
      this.sourcesListenerKeys_ = null;
    };

    return ReprojTile;
  }(Tile));

  /**
   * @module ol/tileurlfunction
   */


  /**
   * @param {string} template Template.
   * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTemplate(template, tileGrid) {
    var zRegEx = /\{z\}/g;
    var xRegEx = /\{x\}/g;
    var yRegEx = /\{y\}/g;
    var dashYRegEx = /\{-y\}/g;
    return (
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function(tileCoord, pixelRatio, projection) {
        if (!tileCoord) {
          return undefined;
        } else {
          return template.replace(zRegEx, tileCoord[0].toString())
            .replace(xRegEx, tileCoord[1].toString())
            .replace(yRegEx, function() {
              var y = -tileCoord[2] - 1;
              return y.toString();
            })
            .replace(dashYRegEx, function() {
              var z = tileCoord[0];
              var range = tileGrid.getFullTileRange(z);
              assert(range, 55); // The {-y} placeholder requires a tile grid with extent
              var y = range.getHeight() + tileCoord[2];
              return y.toString();
            });
        }
      }
    );
  }


  /**
   * @param {Array<string>} templates Templates.
   * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTemplates(templates, tileGrid) {
    var len = templates.length;
    var tileUrlFunctions = new Array(len);
    for (var i = 0; i < len; ++i) {
      tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);
    }
    return createFromTileUrlFunctions(tileUrlFunctions);
  }


  /**
   * @param {Array<import("./Tile.js").UrlFunction>} tileUrlFunctions Tile URL Functions.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTileUrlFunctions(tileUrlFunctions) {
    if (tileUrlFunctions.length === 1) {
      return tileUrlFunctions[0];
    }
    return (
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function(tileCoord, pixelRatio, projection) {
        if (!tileCoord) {
          return undefined;
        } else {
          var h = hash(tileCoord);
          var index = modulo(h, tileUrlFunctions.length);
          return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
        }
      }
    );
  }


  /**
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {string|undefined} Tile URL.
   */
  function nullTileUrlFunction(tileCoord, pixelRatio, projection) {
    return undefined;
  }


  /**
   * @param {string} url URL.
   * @return {Array<string>} Array of urls.
   */
  function expandUrl(url) {
    var urls = [];
    var match = /\{([a-z])-([a-z])\}/.exec(url);
    if (match) {
      // char range
      var startCharCode = match[1].charCodeAt(0);
      var stopCharCode = match[2].charCodeAt(0);
      var charCode;
      for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
        urls.push(url.replace(match[0], String.fromCharCode(charCode)));
      }
      return urls;
    }
    match = match = /\{(\d+)-(\d+)\}/.exec(url);
    if (match) {
      // number range
      var stop = parseInt(match[2], 10);
      for (var i = parseInt(match[1], 10); i <= stop; i++) {
        urls.push(url.replace(match[0], i.toString()));
      }
      return urls;
    }
    urls.push(url);
    return urls;
  }

  /**
   * @module ol/source/TileEventType
   */

  /**
   * @enum {string}
   */
  var TileEventType = {

    /**
     * Triggered when a tile starts loading.
     * @event module:ol/source/Tile.TileSourceEvent#tileloadstart
     * @api
     */
    TILELOADSTART: 'tileloadstart',

    /**
     * Triggered when a tile finishes loading, either when its data is loaded,
     * or when loading was aborted because the tile is no longer needed.
     * @event module:ol/source/Tile.TileSourceEvent#tileloadend
     * @api
     */
    TILELOADEND: 'tileloadend',

    /**
     * Triggered if tile loading results in an error.
     * @event module:ol/source/Tile.TileSourceEvent#tileloaderror
     * @api
     */
    TILELOADERROR: 'tileloaderror'

  };

  /**
   * @module ol/source/UrlTile
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions]
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize]
   * @property {boolean} [opaque]
   * @property {import("../proj.js").ProjectionLike} [projection]
   * @property {import("./State.js").default} [state]
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
   * @property {import("../Tile.js").LoadFunction} tileLoadFunction
   * @property {number} [tilePixelRatio]
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction]
   * @property {string} [url]
   * @property {Array<string>} [urls]
   * @property {boolean} [wrapX=true]
   * @property {number} [transition]
   * @property {string} [key]
   */


  /**
   * @classdesc
   * Base class for sources providing tiles divided into a tile grid over http.
   *
   * @fires import("./Tile.js").TileSourceEvent
   */
  var UrlTile = /*@__PURE__*/(function (TileSource$$1) {
    function UrlTile(options) {

      TileSource$$1.call(this, {
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        opaque: options.opaque,
        projection: options.projection,
        state: options.state,
        tileGrid: options.tileGrid,
        tilePixelRatio: options.tilePixelRatio,
        wrapX: options.wrapX,
        transition: options.transition,
        key: options.key,
        attributionsCollapsible: options.attributionsCollapsible
      });

      /**
       * @private
       * @type {boolean}
       */
      this.generateTileUrlFunction_ = !options.tileUrlFunction;

      /**
       * @protected
       * @type {import("../Tile.js").LoadFunction}
       */
      this.tileLoadFunction = options.tileLoadFunction;

      /**
       * @protected
       * @type {import("../Tile.js").UrlFunction}
       */
      this.tileUrlFunction = options.tileUrlFunction ? options.tileUrlFunction.bind(this) : nullTileUrlFunction;

      /**
       * @protected
       * @type {!Array<string>|null}
       */
      this.urls = null;

      if (options.urls) {
        this.setUrls(options.urls);
      } else if (options.url) {
        this.setUrl(options.url);
      }

      if (options.tileUrlFunction) {
        this.setTileUrlFunction(options.tileUrlFunction, this.key_);
      }

      /**
       * @private
       * @type {!Object<string, boolean>}
       */
      this.tileLoadingKeys_ = {};

    }

    if ( TileSource$$1 ) UrlTile.__proto__ = TileSource$$1;
    UrlTile.prototype = Object.create( TileSource$$1 && TileSource$$1.prototype );
    UrlTile.prototype.constructor = UrlTile;

    /**
     * Return the tile load function of the source.
     * @return {import("../Tile.js").LoadFunction} TileLoadFunction
     * @api
     */
    UrlTile.prototype.getTileLoadFunction = function getTileLoadFunction () {
      return this.tileLoadFunction;
    };

    /**
     * Return the tile URL function of the source.
     * @return {import("../Tile.js").UrlFunction} TileUrlFunction
     * @api
     */
    UrlTile.prototype.getTileUrlFunction = function getTileUrlFunction () {
      return this.tileUrlFunction;
    };

    /**
     * Return the URLs used for this source.
     * When a tileUrlFunction is used instead of url or urls,
     * null will be returned.
     * @return {!Array<string>|null} URLs.
     * @api
     */
    UrlTile.prototype.getUrls = function getUrls () {
      return this.urls;
    };

    /**
     * Handle tile change events.
     * @param {import("../events/Event.js").default} event Event.
     * @protected
     */
    UrlTile.prototype.handleTileChange = function handleTileChange (event) {
      var tile = /** @type {import("../Tile.js").default} */ (event.target);
      var uid = getUid(tile);
      var tileState = tile.getState();
      var type;
      if (tileState == TileState.LOADING) {
        this.tileLoadingKeys_[uid] = true;
        type = TileEventType.TILELOADSTART;
      } else if (uid in this.tileLoadingKeys_) {
        delete this.tileLoadingKeys_[uid];
        type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR :
          (tileState == TileState.LOADED || tileState == TileState.ABORT) ?
            TileEventType.TILELOADEND : undefined;
      }
      if (type != undefined) {
        this.dispatchEvent(new TileSourceEvent(type, tile));
      }
    };

    /**
     * Set the tile load function of the source.
     * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @api
     */
    UrlTile.prototype.setTileLoadFunction = function setTileLoadFunction (tileLoadFunction) {
      this.tileCache.clear();
      this.tileLoadFunction = tileLoadFunction;
      this.changed();
    };

    /**
     * Set the tile URL function of the source.
     * @param {import("../Tile.js").UrlFunction} tileUrlFunction Tile URL function.
     * @param {string=} key Optional new tile key for the source.
     * @api
     */
    UrlTile.prototype.setTileUrlFunction = function setTileUrlFunction (tileUrlFunction, key) {
      this.tileUrlFunction = tileUrlFunction;
      this.tileCache.pruneExceptNewestZ();
      if (typeof key !== 'undefined') {
        this.setKey(key);
      } else {
        this.changed();
      }
    };

    /**
     * Set the URL to use for requests.
     * @param {string} url URL.
     * @api
     */
    UrlTile.prototype.setUrl = function setUrl (url) {
      var urls = this.urls = expandUrl(url);
      this.setUrls(urls);
    };

    /**
     * Set the URLs to use for requests.
     * @param {Array<string>} urls URLs.
     * @api
     */
    UrlTile.prototype.setUrls = function setUrls (urls) {
      this.urls = urls;
      var key = urls.join('\n');
      if (this.generateTileUrlFunction_) {
        this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);
      } else {
        this.setKey(key);
      }
    };

    /**
     * @inheritDoc
     */
    UrlTile.prototype.useTile = function useTile (z, x, y) {
      var tileCoordKey = getKeyZXY(z, x, y);
      if (this.tileCache.containsKey(tileCoordKey)) {
        this.tileCache.get(tileCoordKey);
      }
    };

    return UrlTile;
  }(TileSource));

  /**
   * @module ol/source/TileImage
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize=2048] Cache size.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
   * access pixel data with the Canvas renderer.  See
   * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [opaque=true] Whether the layer is opaque.
   * @property {import("../proj.js").ProjectionLike} projection Projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("./State.js").default} [state] Source state.
   * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
   * Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile
   * service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
   * used instead of defining each one separately in the `urls` option.
   * @property {Array<string>} [urls] An array of URL templates.
   * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to
   * request out-of-bounds tiles from the server. When set to `false`, only one
   * world will be rendered. When set to `true`, tiles will be requested for one
   * world only, but they will be wrapped horizontally to render multiple worlds.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {string} [key] Optional tile key for proper cache fetching
   */


  /**
   * @classdesc
   * Base class for sources providing images divided into a tile grid.
   *
   * @fires import("./Tile.js").TileSourceEvent
   * @api
   */
  var TileImage = /*@__PURE__*/(function (UrlTile$$1) {
    function TileImage(options) {

      UrlTile$$1.call(this, {
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        opaque: options.opaque,
        projection: options.projection,
        state: options.state,
        tileGrid: options.tileGrid,
        tileLoadFunction: options.tileLoadFunction ?
          options.tileLoadFunction : defaultTileLoadFunction,
        tilePixelRatio: options.tilePixelRatio,
        tileUrlFunction: options.tileUrlFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX,
        transition: options.transition,
        key: options.key,
        attributionsCollapsible: options.attributionsCollapsible
      });

      /**
       * @protected
       * @type {?string}
       */
      this.crossOrigin =
          options.crossOrigin !== undefined ? options.crossOrigin : null;

      /**
       * @protected
       * @type {typeof ImageTile}
       */
      this.tileClass = options.tileClass !== undefined ?
        options.tileClass : ImageTile;

      /**
       * @protected
       * @type {!Object<string, TileCache>}
       */
      this.tileCacheForProjection = {};

      /**
       * @protected
       * @type {!Object<string, import("../tilegrid/TileGrid.js").default>}
       */
      this.tileGridForProjection = {};

      /**
       * @private
       * @type {number|undefined}
       */
      this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;

      /**
       * @private
       * @type {boolean}
       */
      this.renderReprojectionEdges_ = false;
    }

    if ( UrlTile$$1 ) TileImage.__proto__ = UrlTile$$1;
    TileImage.prototype = Object.create( UrlTile$$1 && UrlTile$$1.prototype );
    TileImage.prototype.constructor = TileImage;

    /**
     * @inheritDoc
     */
    TileImage.prototype.canExpireCache = function canExpireCache () {
      if (this.tileCache.canExpireCache()) {
        return true;
      } else {
        for (var key in this.tileCacheForProjection) {
          if (this.tileCacheForProjection[key].canExpireCache()) {
            return true;
          }
        }
      }
      return false;
    };

    /**
     * @inheritDoc
     */
    TileImage.prototype.expireCache = function expireCache (projection, usedTiles) {
      var usedTileCache = this.getTileCacheForProjection(projection);

      this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});
      for (var id in this.tileCacheForProjection) {
        var tileCache = this.tileCacheForProjection[id];
        tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});
      }
    };

    /**
     * @inheritDoc
     */
    TileImage.prototype.getGutterForProjection = function getGutterForProjection (projection) {
      if (this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {
        return 0;
      } else {
        return this.getGutter();
      }
    };

    /**
     * @return {number} Gutter.
     */
    TileImage.prototype.getGutter = function getGutter () {
      return 0;
    };

    /**
     * @inheritDoc
     */
    TileImage.prototype.getOpaque = function getOpaque (projection) {
      if (this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {
        return false;
      } else {
        return UrlTile$$1.prototype.getOpaque.call(this, projection);
      }
    };

    /**
     * @inheritDoc
     */
    TileImage.prototype.getTileGridForProjection = function getTileGridForProjection$1 (projection) {
      var thisProj = this.getProjection();
      if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {
        return this.tileGrid;
      } else {
        var projKey = getUid(projection);
        if (!(projKey in this.tileGridForProjection)) {
          this.tileGridForProjection[projKey] = getForProjection(projection);
        }
        return (
          /** @type {!import("../tilegrid/TileGrid.js").default} */ (this.tileGridForProjection[projKey])
        );
      }
    };

    /**
     * @inheritDoc
     */
    TileImage.prototype.getTileCacheForProjection = function getTileCacheForProjection (projection) {
      var thisProj = this.getProjection(); if (!thisProj || equivalent(thisProj, projection)) {
        return this.tileCache;
      } else {
        var projKey = getUid(projection);
        if (!(projKey in this.tileCacheForProjection)) {
          this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);
        }
        return this.tileCacheForProjection[projKey];
      }
    };

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {string} key The key set on the tile.
     * @return {!import("../Tile.js").default} Tile.
     * @private
     */
    TileImage.prototype.createTile_ = function createTile_ (z, x, y, pixelRatio, projection, key) {
      var tileCoord = [z, x, y];
      var urlTileCoord = this.getTileCoordForTileUrlFunction(
        tileCoord, projection);
      var tileUrl = urlTileCoord ?
        this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;
      var tile = new this.tileClass(
        tileCoord,
        tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,
        tileUrl !== undefined ? tileUrl : '',
        this.crossOrigin,
        this.tileLoadFunction,
        this.tileOptions);
      tile.key = key;
      listen(tile, EventType.CHANGE,
        this.handleTileChange, this);
      return tile;
    };

    /**
     * @inheritDoc
     */
    TileImage.prototype.getTile = function getTile (z, x, y, pixelRatio, projection) {
      var sourceProjection = /** @type {!import("../proj/Projection.js").default} */ (this.getProjection());
      if (!sourceProjection || !projection || equivalent(sourceProjection, projection)) {
        return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);
      } else {
        var cache = this.getTileCacheForProjection(projection);
        var tileCoord = [z, x, y];
        var tile;
        var tileCoordKey = getKey$1(tileCoord);
        if (cache.containsKey(tileCoordKey)) {
          tile = /** @type {!import("../Tile.js").default} */ (cache.get(tileCoordKey));
        }
        var key = this.getKey();
        if (tile && tile.key == key) {
          return tile;
        } else {
          var sourceTileGrid = this.getTileGridForProjection(sourceProjection);
          var targetTileGrid = this.getTileGridForProjection(projection);
          var wrappedTileCoord =
              this.getTileCoordForTileUrlFunction(tileCoord, projection);
          var newTile = new ReprojTile(
            sourceProjection, sourceTileGrid,
            projection, targetTileGrid,
            tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio),
            this.getGutter(),
            function(z, x, y, pixelRatio) {
              return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);
            }.bind(this), this.reprojectionErrorThreshold_,
            this.renderReprojectionEdges_);
          newTile.key = key;

          if (tile) {
            newTile.interimTile = tile;
            newTile.refreshInterimChain();
            cache.replace(tileCoordKey, newTile);
          } else {
            cache.set(tileCoordKey, newTile);
          }
          return newTile;
        }
      }
    };

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {!import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../Tile.js").default} Tile.
     * @protected
     */
    TileImage.prototype.getTileInternal = function getTileInternal (z, x, y, pixelRatio, projection) {
      var tile = null;
      var tileCoordKey = getKeyZXY(z, x, y);
      var key = this.getKey();
      if (!this.tileCache.containsKey(tileCoordKey)) {
        tile = this.createTile_(z, x, y, pixelRatio, projection, key);
        this.tileCache.set(tileCoordKey, tile);
      } else {
        tile = this.tileCache.get(tileCoordKey);
        if (tile.key != key) {
          // The source's params changed. If the tile has an interim tile and if we
          // can use it then we use it. Otherwise we create a new tile.  In both
          // cases we attempt to assign an interim tile to the new tile.
          var interimTile = tile;
          tile = this.createTile_(z, x, y, pixelRatio, projection, key);

          //make the new tile the head of the list,
          if (interimTile.getState() == TileState.IDLE) {
            //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it
            tile.interimTile = interimTile.interimTile;
          } else {
            tile.interimTile = interimTile;
          }
          tile.refreshInterimChain();
          this.tileCache.replace(tileCoordKey, tile);
        }
      }
      return tile;
    };

    /**
     * Sets whether to render reprojection edges or not (usually for debugging).
     * @param {boolean} render Render the edges.
     * @api
     */
    TileImage.prototype.setRenderReprojectionEdges = function setRenderReprojectionEdges (render) {
      if (this.renderReprojectionEdges_ == render) {
        return;
      }
      this.renderReprojectionEdges_ = render;
      for (var id in this.tileCacheForProjection) {
        this.tileCacheForProjection[id].clear();
      }
      this.changed();
    };

    /**
     * Sets the tile grid to use when reprojecting the tiles to the given
     * projection instead of the default tile grid for the projection.
     *
     * This can be useful when the default tile grid cannot be created
     * (e.g. projection has no extent defined) or
     * for optimization reasons (custom tile size, resolutions, ...).
     *
     * @param {import("../proj.js").ProjectionLike} projection Projection.
     * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
     * @api
     */
    TileImage.prototype.setTileGridForProjection = function setTileGridForProjection (projection, tilegrid) {
      {
        var proj = get$2(projection);
        if (proj) {
          var projKey = getUid(proj);
          if (!(projKey in this.tileGridForProjection)) {
            this.tileGridForProjection[projKey] = tilegrid;
          }
        }
      }
    };

    return TileImage;
  }(UrlTile));


  /**
   * @param {ImageTile} imageTile Image tile.
   * @param {string} src Source.
   */
  function defaultTileLoadFunction(imageTile, src) {
    /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src = src;
  }

  /**
   * @module ol/source/XYZ
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize=2048] Cache size.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to
   * access pixel data with the Canvas renderer.  See
   * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [opaque=true] Whether the layer is opaque.
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {number} [maxZoom=18] Optional max zoom level.
   * @property {number} [minZoom=0] Optional min zoom level.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
   * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get
   * tile URL given a tile coordinate and the projection.
   * Required if url or urls are not provided.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,
   * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,
   * may be used instead of defining each one separately in the `urls` option.
   * @property {Array<string>} [urls] An array of URL templates.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   */


  /**
   * @classdesc
   * Layer source for tile data with URLs in a set XYZ format that are
   * defined in a URL template. By default, this follows the widely-used
   * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
   * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
   * using the `{-y}` placeholder in the URL template, so long as the
   * source does not have a custom tile grid. In this case,
   * {@link module:ol/source/TileImage} can be used with a `tileUrlFunction`
   * such as:
   *
   *  tileUrlFunction: function(coordinate) {
   *    return 'http://mapserver.com/' + coordinate[0] + '/' +
   *        coordinate[1] + '/' + coordinate[2] + '.png';
   *    }
   *
   * @api
   */
  var XYZ = /*@__PURE__*/(function (TileImage$$1) {
    function XYZ(opt_options) {
      var options = opt_options || {};
      var projection = options.projection !== undefined ?
        options.projection : 'EPSG:3857';

      var tileGrid = options.tileGrid !== undefined ? options.tileGrid :
        createXYZ({
          extent: extentFromProjection(projection),
          maxZoom: options.maxZoom,
          minZoom: options.minZoom,
          tileSize: options.tileSize
        });

      TileImage$$1.call(this, {
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        opaque: options.opaque,
        projection: projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileGrid: tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        tilePixelRatio: options.tilePixelRatio,
        tileUrlFunction: options.tileUrlFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition,
        attributionsCollapsible: options.attributionsCollapsible
      });

    }

    if ( TileImage$$1 ) XYZ.__proto__ = TileImage$$1;
    XYZ.prototype = Object.create( TileImage$$1 && TileImage$$1.prototype );
    XYZ.prototype.constructor = XYZ;

    return XYZ;
  }(TileImage));

  /**
   * Trigger a CustomEvent
   *
   * @param {EventTarget} el The element or EventTarget to trigger the event upon
   * @param {String} type The event type name
   * @param {Object|null} payload=null The event data to be sent
   * @returns {Boolean} The return value is false if at least one event listener called preventDefault(). Otherwise it returns true.
   */
  let publish = (el, type, payload = null) => {
    let event;

    const detail = {
      payload,
      time: new Date()
    };

    // This check is needed to polyfill CustomEvent on IE11-
    if (typeof window.CustomEvent === 'function') {
      event = new CustomEvent(type, {
        detail,
        bubbles: true,
        cancelable: true
      });
    } else {
      event = document.createEvent('CustomEvent');
      event.initCustomEvent(type, true, true, detail);
    }

    return el.dispatchEvent(event);
  };

  /**
   *  Enumerates the events for dicom microscopy viewer. Events are captured,
   *  normalized, and re-triggered with a `dicom-microscopy-viewer` prefix. This allows
   *  us to handle events consistently across different browsers.
   *
   *  @enum {String}
   *  @memberof dicom-microscopy-viewer
   *  @readonly
   */
  const PROJECT_NAME = 'dicommicroscopyviewer';

  const EVENTS = {
      ROI_ADDED: `${PROJECT_NAME}_roi_added`,
      ROI_REMOVED: `${PROJECT_NAME}_roi_removed`,
      ROI_DRAWN: `${PROJECT_NAME}_roi_drawn`,
      ROI_SELECTED: `${PROJECT_NAME}_roi_selected`,
      ROI_MODIFIED: `${PROJECT_NAME}_roi_modified`,
      MOVE_STARTED: `${PROJECT_NAME}_move_started`,
      MOVE_ENDED: `${PROJECT_NAME}_move_ended`,
    };

  const tagToKeyword = {
    '00000000': 'CommandGroupLength',
    '00000001': 'CommandLengthToEnd',
    '00000002': 'AffectedSOPClassUID',
    '00000003': 'RequestedSOPClassUID',
    '00000010': 'CommandRecognitionCode',
    '00000100': 'CommandField',
    '00000110': 'MessageID',
    '00000120': 'MessageIDBeingRespondedTo',
    '00000200': 'Initiator',
    '00000300': 'Receiver',
    '00000400': 'FindLocation',
    '00000600': 'MoveDestination',
    '00000700': 'Priority',
    '00000800': 'CommandDataSetType',
    '00000850': 'NumberOfMatches',
    '00000860': 'ResponseSequenceNumber',
    '00000900': 'Status',
    '00000901': 'OffendingElement',
    '00000902': 'ErrorComment',
    '00000903': 'ErrorID',
    '00001000': 'AffectedSOPInstanceUID',
    '00001001': 'RequestedSOPInstanceUID',
    '00001002': 'EventTypeID',
    '00001005': 'AttributeIdentifierList',
    '00001008': 'ActionTypeID',
    '00001020': 'NumberOfRemainingSuboperations',
    '00001021': 'NumberOfCompletedSuboperations',
    '00001022': 'NumberOfFailedSuboperations',
    '00001023': 'NumberOfWarningSuboperations',
    '00001030': 'MoveOriginatorApplicationEntityTitle',
    '00001031': 'MoveOriginatorMessageID',
    '00004000': 'DialogReceiver',
    '00004010': 'TerminalType',
    '00005010': 'MessageSetID',
    '00005020': 'EndMessageID',
    '00005110': 'DisplayFormat',
    '00005120': 'PagePositionID',
    '00005130': 'TextFormatID',
    '00005140': 'NormalReverse',
    '00005150': 'AddGrayScale',
    '00005160': 'Borders',
    '00005170': 'Copies',
    '00005180': 'CommandMagnificationType',
    '00005190': 'Erase',
    '000051A0': 'Print',
    '000051B0': 'Overlays',
    '00020000': 'FileMetaInformationGroupLength',
    '00020001': 'FileMetaInformationVersion',
    '00020002': 'MediaStorageSOPClassUID',
    '00020003': 'MediaStorageSOPInstanceUID',
    '00020010': 'TransferSyntaxUID',
    '00020012': 'ImplementationClassUID',
    '00020013': 'ImplementationVersionName',
    '00020016': 'SourceApplicationEntityTitle',
    '00020017': 'SendingApplicationEntityTitle',
    '00020018': 'ReceivingApplicationEntityTitle',
    '00020100': 'PrivateInformationCreatorUID',
    '00020102': 'PrivateInformation',
    '00041130': 'FileSetID',
    '00041141': 'FileSetDescriptorFileID',
    '00041142': 'SpecificCharacterSetOfFileSetDescriptorFile',
    '00041200': 'OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity',
    '00041202': 'OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity',
    '00041212': 'FileSetConsistencyFlag',
    '00041220': 'DirectoryRecordSequence',
    '00041400': 'OffsetOfTheNextDirectoryRecord',
    '00041410': 'RecordInUseFlag',
    '00041420': 'OffsetOfReferencedLowerLevelDirectoryEntity',
    '00041430': 'DirectoryRecordType',
    '00041432': 'PrivateRecordUID',
    '00041500': 'ReferencedFileID',
    '00041504': 'MRDRDirectoryRecordOffset',
    '00041510': 'ReferencedSOPClassUIDInFile',
    '00041511': 'ReferencedSOPInstanceUIDInFile',
    '00041512': 'ReferencedTransferSyntaxUIDInFile',
    '0004151A': 'ReferencedRelatedGeneralSOPClassUIDInFile',
    '00041600': 'NumberOfReferences',
    '00080001': 'LengthToEnd',
    '00080005': 'SpecificCharacterSet',
    '00080006': 'LanguageCodeSequence',
    '00080008': 'ImageType',
    '00080010': 'RecognitionCode',
    '00080012': 'InstanceCreationDate',
    '00080013': 'InstanceCreationTime',
    '00080014': 'InstanceCreatorUID',
    '00080015': 'InstanceCoercionDateTime',
    '00080016': 'SOPClassUID',
    '00080018': 'SOPInstanceUID',
    '0008001A': 'RelatedGeneralSOPClassUID',
    '0008001B': 'OriginalSpecializedSOPClassUID',
    '00080020': 'StudyDate',
    '00080021': 'SeriesDate',
    '00080022': 'AcquisitionDate',
    '00080023': 'ContentDate',
    '00080024': 'OverlayDate',
    '00080025': 'CurveDate',
    '0008002A': 'AcquisitionDateTime',
    '00080030': 'StudyTime',
    '00080031': 'SeriesTime',
    '00080032': 'AcquisitionTime',
    '00080033': 'ContentTime',
    '00080034': 'OverlayTime',
    '00080035': 'CurveTime',
    '00080040': 'DataSetType',
    '00080041': 'DataSetSubtype',
    '00080042': 'NuclearMedicineSeriesType',
    '00080050': 'AccessionNumber',
    '00080051': 'IssuerOfAccessionNumberSequence',
    '00080052': 'QueryRetrieveLevel',
    '00080053': 'QueryRetrieveView',
    '00080054': 'RetrieveAETitle',
    '00080055': 'StationAETitle',
    '00080056': 'InstanceAvailability',
    '00080058': 'FailedSOPInstanceUIDList',
    '00080060': 'Modality',
    '00080061': 'ModalitiesInStudy',
    '00080062': 'SOPClassesInStudy',
    '00080063': 'AnatomicRegionsInStudyCodeSequence',
    '00080064': 'ConversionType',
    '00080068': 'PresentationIntentType',
    '00080070': 'Manufacturer',
    '00080080': 'InstitutionName',
    '00080081': 'InstitutionAddress',
    '00080082': 'InstitutionCodeSequence',
    '00080090': 'ReferringPhysicianName',
    '00080092': 'ReferringPhysicianAddress',
    '00080094': 'ReferringPhysicianTelephoneNumbers',
    '00080096': 'ReferringPhysicianIdentificationSequence',
    '0008009C': 'ConsultingPhysicianName',
    '0008009D': 'ConsultingPhysicianIdentificationSequence',
    '00080100': 'CodeValue',
    '00080101': 'ExtendedCodeValue',
    '00080102': 'CodingSchemeDesignator',
    '00080103': 'CodingSchemeVersion',
    '00080104': 'CodeMeaning',
    '00080105': 'MappingResource',
    '00080106': 'ContextGroupVersion',
    '00080107': 'ContextGroupLocalVersion',
    '00080108': 'ExtendedCodeMeaning',
    '00080109': 'CodingSchemeResourcesSequence',
    '0008010A': 'CodingSchemeURLType',
    '0008010B': 'ContextGroupExtensionFlag',
    '0008010C': 'CodingSchemeUID',
    '0008010D': 'ContextGroupExtensionCreatorUID',
    '0008010E': 'CodingSchemeURL',
    '0008010F': 'ContextIdentifier',
    '00080110': 'CodingSchemeIdentificationSequence',
    '00080112': 'CodingSchemeRegistry',
    '00080114': 'CodingSchemeExternalID',
    '00080115': 'CodingSchemeName',
    '00080116': 'CodingSchemeResponsibleOrganization',
    '00080117': 'ContextUID',
    '00080118': 'MappingResourceUID',
    '00080119': 'LongCodeValue',
    '00080120': 'URNCodeValue',
    '00080121': 'EquivalentCodeSequence',
    '00080122': 'MappingResourceName',
    '00080123': 'ContextGroupIdentificationSequence',
    '00080124': 'MappingResourceIdentificationSequence',
    '00080201': 'TimezoneOffsetFromUTC',
    '00080220': 'ResponsibleGroupCodeSequence',
    '00080221': 'EquipmentModality',
    '00080222': 'ManufacturerRelatedModelGroup',
    '00080300': 'PrivateDataElementCharacteristicsSequence',
    '00080301': 'PrivateGroupReference',
    '00080302': 'PrivateCreatorReference',
    '00080303': 'BlockIdentifyingInformationStatus',
    '00080304': 'NonidentifyingPrivateElements',
    '00080305': 'DeidentificationActionSequence',
    '00080306': 'IdentifyingPrivateElements',
    '00080307': 'DeidentificationAction',
    '00080308': 'PrivateDataElement',
    '00080309': 'PrivateDataElementValueMultiplicity',
    '0008030A': 'PrivateDataElementValueRepresentation',
    '0008030B': 'PrivateDataElementNumberOfItems',
    '0008030C': 'PrivateDataElementName',
    '0008030D': 'PrivateDataElementKeyword',
    '0008030E': 'PrivateDataElementDescription',
    '0008030F': 'PrivateDataElementEncoding',
    '00080310': 'PrivateDataElementDefinitionSequence',
    '00081000': 'NetworkID',
    '00081010': 'StationName',
    '00081030': 'StudyDescription',
    '00081032': 'ProcedureCodeSequence',
    '0008103E': 'SeriesDescription',
    '0008103F': 'SeriesDescriptionCodeSequence',
    '00081040': 'InstitutionalDepartmentName',
    '00081048': 'PhysiciansOfRecord',
    '00081049': 'PhysiciansOfRecordIdentificationSequence',
    '00081050': 'PerformingPhysicianName',
    '00081052': 'PerformingPhysicianIdentificationSequence',
    '00081060': 'NameOfPhysiciansReadingStudy',
    '00081062': 'PhysiciansReadingStudyIdentificationSequence',
    '00081070': 'OperatorsName',
    '00081072': 'OperatorIdentificationSequence',
    '00081080': 'AdmittingDiagnosesDescription',
    '00081084': 'AdmittingDiagnosesCodeSequence',
    '00081090': 'ManufacturerModelName',
    '00081100': 'ReferencedResultsSequence',
    '00081110': 'ReferencedStudySequence',
    '00081111': 'ReferencedPerformedProcedureStepSequence',
    '00081115': 'ReferencedSeriesSequence',
    '00081120': 'ReferencedPatientSequence',
    '00081125': 'ReferencedVisitSequence',
    '00081130': 'ReferencedOverlaySequence',
    '00081134': 'ReferencedStereometricInstanceSequence',
    '0008113A': 'ReferencedWaveformSequence',
    '00081140': 'ReferencedImageSequence',
    '00081145': 'ReferencedCurveSequence',
    '0008114A': 'ReferencedInstanceSequence',
    '0008114B': 'ReferencedRealWorldValueMappingInstanceSequence',
    '00081150': 'ReferencedSOPClassUID',
    '00081155': 'ReferencedSOPInstanceUID',
    '00081156': 'DefinitionSourceSequence',
    '0008115A': 'SOPClassesSupported',
    '00081160': 'ReferencedFrameNumber',
    '00081161': 'SimpleFrameList',
    '00081162': 'CalculatedFrameList',
    '00081163': 'TimeRange',
    '00081164': 'FrameExtractionSequence',
    '00081167': 'MultiFrameSourceSOPInstanceUID',
    '00081190': 'RetrieveURL',
    '00081195': 'TransactionUID',
    '00081196': 'WarningReason',
    '00081197': 'FailureReason',
    '00081198': 'FailedSOPSequence',
    '00081199': 'ReferencedSOPSequence',
    '0008119A': 'OtherFailuresSequence',
    '00081200': 'StudiesContainingOtherReferencedInstancesSequence',
    '00081250': 'RelatedSeriesSequence',
    '00082110': 'LossyImageCompressionRetired',
    '00082111': 'DerivationDescription',
    '00082112': 'SourceImageSequence',
    '00082120': 'StageName',
    '00082122': 'StageNumber',
    '00082124': 'NumberOfStages',
    '00082127': 'ViewName',
    '00082128': 'ViewNumber',
    '00082129': 'NumberOfEventTimers',
    '0008212A': 'NumberOfViewsInStage',
    '00082130': 'EventElapsedTimes',
    '00082132': 'EventTimerNames',
    '00082133': 'EventTimerSequence',
    '00082134': 'EventTimeOffset',
    '00082135': 'EventCodeSequence',
    '00082142': 'StartTrim',
    '00082143': 'StopTrim',
    '00082144': 'RecommendedDisplayFrameRate',
    '00082200': 'TransducerPosition',
    '00082204': 'TransducerOrientation',
    '00082208': 'AnatomicStructure',
    '00082218': 'AnatomicRegionSequence',
    '00082220': 'AnatomicRegionModifierSequence',
    '00082228': 'PrimaryAnatomicStructureSequence',
    '00082229': 'AnatomicStructureSpaceOrRegionSequence',
    '00082230': 'PrimaryAnatomicStructureModifierSequence',
    '00082240': 'TransducerPositionSequence',
    '00082242': 'TransducerPositionModifierSequence',
    '00082244': 'TransducerOrientationSequence',
    '00082246': 'TransducerOrientationModifierSequence',
    '00082251': 'AnatomicStructureSpaceOrRegionCodeSequenceTrial',
    '00082253': 'AnatomicPortalOfEntranceCodeSequenceTrial',
    '00082255': 'AnatomicApproachDirectionCodeSequenceTrial',
    '00082256': 'AnatomicPerspectiveDescriptionTrial',
    '00082257': 'AnatomicPerspectiveCodeSequenceTrial',
    '00082258': 'AnatomicLocationOfExaminingInstrumentDescriptionTrial',
    '00082259': 'AnatomicLocationOfExaminingInstrumentCodeSequenceTrial',
    '0008225A': 'AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial',
    '0008225C': 'OnAxisBackgroundAnatomicStructureCodeSequenceTrial',
    '00083001': 'AlternateRepresentationSequence',
    '00083010': 'IrradiationEventUID',
    '00083011': 'SourceIrradiationEventSequence',
    '00083012': 'RadiopharmaceuticalAdministrationEventUID',
    '00084000': 'IdentifyingComments',
    '00089007': 'FrameType',
    '00089092': 'ReferencedImageEvidenceSequence',
    '00089121': 'ReferencedRawDataSequence',
    '00089123': 'CreatorVersionUID',
    '00089124': 'DerivationImageSequence',
    '00089154': 'SourceImageEvidenceSequence',
    '00089205': 'PixelPresentation',
    '00089206': 'VolumetricProperties',
    '00089207': 'VolumeBasedCalculationTechnique',
    '00089208': 'ComplexImageComponent',
    '00089209': 'AcquisitionContrast',
    '00089215': 'DerivationCodeSequence',
    '00089237': 'ReferencedPresentationStateSequence',
    '00089410': 'ReferencedOtherPlaneSequence',
    '00089458': 'FrameDisplaySequence',
    '00089459': 'RecommendedDisplayFrameRateInFloat',
    '00089460': 'SkipFrameRangeFlag',
    '00100010': 'PatientName',
    '00100020': 'PatientID',
    '00100021': 'IssuerOfPatientID',
    '00100022': 'TypeOfPatientID',
    '00100024': 'IssuerOfPatientIDQualifiersSequence',
    '00100026': 'SourcePatientGroupIdentificationSequence',
    '00100027': 'GroupOfPatientsIdentificationSequence',
    '00100028': 'SubjectRelativePositionInImage',
    '00100030': 'PatientBirthDate',
    '00100032': 'PatientBirthTime',
    '00100033': 'PatientBirthDateInAlternativeCalendar',
    '00100034': 'PatientDeathDateInAlternativeCalendar',
    '00100035': 'PatientAlternativeCalendar',
    '00100040': 'PatientSex',
    '00100050': 'PatientInsurancePlanCodeSequence',
    '00100101': 'PatientPrimaryLanguageCodeSequence',
    '00100102': 'PatientPrimaryLanguageModifierCodeSequence',
    '00100200': 'QualityControlSubject',
    '00100201': 'QualityControlSubjectTypeCodeSequence',
    '00100212': 'StrainDescription',
    '00100213': 'StrainNomenclature',
    '00100214': 'StrainStockNumber',
    '00100215': 'StrainSourceRegistryCodeSequence',
    '00100216': 'StrainStockSequence',
    '00100217': 'StrainSource',
    '00100218': 'StrainAdditionalInformation',
    '00100219': 'StrainCodeSequence',
    '00100221': 'GeneticModificationsSequence',
    '00100222': 'GeneticModificationsDescription',
    '00100223': 'GeneticModificationsNomenclature',
    '00100229': 'GeneticModificationsCodeSequence',
    '00101000': 'OtherPatientIDs',
    '00101001': 'OtherPatientNames',
    '00101002': 'OtherPatientIDsSequence',
    '00101005': 'PatientBirthName',
    '00101010': 'PatientAge',
    '00101020': 'PatientSize',
    '00101021': 'PatientSizeCodeSequence',
    '00101022': 'PatientBodyMassIndex',
    '00101023': 'MeasuredAPDimension',
    '00101024': 'MeasuredLateralDimension',
    '00101030': 'PatientWeight',
    '00101040': 'PatientAddress',
    '00101050': 'InsurancePlanIdentification',
    '00101060': 'PatientMotherBirthName',
    '00101080': 'MilitaryRank',
    '00101081': 'BranchOfService',
    '00101090': 'MedicalRecordLocator',
    '00101100': 'ReferencedPatientPhotoSequence',
    '00102000': 'MedicalAlerts',
    '00102110': 'Allergies',
    '00102150': 'CountryOfResidence',
    '00102152': 'RegionOfResidence',
    '00102154': 'PatientTelephoneNumbers',
    '00102155': 'PatientTelecomInformation',
    '00102160': 'EthnicGroup',
    '00102180': 'Occupation',
    '001021A0': 'SmokingStatus',
    '001021B0': 'AdditionalPatientHistory',
    '001021C0': 'PregnancyStatus',
    '001021D0': 'LastMenstrualDate',
    '001021F0': 'PatientReligiousPreference',
    '00102201': 'PatientSpeciesDescription',
    '00102202': 'PatientSpeciesCodeSequence',
    '00102203': 'PatientSexNeutered',
    '00102210': 'AnatomicalOrientationType',
    '00102292': 'PatientBreedDescription',
    '00102293': 'PatientBreedCodeSequence',
    '00102294': 'BreedRegistrationSequence',
    '00102295': 'BreedRegistrationNumber',
    '00102296': 'BreedRegistryCodeSequence',
    '00102297': 'ResponsiblePerson',
    '00102298': 'ResponsiblePersonRole',
    '00102299': 'ResponsibleOrganization',
    '00104000': 'PatientComments',
    '00109431': 'ExaminedBodyThickness',
    '00120010': 'ClinicalTrialSponsorName',
    '00120020': 'ClinicalTrialProtocolID',
    '00120021': 'ClinicalTrialProtocolName',
    '00120030': 'ClinicalTrialSiteID',
    '00120031': 'ClinicalTrialSiteName',
    '00120040': 'ClinicalTrialSubjectID',
    '00120042': 'ClinicalTrialSubjectReadingID',
    '00120050': 'ClinicalTrialTimePointID',
    '00120051': 'ClinicalTrialTimePointDescription',
    '00120052': 'LongitudinalTemporalOffsetFromEvent',
    '00120053': 'LongitudinalTemporalEventType',
    '00120060': 'ClinicalTrialCoordinatingCenterName',
    '00120062': 'PatientIdentityRemoved',
    '00120063': 'DeidentificationMethod',
    '00120064': 'DeidentificationMethodCodeSequence',
    '00120071': 'ClinicalTrialSeriesID',
    '00120072': 'ClinicalTrialSeriesDescription',
    '00120081': 'ClinicalTrialProtocolEthicsCommitteeName',
    '00120082': 'ClinicalTrialProtocolEthicsCommitteeApprovalNumber',
    '00120083': 'ConsentForClinicalTrialUseSequence',
    '00120084': 'DistributionType',
    '00120085': 'ConsentForDistributionFlag',
    '00120086': 'EthicsCommitteeApprovalEffectivenessStartDate',
    '00120087': 'EthicsCommitteeApprovalEffectivenessEndDate',
    '00140023': 'CADFileFormat',
    '00140024': 'ComponentReferenceSystem',
    '00140025': 'ComponentManufacturingProcedure',
    '00140028': 'ComponentManufacturer',
    '00140030': 'MaterialThickness',
    '00140032': 'MaterialPipeDiameter',
    '00140034': 'MaterialIsolationDiameter',
    '00140042': 'MaterialGrade',
    '00140044': 'MaterialPropertiesDescription',
    '00140045': 'MaterialPropertiesFileFormatRetired',
    '00140046': 'MaterialNotes',
    '00140050': 'ComponentShape',
    '00140052': 'CurvatureType',
    '00140054': 'OuterDiameter',
    '00140056': 'InnerDiameter',
    '00140100': 'ComponentWelderIDs',
    '00140101': 'SecondaryApprovalStatus',
    '00140102': 'SecondaryReviewDate',
    '00140103': 'SecondaryReviewTime',
    '00140104': 'SecondaryReviewerName',
    '00140105': 'RepairID',
    '00140106': 'MultipleComponentApprovalSequence',
    '00140107': 'OtherApprovalStatus',
    '00140108': 'OtherSecondaryApprovalStatus',
    '00141010': 'ActualEnvironmentalConditions',
    '00141020': 'ExpiryDate',
    '00141040': 'EnvironmentalConditions',
    '00142002': 'EvaluatorSequence',
    '00142004': 'EvaluatorNumber',
    '00142006': 'EvaluatorName',
    '00142008': 'EvaluationAttempt',
    '00142012': 'IndicationSequence',
    '00142014': 'IndicationNumber',
    '00142016': 'IndicationLabel',
    '00142018': 'IndicationDescription',
    '0014201A': 'IndicationType',
    '0014201C': 'IndicationDisposition',
    '0014201E': 'IndicationROISequence',
    '00142030': 'IndicationPhysicalPropertySequence',
    '00142032': 'PropertyLabel',
    '00142202': 'CoordinateSystemNumberOfAxes',
    '00142204': 'CoordinateSystemAxesSequence',
    '00142206': 'CoordinateSystemAxisDescription',
    '00142208': 'CoordinateSystemDataSetMapping',
    '0014220A': 'CoordinateSystemAxisNumber',
    '0014220C': 'CoordinateSystemAxisType',
    '0014220E': 'CoordinateSystemAxisUnits',
    '00142210': 'CoordinateSystemAxisValues',
    '00142220': 'CoordinateSystemTransformSequence',
    '00142222': 'TransformDescription',
    '00142224': 'TransformNumberOfAxes',
    '00142226': 'TransformOrderOfAxes',
    '00142228': 'TransformedAxisUnits',
    '0014222A': 'CoordinateSystemTransformRotationAndScaleMatrix',
    '0014222C': 'CoordinateSystemTransformTranslationMatrix',
    '00143011': 'InternalDetectorFrameTime',
    '00143012': 'NumberOfFramesIntegrated',
    '00143020': 'DetectorTemperatureSequence',
    '00143022': 'SensorName',
    '00143024': 'HorizontalOffsetOfSensor',
    '00143026': 'VerticalOffsetOfSensor',
    '00143028': 'SensorTemperature',
    '00143040': 'DarkCurrentSequence',
    '00143050': 'DarkCurrentCounts',
    '00143060': 'GainCorrectionReferenceSequence',
    '00143070': 'AirCounts',
    '00143071': 'KVUsedInGainCalibration',
    '00143072': 'MAUsedInGainCalibration',
    '00143073': 'NumberOfFramesUsedForIntegration',
    '00143074': 'FilterMaterialUsedInGainCalibration',
    '00143075': 'FilterThicknessUsedInGainCalibration',
    '00143076': 'DateOfGainCalibration',
    '00143077': 'TimeOfGainCalibration',
    '00143080': 'BadPixelImage',
    '00143099': 'CalibrationNotes',
    '00144002': 'PulserEquipmentSequence',
    '00144004': 'PulserType',
    '00144006': 'PulserNotes',
    '00144008': 'ReceiverEquipmentSequence',
    '0014400A': 'AmplifierType',
    '0014400C': 'ReceiverNotes',
    '0014400E': 'PreAmplifierEquipmentSequence',
    '0014400F': 'PreAmplifierNotes',
    '00144010': 'TransmitTransducerSequence',
    '00144011': 'ReceiveTransducerSequence',
    '00144012': 'NumberOfElements',
    '00144013': 'ElementShape',
    '00144014': 'ElementDimensionA',
    '00144015': 'ElementDimensionB',
    '00144016': 'ElementPitchA',
    '00144017': 'MeasuredBeamDimensionA',
    '00144018': 'MeasuredBeamDimensionB',
    '00144019': 'LocationOfMeasuredBeamDiameter',
    '0014401A': 'NominalFrequency',
    '0014401B': 'MeasuredCenterFrequency',
    '0014401C': 'MeasuredBandwidth',
    '0014401D': 'ElementPitchB',
    '00144020': 'PulserSettingsSequence',
    '00144022': 'PulseWidth',
    '00144024': 'ExcitationFrequency',
    '00144026': 'ModulationType',
    '00144028': 'Damping',
    '00144030': 'ReceiverSettingsSequence',
    '00144031': 'AcquiredSoundpathLength',
    '00144032': 'AcquisitionCompressionType',
    '00144033': 'AcquisitionSampleSize',
    '00144034': 'RectifierSmoothing',
    '00144035': 'DACSequence',
    '00144036': 'DACType',
    '00144038': 'DACGainPoints',
    '0014403A': 'DACTimePoints',
    '0014403C': 'DACAmplitude',
    '00144040': 'PreAmplifierSettingsSequence',
    '00144050': 'TransmitTransducerSettingsSequence',
    '00144051': 'ReceiveTransducerSettingsSequence',
    '00144052': 'IncidentAngle',
    '00144054': 'CouplingTechnique',
    '00144056': 'CouplingMedium',
    '00144057': 'CouplingVelocity',
    '00144058': 'ProbeCenterLocationX',
    '00144059': 'ProbeCenterLocationZ',
    '0014405A': 'SoundPathLength',
    '0014405C': 'DelayLawIdentifier',
    '00144060': 'GateSettingsSequence',
    '00144062': 'GateThreshold',
    '00144064': 'VelocityOfSound',
    '00144070': 'CalibrationSettingsSequence',
    '00144072': 'CalibrationProcedure',
    '00144074': 'ProcedureVersion',
    '00144076': 'ProcedureCreationDate',
    '00144078': 'ProcedureExpirationDate',
    '0014407A': 'ProcedureLastModifiedDate',
    '0014407C': 'CalibrationTime',
    '0014407E': 'CalibrationDate',
    '00144080': 'ProbeDriveEquipmentSequence',
    '00144081': 'DriveType',
    '00144082': 'ProbeDriveNotes',
    '00144083': 'DriveProbeSequence',
    '00144084': 'ProbeInductance',
    '00144085': 'ProbeResistance',
    '00144086': 'ReceiveProbeSequence',
    '00144087': 'ProbeDriveSettingsSequence',
    '00144088': 'BridgeResistors',
    '00144089': 'ProbeOrientationAngle',
    '0014408B': 'UserSelectedGainY',
    '0014408C': 'UserSelectedPhase',
    '0014408D': 'UserSelectedOffsetX',
    '0014408E': 'UserSelectedOffsetY',
    '00144091': 'ChannelSettingsSequence',
    '00144092': 'ChannelThreshold',
    '0014409A': 'ScannerSettingsSequence',
    '0014409B': 'ScanProcedure',
    '0014409C': 'TranslationRateX',
    '0014409D': 'TranslationRateY',
    '0014409F': 'ChannelOverlap',
    '001440A0': 'ImageQualityIndicatorType',
    '001440A1': 'ImageQualityIndicatorMaterial',
    '001440A2': 'ImageQualityIndicatorSize',
    '00145002': 'LINACEnergy',
    '00145004': 'LINACOutput',
    '00145100': 'ActiveAperture',
    '00145101': 'TotalAperture',
    '00145102': 'ApertureElevation',
    '00145103': 'MainLobeAngle',
    '00145104': 'MainRoofAngle',
    '00145105': 'ConnectorType',
    '00145106': 'WedgeModelNumber',
    '00145107': 'WedgeAngleFloat',
    '00145108': 'WedgeRoofAngle',
    '00145109': ('WedgeElement1Position'),
    '0014510A': 'WedgeMaterialVelocity',
    '0014510B': 'WedgeMaterial',
    '0014510C': 'WedgeOffsetZ',
    '0014510D': 'WedgeOriginOffsetX',
    '0014510E': 'WedgeTimeDelay',
    '0014510F': 'WedgeName',
    '00145110': 'WedgeManufacturerName',
    '00145111': 'WedgeDescription',
    '00145112': 'NominalBeamAngle',
    '00145113': 'WedgeOffsetX',
    '00145114': 'WedgeOffsetY',
    '00145115': 'WedgeTotalLength',
    '00145116': 'WedgeInContactLength',
    '00145117': 'WedgeFrontGap',
    '00145118': 'WedgeTotalHeight',
    '00145119': 'WedgeFrontHeight',
    '0014511A': 'WedgeRearHeight',
    '0014511B': 'WedgeTotalWidth',
    '0014511C': 'WedgeInContactWidth',
    '0014511D': 'WedgeChamferHeight',
    '0014511E': 'WedgeCurve',
    '0014511F': 'RadiusAlongWedge',
    '00180010': 'ContrastBolusAgent',
    '00180012': 'ContrastBolusAgentSequence',
    '00180013': ('ContrastBolusT1Relaxivity'),
    '00180014': 'ContrastBolusAdministrationRouteSequence',
    '00180015': 'BodyPartExamined',
    '00180020': 'ScanningSequence',
    '00180021': 'SequenceVariant',
    '00180022': 'ScanOptions',
    '00180023': 'MRAcquisitionType',
    '00180024': 'SequenceName',
    '00180025': 'AngioFlag',
    '00180026': 'InterventionDrugInformationSequence',
    '00180027': 'InterventionDrugStopTime',
    '00180028': 'InterventionDrugDose',
    '00180029': 'InterventionDrugCodeSequence',
    '0018002A': 'AdditionalDrugSequence',
    '00180030': 'Radionuclide',
    '00180031': 'Radiopharmaceutical',
    '00180032': 'EnergyWindowCenterline',
    '00180033': 'EnergyWindowTotalWidth',
    '00180034': 'InterventionDrugName',
    '00180035': 'InterventionDrugStartTime',
    '00180036': 'InterventionSequence',
    '00180037': 'TherapyType',
    '00180038': 'InterventionStatus',
    '00180039': 'TherapyDescription',
    '0018003A': 'InterventionDescription',
    '00180040': 'CineRate',
    '00180042': 'InitialCineRunState',
    '00180050': 'SliceThickness',
    '00180060': 'KVP',
    '00180061': '',
    '00180070': 'CountsAccumulated',
    '00180071': 'AcquisitionTerminationCondition',
    '00180072': 'EffectiveDuration',
    '00180073': 'AcquisitionStartCondition',
    '00180074': 'AcquisitionStartConditionData',
    '00180075': 'AcquisitionTerminationConditionData',
    '00180080': 'RepetitionTime',
    '00180081': 'EchoTime',
    '00180082': 'InversionTime',
    '00180083': 'NumberOfAverages',
    '00180084': 'ImagingFrequency',
    '00180085': 'ImagedNucleus',
    '00180086': 'EchoNumbers',
    '00180087': 'MagneticFieldStrength',
    '00180088': 'SpacingBetweenSlices',
    '00180089': 'NumberOfPhaseEncodingSteps',
    '00180090': 'DataCollectionDiameter',
    '00180091': 'EchoTrainLength',
    '00180093': 'PercentSampling',
    '00180094': 'PercentPhaseFieldOfView',
    '00180095': 'PixelBandwidth',
    '00181000': 'DeviceSerialNumber',
    '00181002': 'DeviceUID',
    '00181003': 'DeviceID',
    '00181004': 'PlateID',
    '00181005': 'GeneratorID',
    '00181006': 'GridID',
    '00181007': 'CassetteID',
    '00181008': 'GantryID',
    '00181009': 'UniqueDeviceIdentifier',
    '0018100A': 'UDISequence',
    '00181010': 'SecondaryCaptureDeviceID',
    '00181011': 'HardcopyCreationDeviceID',
    '00181012': 'DateOfSecondaryCapture',
    '00181014': 'TimeOfSecondaryCapture',
    '00181016': 'SecondaryCaptureDeviceManufacturer',
    '00181017': 'HardcopyDeviceManufacturer',
    '00181018': 'SecondaryCaptureDeviceManufacturerModelName',
    '00181019': 'SecondaryCaptureDeviceSoftwareVersions',
    '0018101A': 'HardcopyDeviceSoftwareVersion',
    '0018101B': 'HardcopyDeviceManufacturerModelName',
    '00181020': 'SoftwareVersions',
    '00181022': 'VideoImageFormatAcquired',
    '00181023': 'DigitalImageFormatAcquired',
    '00181030': 'ProtocolName',
    '00181040': 'ContrastBolusRoute',
    '00181041': 'ContrastBolusVolume',
    '00181042': 'ContrastBolusStartTime',
    '00181043': 'ContrastBolusStopTime',
    '00181044': 'ContrastBolusTotalDose',
    '00181045': 'SyringeCounts',
    '00181046': 'ContrastFlowRate',
    '00181047': 'ContrastFlowDuration',
    '00181048': 'ContrastBolusIngredient',
    '00181049': 'ContrastBolusIngredientConcentration',
    '00181050': 'SpatialResolution',
    '00181060': 'TriggerTime',
    '00181061': 'TriggerSourceOrType',
    '00181062': 'NominalInterval',
    '00181063': 'FrameTime',
    '00181064': 'CardiacFramingType',
    '00181065': 'FrameTimeVector',
    '00181066': 'FrameDelay',
    '00181067': 'ImageTriggerDelay',
    '00181068': 'MultiplexGroupTimeOffset',
    '00181069': 'TriggerTimeOffset',
    '0018106A': 'SynchronizationTrigger',
    '0018106C': 'SynchronizationChannel',
    '0018106E': 'TriggerSamplePosition',
    '00181070': 'RadiopharmaceuticalRoute',
    '00181071': 'RadiopharmaceuticalVolume',
    '00181072': 'RadiopharmaceuticalStartTime',
    '00181073': 'RadiopharmaceuticalStopTime',
    '00181074': 'RadionuclideTotalDose',
    '00181075': 'RadionuclideHalfLife',
    '00181076': 'RadionuclidePositronFraction',
    '00181077': 'RadiopharmaceuticalSpecificActivity',
    '00181078': 'RadiopharmaceuticalStartDateTime',
    '00181079': 'RadiopharmaceuticalStopDateTime',
    '00181080': 'BeatRejectionFlag',
    '00181081': 'LowRRValue',
    '00181082': 'HighRRValue',
    '00181083': 'IntervalsAcquired',
    '00181084': 'IntervalsRejected',
    '00181085': 'PVCRejection',
    '00181086': 'SkipBeats',
    '00181088': 'HeartRate',
    '00181090': 'CardiacNumberOfImages',
    '00181094': 'TriggerWindow',
    '00181100': 'ReconstructionDiameter',
    '00181110': 'DistanceSourceToDetector',
    '00181111': 'DistanceSourceToPatient',
    '00181114': 'EstimatedRadiographicMagnificationFactor',
    '00181120': 'GantryDetectorTilt',
    '00181121': 'GantryDetectorSlew',
    '00181130': 'TableHeight',
    '00181131': 'TableTraverse',
    '00181134': 'TableMotion',
    '00181135': 'TableVerticalIncrement',
    '00181136': 'TableLateralIncrement',
    '00181137': 'TableLongitudinalIncrement',
    '00181138': 'TableAngle',
    '0018113A': 'TableType',
    '00181140': 'RotationDirection',
    '00181141': 'AngularPosition',
    '00181142': 'RadialPosition',
    '00181143': 'ScanArc',
    '00181144': 'AngularStep',
    '00181145': 'CenterOfRotationOffset',
    '00181146': 'RotationOffset',
    '00181147': 'FieldOfViewShape',
    '00181149': 'FieldOfViewDimensions',
    '00181150': 'ExposureTime',
    '00181151': 'XRayTubeCurrent',
    '00181152': 'Exposure',
    '00181153': 'ExposureInuAs',
    '00181154': 'AveragePulseWidth',
    '00181155': 'RadiationSetting',
    '00181156': 'RectificationType',
    '0018115A': 'RadiationMode',
    '0018115E': 'ImageAndFluoroscopyAreaDoseProduct',
    '00181160': 'FilterType',
    '00181161': 'TypeOfFilters',
    '00181162': 'IntensifierSize',
    '00181164': 'ImagerPixelSpacing',
    '00181166': 'Grid',
    '00181170': 'GeneratorPower',
    '00181180': 'CollimatorGridName',
    '00181181': 'CollimatorType',
    '00181182': 'FocalDistance',
    '00181183': 'XFocusCenter',
    '00181184': 'YFocusCenter',
    '00181190': 'FocalSpots',
    '00181191': 'AnodeTargetMaterial',
    '001811A0': 'BodyPartThickness',
    '001811A2': 'CompressionForce',
    '001811A3': 'CompressionPressure',
    '001811A4': 'PaddleDescription',
    '001811A5': 'CompressionContactArea',
    '00181200': 'DateOfLastCalibration',
    '00181201': 'TimeOfLastCalibration',
    '00181202': 'DateTimeOfLastCalibration',
    '00181210': 'ConvolutionKernel',
    '00181240': 'UpperLowerPixelValues',
    '00181242': 'ActualFrameDuration',
    '00181243': 'CountRate',
    '00181244': 'PreferredPlaybackSequencing',
    '00181250': 'ReceiveCoilName',
    '00181251': 'TransmitCoilName',
    '00181260': 'PlateType',
    '00181261': 'PhosphorType',
    '00181271': 'WaterEquivalentDiameter',
    '00181272': 'WaterEquivalentDiameterCalculationMethodCodeSequence',
    '00181300': 'ScanVelocity',
    '00181301': 'WholeBodyTechnique',
    '00181302': 'ScanLength',
    '00181310': 'AcquisitionMatrix',
    '00181312': 'InPlanePhaseEncodingDirection',
    '00181314': 'FlipAngle',
    '00181315': 'VariableFlipAngleFlag',
    '00181316': 'SAR',
    '00181318': 'dBdt',
    '00181320': ('B1rms'),
    '00181400': 'AcquisitionDeviceProcessingDescription',
    '00181401': 'AcquisitionDeviceProcessingCode',
    '00181402': 'CassetteOrientation',
    '00181403': 'CassetteSize',
    '00181404': 'ExposuresOnPlate',
    '00181405': 'RelativeXRayExposure',
    '00181411': 'ExposureIndex',
    '00181412': 'TargetExposureIndex',
    '00181413': 'DeviationIndex',
    '00181450': 'ColumnAngulation',
    '00181460': 'TomoLayerHeight',
    '00181470': 'TomoAngle',
    '00181480': 'TomoTime',
    '00181490': 'TomoType',
    '00181491': 'TomoClass',
    '00181495': 'NumberOfTomosynthesisSourceImages',
    '00181500': 'PositionerMotion',
    '00181508': 'PositionerType',
    '00181510': 'PositionerPrimaryAngle',
    '00181511': 'PositionerSecondaryAngle',
    '00181520': 'PositionerPrimaryAngleIncrement',
    '00181521': 'PositionerSecondaryAngleIncrement',
    '00181530': 'DetectorPrimaryAngle',
    '00181531': 'DetectorSecondaryAngle',
    '00181600': 'ShutterShape',
    '00181602': 'ShutterLeftVerticalEdge',
    '00181604': 'ShutterRightVerticalEdge',
    '00181606': 'ShutterUpperHorizontalEdge',
    '00181608': 'ShutterLowerHorizontalEdge',
    '00181610': 'CenterOfCircularShutter',
    '00181612': 'RadiusOfCircularShutter',
    '00181620': 'VerticesOfThePolygonalShutter',
    '00181622': 'ShutterPresentationValue',
    '00181623': 'ShutterOverlayGroup',
    '00181624': 'ShutterPresentationColorCIELabValue',
    '00181700': 'CollimatorShape',
    '00181702': 'CollimatorLeftVerticalEdge',
    '00181704': 'CollimatorRightVerticalEdge',
    '00181706': 'CollimatorUpperHorizontalEdge',
    '00181708': 'CollimatorLowerHorizontalEdge',
    '00181710': 'CenterOfCircularCollimator',
    '00181712': 'RadiusOfCircularCollimator',
    '00181720': 'VerticesOfThePolygonalCollimator',
    '00181800': 'AcquisitionTimeSynchronized',
    '00181801': 'TimeSource',
    '00181802': 'TimeDistributionProtocol',
    '00181803': 'NTPSourceAddress',
    '00182001': 'PageNumberVector',
    '00182002': 'FrameLabelVector',
    '00182003': 'FramePrimaryAngleVector',
    '00182004': 'FrameSecondaryAngleVector',
    '00182005': 'SliceLocationVector',
    '00182006': 'DisplayWindowLabelVector',
    '00182010': 'NominalScannedPixelSpacing',
    '00182020': 'DigitizingDeviceTransportDirection',
    '00182030': 'RotationOfScannedFilm',
    '00182041': 'BiopsyTargetSequence',
    '00182042': 'TargetUID',
    '00182043': 'LocalizingCursorPosition',
    '00182044': 'CalculatedTargetPosition',
    '00182045': 'TargetLabel',
    '00182046': 'DisplayedZValue',
    '00183100': 'IVUSAcquisition',
    '00183101': 'IVUSPullbackRate',
    '00183102': 'IVUSGatedRate',
    '00183103': 'IVUSPullbackStartFrameNumber',
    '00183104': 'IVUSPullbackStopFrameNumber',
    '00183105': 'LesionNumber',
    '00184000': 'AcquisitionComments',
    '00185000': 'OutputPower',
    '00185010': 'TransducerData',
    '00185012': 'FocusDepth',
    '00185020': 'ProcessingFunction',
    '00185021': 'PostprocessingFunction',
    '00185022': 'MechanicalIndex',
    '00185024': 'BoneThermalIndex',
    '00185026': 'CranialThermalIndex',
    '00185027': 'SoftTissueThermalIndex',
    '00185028': 'SoftTissueFocusThermalIndex',
    '00185029': 'SoftTissueSurfaceThermalIndex',
    '00185030': 'DynamicRange',
    '00185040': 'TotalGain',
    '00185050': 'DepthOfScanField',
    '00185100': 'PatientPosition',
    '00185101': 'ViewPosition',
    '00185104': 'ProjectionEponymousNameCodeSequence',
    '00185210': 'ImageTransformationMatrix',
    '00185212': 'ImageTranslationVector',
    '00186000': 'Sensitivity',
    '00186011': 'SequenceOfUltrasoundRegions',
    '00186012': 'RegionSpatialFormat',
    '00186014': 'RegionDataType',
    '00186016': 'RegionFlags',
    '00186018': ('RegionLocationMinX0'),
    '0018601A': ('RegionLocationMinY0'),
    '0018601C': ('RegionLocationMaxX1'),
    '0018601E': ('RegionLocationMaxY1'),
    '00186020': ('ReferencePixelX0'),
    '00186022': ('ReferencePixelY0'),
    '00186024': 'PhysicalUnitsXDirection',
    '00186026': 'PhysicalUnitsYDirection',
    '00186028': 'ReferencePixelPhysicalValueX',
    '0018602A': 'ReferencePixelPhysicalValueY',
    '0018602C': 'PhysicalDeltaX',
    '0018602E': 'PhysicalDeltaY',
    '00186030': 'TransducerFrequency',
    '00186031': 'TransducerType',
    '00186032': 'PulseRepetitionFrequency',
    '00186034': 'DopplerCorrectionAngle',
    '00186036': 'SteeringAngle',
    '00186038': 'DopplerSampleVolumeXPositionRetired',
    '00186039': 'DopplerSampleVolumeXPosition',
    '0018603A': 'DopplerSampleVolumeYPositionRetired',
    '0018603B': 'DopplerSampleVolumeYPosition',
    '0018603C': ('TMLinePositionX0Retired'),
    '0018603D': ('TMLinePositionX0'),
    '0018603E': ('TMLinePositionY0Retired'),
    '0018603F': ('TMLinePositionY0'),
    '00186040': ('TMLinePositionX1Retired'),
    '00186041': ('TMLinePositionX1'),
    '00186042': ('TMLinePositionY1Retired'),
    '00186043': ('TMLinePositionY1'),
    '00186044': 'PixelComponentOrganization',
    '00186046': 'PixelComponentMask',
    '00186048': 'PixelComponentRangeStart',
    '0018604A': 'PixelComponentRangeStop',
    '0018604C': 'PixelComponentPhysicalUnits',
    '0018604E': 'PixelComponentDataType',
    '00186050': 'NumberOfTableBreakPoints',
    '00186052': 'TableOfXBreakPoints',
    '00186054': 'TableOfYBreakPoints',
    '00186056': 'NumberOfTableEntries',
    '00186058': 'TableOfPixelValues',
    '0018605A': 'TableOfParameterValues',
    '00186060': 'RWaveTimeVector',
    '00187000': 'DetectorConditionsNominalFlag',
    '00187001': 'DetectorTemperature',
    '00187004': 'DetectorType',
    '00187005': 'DetectorConfiguration',
    '00187006': 'DetectorDescription',
    '00187008': 'DetectorMode',
    '0018700A': 'DetectorID',
    '0018700C': 'DateOfLastDetectorCalibration',
    '0018700E': 'TimeOfLastDetectorCalibration',
    '00187010': 'ExposuresOnDetectorSinceLastCalibration',
    '00187011': 'ExposuresOnDetectorSinceManufactured',
    '00187012': 'DetectorTimeSinceLastExposure',
    '00187014': 'DetectorActiveTime',
    '00187016': 'DetectorActivationOffsetFromExposure',
    '0018701A': 'DetectorBinning',
    '00187020': 'DetectorElementPhysicalSize',
    '00187022': 'DetectorElementSpacing',
    '00187024': 'DetectorActiveShape',
    '00187026': 'DetectorActiveDimensions',
    '00187028': 'DetectorActiveOrigin',
    '0018702A': 'DetectorManufacturerName',
    '0018702B': 'DetectorManufacturerModelName',
    '00187030': 'FieldOfViewOrigin',
    '00187032': 'FieldOfViewRotation',
    '00187034': 'FieldOfViewHorizontalFlip',
    '00187036': 'PixelDataAreaOriginRelativeToFOV',
    '00187038': 'PixelDataAreaRotationAngleRelativeToFOV',
    '00187040': 'GridAbsorbingMaterial',
    '00187041': 'GridSpacingMaterial',
    '00187042': 'GridThickness',
    '00187044': 'GridPitch',
    '00187046': 'GridAspectRatio',
    '00187048': 'GridPeriod',
    '0018704C': 'GridFocalDistance',
    '00187050': 'FilterMaterial',
    '00187052': 'FilterThicknessMinimum',
    '00187054': 'FilterThicknessMaximum',
    '00187056': 'FilterBeamPathLengthMinimum',
    '00187058': 'FilterBeamPathLengthMaximum',
    '00187060': 'ExposureControlMode',
    '00187062': 'ExposureControlModeDescription',
    '00187064': 'ExposureStatus',
    '00187065': 'PhototimerSetting',
    '00188150': 'ExposureTimeInuS',
    '00188151': 'XRayTubeCurrentInuA',
    '00189004': 'ContentQualification',
    '00189005': 'PulseSequenceName',
    '00189006': 'MRImagingModifierSequence',
    '00189008': 'EchoPulseSequence',
    '00189009': 'InversionRecovery',
    '00189010': 'FlowCompensation',
    '00189011': 'MultipleSpinEcho',
    '00189012': 'MultiPlanarExcitation',
    '00189014': 'PhaseContrast',
    '00189015': 'TimeOfFlightContrast',
    '00189016': 'Spoiling',
    '00189017': 'SteadyStatePulseSequence',
    '00189018': 'EchoPlanarPulseSequence',
    '00189019': 'TagAngleFirstAxis',
    '00189020': 'MagnetizationTransfer',
    '00189021': ('T2Preparation'),
    '00189022': 'BloodSignalNulling',
    '00189024': 'SaturationRecovery',
    '00189025': 'SpectrallySelectedSuppression',
    '00189026': 'SpectrallySelectedExcitation',
    '00189027': 'SpatialPresaturation',
    '00189028': 'Tagging',
    '00189029': 'OversamplingPhase',
    '00189030': 'TagSpacingFirstDimension',
    '00189032': 'GeometryOfKSpaceTraversal',
    '00189033': 'SegmentedKSpaceTraversal',
    '00189034': 'RectilinearPhaseEncodeReordering',
    '00189035': 'TagThickness',
    '00189036': 'PartialFourierDirection',
    '00189037': 'CardiacSynchronizationTechnique',
    '00189041': 'ReceiveCoilManufacturerName',
    '00189042': 'MRReceiveCoilSequence',
    '00189043': 'ReceiveCoilType',
    '00189044': 'QuadratureReceiveCoil',
    '00189045': 'MultiCoilDefinitionSequence',
    '00189046': 'MultiCoilConfiguration',
    '00189047': 'MultiCoilElementName',
    '00189048': 'MultiCoilElementUsed',
    '00189049': 'MRTransmitCoilSequence',
    '00189050': 'TransmitCoilManufacturerName',
    '00189051': 'TransmitCoilType',
    '00189052': 'SpectralWidth',
    '00189053': 'ChemicalShiftReference',
    '00189054': 'VolumeLocalizationTechnique',
    '00189058': 'MRAcquisitionFrequencyEncodingSteps',
    '00189059': 'Decoupling',
    '00189060': 'DecoupledNucleus',
    '00189061': 'DecouplingFrequency',
    '00189062': 'DecouplingMethod',
    '00189063': 'DecouplingChemicalShiftReference',
    '00189064': 'KSpaceFiltering',
    '00189065': 'TimeDomainFiltering',
    '00189066': 'NumberOfZeroFills',
    '00189067': 'BaselineCorrection',
    '00189069': 'ParallelReductionFactorInPlane',
    '00189070': 'CardiacRRIntervalSpecified',
    '00189073': 'AcquisitionDuration',
    '00189074': 'FrameAcquisitionDateTime',
    '00189075': 'DiffusionDirectionality',
    '00189076': 'DiffusionGradientDirectionSequence',
    '00189077': 'ParallelAcquisition',
    '00189078': 'ParallelAcquisitionTechnique',
    '00189079': 'InversionTimes',
    '00189080': 'MetaboliteMapDescription',
    '00189081': 'PartialFourier',
    '00189082': 'EffectiveEchoTime',
    '00189083': 'MetaboliteMapCodeSequence',
    '00189084': 'ChemicalShiftSequence',
    '00189085': 'CardiacSignalSource',
    '00189087': 'DiffusionBValue',
    '00189089': 'DiffusionGradientOrientation',
    '00189090': 'VelocityEncodingDirection',
    '00189091': 'VelocityEncodingMinimumValue',
    '00189092': 'VelocityEncodingAcquisitionSequence',
    '00189093': 'NumberOfKSpaceTrajectories',
    '00189094': 'CoverageOfKSpace',
    '00189095': 'SpectroscopyAcquisitionPhaseRows',
    '00189096': 'ParallelReductionFactorInPlaneRetired',
    '00189098': 'TransmitterFrequency',
    '00189100': 'ResonantNucleus',
    '00189101': 'FrequencyCorrection',
    '00189103': 'MRSpectroscopyFOVGeometrySequence',
    '00189104': 'SlabThickness',
    '00189105': 'SlabOrientation',
    '00189106': 'MidSlabPosition',
    '00189107': 'MRSpatialSaturationSequence',
    '00189112': 'MRTimingAndRelatedParametersSequence',
    '00189114': 'MREchoSequence',
    '00189115': 'MRModifierSequence',
    '00189117': 'MRDiffusionSequence',
    '00189118': 'CardiacSynchronizationSequence',
    '00189119': 'MRAveragesSequence',
    '00189125': 'MRFOVGeometrySequence',
    '00189126': 'VolumeLocalizationSequence',
    '00189127': 'SpectroscopyAcquisitionDataColumns',
    '00189147': 'DiffusionAnisotropyType',
    '00189151': 'FrameReferenceDateTime',
    '00189152': 'MRMetaboliteMapSequence',
    '00189155': 'ParallelReductionFactorOutOfPlane',
    '00189159': 'SpectroscopyAcquisitionOutOfPlanePhaseSteps',
    '00189166': 'BulkMotionStatus',
    '00189168': 'ParallelReductionFactorSecondInPlane',
    '00189169': 'CardiacBeatRejectionTechnique',
    '00189170': 'RespiratoryMotionCompensationTechnique',
    '00189171': 'RespiratorySignalSource',
    '00189172': 'BulkMotionCompensationTechnique',
    '00189173': 'BulkMotionSignalSource',
    '00189174': 'ApplicableSafetyStandardAgency',
    '00189175': 'ApplicableSafetyStandardDescription',
    '00189176': 'OperatingModeSequence',
    '00189177': 'OperatingModeType',
    '00189178': 'OperatingMode',
    '00189179': 'SpecificAbsorptionRateDefinition',
    '00189180': 'GradientOutputType',
    '00189181': 'SpecificAbsorptionRateValue',
    '00189182': 'GradientOutput',
    '00189183': 'FlowCompensationDirection',
    '00189184': 'TaggingDelay',
    '00189185': 'RespiratoryMotionCompensationTechniqueDescription',
    '00189186': 'RespiratorySignalSourceID',
    '00189195': 'ChemicalShiftMinimumIntegrationLimitInHz',
    '00189196': 'ChemicalShiftMaximumIntegrationLimitInHz',
    '00189197': 'MRVelocityEncodingSequence',
    '00189198': 'FirstOrderPhaseCorrection',
    '00189199': 'WaterReferencedPhaseCorrection',
    '00189200': 'MRSpectroscopyAcquisitionType',
    '00189214': 'RespiratoryCyclePosition',
    '00189217': 'VelocityEncodingMaximumValue',
    '00189218': 'TagSpacingSecondDimension',
    '00189219': 'TagAngleSecondAxis',
    '00189220': 'FrameAcquisitionDuration',
    '00189226': 'MRImageFrameTypeSequence',
    '00189227': 'MRSpectroscopyFrameTypeSequence',
    '00189231': 'MRAcquisitionPhaseEncodingStepsInPlane',
    '00189232': 'MRAcquisitionPhaseEncodingStepsOutOfPlane',
    '00189234': 'SpectroscopyAcquisitionPhaseColumns',
    '00189236': 'CardiacCyclePosition',
    '00189239': 'SpecificAbsorptionRateSequence',
    '00189240': 'RFEchoTrainLength',
    '00189241': 'GradientEchoTrainLength',
    '00189250': 'ArterialSpinLabelingContrast',
    '00189251': 'MRArterialSpinLabelingSequence',
    '00189252': 'ASLTechniqueDescription',
    '00189253': 'ASLSlabNumber',
    '00189254': 'ASLSlabThickness',
    '00189255': 'ASLSlabOrientation',
    '00189256': 'ASLMidSlabPosition',
    '00189257': 'ASLContext',
    '00189258': 'ASLPulseTrainDuration',
    '00189259': 'ASLCrusherFlag',
    '0018925A': 'ASLCrusherFlowLimit',
    '0018925B': 'ASLCrusherDescription',
    '0018925C': 'ASLBolusCutoffFlag',
    '0018925D': 'ASLBolusCutoffTimingSequence',
    '0018925E': 'ASLBolusCutoffTechnique',
    '0018925F': 'ASLBolusCutoffDelayTime',
    '00189260': 'ASLSlabSequence',
    '00189295': 'ChemicalShiftMinimumIntegrationLimitInppm',
    '00189296': 'ChemicalShiftMaximumIntegrationLimitInppm',
    '00189297': 'WaterReferenceAcquisition',
    '00189298': 'EchoPeakPosition',
    '00189301': 'CTAcquisitionTypeSequence',
    '00189302': 'AcquisitionType',
    '00189303': 'TubeAngle',
    '00189304': 'CTAcquisitionDetailsSequence',
    '00189305': 'RevolutionTime',
    '00189306': 'SingleCollimationWidth',
    '00189307': 'TotalCollimationWidth',
    '00189308': 'CTTableDynamicsSequence',
    '00189309': 'TableSpeed',
    '00189310': 'TableFeedPerRotation',
    '00189311': 'SpiralPitchFactor',
    '00189312': 'CTGeometrySequence',
    '00189313': 'DataCollectionCenterPatient',
    '00189314': 'CTReconstructionSequence',
    '00189315': 'ReconstructionAlgorithm',
    '00189316': 'ConvolutionKernelGroup',
    '00189317': 'ReconstructionFieldOfView',
    '00189318': 'ReconstructionTargetCenterPatient',
    '00189319': 'ReconstructionAngle',
    '00189320': 'ImageFilter',
    '00189321': 'CTExposureSequence',
    '00189322': 'ReconstructionPixelSpacing',
    '00189323': 'ExposureModulationType',
    '00189324': 'EstimatedDoseSaving',
    '00189325': 'CTXRayDetailsSequence',
    '00189326': 'CTPositionSequence',
    '00189327': 'TablePosition',
    '00189328': 'ExposureTimeInms',
    '00189329': 'CTImageFrameTypeSequence',
    '00189330': 'XRayTubeCurrentInmA',
    '00189332': 'ExposureInmAs',
    '00189333': 'ConstantVolumeFlag',
    '00189334': 'FluoroscopyFlag',
    '00189335': 'DistanceSourceToDataCollectionCenter',
    '00189337': 'ContrastBolusAgentNumber',
    '00189338': 'ContrastBolusIngredientCodeSequence',
    '00189340': 'ContrastAdministrationProfileSequence',
    '00189341': 'ContrastBolusUsageSequence',
    '00189342': 'ContrastBolusAgentAdministered',
    '00189343': 'ContrastBolusAgentDetected',
    '00189344': 'ContrastBolusAgentPhase',
    '00189345': 'CTDIvol',
    '00189346': 'CTDIPhantomTypeCodeSequence',
    '00189351': 'CalciumScoringMassFactorPatient',
    '00189352': 'CalciumScoringMassFactorDevice',
    '00189353': 'EnergyWeightingFactor',
    '00189360': 'CTAdditionalXRaySourceSequence',
    '00189401': 'ProjectionPixelCalibrationSequence',
    '00189402': 'DistanceSourceToIsocenter',
    '00189403': 'DistanceObjectToTableTop',
    '00189404': 'ObjectPixelSpacingInCenterOfBeam',
    '00189405': 'PositionerPositionSequence',
    '00189406': 'TablePositionSequence',
    '00189407': 'CollimatorShapeSequence',
    '00189410': 'PlanesInAcquisition',
    '00189412': 'XAXRFFrameCharacteristicsSequence',
    '00189417': 'FrameAcquisitionSequence',
    '00189420': 'XRayReceptorType',
    '00189423': 'AcquisitionProtocolName',
    '00189424': 'AcquisitionProtocolDescription',
    '00189425': 'ContrastBolusIngredientOpaque',
    '00189426': 'DistanceReceptorPlaneToDetectorHousing',
    '00189427': 'IntensifierActiveShape',
    '00189428': 'IntensifierActiveDimensions',
    '00189429': 'PhysicalDetectorSize',
    '00189430': 'PositionOfIsocenterProjection',
    '00189432': 'FieldOfViewSequence',
    '00189433': 'FieldOfViewDescription',
    '00189434': 'ExposureControlSensingRegionsSequence',
    '00189435': 'ExposureControlSensingRegionShape',
    '00189436': 'ExposureControlSensingRegionLeftVerticalEdge',
    '00189437': 'ExposureControlSensingRegionRightVerticalEdge',
    '00189438': 'ExposureControlSensingRegionUpperHorizontalEdge',
    '00189439': 'ExposureControlSensingRegionLowerHorizontalEdge',
    '00189440': 'CenterOfCircularExposureControlSensingRegion',
    '00189441': 'RadiusOfCircularExposureControlSensingRegion',
    '00189442': 'VerticesOfThePolygonalExposureControlSensingRegion',
    '00189445': '',
    '00189447': 'ColumnAngulationPatient',
    '00189449': 'BeamAngle',
    '00189451': 'FrameDetectorParametersSequence',
    '00189452': 'CalculatedAnatomyThickness',
    '00189455': 'CalibrationSequence',
    '00189456': 'ObjectThicknessSequence',
    '00189457': 'PlaneIdentification',
    '00189461': 'FieldOfViewDimensionsInFloat',
    '00189462': 'IsocenterReferenceSystemSequence',
    '00189463': 'PositionerIsocenterPrimaryAngle',
    '00189464': 'PositionerIsocenterSecondaryAngle',
    '00189465': 'PositionerIsocenterDetectorRotationAngle',
    '00189466': 'TableXPositionToIsocenter',
    '00189467': 'TableYPositionToIsocenter',
    '00189468': 'TableZPositionToIsocenter',
    '00189469': 'TableHorizontalRotationAngle',
    '00189470': 'TableHeadTiltAngle',
    '00189471': 'TableCradleTiltAngle',
    '00189472': 'FrameDisplayShutterSequence',
    '00189473': 'AcquiredImageAreaDoseProduct',
    '00189474': 'CArmPositionerTabletopRelationship',
    '00189476': 'XRayGeometrySequence',
    '00189477': 'IrradiationEventIdentificationSequence',
    '00189504': ('XRay3DFrameTypeSequence'),
    '00189506': 'ContributingSourcesSequence',
    '00189507': ('XRay3DAcquisitionSequence'),
    '00189508': 'PrimaryPositionerScanArc',
    '00189509': 'SecondaryPositionerScanArc',
    '00189510': 'PrimaryPositionerScanStartAngle',
    '00189511': 'SecondaryPositionerScanStartAngle',
    '00189514': 'PrimaryPositionerIncrement',
    '00189515': 'SecondaryPositionerIncrement',
    '00189516': 'StartAcquisitionDateTime',
    '00189517': 'EndAcquisitionDateTime',
    '00189518': 'PrimaryPositionerIncrementSign',
    '00189519': 'SecondaryPositionerIncrementSign',
    '00189524': 'ApplicationName',
    '00189525': 'ApplicationVersion',
    '00189526': 'ApplicationManufacturer',
    '00189527': 'AlgorithmType',
    '00189528': 'AlgorithmDescription',
    '00189530': ('XRay3DReconstructionSequence'),
    '00189531': 'ReconstructionDescription',
    '00189538': 'PerProjectionAcquisitionSequence',
    '00189541': 'DetectorPositionSequence',
    '00189542': 'XRayAcquisitionDoseSequence',
    '00189543': 'XRaySourceIsocenterPrimaryAngle',
    '00189544': 'XRaySourceIsocenterSecondaryAngle',
    '00189545': 'BreastSupportIsocenterPrimaryAngle',
    '00189546': 'BreastSupportIsocenterSecondaryAngle',
    '00189547': 'BreastSupportXPositionToIsocenter',
    '00189548': 'BreastSupportYPositionToIsocenter',
    '00189549': 'BreastSupportZPositionToIsocenter',
    '00189550': 'DetectorIsocenterPrimaryAngle',
    '00189551': 'DetectorIsocenterSecondaryAngle',
    '00189552': 'DetectorXPositionToIsocenter',
    '00189553': 'DetectorYPositionToIsocenter',
    '00189554': 'DetectorZPositionToIsocenter',
    '00189555': 'XRayGridSequence',
    '00189556': 'XRayFilterSequence',
    '00189557': 'DetectorActiveAreaTLHCPosition',
    '00189558': 'DetectorActiveAreaOrientation',
    '00189559': 'PositionerPrimaryAngleDirection',
    '00189601': 'DiffusionBMatrixSequence',
    '00189602': 'DiffusionBValueXX',
    '00189603': 'DiffusionBValueXY',
    '00189604': 'DiffusionBValueXZ',
    '00189605': 'DiffusionBValueYY',
    '00189606': 'DiffusionBValueYZ',
    '00189607': 'DiffusionBValueZZ',
    '00189621': 'FunctionalMRSequence',
    '00189622': 'FunctionalSettlingPhaseFramesPresent',
    '00189623': 'FunctionalSyncPulse',
    '00189624': 'SettlingPhaseFrame',
    '00189701': 'DecayCorrectionDateTime',
    '00189715': 'StartDensityThreshold',
    '00189716': 'StartRelativeDensityDifferenceThreshold',
    '00189717': 'StartCardiacTriggerCountThreshold',
    '00189718': 'StartRespiratoryTriggerCountThreshold',
    '00189719': 'TerminationCountsThreshold',
    '00189720': 'TerminationDensityThreshold',
    '00189721': 'TerminationRelativeDensityThreshold',
    '00189722': 'TerminationTimeThreshold',
    '00189723': 'TerminationCardiacTriggerCountThreshold',
    '00189724': 'TerminationRespiratoryTriggerCountThreshold',
    '00189725': 'DetectorGeometry',
    '00189726': 'TransverseDetectorSeparation',
    '00189727': 'AxialDetectorDimension',
    '00189729': 'RadiopharmaceuticalAgentNumber',
    '00189732': 'PETFrameAcquisitionSequence',
    '00189733': 'PETDetectorMotionDetailsSequence',
    '00189734': 'PETTableDynamicsSequence',
    '00189735': 'PETPositionSequence',
    '00189736': 'PETFrameCorrectionFactorsSequence',
    '00189737': 'RadiopharmaceuticalUsageSequence',
    '00189738': 'AttenuationCorrectionSource',
    '00189739': 'NumberOfIterations',
    '00189740': 'NumberOfSubsets',
    '00189749': 'PETReconstructionSequence',
    '00189751': 'PETFrameTypeSequence',
    '00189755': 'TimeOfFlightInformationUsed',
    '00189756': 'ReconstructionType',
    '00189758': 'DecayCorrected',
    '00189759': 'AttenuationCorrected',
    '00189760': 'ScatterCorrected',
    '00189761': 'DeadTimeCorrected',
    '00189762': 'GantryMotionCorrected',
    '00189763': 'PatientMotionCorrected',
    '00189764': 'CountLossNormalizationCorrected',
    '00189765': 'RandomsCorrected',
    '00189766': 'NonUniformRadialSamplingCorrected',
    '00189767': 'SensitivityCalibrated',
    '00189768': 'DetectorNormalizationCorrection',
    '00189769': 'IterativeReconstructionMethod',
    '00189770': 'AttenuationCorrectionTemporalRelationship',
    '00189771': 'PatientPhysiologicalStateSequence',
    '00189772': 'PatientPhysiologicalStateCodeSequence',
    '00189801': 'DepthsOfFocus',
    '00189803': 'ExcludedIntervalsSequence',
    '00189804': 'ExclusionStartDateTime',
    '00189805': 'ExclusionDuration',
    '00189806': 'USImageDescriptionSequence',
    '00189807': 'ImageDataTypeSequence',
    '00189808': 'DataType',
    '00189809': 'TransducerScanPatternCodeSequence',
    '0018980B': 'AliasedDataType',
    '0018980C': 'PositionMeasuringDeviceUsed',
    '0018980D': 'TransducerGeometryCodeSequence',
    '0018980E': 'TransducerBeamSteeringCodeSequence',
    '0018980F': 'TransducerApplicationCodeSequence',
    '00189810': 'ZeroVelocityPixelValue',
    '00189900': 'ReferenceLocationLabel',
    '00189901': 'ReferenceLocationDescription',
    '00189902': 'ReferenceBasisCodeSequence',
    '00189903': 'ReferenceGeometryCodeSequence',
    '00189904': 'OffsetDistance',
    '00189905': 'OffsetDirection',
    '00189906': 'PotentialScheduledProtocolCodeSequence',
    '00189907': 'PotentialRequestedProcedureCodeSequence',
    '00189908': 'PotentialReasonsForProcedure',
    '00189909': 'PotentialReasonsForProcedureCodeSequence',
    '0018990A': 'PotentialDiagnosticTasks',
    '0018990B': 'ContraindicationsCodeSequence',
    '0018990C': 'ReferencedDefinedProtocolSequence',
    '0018990D': 'ReferencedPerformedProtocolSequence',
    '0018990E': 'PredecessorProtocolSequence',
    '0018990F': 'ProtocolPlanningInformation',
    '00189910': 'ProtocolDesignRationale',
    '00189911': 'PatientSpecificationSequence',
    '00189912': 'ModelSpecificationSequence',
    '00189913': 'ParametersSpecificationSequence',
    '00189914': 'InstructionSequence',
    '00189915': 'InstructionIndex',
    '00189916': 'InstructionText',
    '00189917': 'InstructionDescription',
    '00189918': 'InstructionPerformedFlag',
    '00189919': 'InstructionPerformedDateTime',
    '0018991A': 'InstructionPerformanceComment',
    '0018991B': 'PatientPositioningInstructionSequence',
    '0018991C': 'PositioningMethodCodeSequence',
    '0018991D': 'PositioningLandmarkSequence',
    '0018991E': 'TargetFrameOfReferenceUID',
    '0018991F': 'AcquisitionProtocolElementSpecificationSequence',
    '00189920': 'AcquisitionProtocolElementSequence',
    '00189921': 'ProtocolElementNumber',
    '00189922': 'ProtocolElementName',
    '00189923': 'ProtocolElementCharacteristicsSummary',
    '00189924': 'ProtocolElementPurpose',
    '00189930': 'AcquisitionMotion',
    '00189931': 'AcquisitionStartLocationSequence',
    '00189932': 'AcquisitionEndLocationSequence',
    '00189933': 'ReconstructionProtocolElementSpecificationSequence',
    '00189934': 'ReconstructionProtocolElementSequence',
    '00189935': 'StorageProtocolElementSpecificationSequence',
    '00189936': 'StorageProtocolElementSequence',
    '00189937': 'RequestedSeriesDescription',
    '00189938': 'SourceAcquisitionProtocolElementNumber',
    '00189939': 'SourceAcquisitionBeamNumber',
    '0018993A': 'SourceReconstructionProtocolElementNumber',
    '0018993B': 'ReconstructionStartLocationSequence',
    '0018993C': 'ReconstructionEndLocationSequence',
    '0018993D': 'ReconstructionAlgorithmSequence',
    '0018993E': 'ReconstructionTargetCenterLocationSequence',
    '00189941': 'ImageFilterDescription',
    '00189942': 'CTDIvolNotificationTrigger',
    '00189943': 'DLPNotificationTrigger',
    '00189944': 'AutoKVPSelectionType',
    '00189945': 'AutoKVPUpperBound',
    '00189946': 'AutoKVPLowerBound',
    '00189947': 'ProtocolDefinedPatientPosition',
    '0018A001': 'ContributingEquipmentSequence',
    '0018A002': 'ContributionDateTime',
    '0018A003': 'ContributionDescription',
    '0020000D': 'StudyInstanceUID',
    '0020000E': 'SeriesInstanceUID',
    '00200010': 'StudyID',
    '00200011': 'SeriesNumber',
    '00200012': 'AcquisitionNumber',
    '00200013': 'InstanceNumber',
    '00200014': 'IsotopeNumber',
    '00200015': 'PhaseNumber',
    '00200016': 'IntervalNumber',
    '00200017': 'TimeSlotNumber',
    '00200018': 'AngleNumber',
    '00200019': 'ItemNumber',
    '00200020': 'PatientOrientation',
    '00200022': 'OverlayNumber',
    '00200024': 'CurveNumber',
    '00200026': 'LUTNumber',
    '00200030': 'ImagePosition',
    '00200032': 'ImagePositionPatient',
    '00200035': 'ImageOrientation',
    '00200037': 'ImageOrientationPatient',
    '00200050': 'Location',
    '00200052': 'FrameOfReferenceUID',
    '00200060': 'Laterality',
    '00200062': 'ImageLaterality',
    '00200070': 'ImageGeometryType',
    '00200080': 'MaskingImage',
    '002000AA': 'ReportNumber',
    '00200100': 'TemporalPositionIdentifier',
    '00200105': 'NumberOfTemporalPositions',
    '00200110': 'TemporalResolution',
    '00200200': 'SynchronizationFrameOfReferenceUID',
    '00200242': 'SOPInstanceUIDOfConcatenationSource',
    '00201000': 'SeriesInStudy',
    '00201001': 'AcquisitionsInSeries',
    '00201002': 'ImagesInAcquisition',
    '00201003': 'ImagesInSeries',
    '00201004': 'AcquisitionsInStudy',
    '00201005': 'ImagesInStudy',
    '00201020': 'Reference',
    '0020103F': 'TargetPositionReferenceIndicator',
    '00201040': 'PositionReferenceIndicator',
    '00201041': 'SliceLocation',
    '00201070': 'OtherStudyNumbers',
    '00201200': 'NumberOfPatientRelatedStudies',
    '00201202': 'NumberOfPatientRelatedSeries',
    '00201204': 'NumberOfPatientRelatedInstances',
    '00201206': 'NumberOfStudyRelatedSeries',
    '00201208': 'NumberOfStudyRelatedInstances',
    '00201209': 'NumberOfSeriesRelatedInstances',
    '00203401': 'ModifyingDeviceID',
    '00203402': 'ModifiedImageID',
    '00203403': 'ModifiedImageDate',
    '00203404': 'ModifyingDeviceManufacturer',
    '00203405': 'ModifiedImageTime',
    '00203406': 'ModifiedImageDescription',
    '00204000': 'ImageComments',
    '00205000': 'OriginalImageIdentification',
    '00205002': 'OriginalImageIdentificationNomenclature',
    '00209056': 'StackID',
    '00209057': 'InStackPositionNumber',
    '00209071': 'FrameAnatomySequence',
    '00209072': 'FrameLaterality',
    '00209111': 'FrameContentSequence',
    '00209113': 'PlanePositionSequence',
    '00209116': 'PlaneOrientationSequence',
    '00209128': 'TemporalPositionIndex',
    '00209153': 'NominalCardiacTriggerDelayTime',
    '00209154': 'NominalCardiacTriggerTimePriorToRPeak',
    '00209155': 'ActualCardiacTriggerTimePriorToRPeak',
    '00209156': 'FrameAcquisitionNumber',
    '00209157': 'DimensionIndexValues',
    '00209158': 'FrameComments',
    '00209161': 'ConcatenationUID',
    '00209162': 'InConcatenationNumber',
    '00209163': 'InConcatenationTotalNumber',
    '00209164': 'DimensionOrganizationUID',
    '00209165': 'DimensionIndexPointer',
    '00209167': 'FunctionalGroupPointer',
    '00209170': 'UnassignedSharedConvertedAttributesSequence',
    '00209171': 'UnassignedPerFrameConvertedAttributesSequence',
    '00209172': 'ConversionSourceAttributesSequence',
    '00209213': 'DimensionIndexPrivateCreator',
    '00209221': 'DimensionOrganizationSequence',
    '00209222': 'DimensionIndexSequence',
    '00209228': 'ConcatenationFrameOffsetNumber',
    '00209238': 'FunctionalGroupPrivateCreator',
    '00209241': 'NominalPercentageOfCardiacPhase',
    '00209245': 'NominalPercentageOfRespiratoryPhase',
    '00209246': 'StartingRespiratoryAmplitude',
    '00209247': 'StartingRespiratoryPhase',
    '00209248': 'EndingRespiratoryAmplitude',
    '00209249': 'EndingRespiratoryPhase',
    '00209250': 'RespiratoryTriggerType',
    '00209251': 'RRIntervalTimeNominal',
    '00209252': 'ActualCardiacTriggerDelayTime',
    '00209253': 'RespiratorySynchronizationSequence',
    '00209254': 'RespiratoryIntervalTime',
    '00209255': 'NominalRespiratoryTriggerDelayTime',
    '00209256': 'RespiratoryTriggerDelayThreshold',
    '00209257': 'ActualRespiratoryTriggerDelayTime',
    '00209301': 'ImagePositionVolume',
    '00209302': 'ImageOrientationVolume',
    '00209307': 'UltrasoundAcquisitionGeometry',
    '00209308': 'ApexPosition',
    '00209309': 'VolumeToTransducerMappingMatrix',
    '0020930A': 'VolumeToTableMappingMatrix',
    '0020930B': 'VolumeToTransducerRelationship',
    '0020930C': 'PatientFrameOfReferenceSource',
    '0020930D': 'TemporalPositionTimeOffset',
    '0020930E': 'PlanePositionVolumeSequence',
    '0020930F': 'PlaneOrientationVolumeSequence',
    '00209310': 'TemporalPositionSequence',
    '00209311': 'DimensionOrganizationType',
    '00209312': 'VolumeFrameOfReferenceUID',
    '00209313': 'TableFrameOfReferenceUID',
    '00209421': 'DimensionDescriptionLabel',
    '00209450': 'PatientOrientationInFrameSequence',
    '00209453': 'FrameLabel',
    '00209518': 'AcquisitionIndex',
    '00209529': 'ContributingSOPInstancesReferenceSequence',
    '00209536': 'ReconstructionIndex',
    '00220001': 'LightPathFilterPassThroughWavelength',
    '00220002': 'LightPathFilterPassBand',
    '00220003': 'ImagePathFilterPassThroughWavelength',
    '00220004': 'ImagePathFilterPassBand',
    '00220005': 'PatientEyeMovementCommanded',
    '00220006': 'PatientEyeMovementCommandCodeSequence',
    '00220007': 'SphericalLensPower',
    '00220008': 'CylinderLensPower',
    '00220009': 'CylinderAxis',
    '0022000A': 'EmmetropicMagnification',
    '0022000B': 'IntraOcularPressure',
    '0022000C': 'HorizontalFieldOfView',
    '0022000D': 'PupilDilated',
    '0022000E': 'DegreeOfDilation',
    '00220010': 'StereoBaselineAngle',
    '00220011': 'StereoBaselineDisplacement',
    '00220012': 'StereoHorizontalPixelOffset',
    '00220013': 'StereoVerticalPixelOffset',
    '00220014': 'StereoRotation',
    '00220015': 'AcquisitionDeviceTypeCodeSequence',
    '00220016': 'IlluminationTypeCodeSequence',
    '00220017': 'LightPathFilterTypeStackCodeSequence',
    '00220018': 'ImagePathFilterTypeStackCodeSequence',
    '00220019': 'LensesCodeSequence',
    '0022001A': 'ChannelDescriptionCodeSequence',
    '0022001B': 'RefractiveStateSequence',
    '0022001C': 'MydriaticAgentCodeSequence',
    '0022001D': 'RelativeImagePositionCodeSequence',
    '0022001E': 'CameraAngleOfView',
    '00220020': 'StereoPairsSequence',
    '00220021': 'LeftImageSequence',
    '00220022': 'RightImageSequence',
    '00220028': 'StereoPairsPresent',
    '00220030': 'AxialLengthOfTheEye',
    '00220031': 'OphthalmicFrameLocationSequence',
    '00220032': 'ReferenceCoordinates',
    '00220035': 'DepthSpatialResolution',
    '00220036': 'MaximumDepthDistortion',
    '00220037': 'AlongScanSpatialResolution',
    '00220038': 'MaximumAlongScanDistortion',
    '00220039': 'OphthalmicImageOrientation',
    '00220041': 'DepthOfTransverseImage',
    '00220042': 'MydriaticAgentConcentrationUnitsSequence',
    '00220048': 'AcrossScanSpatialResolution',
    '00220049': 'MaximumAcrossScanDistortion',
    '0022004E': 'MydriaticAgentConcentration',
    '00220055': 'IlluminationWaveLength',
    '00220056': 'IlluminationPower',
    '00220057': 'IlluminationBandwidth',
    '00220058': 'MydriaticAgentSequence',
    '00221007': 'OphthalmicAxialMeasurementsRightEyeSequence',
    '00221008': 'OphthalmicAxialMeasurementsLeftEyeSequence',
    '00221009': 'OphthalmicAxialMeasurementsDeviceType',
    '00221010': 'OphthalmicAxialLengthMeasurementsType',
    '00221012': 'OphthalmicAxialLengthSequence',
    '00221019': 'OphthalmicAxialLength',
    '00221024': 'LensStatusCodeSequence',
    '00221025': 'VitreousStatusCodeSequence',
    '00221028': 'IOLFormulaCodeSequence',
    '00221029': 'IOLFormulaDetail',
    '00221033': 'KeratometerIndex',
    '00221035': 'SourceOfOphthalmicAxialLengthCodeSequence',
    '00221037': 'TargetRefraction',
    '00221039': 'RefractiveProcedureOccurred',
    '00221040': 'RefractiveSurgeryTypeCodeSequence',
    '00221044': 'OphthalmicUltrasoundMethodCodeSequence',
    '00221050': 'OphthalmicAxialLengthMeasurementsSequence',
    '00221053': 'IOLPower',
    '00221054': 'PredictedRefractiveError',
    '00221059': 'OphthalmicAxialLengthVelocity',
    '00221065': 'LensStatusDescription',
    '00221066': 'VitreousStatusDescription',
    '00221090': 'IOLPowerSequence',
    '00221092': 'LensConstantSequence',
    '00221093': 'IOLManufacturer',
    '00221094': 'LensConstantDescription',
    '00221095': 'ImplantName',
    '00221096': 'KeratometryMeasurementTypeCodeSequence',
    '00221097': 'ImplantPartNumber',
    '00221100': 'ReferencedOphthalmicAxialMeasurementsSequence',
    '00221101': 'OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence',
    '00221103': 'RefractiveErrorBeforeRefractiveSurgeryCodeSequence',
    '00221121': 'IOLPowerForExactEmmetropia',
    '00221122': 'IOLPowerForExactTargetRefraction',
    '00221125': 'AnteriorChamberDepthDefinitionCodeSequence',
    '00221127': 'LensThicknessSequence',
    '00221128': 'AnteriorChamberDepthSequence',
    '00221130': 'LensThickness',
    '00221131': 'AnteriorChamberDepth',
    '00221132': 'SourceOfLensThicknessDataCodeSequence',
    '00221133': 'SourceOfAnteriorChamberDepthDataCodeSequence',
    '00221134': 'SourceOfRefractiveMeasurementsSequence',
    '00221135': 'SourceOfRefractiveMeasurementsCodeSequence',
    '00221140': 'OphthalmicAxialLengthMeasurementModified',
    '00221150': 'OphthalmicAxialLengthDataSourceCodeSequence',
    '00221153': 'OphthalmicAxialLengthAcquisitionMethodCodeSequence',
    '00221155': 'SignalToNoiseRatio',
    '00221159': 'OphthalmicAxialLengthDataSourceDescription',
    '00221210': 'OphthalmicAxialLengthMeasurementsTotalLengthSequence',
    '00221211': 'OphthalmicAxialLengthMeasurementsSegmentalLengthSequence',
    '00221212': 'OphthalmicAxialLengthMeasurementsLengthSummationSequence',
    '00221220': 'UltrasoundOphthalmicAxialLengthMeasurementsSequence',
    '00221225': 'OpticalOphthalmicAxialLengthMeasurementsSequence',
    '00221230': 'UltrasoundSelectedOphthalmicAxialLengthSequence',
    '00221250': 'OphthalmicAxialLengthSelectionMethodCodeSequence',
    '00221255': 'OpticalSelectedOphthalmicAxialLengthSequence',
    '00221257': 'SelectedSegmentalOphthalmicAxialLengthSequence',
    '00221260': 'SelectedTotalOphthalmicAxialLengthSequence',
    '00221262': 'OphthalmicAxialLengthQualityMetricSequence',
    '00221265': 'OphthalmicAxialLengthQualityMetricTypeCodeSequence',
    '00221273': 'OphthalmicAxialLengthQualityMetricTypeDescription',
    '00221300': 'IntraocularLensCalculationsRightEyeSequence',
    '00221310': 'IntraocularLensCalculationsLeftEyeSequence',
    '00221330': 'ReferencedOphthalmicAxialLengthMeasurementQCImageSequence',
    '00221415': 'OphthalmicMappingDeviceType',
    '00221420': 'AcquisitionMethodCodeSequence',
    '00221423': 'AcquisitionMethodAlgorithmSequence',
    '00221436': 'OphthalmicThicknessMapTypeCodeSequence',
    '00221443': 'OphthalmicThicknessMappingNormalsSequence',
    '00221445': 'RetinalThicknessDefinitionCodeSequence',
    '00221450': 'PixelValueMappingToCodedConceptSequence',
    '00221452': 'MappedPixelValue',
    '00221454': 'PixelValueMappingExplanation',
    '00221458': 'OphthalmicThicknessMapQualityThresholdSequence',
    '00221460': 'OphthalmicThicknessMapThresholdQualityRating',
    '00221463': 'AnatomicStructureReferencePoint',
    '00221465': 'RegistrationToLocalizerSequence',
    '00221466': 'RegisteredLocalizerUnits',
    '00221467': 'RegisteredLocalizerTopLeftHandCorner',
    '00221468': 'RegisteredLocalizerBottomRightHandCorner',
    '00221470': 'OphthalmicThicknessMapQualityRatingSequence',
    '00221472': 'RelevantOPTAttributesSequence',
    '00221512': 'TransformationMethodCodeSequence',
    '00221513': 'TransformationAlgorithmSequence',
    '00221515': 'OphthalmicAxialLengthMethod',
    '00221517': 'OphthalmicFOV',
    '00221518': 'TwoDimensionalToThreeDimensionalMapSequence',
    '00221525': 'WideFieldOphthalmicPhotographyQualityRatingSequence',
    '00221526': 'WideFieldOphthalmicPhotographyQualityThresholdSequence',
    '00221527': 'WideFieldOphthalmicPhotographyThresholdQualityRating',
    '00221528': 'XCoordinatesCenterPixelViewAngle',
    '00221529': 'YCoordinatesCenterPixelViewAngle',
    '00221530': 'NumberOfMapPoints',
    '00221531': 'TwoDimensionalToThreeDimensionalMapData',
    '00221612': 'DerivationAlgorithmSequence',
    '00221615': 'OphthalmicImageTypeCodeSequence',
    '00221616': 'OphthalmicImageTypeDescription',
    '00221618': 'ScanPatternTypeCodeSequence',
    '00221620': 'ReferencedSurfaceMeshIdentificationSequence',
    '00221622': 'OphthalmicVolumetricPropertiesFlag',
    '00221624': 'OphthalmicAnatomicReferencePointXCoordinate',
    '00221626': 'OphthalmicAnatomicReferencePointYCoordinate',
    '00221628': 'OphthalmicEnFaceImageQualityRatingSequence',
    '00221630': 'QualityThreshold',
    '00221640': 'OCTBscanAnalysisAcquisitionParametersSequence',
    '00221642': 'NumberofBscansPerFrame',
    '00221643': 'BscanSlabThickness',
    '00221644': 'DistanceBetweenBscanSlabs',
    '00221645': 'BscanCycleTime',
    '00221646': 'BscanCycleTimeVector',
    '00221649': 'AscanRate',
    '00221650': 'BscanRate',
    '00221658': 'SurfaceMeshZPixelOffset',
    '00240010': 'VisualFieldHorizontalExtent',
    '00240011': 'VisualFieldVerticalExtent',
    '00240012': 'VisualFieldShape',
    '00240016': 'ScreeningTestModeCodeSequence',
    '00240018': 'MaximumStimulusLuminance',
    '00240020': 'BackgroundLuminance',
    '00240021': 'StimulusColorCodeSequence',
    '00240024': 'BackgroundIlluminationColorCodeSequence',
    '00240025': 'StimulusArea',
    '00240028': 'StimulusPresentationTime',
    '00240032': 'FixationSequence',
    '00240033': 'FixationMonitoringCodeSequence',
    '00240034': 'VisualFieldCatchTrialSequence',
    '00240035': 'FixationCheckedQuantity',
    '00240036': 'PatientNotProperlyFixatedQuantity',
    '00240037': 'PresentedVisualStimuliDataFlag',
    '00240038': 'NumberOfVisualStimuli',
    '00240039': 'ExcessiveFixationLossesDataFlag',
    '00240040': 'ExcessiveFixationLosses',
    '00240042': 'StimuliRetestingQuantity',
    '00240044': 'CommentsOnPatientPerformanceOfVisualField',
    '00240045': 'FalseNegativesEstimateFlag',
    '00240046': 'FalseNegativesEstimate',
    '00240048': 'NegativeCatchTrialsQuantity',
    '00240050': 'FalseNegativesQuantity',
    '00240051': 'ExcessiveFalseNegativesDataFlag',
    '00240052': 'ExcessiveFalseNegatives',
    '00240053': 'FalsePositivesEstimateFlag',
    '00240054': 'FalsePositivesEstimate',
    '00240055': 'CatchTrialsDataFlag',
    '00240056': 'PositiveCatchTrialsQuantity',
    '00240057': 'TestPointNormalsDataFlag',
    '00240058': 'TestPointNormalsSequence',
    '00240059': 'GlobalDeviationProbabilityNormalsFlag',
    '00240060': 'FalsePositivesQuantity',
    '00240061': 'ExcessiveFalsePositivesDataFlag',
    '00240062': 'ExcessiveFalsePositives',
    '00240063': 'VisualFieldTestNormalsFlag',
    '00240064': 'ResultsNormalsSequence',
    '00240065': 'AgeCorrectedSensitivityDeviationAlgorithmSequence',
    '00240066': 'GlobalDeviationFromNormal',
    '00240067': 'GeneralizedDefectSensitivityDeviationAlgorithmSequence',
    '00240068': 'LocalizedDeviationFromNormal',
    '00240069': 'PatientReliabilityIndicator',
    '00240070': 'VisualFieldMeanSensitivity',
    '00240071': 'GlobalDeviationProbability',
    '00240072': 'LocalDeviationProbabilityNormalsFlag',
    '00240073': 'LocalizedDeviationProbability',
    '00240074': 'ShortTermFluctuationCalculated',
    '00240075': 'ShortTermFluctuation',
    '00240076': 'ShortTermFluctuationProbabilityCalculated',
    '00240077': 'ShortTermFluctuationProbability',
    '00240078': 'CorrectedLocalizedDeviationFromNormalCalculated',
    '00240079': 'CorrectedLocalizedDeviationFromNormal',
    '00240080': 'CorrectedLocalizedDeviationFromNormalProbabilityCalculated',
    '00240081': 'CorrectedLocalizedDeviationFromNormalProbability',
    '00240083': 'GlobalDeviationProbabilitySequence',
    '00240085': 'LocalizedDeviationProbabilitySequence',
    '00240086': 'FovealSensitivityMeasured',
    '00240087': 'FovealSensitivity',
    '00240088': 'VisualFieldTestDuration',
    '00240089': 'VisualFieldTestPointSequence',
    '00240090': 'VisualFieldTestPointXCoordinate',
    '00240091': 'VisualFieldTestPointYCoordinate',
    '00240092': 'AgeCorrectedSensitivityDeviationValue',
    '00240093': 'StimulusResults',
    '00240094': 'SensitivityValue',
    '00240095': 'RetestStimulusSeen',
    '00240096': 'RetestSensitivityValue',
    '00240097': 'VisualFieldTestPointNormalsSequence',
    '00240098': 'QuantifiedDefect',
    '00240100': 'AgeCorrectedSensitivityDeviationProbabilityValue',
    '00240102': 'GeneralizedDefectCorrectedSensitivityDeviationFlag',
    '00240103': 'GeneralizedDefectCorrectedSensitivityDeviationValue',
    '00240104': 'GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue',
    '00240105': 'MinimumSensitivityValue',
    '00240106': 'BlindSpotLocalized',
    '00240107': 'BlindSpotXCoordinate',
    '00240108': 'BlindSpotYCoordinate',
    '00240110': 'VisualAcuityMeasurementSequence',
    '00240112': 'RefractiveParametersUsedOnPatientSequence',
    '00240113': 'MeasurementLaterality',
    '00240114': 'OphthalmicPatientClinicalInformationLeftEyeSequence',
    '00240115': 'OphthalmicPatientClinicalInformationRightEyeSequence',
    '00240117': 'FovealPointNormativeDataFlag',
    '00240118': 'FovealPointProbabilityValue',
    '00240120': 'ScreeningBaselineMeasured',
    '00240122': 'ScreeningBaselineMeasuredSequence',
    '00240124': 'ScreeningBaselineType',
    '00240126': 'ScreeningBaselineValue',
    '00240202': 'AlgorithmSource',
    '00240306': 'DataSetName',
    '00240307': 'DataSetVersion',
    '00240308': 'DataSetSource',
    '00240309': 'DataSetDescription',
    '00240317': 'VisualFieldTestReliabilityGlobalIndexSequence',
    '00240320': 'VisualFieldGlobalResultsIndexSequence',
    '00240325': 'DataObservationSequence',
    '00240338': 'IndexNormalsFlag',
    '00240341': 'IndexProbability',
    '00240344': 'IndexProbabilitySequence',
    '00280002': 'SamplesPerPixel',
    '00280003': 'SamplesPerPixelUsed',
    '00280004': 'PhotometricInterpretation',
    '00280005': 'ImageDimensions',
    '00280006': 'PlanarConfiguration',
    '00280008': 'NumberOfFrames',
    '00280009': 'FrameIncrementPointer',
    '0028000A': 'FrameDimensionPointer',
    '00280010': 'Rows',
    '00280011': 'Columns',
    '00280012': 'Planes',
    '00280014': 'UltrasoundColorDataPresent',
    '00280020': '',
    '00280030': 'PixelSpacing',
    '00280031': 'ZoomFactor',
    '00280032': 'ZoomCenter',
    '00280034': 'PixelAspectRatio',
    '00280040': 'ImageFormat',
    '00280050': 'ManipulatedImage',
    '00280051': 'CorrectedImage',
    '0028005F': 'CompressionRecognitionCode',
    '00280060': 'CompressionCode',
    '00280061': 'CompressionOriginator',
    '00280062': 'CompressionLabel',
    '00280063': 'CompressionDescription',
    '00280065': 'CompressionSequence',
    '00280066': 'CompressionStepPointers',
    '00280068': 'RepeatInterval',
    '00280069': 'BitsGrouped',
    '00280070': 'PerimeterTable',
    '00280071': 'PerimeterValue',
    '00280080': 'PredictorRows',
    '00280081': 'PredictorColumns',
    '00280082': 'PredictorConstants',
    '00280090': 'BlockedPixels',
    '00280091': 'BlockRows',
    '00280092': 'BlockColumns',
    '00280093': 'RowOverlap',
    '00280094': 'ColumnOverlap',
    '00280100': 'BitsAllocated',
    '00280101': 'BitsStored',
    '00280102': 'HighBit',
    '00280103': 'PixelRepresentation',
    '00280104': 'SmallestValidPixelValue',
    '00280105': 'LargestValidPixelValue',
    '00280106': 'SmallestImagePixelValue',
    '00280107': 'LargestImagePixelValue',
    '00280108': 'SmallestPixelValueInSeries',
    '00280109': 'LargestPixelValueInSeries',
    '00280110': 'SmallestImagePixelValueInPlane',
    '00280111': 'LargestImagePixelValueInPlane',
    '00280120': 'PixelPaddingValue',
    '00280121': 'PixelPaddingRangeLimit',
    '00280122': 'FloatPixelPaddingValue',
    '00280123': 'DoubleFloatPixelPaddingValue',
    '00280124': 'FloatPixelPaddingRangeLimit',
    '00280125': 'DoubleFloatPixelPaddingRangeLimit',
    '00280200': 'ImageLocation',
    '00280300': 'QualityControlImage',
    '00280301': 'BurnedInAnnotation',
    '00280302': 'RecognizableVisualFeatures',
    '00280303': 'LongitudinalTemporalInformationModified',
    '00280304': 'ReferencedColorPaletteInstanceUID',
    '00280400': 'TransformLabel',
    '00280401': 'TransformVersionNumber',
    '00280402': 'NumberOfTransformSteps',
    '00280403': 'SequenceOfCompressedData',
    '00280404': 'DetailsOfCoefficients',
    '00280700': 'DCTLabel',
    '00280701': 'DataBlockDescription',
    '00280702': 'DataBlock',
    '00280710': 'NormalizationFactorFormat',
    '00280720': 'ZonalMapNumberFormat',
    '00280721': 'ZonalMapLocation',
    '00280722': 'ZonalMapFormat',
    '00280730': 'AdaptiveMapFormat',
    '00280740': 'CodeNumberFormat',
    '00280A02': 'PixelSpacingCalibrationType',
    '00280A04': 'PixelSpacingCalibrationDescription',
    '00281040': 'PixelIntensityRelationship',
    '00281041': 'PixelIntensityRelationshipSign',
    '00281050': 'WindowCenter',
    '00281051': 'WindowWidth',
    '00281052': 'RescaleIntercept',
    '00281053': 'RescaleSlope',
    '00281054': 'RescaleType',
    '00281055': 'WindowCenterWidthExplanation',
    '00281056': 'VOILUTFunction',
    '00281080': 'GrayScale',
    '00281090': 'RecommendedViewingMode',
    '00281100': 'GrayLookupTableDescriptor',
    '00281101': 'RedPaletteColorLookupTableDescriptor',
    '00281102': 'GreenPaletteColorLookupTableDescriptor',
    '00281103': 'BluePaletteColorLookupTableDescriptor',
    '00281104': 'AlphaPaletteColorLookupTableDescriptor',
    '00281111': 'LargeRedPaletteColorLookupTableDescriptor',
    '00281112': 'LargeGreenPaletteColorLookupTableDescriptor',
    '00281113': 'LargeBluePaletteColorLookupTableDescriptor',
    '00281199': 'PaletteColorLookupTableUID',
    '00281200': 'GrayLookupTableData',
    '00281201': 'RedPaletteColorLookupTableData',
    '00281202': 'GreenPaletteColorLookupTableData',
    '00281203': 'BluePaletteColorLookupTableData',
    '00281204': 'AlphaPaletteColorLookupTableData',
    '00281211': 'LargeRedPaletteColorLookupTableData',
    '00281212': 'LargeGreenPaletteColorLookupTableData',
    '00281213': 'LargeBluePaletteColorLookupTableData',
    '00281214': 'LargePaletteColorLookupTableUID',
    '00281221': 'SegmentedRedPaletteColorLookupTableData',
    '00281222': 'SegmentedGreenPaletteColorLookupTableData',
    '00281223': 'SegmentedBluePaletteColorLookupTableData',
    '00281224': 'SegmentedAlphaPaletteColorLookupTableData',
    '00281230': 'StoredValueColorRangeSequence',
    '00281231': 'MinimumStoredValueMapped',
    '00281232': 'MaximumStoredValueMapped',
    '00281300': 'BreastImplantPresent',
    '00281350': 'PartialView',
    '00281351': 'PartialViewDescription',
    '00281352': 'PartialViewCodeSequence',
    '0028135A': 'SpatialLocationsPreserved',
    '00281401': 'DataFrameAssignmentSequence',
    '00281402': 'DataPathAssignment',
    '00281403': 'BitsMappedToColorLookupTable',
    '00281404': ('BlendingLUT1Sequence'),
    '00281405': ('BlendingLUT1TransferFunction'),
    '00281406': 'BlendingWeightConstant',
    '00281407': 'BlendingLookupTableDescriptor',
    '00281408': 'BlendingLookupTableData',
    '0028140B': 'EnhancedPaletteColorLookupTableSequence',
    '0028140C': ('BlendingLUT2Sequence'),
    '0028140D': ('BlendingLUT2TransferFunction'),
    '0028140E': 'DataPathID',
    '0028140F': 'RGBLUTTransferFunction',
    '00281410': 'AlphaLUTTransferFunction',
    '00282000': 'ICCProfile',
    '00282002': 'ColorSpace',
    '00282110': 'LossyImageCompression',
    '00282112': 'LossyImageCompressionRatio',
    '00282114': 'LossyImageCompressionMethod',
    '00283000': 'ModalityLUTSequence',
    '00283002': 'LUTDescriptor',
    '00283003': 'LUTExplanation',
    '00283004': 'ModalityLUTType',
    '00283006': 'LUTData',
    '00283010': 'VOILUTSequence',
    '00283110': 'SoftcopyVOILUTSequence',
    '00284000': 'ImagePresentationComments',
    '00285000': 'BiPlaneAcquisitionSequence',
    '00286010': 'RepresentativeFrameNumber',
    '00286020': 'FrameNumbersOfInterest',
    '00286022': 'FrameOfInterestDescription',
    '00286023': 'FrameOfInterestType',
    '00286030': 'MaskPointers',
    '00286040': 'RWavePointer',
    '00286100': 'MaskSubtractionSequence',
    '00286101': 'MaskOperation',
    '00286102': 'ApplicableFrameRange',
    '00286110': 'MaskFrameNumbers',
    '00286112': 'ContrastFrameAveraging',
    '00286114': 'MaskSubPixelShift',
    '00286120': 'TIDOffset',
    '00286190': 'MaskOperationExplanation',
    '00287000': 'EquipmentAdministratorSequence',
    '00287001': 'NumberOfDisplaySubsystems',
    '00287002': 'CurrentConfigurationID',
    '00287003': 'DisplaySubsystemID',
    '00287004': 'DisplaySubsystemName',
    '00287005': 'DisplaySubsystemDescription',
    '00287006': 'SystemStatus',
    '00287007': 'SystemStatusComment',
    '00287008': 'TargetLuminanceCharacteristicsSequence',
    '00287009': 'LuminanceCharacteristicsID',
    '0028700A': 'DisplaySubsystemConfigurationSequence',
    '0028700B': 'ConfigurationID',
    '0028700C': 'ConfigurationName',
    '0028700D': 'ConfigurationDescription',
    '0028700E': 'ReferencedTargetLuminanceCharacteristicsID',
    '0028700F': 'QAResultsSequence',
    '00287010': 'DisplaySubsystemQAResultsSequence',
    '00287011': 'ConfigurationQAResultsSequence',
    '00287012': 'MeasurementEquipmentSequence',
    '00287013': 'MeasurementFunctions',
    '00287014': 'MeasurementEquipmentType',
    '00287015': 'VisualEvaluationResultSequence',
    '00287016': 'DisplayCalibrationResultSequence',
    '00287017': 'DDLValue',
    '00287018': 'CIExyWhitePoint',
    '00287019': 'DisplayFunctionType',
    '0028701A': 'GammaValue',
    '0028701B': 'NumberOfLuminancePoints',
    '0028701C': 'LuminanceResponseSequence',
    '0028701D': 'TargetMinimumLuminance',
    '0028701E': 'TargetMaximumLuminance',
    '0028701F': 'LuminanceValue',
    '00287020': 'LuminanceResponseDescription',
    '00287021': 'WhitePointFlag',
    '00287022': 'DisplayDeviceTypeCodeSequence',
    '00287023': 'DisplaySubsystemSequence',
    '00287024': 'LuminanceResultSequence',
    '00287025': 'AmbientLightValueSource',
    '00287026': 'MeasuredCharacteristics',
    '00287027': 'LuminanceUniformityResultSequence',
    '00287028': 'VisualEvaluationTestSequence',
    '00287029': 'TestResult',
    '0028702A': 'TestResultComment',
    '0028702B': 'TestImageValidation',
    '0028702C': 'TestPatternCodeSequence',
    '0028702D': 'MeasurementPatternCodeSequence',
    '0028702E': 'VisualEvaluationMethodCodeSequence',
    '00287FE0': 'PixelDataProviderURL',
    '00289001': 'DataPointRows',
    '00289002': 'DataPointColumns',
    '00289003': 'SignalDomainColumns',
    '00289099': 'LargestMonochromePixelValue',
    '00289108': 'DataRepresentation',
    '00289110': 'PixelMeasuresSequence',
    '00289132': 'FrameVOILUTSequence',
    '00289145': 'PixelValueTransformationSequence',
    '00289235': 'SignalDomainRows',
    '00289411': 'DisplayFilterPercentage',
    '00289415': 'FramePixelShiftSequence',
    '00289416': 'SubtractionItemID',
    '00289422': 'PixelIntensityRelationshipLUTSequence',
    '00289443': 'FramePixelDataPropertiesSequence',
    '00289444': 'GeometricalProperties',
    '00289445': 'GeometricMaximumDistortion',
    '00289446': 'ImageProcessingApplied',
    '00289454': 'MaskSelectionMode',
    '00289474': 'LUTFunction',
    '00289478': 'MaskVisibilityPercentage',
    '00289501': 'PixelShiftSequence',
    '00289502': 'RegionPixelShiftSequence',
    '00289503': 'VerticesOfTheRegion',
    '00289505': 'MultiFramePresentationSequence',
    '00289506': 'PixelShiftFrameRange',
    '00289507': 'LUTFrameRange',
    '00289520': 'ImageToEquipmentMappingMatrix',
    '00289537': 'EquipmentCoordinateSystemIdentification',
    '0032000A': 'StudyStatusID',
    '0032000C': 'StudyPriorityID',
    '00320012': 'StudyIDIssuer',
    '00320032': 'StudyVerifiedDate',
    '00320033': 'StudyVerifiedTime',
    '00320034': 'StudyReadDate',
    '00320035': 'StudyReadTime',
    '00321000': 'ScheduledStudyStartDate',
    '00321001': 'ScheduledStudyStartTime',
    '00321010': 'ScheduledStudyStopDate',
    '00321011': 'ScheduledStudyStopTime',
    '00321020': 'ScheduledStudyLocation',
    '00321021': 'ScheduledStudyLocationAETitle',
    '00321030': 'ReasonForStudy',
    '00321031': 'RequestingPhysicianIdentificationSequence',
    '00321032': 'RequestingPhysician',
    '00321033': 'RequestingService',
    '00321034': 'RequestingServiceCodeSequence',
    '00321040': 'StudyArrivalDate',
    '00321041': 'StudyArrivalTime',
    '00321050': 'StudyCompletionDate',
    '00321051': 'StudyCompletionTime',
    '00321055': 'StudyComponentStatusID',
    '00321060': 'RequestedProcedureDescription',
    '00321064': 'RequestedProcedureCodeSequence',
    '00321070': 'RequestedContrastAgent',
    '00324000': 'StudyComments',
    '00380004': 'ReferencedPatientAliasSequence',
    '00380008': 'VisitStatusID',
    '00380010': 'AdmissionID',
    '00380011': 'IssuerOfAdmissionID',
    '00380014': 'IssuerOfAdmissionIDSequence',
    '00380016': 'RouteOfAdmissions',
    '0038001A': 'ScheduledAdmissionDate',
    '0038001B': 'ScheduledAdmissionTime',
    '0038001C': 'ScheduledDischargeDate',
    '0038001D': 'ScheduledDischargeTime',
    '0038001E': 'ScheduledPatientInstitutionResidence',
    '00380020': 'AdmittingDate',
    '00380021': 'AdmittingTime',
    '00380030': 'DischargeDate',
    '00380032': 'DischargeTime',
    '00380040': 'DischargeDiagnosisDescription',
    '00380044': 'DischargeDiagnosisCodeSequence',
    '00380050': 'SpecialNeeds',
    '00380060': 'ServiceEpisodeID',
    '00380061': 'IssuerOfServiceEpisodeID',
    '00380062': 'ServiceEpisodeDescription',
    '00380064': 'IssuerOfServiceEpisodeIDSequence',
    '00380100': 'PertinentDocumentsSequence',
    '00380101': 'PertinentResourcesSequence',
    '00380102': 'ResourceDescription',
    '00380300': 'CurrentPatientLocation',
    '00380400': 'PatientInstitutionResidence',
    '00380500': 'PatientState',
    '00380502': 'PatientClinicalTrialParticipationSequence',
    '00384000': 'VisitComments',
    '003A0004': 'WaveformOriginality',
    '003A0005': 'NumberOfWaveformChannels',
    '003A0010': 'NumberOfWaveformSamples',
    '003A001A': 'SamplingFrequency',
    '003A0020': 'MultiplexGroupLabel',
    '003A0200': 'ChannelDefinitionSequence',
    '003A0202': 'WaveformChannelNumber',
    '003A0203': 'ChannelLabel',
    '003A0205': 'ChannelStatus',
    '003A0208': 'ChannelSourceSequence',
    '003A0209': 'ChannelSourceModifiersSequence',
    '003A020A': 'SourceWaveformSequence',
    '003A020C': 'ChannelDerivationDescription',
    '003A0210': 'ChannelSensitivity',
    '003A0211': 'ChannelSensitivityUnitsSequence',
    '003A0212': 'ChannelSensitivityCorrectionFactor',
    '003A0213': 'ChannelBaseline',
    '003A0214': 'ChannelTimeSkew',
    '003A0215': 'ChannelSampleSkew',
    '003A0218': 'ChannelOffset',
    '003A021A': 'WaveformBitsStored',
    '003A0220': 'FilterLowFrequency',
    '003A0221': 'FilterHighFrequency',
    '003A0222': 'NotchFilterFrequency',
    '003A0223': 'NotchFilterBandwidth',
    '003A0230': 'WaveformDataDisplayScale',
    '003A0231': 'WaveformDisplayBackgroundCIELabValue',
    '003A0240': 'WaveformPresentationGroupSequence',
    '003A0241': 'PresentationGroupNumber',
    '003A0242': 'ChannelDisplaySequence',
    '003A0244': 'ChannelRecommendedDisplayCIELabValue',
    '003A0245': 'ChannelPosition',
    '003A0246': 'DisplayShadingFlag',
    '003A0247': 'FractionalChannelDisplayScale',
    '003A0248': 'AbsoluteChannelDisplayScale',
    '003A0300': 'MultiplexedAudioChannelsDescriptionCodeSequence',
    '003A0301': 'ChannelIdentificationCode',
    '003A0302': 'ChannelMode',
    '00400001': 'ScheduledStationAETitle',
    '00400002': 'ScheduledProcedureStepStartDate',
    '00400003': 'ScheduledProcedureStepStartTime',
    '00400004': 'ScheduledProcedureStepEndDate',
    '00400005': 'ScheduledProcedureStepEndTime',
    '00400006': 'ScheduledPerformingPhysicianName',
    '00400007': 'ScheduledProcedureStepDescription',
    '00400008': 'ScheduledProtocolCodeSequence',
    '00400009': 'ScheduledProcedureStepID',
    '0040000A': 'StageCodeSequence',
    '0040000B': 'ScheduledPerformingPhysicianIdentificationSequence',
    '00400010': 'ScheduledStationName',
    '00400011': 'ScheduledProcedureStepLocation',
    '00400012': 'PreMedication',
    '00400020': 'ScheduledProcedureStepStatus',
    '00400026': 'OrderPlacerIdentifierSequence',
    '00400027': 'OrderFillerIdentifierSequence',
    '00400031': 'LocalNamespaceEntityID',
    '00400032': 'UniversalEntityID',
    '00400033': 'UniversalEntityIDType',
    '00400035': 'IdentifierTypeCode',
    '00400036': 'AssigningFacilitySequence',
    '00400039': 'AssigningJurisdictionCodeSequence',
    '0040003A': 'AssigningAgencyOrDepartmentCodeSequence',
    '00400100': 'ScheduledProcedureStepSequence',
    '00400220': 'ReferencedNonImageCompositeSOPInstanceSequence',
    '00400241': 'PerformedStationAETitle',
    '00400242': 'PerformedStationName',
    '00400243': 'PerformedLocation',
    '00400244': 'PerformedProcedureStepStartDate',
    '00400245': 'PerformedProcedureStepStartTime',
    '00400250': 'PerformedProcedureStepEndDate',
    '00400251': 'PerformedProcedureStepEndTime',
    '00400252': 'PerformedProcedureStepStatus',
    '00400253': 'PerformedProcedureStepID',
    '00400254': 'PerformedProcedureStepDescription',
    '00400255': 'PerformedProcedureTypeDescription',
    '00400260': 'PerformedProtocolCodeSequence',
    '00400261': 'PerformedProtocolType',
    '00400270': 'ScheduledStepAttributesSequence',
    '00400275': 'RequestAttributesSequence',
    '00400280': 'CommentsOnThePerformedProcedureStep',
    '00400281': 'PerformedProcedureStepDiscontinuationReasonCodeSequence',
    '00400293': 'QuantitySequence',
    '00400294': 'Quantity',
    '00400295': 'MeasuringUnitsSequence',
    '00400296': 'BillingItemSequence',
    '00400300': 'TotalTimeOfFluoroscopy',
    '00400301': 'TotalNumberOfExposures',
    '00400302': 'EntranceDose',
    '00400303': 'ExposedArea',
    '00400306': 'DistanceSourceToEntrance',
    '00400307': 'DistanceSourceToSupport',
    '0040030E': 'ExposureDoseSequence',
    '00400310': 'CommentsOnRadiationDose',
    '00400312': 'XRayOutput',
    '00400314': 'HalfValueLayer',
    '00400316': 'OrganDose',
    '00400318': 'OrganExposed',
    '00400320': 'BillingProcedureStepSequence',
    '00400321': 'FilmConsumptionSequence',
    '00400324': 'BillingSuppliesAndDevicesSequence',
    '00400330': 'ReferencedProcedureStepSequence',
    '00400340': 'PerformedSeriesSequence',
    '00400400': 'CommentsOnTheScheduledProcedureStep',
    '00400440': 'ProtocolContextSequence',
    '00400441': 'ContentItemModifierSequence',
    '00400500': 'ScheduledSpecimenSequence',
    '0040050A': 'SpecimenAccessionNumber',
    '00400512': 'ContainerIdentifier',
    '00400513': 'IssuerOfTheContainerIdentifierSequence',
    '00400515': 'AlternateContainerIdentifierSequence',
    '00400518': 'ContainerTypeCodeSequence',
    '0040051A': 'ContainerDescription',
    '00400520': 'ContainerComponentSequence',
    '00400550': 'SpecimenSequence',
    '00400551': 'SpecimenIdentifier',
    '00400552': 'SpecimenDescriptionSequenceTrial',
    '00400553': 'SpecimenDescriptionTrial',
    '00400554': 'SpecimenUID',
    '00400555': 'AcquisitionContextSequence',
    '00400556': 'AcquisitionContextDescription',
    '00400560': 'SpecimenDescriptionSequence',
    '00400562': 'IssuerOfTheSpecimenIdentifierSequence',
    '0040059A': 'SpecimenTypeCodeSequence',
    '00400600': 'SpecimenShortDescription',
    '00400602': 'SpecimenDetailedDescription',
    '00400610': 'SpecimenPreparationSequence',
    '00400612': 'SpecimenPreparationStepContentItemSequence',
    '00400620': 'SpecimenLocalizationContentItemSequence',
    '004006FA': 'SlideIdentifier',
    '00400710': 'WholeSlideMicroscopyImageFrameTypeSequence',
    '0040071A': 'ImageCenterPointCoordinatesSequence',
    '0040072A': 'XOffsetInSlideCoordinateSystem',
    '0040073A': 'YOffsetInSlideCoordinateSystem',
    '0040074A': 'ZOffsetInSlideCoordinateSystem',
    '004008D8': 'PixelSpacingSequence',
    '004008DA': 'CoordinateSystemAxisCodeSequence',
    '004008EA': 'MeasurementUnitsCodeSequence',
    '004009F8': 'VitalStainCodeSequenceTrial',
    '00401001': 'RequestedProcedureID',
    '00401002': 'ReasonForTheRequestedProcedure',
    '00401003': 'RequestedProcedurePriority',
    '00401004': 'PatientTransportArrangements',
    '00401005': 'RequestedProcedureLocation',
    '00401006': 'PlacerOrderNumberProcedure',
    '00401007': 'FillerOrderNumberProcedure',
    '00401008': 'ConfidentialityCode',
    '00401009': 'ReportingPriority',
    '0040100A': 'ReasonForRequestedProcedureCodeSequence',
    '00401010': 'NamesOfIntendedRecipientsOfResults',
    '00401011': 'IntendedRecipientsOfResultsIdentificationSequence',
    '00401012': 'ReasonForPerformedProcedureCodeSequence',
    '00401060': 'RequestedProcedureDescriptionTrial',
    '00401101': 'PersonIdentificationCodeSequence',
    '00401102': 'PersonAddress',
    '00401103': 'PersonTelephoneNumbers',
    '00401104': 'PersonTelecomInformation',
    '00401400': 'RequestedProcedureComments',
    '00402001': 'ReasonForTheImagingServiceRequest',
    '00402004': 'IssueDateOfImagingServiceRequest',
    '00402005': 'IssueTimeOfImagingServiceRequest',
    '00402006': 'PlacerOrderNumberImagingServiceRequestRetired',
    '00402007': 'FillerOrderNumberImagingServiceRequestRetired',
    '00402008': 'OrderEnteredBy',
    '00402009': 'OrderEntererLocation',
    '00402010': 'OrderCallbackPhoneNumber',
    '00402011': 'OrderCallbackTelecomInformation',
    '00402016': 'PlacerOrderNumberImagingServiceRequest',
    '00402017': 'FillerOrderNumberImagingServiceRequest',
    '00402400': 'ImagingServiceRequestComments',
    '00403001': 'ConfidentialityConstraintOnPatientDataDescription',
    '00404001': 'GeneralPurposeScheduledProcedureStepStatus',
    '00404002': 'GeneralPurposePerformedProcedureStepStatus',
    '00404003': 'GeneralPurposeScheduledProcedureStepPriority',
    '00404004': 'ScheduledProcessingApplicationsCodeSequence',
    '00404005': 'ScheduledProcedureStepStartDateTime',
    '00404006': 'MultipleCopiesFlag',
    '00404007': 'PerformedProcessingApplicationsCodeSequence',
    '00404008': 'ScheduledProcedureStepExpirationDateTime',
    '00404009': 'HumanPerformerCodeSequence',
    '00404010': 'ScheduledProcedureStepModificationDateTime',
    '00404011': 'ExpectedCompletionDateTime',
    '00404015': 'ResultingGeneralPurposePerformedProcedureStepsSequence',
    '00404016': 'ReferencedGeneralPurposeScheduledProcedureStepSequence',
    '00404018': 'ScheduledWorkitemCodeSequence',
    '00404019': 'PerformedWorkitemCodeSequence',
    '00404020': 'InputAvailabilityFlag',
    '00404021': 'InputInformationSequence',
    '00404022': 'RelevantInformationSequence',
    '00404023': 'ReferencedGeneralPurposeScheduledProcedureStepTransactionUID',
    '00404025': 'ScheduledStationNameCodeSequence',
    '00404026': 'ScheduledStationClassCodeSequence',
    '00404027': 'ScheduledStationGeographicLocationCodeSequence',
    '00404028': 'PerformedStationNameCodeSequence',
    '00404029': 'PerformedStationClassCodeSequence',
    '00404030': 'PerformedStationGeographicLocationCodeSequence',
    '00404031': 'RequestedSubsequentWorkitemCodeSequence',
    '00404032': 'NonDICOMOutputCodeSequence',
    '00404033': 'OutputInformationSequence',
    '00404034': 'ScheduledHumanPerformersSequence',
    '00404035': 'ActualHumanPerformersSequence',
    '00404036': 'HumanPerformerOrganization',
    '00404037': 'HumanPerformerName',
    '00404040': 'RawDataHandling',
    '00404041': 'InputReadinessState',
    '00404050': 'PerformedProcedureStepStartDateTime',
    '00404051': 'PerformedProcedureStepEndDateTime',
    '00404052': 'ProcedureStepCancellationDateTime',
    '00404070': 'OutputDestinationSequence',
    '00404071': 'DICOMStorageSequence',
    '00404072': 'STOWRSStorageSequence',
    '00404073': 'StorageURL',
    '00404074': 'XDSStorageSequence',
    '00408302': 'EntranceDoseInmGy',
    '00408303': 'EntranceDoseDerivation',
    '00409092': 'ParametricMapFrameTypeSequence',
    '00409094': 'ReferencedImageRealWorldValueMappingSequence',
    '00409096': 'RealWorldValueMappingSequence',
    '00409098': 'PixelValueMappingCodeSequence',
    '00409210': 'LUTLabel',
    '00409211': 'RealWorldValueLastValueMapped',
    '00409212': 'RealWorldValueLUTData',
    '00409213': 'DoubleFloatRealWorldValueLastValueMapped',
    '00409214': 'DoubleFloatRealWorldValueFirstValueMapped',
    '00409216': 'RealWorldValueFirstValueMapped',
    '00409220': 'QuantityDefinitionSequence',
    '00409224': 'RealWorldValueIntercept',
    '00409225': 'RealWorldValueSlope',
    '0040A007': 'FindingsFlagTrial',
    '0040A010': 'RelationshipType',
    '0040A020': 'FindingsSequenceTrial',
    '0040A021': 'FindingsGroupUIDTrial',
    '0040A022': 'ReferencedFindingsGroupUIDTrial',
    '0040A023': 'FindingsGroupRecordingDateTrial',
    '0040A024': 'FindingsGroupRecordingTimeTrial',
    '0040A026': 'FindingsSourceCategoryCodeSequenceTrial',
    '0040A027': 'VerifyingOrganization',
    '0040A028': 'DocumentingOrganizationIdentifierCodeSequenceTrial',
    '0040A030': 'VerificationDateTime',
    '0040A032': 'ObservationDateTime',
    '0040A040': 'ValueType',
    '0040A043': 'ConceptNameCodeSequence',
    '0040A047': 'MeasurementPrecisionDescriptionTrial',
    '0040A050': 'ContinuityOfContent',
    '0040A057': 'UrgencyOrPriorityAlertsTrial',
    '0040A060': 'SequencingIndicatorTrial',
    '0040A066': 'DocumentIdentifierCodeSequenceTrial',
    '0040A067': 'DocumentAuthorTrial',
    '0040A068': 'DocumentAuthorIdentifierCodeSequenceTrial',
    '0040A070': 'IdentifierCodeSequenceTrial',
    '0040A073': 'VerifyingObserverSequence',
    '0040A074': 'ObjectBinaryIdentifierTrial',
    '0040A075': 'VerifyingObserverName',
    '0040A076': 'DocumentingObserverIdentifierCodeSequenceTrial',
    '0040A078': 'AuthorObserverSequence',
    '0040A07A': 'ParticipantSequence',
    '0040A07C': 'CustodialOrganizationSequence',
    '0040A080': 'ParticipationType',
    '0040A082': 'ParticipationDateTime',
    '0040A084': 'ObserverType',
    '0040A085': 'ProcedureIdentifierCodeSequenceTrial',
    '0040A088': 'VerifyingObserverIdentificationCodeSequence',
    '0040A089': 'ObjectDirectoryBinaryIdentifierTrial',
    '0040A090': 'EquivalentCDADocumentSequence',
    '0040A0B0': 'ReferencedWaveformChannels',
    '0040A110': 'DateOfDocumentOrVerbalTransactionTrial',
    '0040A112': 'TimeOfDocumentCreationOrVerbalTransactionTrial',
    '0040A120': 'DateTime',
    '0040A121': 'Date',
    '0040A122': 'Time',
    '0040A123': 'PersonName',
    '0040A124': 'UID',
    '0040A125': 'ReportStatusIDTrial',
    '0040A130': 'TemporalRangeType',
    '0040A132': 'ReferencedSamplePositions',
    '0040A136': 'ReferencedFrameNumbers',
    '0040A138': 'ReferencedTimeOffsets',
    '0040A13A': 'ReferencedDateTime',
    '0040A160': 'TextValue',
    '0040A161': 'FloatingPointValue',
    '0040A162': 'RationalNumeratorValue',
    '0040A163': 'RationalDenominatorValue',
    '0040A167': 'ObservationCategoryCodeSequenceTrial',
    '0040A168': 'ConceptCodeSequence',
    '0040A16A': 'BibliographicCitationTrial',
    '0040A170': 'PurposeOfReferenceCodeSequence',
    '0040A171': 'ObservationUID',
    '0040A172': 'ReferencedObservationUIDTrial',
    '0040A173': 'ReferencedObservationClassTrial',
    '0040A174': 'ReferencedObjectObservationClassTrial',
    '0040A180': 'AnnotationGroupNumber',
    '0040A192': 'ObservationDateTrial',
    '0040A193': 'ObservationTimeTrial',
    '0040A194': 'MeasurementAutomationTrial',
    '0040A195': 'ModifierCodeSequence',
    '0040A224': 'IdentificationDescriptionTrial',
    '0040A290': 'CoordinatesSetGeometricTypeTrial',
    '0040A296': 'AlgorithmCodeSequenceTrial',
    '0040A297': 'AlgorithmDescriptionTrial',
    '0040A29A': 'PixelCoordinatesSetTrial',
    '0040A300': 'MeasuredValueSequence',
    '0040A301': 'NumericValueQualifierCodeSequence',
    '0040A307': 'CurrentObserverTrial',
    '0040A30A': 'NumericValue',
    '0040A313': 'ReferencedAccessionSequenceTrial',
    '0040A33A': 'ReportStatusCommentTrial',
    '0040A340': 'ProcedureContextSequenceTrial',
    '0040A352': 'VerbalSourceTrial',
    '0040A353': 'AddressTrial',
    '0040A354': 'TelephoneNumberTrial',
    '0040A358': 'VerbalSourceIdentifierCodeSequenceTrial',
    '0040A360': 'PredecessorDocumentsSequence',
    '0040A370': 'ReferencedRequestSequence',
    '0040A372': 'PerformedProcedureCodeSequence',
    '0040A375': 'CurrentRequestedProcedureEvidenceSequence',
    '0040A380': 'ReportDetailSequenceTrial',
    '0040A385': 'PertinentOtherEvidenceSequence',
    '0040A390': ('HL7StructuredDocumentReferenceSequence'),
    '0040A402': 'ObservationSubjectUIDTrial',
    '0040A403': 'ObservationSubjectClassTrial',
    '0040A404': 'ObservationSubjectTypeCodeSequenceTrial',
    '0040A491': 'CompletionFlag',
    '0040A492': 'CompletionFlagDescription',
    '0040A493': 'VerificationFlag',
    '0040A494': 'ArchiveRequested',
    '0040A496': 'PreliminaryFlag',
    '0040A504': 'ContentTemplateSequence',
    '0040A525': 'IdenticalDocumentsSequence',
    '0040A600': 'ObservationSubjectContextFlagTrial',
    '0040A601': 'ObserverContextFlagTrial',
    '0040A603': 'ProcedureContextFlagTrial',
    '0040A730': 'ContentSequence',
    '0040A731': 'RelationshipSequenceTrial',
    '0040A732': 'RelationshipTypeCodeSequenceTrial',
    '0040A744': 'LanguageCodeSequenceTrial',
    '0040A992': 'UniformResourceLocatorTrial',
    '0040B020': 'WaveformAnnotationSequence',
    '0040DB00': 'TemplateIdentifier',
    '0040DB06': 'TemplateVersion',
    '0040DB07': 'TemplateLocalVersion',
    '0040DB0B': 'TemplateExtensionFlag',
    '0040DB0C': 'TemplateExtensionOrganizationUID',
    '0040DB0D': 'TemplateExtensionCreatorUID',
    '0040DB73': 'ReferencedContentItemIdentifier',
    '0040E001': ('HL7InstanceIdentifier'),
    '0040E004': ('HL7DocumentEffectiveTime'),
    '0040E006': ('HL7DocumentTypeCodeSequence'),
    '0040E008': 'DocumentClassCodeSequence',
    '0040E010': 'RetrieveURI',
    '0040E011': 'RetrieveLocationUID',
    '0040E020': 'TypeOfInstances',
    '0040E021': 'DICOMRetrievalSequence',
    '0040E022': 'DICOMMediaRetrievalSequence',
    '0040E023': 'WADORetrievalSequence',
    '0040E024': 'XDSRetrievalSequence',
    '0040E025': 'WADORSRetrievalSequence',
    '0040E030': 'RepositoryUniqueID',
    '0040E031': 'HomeCommunityID',
    '00420010': 'DocumentTitle',
    '00420011': 'EncapsulatedDocument',
    '00420012': 'MIMETypeOfEncapsulatedDocument',
    '00420013': 'SourceInstanceSequence',
    '00420014': 'ListOfMIMETypes',
    '00440001': 'ProductPackageIdentifier',
    '00440002': 'SubstanceAdministrationApproval',
    '00440003': 'ApprovalStatusFurtherDescription',
    '00440004': 'ApprovalStatusDateTime',
    '00440007': 'ProductTypeCodeSequence',
    '00440008': 'ProductName',
    '00440009': 'ProductDescription',
    '0044000A': 'ProductLotIdentifier',
    '0044000B': 'ProductExpirationDateTime',
    '00440010': 'SubstanceAdministrationDateTime',
    '00440011': 'SubstanceAdministrationNotes',
    '00440012': 'SubstanceAdministrationDeviceID',
    '00440013': 'ProductParameterSequence',
    '00440019': 'SubstanceAdministrationParameterSequence',
    '00440100': 'ApprovalSequence',
    '00440101': 'AssertionCodeSequence',
    '00440102': 'AssertionUID',
    '00440103': 'AsserterIdentificationSequence',
    '00440104': 'AssertionDateTime',
    '00440105': 'AssertionExpirationDateTime',
    '00440106': 'AssertionComments',
    '00440107': 'RelatedAssertionSequence',
    '00440108': 'ReferencedAssertionUID',
    '00440109': 'ApprovalSubjectSequence',
    '0044010A': 'OrganizationalRoleCodeSequence',
    '00460012': 'LensDescription',
    '00460014': 'RightLensSequence',
    '00460015': 'LeftLensSequence',
    '00460016': 'UnspecifiedLateralityLensSequence',
    '00460018': 'CylinderSequence',
    '00460028': 'PrismSequence',
    '00460030': 'HorizontalPrismPower',
    '00460032': 'HorizontalPrismBase',
    '00460034': 'VerticalPrismPower',
    '00460036': 'VerticalPrismBase',
    '00460038': 'LensSegmentType',
    '00460040': 'OpticalTransmittance',
    '00460042': 'ChannelWidth',
    '00460044': 'PupilSize',
    '00460046': 'CornealSize',
    '00460050': 'AutorefractionRightEyeSequence',
    '00460052': 'AutorefractionLeftEyeSequence',
    '00460060': 'DistancePupillaryDistance',
    '00460062': 'NearPupillaryDistance',
    '00460063': 'IntermediatePupillaryDistance',
    '00460064': 'OtherPupillaryDistance',
    '00460070': 'KeratometryRightEyeSequence',
    '00460071': 'KeratometryLeftEyeSequence',
    '00460074': 'SteepKeratometricAxisSequence',
    '00460075': 'RadiusOfCurvature',
    '00460076': 'KeratometricPower',
    '00460077': 'KeratometricAxis',
    '00460080': 'FlatKeratometricAxisSequence',
    '00460092': 'BackgroundColor',
    '00460094': 'Optotype',
    '00460095': 'OptotypePresentation',
    '00460097': 'SubjectiveRefractionRightEyeSequence',
    '00460098': 'SubjectiveRefractionLeftEyeSequence',
    '00460100': 'AddNearSequence',
    '00460101': 'AddIntermediateSequence',
    '00460102': 'AddOtherSequence',
    '00460104': 'AddPower',
    '00460106': 'ViewingDistance',
    '00460121': 'VisualAcuityTypeCodeSequence',
    '00460122': 'VisualAcuityRightEyeSequence',
    '00460123': 'VisualAcuityLeftEyeSequence',
    '00460124': 'VisualAcuityBothEyesOpenSequence',
    '00460125': 'ViewingDistanceType',
    '00460135': 'VisualAcuityModifiers',
    '00460137': 'DecimalVisualAcuity',
    '00460139': 'OptotypeDetailedDefinition',
    '00460145': 'ReferencedRefractiveMeasurementsSequence',
    '00460146': 'SpherePower',
    '00460147': 'CylinderPower',
    '00460201': 'CornealTopographySurface',
    '00460202': 'CornealVertexLocation',
    '00460203': 'PupilCentroidXCoordinate',
    '00460204': 'PupilCentroidYCoordinate',
    '00460205': 'EquivalentPupilRadius',
    '00460207': 'CornealTopographyMapTypeCodeSequence',
    '00460208': 'VerticesOfTheOutlineOfPupil',
    '00460210': 'CornealTopographyMappingNormalsSequence',
    '00460211': 'MaximumCornealCurvatureSequence',
    '00460212': 'MaximumCornealCurvature',
    '00460213': 'MaximumCornealCurvatureLocation',
    '00460215': 'MinimumKeratometricSequence',
    '00460218': 'SimulatedKeratometricCylinderSequence',
    '00460220': 'AverageCornealPower',
    '00460224': 'CornealISValue',
    '00460227': 'AnalyzedArea',
    '00460230': 'SurfaceRegularityIndex',
    '00460232': 'SurfaceAsymmetryIndex',
    '00460234': 'CornealEccentricityIndex',
    '00460236': 'KeratoconusPredictionIndex',
    '00460238': 'DecimalPotentialVisualAcuity',
    '00460242': 'CornealTopographyMapQualityEvaluation',
    '00460244': 'SourceImageCornealProcessedDataSequence',
    '00460247': 'CornealPointLocation',
    '00460248': 'CornealPointEstimated',
    '00460249': 'AxialPower',
    '00460250': 'TangentialPower',
    '00460251': 'RefractivePower',
    '00460252': 'RelativeElevation',
    '00460253': 'CornealWavefront',
    '00480001': 'ImagedVolumeWidth',
    '00480002': 'ImagedVolumeHeight',
    '00480003': 'ImagedVolumeDepth',
    '00480006': 'TotalPixelMatrixColumns',
    '00480007': 'TotalPixelMatrixRows',
    '00480008': 'TotalPixelMatrixOriginSequence',
    '00480010': 'SpecimenLabelInImage',
    '00480011': 'FocusMethod',
    '00480012': 'ExtendedDepthOfField',
    '00480013': 'NumberOfFocalPlanes',
    '00480014': 'DistanceBetweenFocalPlanes',
    '00480015': 'RecommendedAbsentPixelCIELabValue',
    '00480100': 'IlluminatorTypeCodeSequence',
    '00480102': 'ImageOrientationSlide',
    '00480105': 'OpticalPathSequence',
    '00480106': 'OpticalPathIdentifier',
    '00480107': 'OpticalPathDescription',
    '00480108': 'IlluminationColorCodeSequence',
    '00480110': 'SpecimenReferenceSequence',
    '00480111': 'CondenserLensPower',
    '00480112': 'ObjectiveLensPower',
    '00480113': 'ObjectiveLensNumericalAperture',
    '00480120': 'PaletteColorLookupTableSequence',
    '00480200': 'ReferencedImageNavigationSequence',
    '00480201': 'TopLeftHandCornerOfLocalizerArea',
    '00480202': 'BottomRightHandCornerOfLocalizerArea',
    '00480207': 'OpticalPathIdentificationSequence',
    '0048021A': 'PlanePositionSlideSequence',
    '0048021E': 'ColumnPositionInTotalImagePixelMatrix',
    '0048021F': 'RowPositionInTotalImagePixelMatrix',
    '00480301': 'PixelOriginInterpretation',
    '00480302': 'NumberOfOpticalPaths',
    '00480303': 'TotalPixelMatrixFocalPlanes',
    '00500004': 'CalibrationImage',
    '00500010': 'DeviceSequence',
    '00500012': 'ContainerComponentTypeCodeSequence',
    '00500013': 'ContainerComponentThickness',
    '00500014': 'DeviceLength',
    '00500015': 'ContainerComponentWidth',
    '00500016': 'DeviceDiameter',
    '00500017': 'DeviceDiameterUnits',
    '00500018': 'DeviceVolume',
    '00500019': 'InterMarkerDistance',
    '0050001A': 'ContainerComponentMaterial',
    '0050001B': 'ContainerComponentID',
    '0050001C': 'ContainerComponentLength',
    '0050001D': 'ContainerComponentDiameter',
    '0050001E': 'ContainerComponentDescription',
    '00500020': 'DeviceDescription',
    '00520001': 'ContrastBolusIngredientPercentByVolume',
    '00520002': 'OCTFocalDistance',
    '00520003': 'BeamSpotSize',
    '00520004': 'EffectiveRefractiveIndex',
    '00520006': 'OCTAcquisitionDomain',
    '00520007': 'OCTOpticalCenterWavelength',
    '00520008': 'AxialResolution',
    '00520009': 'RangingDepth',
    '00520011': 'ALineRate',
    '00520012': 'ALinesPerFrame',
    '00520013': 'CatheterRotationalRate',
    '00520014': 'ALinePixelSpacing',
    '00520016': 'ModeOfPercutaneousAccessSequence',
    '00520025': 'IntravascularOCTFrameTypeSequence',
    '00520026': 'OCTZOffsetApplied',
    '00520027': 'IntravascularFrameContentSequence',
    '00520028': 'IntravascularLongitudinalDistance',
    '00520029': 'IntravascularOCTFrameContentSequence',
    '00520030': 'OCTZOffsetCorrection',
    '00520031': 'CatheterDirectionOfRotation',
    '00520033': 'SeamLineLocation',
    '00520034': 'FirstALineLocation',
    '00520036': 'SeamLineIndex',
    '00520038': 'NumberOfPaddedALines',
    '00520039': 'InterpolationType',
    '0052003A': 'RefractiveIndexApplied',
    '00540010': 'EnergyWindowVector',
    '00540011': 'NumberOfEnergyWindows',
    '00540012': 'EnergyWindowInformationSequence',
    '00540013': 'EnergyWindowRangeSequence',
    '00540014': 'EnergyWindowLowerLimit',
    '00540015': 'EnergyWindowUpperLimit',
    '00540016': 'RadiopharmaceuticalInformationSequence',
    '00540017': 'ResidualSyringeCounts',
    '00540018': 'EnergyWindowName',
    '00540020': 'DetectorVector',
    '00540021': 'NumberOfDetectors',
    '00540022': 'DetectorInformationSequence',
    '00540030': 'PhaseVector',
    '00540031': 'NumberOfPhases',
    '00540032': 'PhaseInformationSequence',
    '00540033': 'NumberOfFramesInPhase',
    '00540036': 'PhaseDelay',
    '00540038': 'PauseBetweenFrames',
    '00540039': 'PhaseDescription',
    '00540050': 'RotationVector',
    '00540051': 'NumberOfRotations',
    '00540052': 'RotationInformationSequence',
    '00540053': 'NumberOfFramesInRotation',
    '00540060': 'RRIntervalVector',
    '00540061': 'NumberOfRRIntervals',
    '00540062': 'GatedInformationSequence',
    '00540063': 'DataInformationSequence',
    '00540070': 'TimeSlotVector',
    '00540071': 'NumberOfTimeSlots',
    '00540072': 'TimeSlotInformationSequence',
    '00540073': 'TimeSlotTime',
    '00540080': 'SliceVector',
    '00540081': 'NumberOfSlices',
    '00540090': 'AngularViewVector',
    '00540100': 'TimeSliceVector',
    '00540101': 'NumberOfTimeSlices',
    '00540200': 'StartAngle',
    '00540202': 'TypeOfDetectorMotion',
    '00540210': 'TriggerVector',
    '00540211': 'NumberOfTriggersInPhase',
    '00540220': 'ViewCodeSequence',
    '00540222': 'ViewModifierCodeSequence',
    '00540300': 'RadionuclideCodeSequence',
    '00540302': 'AdministrationRouteCodeSequence',
    '00540304': 'RadiopharmaceuticalCodeSequence',
    '00540306': 'CalibrationDataSequence',
    '00540308': 'EnergyWindowNumber',
    '00540400': 'ImageID',
    '00540410': 'PatientOrientationCodeSequence',
    '00540412': 'PatientOrientationModifierCodeSequence',
    '00540414': 'PatientGantryRelationshipCodeSequence',
    '00540500': 'SliceProgressionDirection',
    '00540501': 'ScanProgressionDirection',
    '00541000': 'SeriesType',
    '00541001': 'Units',
    '00541002': 'CountsSource',
    '00541004': 'ReprojectionMethod',
    '00541006': 'SUVType',
    '00541100': 'RandomsCorrectionMethod',
    '00541101': 'AttenuationCorrectionMethod',
    '00541102': 'DecayCorrection',
    '00541103': 'ReconstructionMethod',
    '00541104': 'DetectorLinesOfResponseUsed',
    '00541105': 'ScatterCorrectionMethod',
    '00541200': 'AxialAcceptance',
    '00541201': 'AxialMash',
    '00541202': 'TransverseMash',
    '00541203': 'DetectorElementSize',
    '00541210': 'CoincidenceWindowWidth',
    '00541220': 'SecondaryCountsType',
    '00541300': 'FrameReferenceTime',
    '00541310': 'PrimaryPromptsCountsAccumulated',
    '00541311': 'SecondaryCountsAccumulated',
    '00541320': 'SliceSensitivityFactor',
    '00541321': 'DecayFactor',
    '00541322': 'DoseCalibrationFactor',
    '00541323': 'ScatterFractionFactor',
    '00541324': 'DeadTimeFactor',
    '00541330': 'ImageIndex',
    '00541400': 'CountsIncluded',
    '00541401': 'DeadTimeCorrectionFlag',
    '00603000': 'HistogramSequence',
    '00603002': 'HistogramNumberOfBins',
    '00603004': 'HistogramFirstBinValue',
    '00603006': 'HistogramLastBinValue',
    '00603008': 'HistogramBinWidth',
    '00603010': 'HistogramExplanation',
    '00603020': 'HistogramData',
    '00620001': 'SegmentationType',
    '00620002': 'SegmentSequence',
    '00620003': 'SegmentedPropertyCategoryCodeSequence',
    '00620004': 'SegmentNumber',
    '00620005': 'SegmentLabel',
    '00620006': 'SegmentDescription',
    '00620007': 'SegmentationAlgorithmIdentificationSequence',
    '00620008': 'SegmentAlgorithmType',
    '00620009': 'SegmentAlgorithmName',
    '0062000A': 'SegmentIdentificationSequence',
    '0062000B': 'ReferencedSegmentNumber',
    '0062000C': 'RecommendedDisplayGrayscaleValue',
    '0062000D': 'RecommendedDisplayCIELabValue',
    '0062000E': 'MaximumFractionalValue',
    '0062000F': 'SegmentedPropertyTypeCodeSequence',
    '00620010': 'SegmentationFractionalType',
    '00620011': 'SegmentedPropertyTypeModifierCodeSequence',
    '00620012': 'UsedSegmentsSequence',
    '00620020': 'TrackingID',
    '00620021': 'TrackingUID',
    '00640002': 'DeformableRegistrationSequence',
    '00640003': 'SourceFrameOfReferenceUID',
    '00640005': 'DeformableRegistrationGridSequence',
    '00640007': 'GridDimensions',
    '00640008': 'GridResolution',
    '00640009': 'VectorGridData',
    '0064000F': 'PreDeformationMatrixRegistrationSequence',
    '00640010': 'PostDeformationMatrixRegistrationSequence',
    '00660001': 'NumberOfSurfaces',
    '00660002': 'SurfaceSequence',
    '00660003': 'SurfaceNumber',
    '00660004': 'SurfaceComments',
    '00660009': 'SurfaceProcessing',
    '0066000A': 'SurfaceProcessingRatio',
    '0066000B': 'SurfaceProcessingDescription',
    '0066000C': 'RecommendedPresentationOpacity',
    '0066000D': 'RecommendedPresentationType',
    '0066000E': 'FiniteVolume',
    '00660010': 'Manifold',
    '00660011': 'SurfacePointsSequence',
    '00660012': 'SurfacePointsNormalsSequence',
    '00660013': 'SurfaceMeshPrimitivesSequence',
    '00660015': 'NumberOfSurfacePoints',
    '00660016': 'PointCoordinatesData',
    '00660017': 'PointPositionAccuracy',
    '00660018': 'MeanPointDistance',
    '00660019': 'MaximumPointDistance',
    '0066001A': 'PointsBoundingBoxCoordinates',
    '0066001B': 'AxisOfRotation',
    '0066001C': 'CenterOfRotation',
    '0066001E': 'NumberOfVectors',
    '0066001F': 'VectorDimensionality',
    '00660020': 'VectorAccuracy',
    '00660021': 'VectorCoordinateData',
    '00660023': 'TrianglePointIndexList',
    '00660024': 'EdgePointIndexList',
    '00660025': 'VertexPointIndexList',
    '00660026': 'TriangleStripSequence',
    '00660027': 'TriangleFanSequence',
    '00660028': 'LineSequence',
    '00660029': 'PrimitivePointIndexList',
    '0066002A': 'SurfaceCount',
    '0066002B': 'ReferencedSurfaceSequence',
    '0066002C': 'ReferencedSurfaceNumber',
    '0066002D': 'SegmentSurfaceGenerationAlgorithmIdentificationSequence',
    '0066002E': 'SegmentSurfaceSourceInstanceSequence',
    '0066002F': 'AlgorithmFamilyCodeSequence',
    '00660030': 'AlgorithmNameCodeSequence',
    '00660031': 'AlgorithmVersion',
    '00660032': 'AlgorithmParameters',
    '00660034': 'FacetSequence',
    '00660035': 'SurfaceProcessingAlgorithmIdentificationSequence',
    '00660036': 'AlgorithmName',
    '00660037': 'RecommendedPointRadius',
    '00660038': 'RecommendedLineThickness',
    '00660040': 'LongPrimitivePointIndexList',
    '00660041': 'LongTrianglePointIndexList',
    '00660042': 'LongEdgePointIndexList',
    '00660043': 'LongVertexPointIndexList',
    '00660101': 'TrackSetSequence',
    '00660102': 'TrackSequence',
    '00660103': 'RecommendedDisplayCIELabValueList',
    '00660104': 'TrackingAlgorithmIdentificationSequence',
    '00660105': 'TrackSetNumber',
    '00660106': 'TrackSetLabel',
    '00660107': 'TrackSetDescription',
    '00660108': 'TrackSetAnatomicalTypeCodeSequence',
    '00660121': 'MeasurementsSequence',
    '00660124': 'TrackSetStatisticsSequence',
    '00660125': 'FloatingPointValues',
    '00660129': 'TrackPointIndexList',
    '00660130': 'TrackStatisticsSequence',
    '00660132': 'MeasurementValuesSequence',
    '00660133': 'DiffusionAcquisitionCodeSequence',
    '00660134': 'DiffusionModelCodeSequence',
    '00686210': 'ImplantSize',
    '00686221': 'ImplantTemplateVersion',
    '00686222': 'ReplacedImplantTemplateSequence',
    '00686223': 'ImplantType',
    '00686224': 'DerivationImplantTemplateSequence',
    '00686225': 'OriginalImplantTemplateSequence',
    '00686226': 'EffectiveDateTime',
    '00686230': 'ImplantTargetAnatomySequence',
    '00686260': 'InformationFromManufacturerSequence',
    '00686265': 'NotificationFromManufacturerSequence',
    '00686270': 'InformationIssueDateTime',
    '00686280': 'InformationSummary',
    '006862A0': 'ImplantRegulatoryDisapprovalCodeSequence',
    '006862A5': 'OverallTemplateSpatialTolerance',
    '006862C0': 'HPGLDocumentSequence',
    '006862D0': 'HPGLDocumentID',
    '006862D5': 'HPGLDocumentLabel',
    '006862E0': 'ViewOrientationCodeSequence',
    '006862F0': 'ViewOrientationModifierCodeSequence',
    '006862F2': 'HPGLDocumentScaling',
    '00686300': 'HPGLDocument',
    '00686310': 'HPGLContourPenNumber',
    '00686320': 'HPGLPenSequence',
    '00686330': 'HPGLPenNumber',
    '00686340': 'HPGLPenLabel',
    '00686345': 'HPGLPenDescription',
    '00686346': 'RecommendedRotationPoint',
    '00686347': 'BoundingRectangle',
    '00686350': ('ImplantTemplate3DModelSurfaceNumber'),
    '00686360': 'SurfaceModelDescriptionSequence',
    '00686380': 'SurfaceModelLabel',
    '00686390': 'SurfaceModelScalingFactor',
    '006863A0': 'MaterialsCodeSequence',
    '006863A4': 'CoatingMaterialsCodeSequence',
    '006863A8': 'ImplantTypeCodeSequence',
    '006863AC': 'FixationMethodCodeSequence',
    '006863B0': 'MatingFeatureSetsSequence',
    '006863C0': 'MatingFeatureSetID',
    '006863D0': 'MatingFeatureSetLabel',
    '006863E0': 'MatingFeatureSequence',
    '006863F0': 'MatingFeatureID',
    '00686400': 'MatingFeatureDegreeOfFreedomSequence',
    '00686410': 'DegreeOfFreedomID',
    '00686420': 'DegreeOfFreedomType',
    '00686430': 'TwoDMatingFeatureCoordinatesSequence',
    '00686440': 'ReferencedHPGLDocumentID',
    '00686450': 'TwoDMatingPoint',
    '00686460': 'TwoDMatingAxes',
    '00686470': 'TwoDDegreeOfFreedomSequence',
    '00686490': 'ThreeDDegreeOfFreedomAxis',
    '006864A0': 'RangeOfFreedom',
    '006864C0': 'ThreeDMatingPoint',
    '006864D0': 'ThreeDMatingAxes',
    '006864F0': 'TwoDDegreeOfFreedomAxis',
    '00686500': 'PlanningLandmarkPointSequence',
    '00686510': 'PlanningLandmarkLineSequence',
    '00686520': 'PlanningLandmarkPlaneSequence',
    '00686530': 'PlanningLandmarkID',
    '00686540': 'PlanningLandmarkDescription',
    '00686545': 'PlanningLandmarkIdentificationCodeSequence',
    '00686550': 'TwoDPointCoordinatesSequence',
    '00686560': 'TwoDPointCoordinates',
    '00686590': 'ThreeDPointCoordinates',
    '006865A0': 'TwoDLineCoordinatesSequence',
    '006865B0': 'TwoDLineCoordinates',
    '006865D0': 'ThreeDLineCoordinates',
    '006865E0': 'TwoDPlaneCoordinatesSequence',
    '006865F0': 'TwoDPlaneIntersection',
    '00686610': 'ThreeDPlaneOrigin',
    '00686620': 'ThreeDPlaneNormal',
    '00687001': 'ModelModification',
    '00687002': 'ModelMirroring',
    '00687003': 'ModelUsageCodeSequence',
    '00700001': 'GraphicAnnotationSequence',
    '00700002': 'GraphicLayer',
    '00700003': 'BoundingBoxAnnotationUnits',
    '00700004': 'AnchorPointAnnotationUnits',
    '00700005': 'GraphicAnnotationUnits',
    '00700006': 'UnformattedTextValue',
    '00700008': 'TextObjectSequence',
    '00700009': 'GraphicObjectSequence',
    '00700010': 'BoundingBoxTopLeftHandCorner',
    '00700011': 'BoundingBoxBottomRightHandCorner',
    '00700012': 'BoundingBoxTextHorizontalJustification',
    '00700014': 'AnchorPoint',
    '00700015': 'AnchorPointVisibility',
    '00700020': 'GraphicDimensions',
    '00700021': 'NumberOfGraphicPoints',
    '00700022': 'GraphicData',
    '00700023': 'GraphicType',
    '00700024': 'GraphicFilled',
    '00700040': 'ImageRotationRetired',
    '00700041': 'ImageHorizontalFlip',
    '00700042': 'ImageRotation',
    '00700050': 'DisplayedAreaTopLeftHandCornerTrial',
    '00700051': 'DisplayedAreaBottomRightHandCornerTrial',
    '00700052': 'DisplayedAreaTopLeftHandCorner',
    '00700053': 'DisplayedAreaBottomRightHandCorner',
    '0070005A': 'DisplayedAreaSelectionSequence',
    '00700060': 'GraphicLayerSequence',
    '00700062': 'GraphicLayerOrder',
    '00700066': 'GraphicLayerRecommendedDisplayGrayscaleValue',
    '00700067': 'GraphicLayerRecommendedDisplayRGBValue',
    '00700068': 'GraphicLayerDescription',
    '00700080': 'ContentLabel',
    '00700081': 'ContentDescription',
    '00700082': 'PresentationCreationDate',
    '00700083': 'PresentationCreationTime',
    '00700084': 'ContentCreatorName',
    '00700086': 'ContentCreatorIdentificationCodeSequence',
    '00700087': 'AlternateContentDescriptionSequence',
    '00700100': 'PresentationSizeMode',
    '00700101': 'PresentationPixelSpacing',
    '00700102': 'PresentationPixelAspectRatio',
    '00700103': 'PresentationPixelMagnificationRatio',
    '00700207': 'GraphicGroupLabel',
    '00700208': 'GraphicGroupDescription',
    '00700209': 'CompoundGraphicSequence',
    '00700226': 'CompoundGraphicInstanceID',
    '00700227': 'FontName',
    '00700228': 'FontNameType',
    '00700229': 'CSSFontName',
    '00700230': 'RotationAngle',
    '00700231': 'TextStyleSequence',
    '00700232': 'LineStyleSequence',
    '00700233': 'FillStyleSequence',
    '00700234': 'GraphicGroupSequence',
    '00700241': 'TextColorCIELabValue',
    '00700242': 'HorizontalAlignment',
    '00700243': 'VerticalAlignment',
    '00700244': 'ShadowStyle',
    '00700245': 'ShadowOffsetX',
    '00700246': 'ShadowOffsetY',
    '00700247': 'ShadowColorCIELabValue',
    '00700248': 'Underlined',
    '00700249': 'Bold',
    '00700250': 'Italic',
    '00700251': 'PatternOnColorCIELabValue',
    '00700252': 'PatternOffColorCIELabValue',
    '00700253': 'LineThickness',
    '00700254': 'LineDashingStyle',
    '00700255': 'LinePattern',
    '00700256': 'FillPattern',
    '00700257': 'FillMode',
    '00700258': 'ShadowOpacity',
    '00700261': 'GapLength',
    '00700262': 'DiameterOfVisibility',
    '00700273': 'RotationPoint',
    '00700274': 'TickAlignment',
    '00700278': 'ShowTickLabel',
    '00700279': 'TickLabelAlignment',
    '00700282': 'CompoundGraphicUnits',
    '00700284': 'PatternOnOpacity',
    '00700285': 'PatternOffOpacity',
    '00700287': 'MajorTicksSequence',
    '00700288': 'TickPosition',
    '00700289': 'TickLabel',
    '00700294': 'CompoundGraphicType',
    '00700295': 'GraphicGroupID',
    '00700306': 'ShapeType',
    '00700308': 'RegistrationSequence',
    '00700309': 'MatrixRegistrationSequence',
    '0070030A': 'MatrixSequence',
    '0070030B': 'FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix',
    '0070030C': 'FrameOfReferenceTransformationMatrixType',
    '0070030D': 'RegistrationTypeCodeSequence',
    '0070030F': 'FiducialDescription',
    '00700310': 'FiducialIdentifier',
    '00700311': 'FiducialIdentifierCodeSequence',
    '00700312': 'ContourUncertaintyRadius',
    '00700314': 'UsedFiducialsSequence',
    '00700318': 'GraphicCoordinatesDataSequence',
    '0070031A': 'FiducialUID',
    '0070031B': 'ReferencedFiducialUID',
    '0070031C': 'FiducialSetSequence',
    '0070031E': 'FiducialSequence',
    '0070031F': 'FiducialsPropertyCategoryCodeSequence',
    '00700401': 'GraphicLayerRecommendedDisplayCIELabValue',
    '00700402': 'BlendingSequence',
    '00700403': 'RelativeOpacity',
    '00700404': 'ReferencedSpatialRegistrationSequence',
    '00700405': 'BlendingPosition',
    '00701101': 'PresentationDisplayCollectionUID',
    '00701102': 'PresentationSequenceCollectionUID',
    '00701103': 'PresentationSequencePositionIndex',
    '00701104': 'RenderedImageReferenceSequence',
    '00701201': 'VolumetricPresentationStateInputSequence',
    '00701202': 'PresentationInputType',
    '00701203': 'InputSequencePositionIndex',
    '00701204': 'Crop',
    '00701205': 'CroppingSpecificationIndex',
    '00701206': 'CompositingMethod',
    '00701207': 'VolumetricPresentationInputNumber',
    '00701208': 'ImageVolumeGeometry',
    '00701209': 'VolumetricPresentationInputSetUID',
    '0070120A': 'VolumetricPresentationInputSetSequence',
    '0070120B': 'GlobalCrop',
    '0070120C': 'GlobalCroppingSpecificationIndex',
    '0070120D': 'RenderingMethod',
    '00701301': 'VolumeCroppingSequence',
    '00701302': 'VolumeCroppingMethod',
    '00701303': 'BoundingBoxCrop',
    '00701304': 'ObliqueCroppingPlaneSequence',
    '00701305': 'Plane',
    '00701306': 'PlaneNormal',
    '00701309': 'CroppingSpecificationNumber',
    '00701501': 'MultiPlanarReconstructionStyle',
    '00701502': 'MPRThicknessType',
    '00701503': 'MPRSlabThickness',
    '00701505': 'MPRTopLeftHandCorner',
    '00701507': 'MPRViewWidthDirection',
    '00701508': 'MPRViewWidth',
    '0070150C': 'NumberOfVolumetricCurvePoints',
    '0070150D': 'VolumetricCurvePoints',
    '00701511': 'MPRViewHeightDirection',
    '00701512': 'MPRViewHeight',
    '00701602': 'RenderProjection',
    '00701603': 'ViewpointPosition',
    '00701604': 'ViewpointLookAtPoint',
    '00701605': 'ViewpointUpDirection',
    '00701606': 'RenderFieldOfView',
    '00701607': 'SamplingStepSize',
    '00701701': 'ShadingStyle',
    '00701702': 'AmbientReflectionIntensity',
    '00701703': 'LightDirection',
    '00701704': 'DiffuseReflectionIntensity',
    '00701705': 'SpecularReflectionIntensity',
    '00701706': 'Shininess',
    '00701801': 'PresentationStateClassificationComponentSequence',
    '00701802': 'ComponentType',
    '00701803': 'ComponentInputSequence',
    '00701804': 'VolumetricPresentationInputIndex',
    '00701805': 'PresentationStateCompositorComponentSequence',
    '00701806': 'WeightingTransferFunctionSequence',
    '00701807': 'WeightingLookupTableDescriptor',
    '00701808': 'WeightingLookupTableData',
    '00701901': 'VolumetricAnnotationSequence',
    '00701903': 'ReferencedStructuredContextSequence',
    '00701904': 'ReferencedContentItem',
    '00701905': 'VolumetricPresentationInputAnnotationSequence',
    '00701907': 'AnnotationClipping',
    '00701A01': 'PresentationAnimationStyle',
    '00701A03': 'RecommendedAnimationRate',
    '00701A04': 'AnimationCurveSequence',
    '00701A05': 'AnimationStepSize',
    '00701A06': 'SwivelRange',
    '00701A07': 'VolumetricCurveUpDirections',
    '00701A08': 'VolumeStreamSequence',
    '00701A09': 'RGBATransferFunctionDescription',
    '00701B01': 'AdvancedBlendingSequence',
    '00701B02': 'BlendingInputNumber',
    '00701B03': 'BlendingDisplayInputSequence',
    '00701B04': 'BlendingDisplaySequence',
    '00701B06': 'BlendingMode',
    '00701B07': 'TimeSeriesBlending',
    '00701B08': 'GeometryForDisplay',
    '00701B11': 'ThresholdSequence',
    '00701B12': 'ThresholdValueSequence',
    '00701B13': 'ThresholdType',
    '00701B14': 'ThresholdValue',
    '00720002': 'HangingProtocolName',
    '00720004': 'HangingProtocolDescription',
    '00720006': 'HangingProtocolLevel',
    '00720008': 'HangingProtocolCreator',
    '0072000A': 'HangingProtocolCreationDateTime',
    '0072000C': 'HangingProtocolDefinitionSequence',
    '0072000E': 'HangingProtocolUserIdentificationCodeSequence',
    '00720010': 'HangingProtocolUserGroupName',
    '00720012': 'SourceHangingProtocolSequence',
    '00720014': 'NumberOfPriorsReferenced',
    '00720020': 'ImageSetsSequence',
    '00720022': 'ImageSetSelectorSequence',
    '00720024': 'ImageSetSelectorUsageFlag',
    '00720026': 'SelectorAttribute',
    '00720028': 'SelectorValueNumber',
    '00720030': 'TimeBasedImageSetsSequence',
    '00720032': 'ImageSetNumber',
    '00720034': 'ImageSetSelectorCategory',
    '00720038': 'RelativeTime',
    '0072003A': 'RelativeTimeUnits',
    '0072003C': 'AbstractPriorValue',
    '0072003E': 'AbstractPriorCodeSequence',
    '00720040': 'ImageSetLabel',
    '00720050': 'SelectorAttributeVR',
    '00720052': 'SelectorSequencePointer',
    '00720054': 'SelectorSequencePointerPrivateCreator',
    '00720056': 'SelectorAttributePrivateCreator',
    '0072005E': 'SelectorAEValue',
    '0072005F': 'SelectorASValue',
    '00720060': 'SelectorATValue',
    '00720061': 'SelectorDAValue',
    '00720062': 'SelectorCSValue',
    '00720063': 'SelectorDTValue',
    '00720064': 'SelectorISValue',
    '00720065': 'SelectorOBValue',
    '00720066': 'SelectorLOValue',
    '00720067': 'SelectorOFValue',
    '00720068': 'SelectorLTValue',
    '00720069': 'SelectorOWValue',
    '0072006A': 'SelectorPNValue',
    '0072006B': 'SelectorTMValue',
    '0072006C': 'SelectorSHValue',
    '0072006D': 'SelectorUNValue',
    '0072006E': 'SelectorSTValue',
    '0072006F': 'SelectorUCValue',
    '00720070': 'SelectorUTValue',
    '00720071': 'SelectorURValue',
    '00720072': 'SelectorDSValue',
    '00720073': 'SelectorODValue',
    '00720074': 'SelectorFDValue',
    '00720075': 'SelectorOLValue',
    '00720076': 'SelectorFLValue',
    '00720078': 'SelectorULValue',
    '0072007A': 'SelectorUSValue',
    '0072007C': 'SelectorSLValue',
    '0072007E': 'SelectorSSValue',
    '0072007F': 'SelectorUIValue',
    '00720080': 'SelectorCodeSequenceValue',
    '00720100': 'NumberOfScreens',
    '00720102': 'NominalScreenDefinitionSequence',
    '00720104': 'NumberOfVerticalPixels',
    '00720106': 'NumberOfHorizontalPixels',
    '00720108': 'DisplayEnvironmentSpatialPosition',
    '0072010A': 'ScreenMinimumGrayscaleBitDepth',
    '0072010C': 'ScreenMinimumColorBitDepth',
    '0072010E': 'ApplicationMaximumRepaintTime',
    '00720200': 'DisplaySetsSequence',
    '00720202': 'DisplaySetNumber',
    '00720203': 'DisplaySetLabel',
    '00720204': 'DisplaySetPresentationGroup',
    '00720206': 'DisplaySetPresentationGroupDescription',
    '00720208': 'PartialDataDisplayHandling',
    '00720210': 'SynchronizedScrollingSequence',
    '00720212': 'DisplaySetScrollingGroup',
    '00720214': 'NavigationIndicatorSequence',
    '00720216': 'NavigationDisplaySet',
    '00720218': 'ReferenceDisplaySets',
    '00720300': 'ImageBoxesSequence',
    '00720302': 'ImageBoxNumber',
    '00720304': 'ImageBoxLayoutType',
    '00720306': 'ImageBoxTileHorizontalDimension',
    '00720308': 'ImageBoxTileVerticalDimension',
    '00720310': 'ImageBoxScrollDirection',
    '00720312': 'ImageBoxSmallScrollType',
    '00720314': 'ImageBoxSmallScrollAmount',
    '00720316': 'ImageBoxLargeScrollType',
    '00720318': 'ImageBoxLargeScrollAmount',
    '00720320': 'ImageBoxOverlapPriority',
    '00720330': 'CineRelativeToRealTime',
    '00720400': 'FilterOperationsSequence',
    '00720402': 'FilterByCategory',
    '00720404': 'FilterByAttributePresence',
    '00720406': 'FilterByOperator',
    '00720420': 'StructuredDisplayBackgroundCIELabValue',
    '00720421': 'EmptyImageBoxCIELabValue',
    '00720422': 'StructuredDisplayImageBoxSequence',
    '00720424': 'StructuredDisplayTextBoxSequence',
    '00720427': 'ReferencedFirstFrameSequence',
    '00720430': 'ImageBoxSynchronizationSequence',
    '00720432': 'SynchronizedImageBoxList',
    '00720434': 'TypeOfSynchronization',
    '00720500': 'BlendingOperationType',
    '00720510': 'ReformattingOperationType',
    '00720512': 'ReformattingThickness',
    '00720514': 'ReformattingInterval',
    '00720516': 'ReformattingOperationInitialViewDirection',
    '00720520': 'ThreeDRenderingType',
    '00720600': 'SortingOperationsSequence',
    '00720602': 'SortByCategory',
    '00720604': 'SortingDirection',
    '00720700': 'DisplaySetPatientOrientation',
    '00720702': 'VOIType',
    '00720704': 'PseudoColorType',
    '00720705': 'PseudoColorPaletteInstanceReferenceSequence',
    '00720706': 'ShowGrayscaleInverted',
    '00720710': 'ShowImageTrueSizeFlag',
    '00720712': 'ShowGraphicAnnotationFlag',
    '00720714': 'ShowPatientDemographicsFlag',
    '00720716': 'ShowAcquisitionTechniquesFlag',
    '00720717': 'DisplaySetHorizontalJustification',
    '00720718': 'DisplaySetVerticalJustification',
    '00740120': 'ContinuationStartMeterset',
    '00740121': 'ContinuationEndMeterset',
    '00741000': 'ProcedureStepState',
    '00741002': 'ProcedureStepProgressInformationSequence',
    '00741004': 'ProcedureStepProgress',
    '00741006': 'ProcedureStepProgressDescription',
    '00741007': 'ProcedureStepProgressParametersSequence',
    '00741008': 'ProcedureStepCommunicationsURISequence',
    '0074100A': 'ContactURI',
    '0074100C': 'ContactDisplayName',
    '0074100E': 'ProcedureStepDiscontinuationReasonCodeSequence',
    '00741020': 'BeamTaskSequence',
    '00741022': 'BeamTaskType',
    '00741024': 'BeamOrderIndexTrial',
    '00741025': 'AutosequenceFlag',
    '00741026': 'TableTopVerticalAdjustedPosition',
    '00741027': 'TableTopLongitudinalAdjustedPosition',
    '00741028': 'TableTopLateralAdjustedPosition',
    '0074102A': 'PatientSupportAdjustedAngle',
    '0074102B': 'TableTopEccentricAdjustedAngle',
    '0074102C': 'TableTopPitchAdjustedAngle',
    '0074102D': 'TableTopRollAdjustedAngle',
    '00741030': 'DeliveryVerificationImageSequence',
    '00741032': 'VerificationImageTiming',
    '00741034': 'DoubleExposureFlag',
    '00741036': 'DoubleExposureOrdering',
    '00741038': 'DoubleExposureMetersetTrial',
    '0074103A': 'DoubleExposureFieldDeltaTrial',
    '00741040': 'RelatedReferenceRTImageSequence',
    '00741042': 'GeneralMachineVerificationSequence',
    '00741044': 'ConventionalMachineVerificationSequence',
    '00741046': 'IonMachineVerificationSequence',
    '00741048': 'FailedAttributesSequence',
    '0074104A': 'OverriddenAttributesSequence',
    '0074104C': 'ConventionalControlPointVerificationSequence',
    '0074104E': 'IonControlPointVerificationSequence',
    '00741050': 'AttributeOccurrenceSequence',
    '00741052': 'AttributeOccurrencePointer',
    '00741054': 'AttributeItemSelector',
    '00741056': 'AttributeOccurrencePrivateCreator',
    '00741057': 'SelectorSequencePointerItems',
    '00741200': 'ScheduledProcedureStepPriority',
    '00741202': 'WorklistLabel',
    '00741204': 'ProcedureStepLabel',
    '00741210': 'ScheduledProcessingParametersSequence',
    '00741212': 'PerformedProcessingParametersSequence',
    '00741216': 'UnifiedProcedureStepPerformedProcedureSequence',
    '00741220': 'RelatedProcedureStepSequence',
    '00741222': 'ProcedureStepRelationshipType',
    '00741224': 'ReplacedProcedureStepSequence',
    '00741230': 'DeletionLock',
    '00741234': 'ReceivingAE',
    '00741236': 'RequestingAE',
    '00741238': 'ReasonForCancellation',
    '00741242': 'SCPStatus',
    '00741244': 'SubscriptionListStatus',
    '00741246': 'UnifiedProcedureStepListStatus',
    '00741324': 'BeamOrderIndex',
    '00741338': 'DoubleExposureMeterset',
    '0074133A': 'DoubleExposureFieldDelta',
    '00741401': 'BrachyTaskSequence',
    '00741402': 'ContinuationStartTotalReferenceAirKerma',
    '00741403': 'ContinuationEndTotalReferenceAirKerma',
    '00741404': 'ContinuationPulseNumber',
    '00741405': 'ChannelDeliveryOrderSequence',
    '00741406': 'ReferencedChannelNumber',
    '00741407': 'StartCumulativeTimeWeight',
    '00741408': 'EndCumulativeTimeWeight',
    '00741409': 'OmittedChannelSequence',
    '0074140A': 'ReasonForChannelOmission',
    '0074140B': 'ReasonForChannelOmissionDescription',
    '0074140C': 'ChannelDeliveryOrderIndex',
    '0074140D': 'ChannelDeliveryContinuationSequence',
    '0074140E': 'OmittedApplicationSetupSequence',
    '00760001': 'ImplantAssemblyTemplateName',
    '00760003': 'ImplantAssemblyTemplateIssuer',
    '00760006': 'ImplantAssemblyTemplateVersion',
    '00760008': 'ReplacedImplantAssemblyTemplateSequence',
    '0076000A': 'ImplantAssemblyTemplateType',
    '0076000C': 'OriginalImplantAssemblyTemplateSequence',
    '0076000E': 'DerivationImplantAssemblyTemplateSequence',
    '00760010': 'ImplantAssemblyTemplateTargetAnatomySequence',
    '00760020': 'ProcedureTypeCodeSequence',
    '00760030': 'SurgicalTechnique',
    '00760032': 'ComponentTypesSequence',
    '00760034': 'ComponentTypeCodeSequence',
    '00760036': 'ExclusiveComponentType',
    '00760038': 'MandatoryComponentType',
    '00760040': 'ComponentSequence',
    '00760055': 'ComponentID',
    '00760060': 'ComponentAssemblySequence',
    '00760070': ('Component1ReferencedID'),
    '00760080': ('Component1ReferencedMatingFeatureSetID'),
    '00760090': ('Component1ReferencedMatingFeatureID'),
    '007600A0': ('Component2ReferencedID'),
    '007600B0': ('Component2ReferencedMatingFeatureSetID'),
    '007600C0': ('Component2ReferencedMatingFeatureID'),
    '00780001': 'ImplantTemplateGroupName',
    '00780010': 'ImplantTemplateGroupDescription',
    '00780020': 'ImplantTemplateGroupIssuer',
    '00780024': 'ImplantTemplateGroupVersion',
    '00780026': 'ReplacedImplantTemplateGroupSequence',
    '00780028': 'ImplantTemplateGroupTargetAnatomySequence',
    '0078002A': 'ImplantTemplateGroupMembersSequence',
    '0078002E': 'ImplantTemplateGroupMemberID',
    '00780050': 'ThreeDImplantTemplateGroupMemberMatchingPoint',
    '00780060': 'ThreeDImplantTemplateGroupMemberMatchingAxes',
    '00780070': ('ImplantTemplateGroupMemberMatching2DCoordinatesSequence'),
    '00780090': 'TwoDImplantTemplateGroupMemberMatchingPoint',
    '007800A0': 'TwoDImplantTemplateGroupMemberMatchingAxes',
    '007800B0': 'ImplantTemplateGroupVariationDimensionSequence',
    '007800B2': 'ImplantTemplateGroupVariationDimensionName',
    '007800B4': 'ImplantTemplateGroupVariationDimensionRankSequence',
    '007800B6': 'ReferencedImplantTemplateGroupMemberID',
    '007800B8': 'ImplantTemplateGroupVariationDimensionRank',
    '00800001': 'SurfaceScanAcquisitionTypeCodeSequence',
    '00800002': 'SurfaceScanModeCodeSequence',
    '00800003': 'RegistrationMethodCodeSequence',
    '00800004': 'ShotDurationTime',
    '00800005': 'ShotOffsetTime',
    '00800006': 'SurfacePointPresentationValueData',
    '00800007': 'SurfacePointColorCIELabValueData',
    '00800008': 'UVMappingSequence',
    '00800009': 'TextureLabel',
    '00800010': 'UValueData',
    '00800011': 'VValueData',
    '00800012': 'ReferencedTextureSequence',
    '00800013': 'ReferencedSurfaceDataSequence',
    '00820001': 'AssessmentSummary',
    '00820003': 'AssessmentSummaryDescription',
    '00820004': 'AssessedSOPInstanceSequence',
    '00820005': 'ReferencedComparisonSOPInstanceSequence',
    '00820006': 'NumberOfAssessmentObservations',
    '00820007': 'AssessmentObservationsSequence',
    '00820008': 'ObservationSignificance',
    '0082000A': 'ObservationDescription',
    '0082000C': 'StructuredConstraintObservationSequence',
    '00820010': 'AssessedAttributeValueSequence',
    '00820016': 'AssessmentSetID',
    '00820017': 'AssessmentRequesterSequence',
    '00820018': 'SelectorAttributeName',
    '00820019': 'SelectorAttributeKeyword',
    '00820021': 'AssessmentTypeCodeSequence',
    '00820022': 'ObservationBasisCodeSequence',
    '00820023': 'AssessmentLabel',
    '00820032': 'ConstraintType',
    '00820033': 'SpecificationSelectionGuidance',
    '00820034': 'ConstraintValueSequence',
    '00820035': 'RecommendedDefaultValueSequence',
    '00820036': 'ConstraintViolationSignificance',
    '00820037': 'ConstraintViolationCondition',
    '00820038': 'ModifiableConstraintFlag',
    '00880130': 'StorageMediaFileSetID',
    '00880140': 'StorageMediaFileSetUID',
    '00880200': 'IconImageSequence',
    '00880904': 'TopicTitle',
    '00880906': 'TopicSubject',
    '00880910': 'TopicAuthor',
    '00880912': 'TopicKeywords',
    '01000410': 'SOPInstanceStatus',
    '01000420': 'SOPAuthorizationDateTime',
    '01000424': 'SOPAuthorizationComment',
    '01000426': 'AuthorizationEquipmentCertificationNumber',
    '04000005': 'MACIDNumber',
    '04000010': 'MACCalculationTransferSyntaxUID',
    '04000015': 'MACAlgorithm',
    '04000020': 'DataElementsSigned',
    '04000100': 'DigitalSignatureUID',
    '04000105': 'DigitalSignatureDateTime',
    '04000110': 'CertificateType',
    '04000115': 'CertificateOfSigner',
    '04000120': 'Signature',
    '04000305': 'CertifiedTimestampType',
    '04000310': 'CertifiedTimestamp',
    '04000315': '',
    '04000401': 'DigitalSignaturePurposeCodeSequence',
    '04000402': 'ReferencedDigitalSignatureSequence',
    '04000403': 'ReferencedSOPInstanceMACSequence',
    '04000404': 'MAC',
    '04000500': 'EncryptedAttributesSequence',
    '04000510': 'EncryptedContentTransferSyntaxUID',
    '04000520': 'EncryptedContent',
    '04000550': 'ModifiedAttributesSequence',
    '04000561': 'OriginalAttributesSequence',
    '04000562': 'AttributeModificationDateTime',
    '04000563': 'ModifyingSystem',
    '04000564': 'SourceOfPreviousValues',
    '04000565': 'ReasonForTheAttributeModification',
    '04000600': 'InstanceOriginStatus',
    '20000010': 'NumberOfCopies',
    '2000001E': 'PrinterConfigurationSequence',
    '20000020': 'PrintPriority',
    '20000030': 'MediumType',
    '20000040': 'FilmDestination',
    '20000050': 'FilmSessionLabel',
    '20000060': 'MemoryAllocation',
    '20000061': 'MaximumMemoryAllocation',
    '20000062': 'ColorImagePrintingFlag',
    '20000063': 'CollationFlag',
    '20000065': 'AnnotationFlag',
    '20000067': 'ImageOverlayFlag',
    '20000069': 'PresentationLUTFlag',
    '2000006A': 'ImageBoxPresentationLUTFlag',
    '200000A0': 'MemoryBitDepth',
    '200000A1': 'PrintingBitDepth',
    '200000A2': 'MediaInstalledSequence',
    '200000A4': 'OtherMediaAvailableSequence',
    '200000A8': 'SupportedImageDisplayFormatsSequence',
    '20000500': 'ReferencedFilmBoxSequence',
    '20000510': 'ReferencedStoredPrintSequence',
    '20100010': 'ImageDisplayFormat',
    '20100030': 'AnnotationDisplayFormatID',
    '20100040': 'FilmOrientation',
    '20100050': 'FilmSizeID',
    '20100052': 'PrinterResolutionID',
    '20100054': 'DefaultPrinterResolutionID',
    '20100060': 'MagnificationType',
    '20100080': 'SmoothingType',
    '201000A6': 'DefaultMagnificationType',
    '201000A7': 'OtherMagnificationTypesAvailable',
    '201000A8': 'DefaultSmoothingType',
    '201000A9': 'OtherSmoothingTypesAvailable',
    '20100100': 'BorderDensity',
    '20100110': 'EmptyImageDensity',
    '20100120': 'MinDensity',
    '20100130': 'MaxDensity',
    '20100140': 'Trim',
    '20100150': 'ConfigurationInformation',
    '20100152': 'ConfigurationInformationDescription',
    '20100154': 'MaximumCollatedFilms',
    '2010015E': 'Illumination',
    '20100160': 'ReflectedAmbientLight',
    '20100376': 'PrinterPixelSpacing',
    '20100500': 'ReferencedFilmSessionSequence',
    '20100510': 'ReferencedImageBoxSequence',
    '20100520': 'ReferencedBasicAnnotationBoxSequence',
    '20200010': 'ImageBoxPosition',
    '20200020': 'Polarity',
    '20200030': 'RequestedImageSize',
    '20200040': 'RequestedDecimateCropBehavior',
    '20200050': 'RequestedResolutionID',
    '202000A0': 'RequestedImageSizeFlag',
    '202000A2': 'DecimateCropResult',
    '20200110': 'BasicGrayscaleImageSequence',
    '20200111': 'BasicColorImageSequence',
    '20200130': 'ReferencedImageOverlayBoxSequence',
    '20200140': 'ReferencedVOILUTBoxSequence',
    '20300010': 'AnnotationPosition',
    '20300020': 'TextString',
    '20400010': 'ReferencedOverlayPlaneSequence',
    '20400011': 'ReferencedOverlayPlaneGroups',
    '20400020': 'OverlayPixelDataSequence',
    '20400060': 'OverlayMagnificationType',
    '20400070': 'OverlaySmoothingType',
    '20400072': 'OverlayOrImageMagnification',
    '20400074': 'MagnifyToNumberOfColumns',
    '20400080': 'OverlayForegroundDensity',
    '20400082': 'OverlayBackgroundDensity',
    '20400090': 'OverlayMode',
    '20400100': 'ThresholdDensity',
    '20400500': 'ReferencedImageBoxSequenceRetired',
    '20500010': 'PresentationLUTSequence',
    '20500020': 'PresentationLUTShape',
    '20500500': 'ReferencedPresentationLUTSequence',
    '21000010': 'PrintJobID',
    '21000020': 'ExecutionStatus',
    '21000030': 'ExecutionStatusInfo',
    '21000040': 'CreationDate',
    '21000050': 'CreationTime',
    '21000070': 'Originator',
    '21000140': 'DestinationAE',
    '21000160': 'OwnerID',
    '21000170': 'NumberOfFilms',
    '21000500': 'ReferencedPrintJobSequencePullStoredPrint',
    '21100010': 'PrinterStatus',
    '21100020': 'PrinterStatusInfo',
    '21100030': 'PrinterName',
    '21100099': 'PrintQueueID',
    '21200010': 'QueueStatus',
    '21200050': 'PrintJobDescriptionSequence',
    '21200070': 'ReferencedPrintJobSequence',
    '21300010': 'PrintManagementCapabilitiesSequence',
    '21300015': 'PrinterCharacteristicsSequence',
    '21300030': 'FilmBoxContentSequence',
    '21300040': 'ImageBoxContentSequence',
    '21300050': 'AnnotationContentSequence',
    '21300060': 'ImageOverlayBoxContentSequence',
    '21300080': 'PresentationLUTContentSequence',
    '213000A0': 'ProposedStudySequence',
    '213000C0': 'OriginalImageSequence',
    '22000001': 'LabelUsingInformationExtractedFromInstances',
    '22000002': 'LabelText',
    '22000003': 'LabelStyleSelection',
    '22000004': 'MediaDisposition',
    '22000005': 'BarcodeValue',
    '22000006': 'BarcodeSymbology',
    '22000007': 'AllowMediaSplitting',
    '22000008': 'IncludeNonDICOMObjects',
    '22000009': 'IncludeDisplayApplication',
    '2200000A': 'PreserveCompositeInstancesAfterMediaCreation',
    '2200000B': 'TotalNumberOfPiecesOfMediaCreated',
    '2200000C': 'RequestedMediaApplicationProfile',
    '2200000D': 'ReferencedStorageMediaSequence',
    '2200000E': 'FailureAttributes',
    '2200000F': 'AllowLossyCompression',
    '22000020': 'RequestPriority',
    '30020002': 'RTImageLabel',
    '30020003': 'RTImageName',
    '30020004': 'RTImageDescription',
    '3002000A': 'ReportedValuesOrigin',
    '3002000C': 'RTImagePlane',
    '3002000D': 'XRayImageReceptorTranslation',
    '3002000E': 'XRayImageReceptorAngle',
    '30020010': 'RTImageOrientation',
    '30020011': 'ImagePlanePixelSpacing',
    '30020012': 'RTImagePosition',
    '30020020': 'RadiationMachineName',
    '30020022': 'RadiationMachineSAD',
    '30020024': 'RadiationMachineSSD',
    '30020026': 'RTImageSID',
    '30020028': 'SourceToReferenceObjectDistance',
    '30020029': 'FractionNumber',
    '30020030': 'ExposureSequence',
    '30020032': 'MetersetExposure',
    '30020034': 'DiaphragmPosition',
    '30020040': 'FluenceMapSequence',
    '30020041': 'FluenceDataSource',
    '30020042': 'FluenceDataScale',
    '30020050': 'PrimaryFluenceModeSequence',
    '30020051': 'FluenceMode',
    '30020052': 'FluenceModeID',
    '30040001': 'DVHType',
    '30040002': 'DoseUnits',
    '30040004': 'DoseType',
    '30040005': 'SpatialTransformOfDose',
    '30040006': 'DoseComment',
    '30040008': 'NormalizationPoint',
    '3004000A': 'DoseSummationType',
    '3004000C': 'GridFrameOffsetVector',
    '3004000E': 'DoseGridScaling',
    '30040010': 'RTDoseROISequence',
    '30040012': 'DoseValue',
    '30040014': 'TissueHeterogeneityCorrection',
    '30040040': 'DVHNormalizationPoint',
    '30040042': 'DVHNormalizationDoseValue',
    '30040050': 'DVHSequence',
    '30040052': 'DVHDoseScaling',
    '30040054': 'DVHVolumeUnits',
    '30040056': 'DVHNumberOfBins',
    '30040058': 'DVHData',
    '30040060': 'DVHReferencedROISequence',
    '30040062': 'DVHROIContributionType',
    '30040070': 'DVHMinimumDose',
    '30040072': 'DVHMaximumDose',
    '30040074': 'DVHMeanDose',
    '30060002': 'StructureSetLabel',
    '30060004': 'StructureSetName',
    '30060006': 'StructureSetDescription',
    '30060008': 'StructureSetDate',
    '30060009': 'StructureSetTime',
    '30060010': 'ReferencedFrameOfReferenceSequence',
    '30060012': 'RTReferencedStudySequence',
    '30060014': 'RTReferencedSeriesSequence',
    '30060016': 'ContourImageSequence',
    '30060018': 'PredecessorStructureSetSequence',
    '30060020': 'StructureSetROISequence',
    '30060022': 'ROINumber',
    '30060024': 'ReferencedFrameOfReferenceUID',
    '30060026': 'ROIName',
    '30060028': 'ROIDescription',
    '3006002A': 'ROIDisplayColor',
    '3006002C': 'ROIVolume',
    '30060030': 'RTRelatedROISequence',
    '30060033': 'RTROIRelationship',
    '30060036': 'ROIGenerationAlgorithm',
    '30060038': 'ROIGenerationDescription',
    '30060039': 'ROIContourSequence',
    '30060040': 'ContourSequence',
    '30060042': 'ContourGeometricType',
    '30060044': 'ContourSlabThickness',
    '30060045': 'ContourOffsetVector',
    '30060046': 'NumberOfContourPoints',
    '30060048': 'ContourNumber',
    '30060049': 'AttachedContours',
    '30060050': 'ContourData',
    '30060080': 'RTROIObservationsSequence',
    '30060082': 'ObservationNumber',
    '30060084': 'ReferencedROINumber',
    '30060085': 'ROIObservationLabel',
    '30060086': 'RTROIIdentificationCodeSequence',
    '30060088': 'ROIObservationDescription',
    '300600A0': 'RelatedRTROIObservationsSequence',
    '300600A4': 'RTROIInterpretedType',
    '300600A6': 'ROIInterpreter',
    '300600B0': 'ROIPhysicalPropertiesSequence',
    '300600B2': 'ROIPhysicalProperty',
    '300600B4': 'ROIPhysicalPropertyValue',
    '300600B6': 'ROIElementalCompositionSequence',
    '300600B7': 'ROIElementalCompositionAtomicNumber',
    '300600B8': 'ROIElementalCompositionAtomicMassFraction',
    '300600B9': 'AdditionalRTROIIdentificationCodeSequence',
    '300600C0': 'FrameOfReferenceRelationshipSequence',
    '300600C2': 'RelatedFrameOfReferenceUID',
    '300600C4': 'FrameOfReferenceTransformationType',
    '300600C6': 'FrameOfReferenceTransformationMatrix',
    '300600C8': 'FrameOfReferenceTransformationComment',
    '30080010': 'MeasuredDoseReferenceSequence',
    '30080012': 'MeasuredDoseDescription',
    '30080014': 'MeasuredDoseType',
    '30080016': 'MeasuredDoseValue',
    '30080020': 'TreatmentSessionBeamSequence',
    '30080021': 'TreatmentSessionIonBeamSequence',
    '30080022': 'CurrentFractionNumber',
    '30080024': 'TreatmentControlPointDate',
    '30080025': 'TreatmentControlPointTime',
    '3008002A': 'TreatmentTerminationStatus',
    '3008002B': 'TreatmentTerminationCode',
    '3008002C': 'TreatmentVerificationStatus',
    '30080030': 'ReferencedTreatmentRecordSequence',
    '30080032': 'SpecifiedPrimaryMeterset',
    '30080033': 'SpecifiedSecondaryMeterset',
    '30080036': 'DeliveredPrimaryMeterset',
    '30080037': 'DeliveredSecondaryMeterset',
    '3008003A': 'SpecifiedTreatmentTime',
    '3008003B': 'DeliveredTreatmentTime',
    '30080040': 'ControlPointDeliverySequence',
    '30080041': 'IonControlPointDeliverySequence',
    '30080042': 'SpecifiedMeterset',
    '30080044': 'DeliveredMeterset',
    '30080045': 'MetersetRateSet',
    '30080046': 'MetersetRateDelivered',
    '30080047': 'ScanSpotMetersetsDelivered',
    '30080048': 'DoseRateDelivered',
    '30080050': 'TreatmentSummaryCalculatedDoseReferenceSequence',
    '30080052': 'CumulativeDoseToDoseReference',
    '30080054': 'FirstTreatmentDate',
    '30080056': 'MostRecentTreatmentDate',
    '3008005A': 'NumberOfFractionsDelivered',
    '30080060': 'OverrideSequence',
    '30080061': 'ParameterSequencePointer',
    '30080062': 'OverrideParameterPointer',
    '30080063': 'ParameterItemIndex',
    '30080064': 'MeasuredDoseReferenceNumber',
    '30080065': 'ParameterPointer',
    '30080066': 'OverrideReason',
    '30080067': 'ParameterValueNumber',
    '30080068': 'CorrectedParameterSequence',
    '3008006A': 'CorrectionValue',
    '30080070': 'CalculatedDoseReferenceSequence',
    '30080072': 'CalculatedDoseReferenceNumber',
    '30080074': 'CalculatedDoseReferenceDescription',
    '30080076': 'CalculatedDoseReferenceDoseValue',
    '30080078': 'StartMeterset',
    '3008007A': 'EndMeterset',
    '30080080': 'ReferencedMeasuredDoseReferenceSequence',
    '30080082': 'ReferencedMeasuredDoseReferenceNumber',
    '30080090': 'ReferencedCalculatedDoseReferenceSequence',
    '30080092': 'ReferencedCalculatedDoseReferenceNumber',
    '300800A0': 'BeamLimitingDeviceLeafPairsSequence',
    '300800B0': 'RecordedWedgeSequence',
    '300800C0': 'RecordedCompensatorSequence',
    '300800D0': 'RecordedBlockSequence',
    '300800E0': 'TreatmentSummaryMeasuredDoseReferenceSequence',
    '300800F0': 'RecordedSnoutSequence',
    '300800F2': 'RecordedRangeShifterSequence',
    '300800F4': 'RecordedLateralSpreadingDeviceSequence',
    '300800F6': 'RecordedRangeModulatorSequence',
    '30080100': 'RecordedSourceSequence',
    '30080105': 'SourceSerialNumber',
    '30080110': 'TreatmentSessionApplicationSetupSequence',
    '30080116': 'ApplicationSetupCheck',
    '30080120': 'RecordedBrachyAccessoryDeviceSequence',
    '30080122': 'ReferencedBrachyAccessoryDeviceNumber',
    '30080130': 'RecordedChannelSequence',
    '30080132': 'SpecifiedChannelTotalTime',
    '30080134': 'DeliveredChannelTotalTime',
    '30080136': 'SpecifiedNumberOfPulses',
    '30080138': 'DeliveredNumberOfPulses',
    '3008013A': 'SpecifiedPulseRepetitionInterval',
    '3008013C': 'DeliveredPulseRepetitionInterval',
    '30080140': 'RecordedSourceApplicatorSequence',
    '30080142': 'ReferencedSourceApplicatorNumber',
    '30080150': 'RecordedChannelShieldSequence',
    '30080152': 'ReferencedChannelShieldNumber',
    '30080160': 'BrachyControlPointDeliveredSequence',
    '30080162': 'SafePositionExitDate',
    '30080164': 'SafePositionExitTime',
    '30080166': 'SafePositionReturnDate',
    '30080168': 'SafePositionReturnTime',
    '30080171': 'PulseSpecificBrachyControlPointDeliveredSequence',
    '30080172': 'PulseNumber',
    '30080173': 'BrachyPulseControlPointDeliveredSequence',
    '30080200': 'CurrentTreatmentStatus',
    '30080202': 'TreatmentStatusComment',
    '30080220': 'FractionGroupSummarySequence',
    '30080223': 'ReferencedFractionNumber',
    '30080224': 'FractionGroupType',
    '30080230': 'BeamStopperPosition',
    '30080240': 'FractionStatusSummarySequence',
    '30080250': 'TreatmentDate',
    '30080251': 'TreatmentTime',
    '300A0002': 'RTPlanLabel',
    '300A0003': 'RTPlanName',
    '300A0004': 'RTPlanDescription',
    '300A0006': 'RTPlanDate',
    '300A0007': 'RTPlanTime',
    '300A0009': 'TreatmentProtocols',
    '300A000A': 'PlanIntent',
    '300A000B': 'TreatmentSites',
    '300A000C': 'RTPlanGeometry',
    '300A000E': 'PrescriptionDescription',
    '300A0010': 'DoseReferenceSequence',
    '300A0012': 'DoseReferenceNumber',
    '300A0013': 'DoseReferenceUID',
    '300A0014': 'DoseReferenceStructureType',
    '300A0015': 'NominalBeamEnergyUnit',
    '300A0016': 'DoseReferenceDescription',
    '300A0018': 'DoseReferencePointCoordinates',
    '300A001A': 'NominalPriorDose',
    '300A0020': 'DoseReferenceType',
    '300A0021': 'ConstraintWeight',
    '300A0022': 'DeliveryWarningDose',
    '300A0023': 'DeliveryMaximumDose',
    '300A0025': 'TargetMinimumDose',
    '300A0026': 'TargetPrescriptionDose',
    '300A0027': 'TargetMaximumDose',
    '300A0028': 'TargetUnderdoseVolumeFraction',
    '300A002A': 'OrganAtRiskFullVolumeDose',
    '300A002B': 'OrganAtRiskLimitDose',
    '300A002C': 'OrganAtRiskMaximumDose',
    '300A002D': 'OrganAtRiskOverdoseVolumeFraction',
    '300A0040': 'ToleranceTableSequence',
    '300A0042': 'ToleranceTableNumber',
    '300A0043': 'ToleranceTableLabel',
    '300A0044': 'GantryAngleTolerance',
    '300A0046': 'BeamLimitingDeviceAngleTolerance',
    '300A0048': 'BeamLimitingDeviceToleranceSequence',
    '300A004A': 'BeamLimitingDevicePositionTolerance',
    '300A004B': 'SnoutPositionTolerance',
    '300A004C': 'PatientSupportAngleTolerance',
    '300A004E': 'TableTopEccentricAngleTolerance',
    '300A004F': 'TableTopPitchAngleTolerance',
    '300A0050': 'TableTopRollAngleTolerance',
    '300A0051': 'TableTopVerticalPositionTolerance',
    '300A0052': 'TableTopLongitudinalPositionTolerance',
    '300A0053': 'TableTopLateralPositionTolerance',
    '300A0055': 'RTPlanRelationship',
    '300A0070': 'FractionGroupSequence',
    '300A0071': 'FractionGroupNumber',
    '300A0072': 'FractionGroupDescription',
    '300A0078': 'NumberOfFractionsPlanned',
    '300A0079': 'NumberOfFractionPatternDigitsPerDay',
    '300A007A': 'RepeatFractionCycleLength',
    '300A007B': 'FractionPattern',
    '300A0080': 'NumberOfBeams',
    '300A0082': 'BeamDoseSpecificationPoint',
    '300A0083': 'ReferencedDoseReferenceUID',
    '300A0084': 'BeamDose',
    '300A0086': 'BeamMeterset',
    '300A0088': 'BeamDosePointDepth',
    '300A0089': 'BeamDosePointEquivalentDepth',
    '300A008A': 'BeamDosePointSSD',
    '300A008B': 'BeamDoseMeaning',
    '300A008C': 'BeamDoseVerificationControlPointSequence',
    '300A008D': 'AverageBeamDosePointDepth',
    '300A008E': 'AverageBeamDosePointEquivalentDepth',
    '300A008F': 'AverageBeamDosePointSSD',
    '300A0090': 'BeamDoseType',
    '300A0091': 'AlternateBeamDose',
    '300A0092': 'AlternateBeamDoseType',
    '300A0093': 'DepthValueAveragingFlag',
    '300A0094': 'BeamDosePointSourceToExternalContourDistance',
    '300A00A0': 'NumberOfBrachyApplicationSetups',
    '300A00A2': 'BrachyApplicationSetupDoseSpecificationPoint',
    '300A00A4': 'BrachyApplicationSetupDose',
    '300A00B0': 'BeamSequence',
    '300A00B2': 'TreatmentMachineName',
    '300A00B3': 'PrimaryDosimeterUnit',
    '300A00B4': 'SourceAxisDistance',
    '300A00B6': 'BeamLimitingDeviceSequence',
    '300A00B8': 'RTBeamLimitingDeviceType',
    '300A00BA': 'SourceToBeamLimitingDeviceDistance',
    '300A00BB': 'IsocenterToBeamLimitingDeviceDistance',
    '300A00BC': 'NumberOfLeafJawPairs',
    '300A00BE': 'LeafPositionBoundaries',
    '300A00C0': 'BeamNumber',
    '300A00C2': 'BeamName',
    '300A00C3': 'BeamDescription',
    '300A00C4': 'BeamType',
    '300A00C5': 'BeamDeliveryDurationLimit',
    '300A00C6': 'RadiationType',
    '300A00C7': 'HighDoseTechniqueType',
    '300A00C8': 'ReferenceImageNumber',
    '300A00CA': 'PlannedVerificationImageSequence',
    '300A00CC': 'ImagingDeviceSpecificAcquisitionParameters',
    '300A00CE': 'TreatmentDeliveryType',
    '300A00D0': 'NumberOfWedges',
    '300A00D1': 'WedgeSequence',
    '300A00D2': 'WedgeNumber',
    '300A00D3': 'WedgeType',
    '300A00D4': 'WedgeID',
    '300A00D5': 'WedgeAngle',
    '300A00D6': 'WedgeFactor',
    '300A00D7': 'TotalWedgeTrayWaterEquivalentThickness',
    '300A00D8': 'WedgeOrientation',
    '300A00D9': 'IsocenterToWedgeTrayDistance',
    '300A00DA': 'SourceToWedgeTrayDistance',
    '300A00DB': 'WedgeThinEdgePosition',
    '300A00DC': 'BolusID',
    '300A00DD': 'BolusDescription',
    '300A00DE': 'EffectiveWedgeAngle',
    '300A00E0': 'NumberOfCompensators',
    '300A00E1': 'MaterialID',
    '300A00E2': 'TotalCompensatorTrayFactor',
    '300A00E3': 'CompensatorSequence',
    '300A00E4': 'CompensatorNumber',
    '300A00E5': 'CompensatorID',
    '300A00E6': 'SourceToCompensatorTrayDistance',
    '300A00E7': 'CompensatorRows',
    '300A00E8': 'CompensatorColumns',
    '300A00E9': 'CompensatorPixelSpacing',
    '300A00EA': 'CompensatorPosition',
    '300A00EB': 'CompensatorTransmissionData',
    '300A00EC': 'CompensatorThicknessData',
    '300A00ED': 'NumberOfBoli',
    '300A00EE': 'CompensatorType',
    '300A00EF': 'CompensatorTrayID',
    '300A00F0': 'NumberOfBlocks',
    '300A00F2': 'TotalBlockTrayFactor',
    '300A00F3': 'TotalBlockTrayWaterEquivalentThickness',
    '300A00F4': 'BlockSequence',
    '300A00F5': 'BlockTrayID',
    '300A00F6': 'SourceToBlockTrayDistance',
    '300A00F7': 'IsocenterToBlockTrayDistance',
    '300A00F8': 'BlockType',
    '300A00F9': 'AccessoryCode',
    '300A00FA': 'BlockDivergence',
    '300A00FB': 'BlockMountingPosition',
    '300A00FC': 'BlockNumber',
    '300A00FE': 'BlockName',
    '300A0100': 'BlockThickness',
    '300A0102': 'BlockTransmission',
    '300A0104': 'BlockNumberOfPoints',
    '300A0106': 'BlockData',
    '300A0107': 'ApplicatorSequence',
    '300A0108': 'ApplicatorID',
    '300A0109': 'ApplicatorType',
    '300A010A': 'ApplicatorDescription',
    '300A010C': 'CumulativeDoseReferenceCoefficient',
    '300A010E': 'FinalCumulativeMetersetWeight',
    '300A0110': 'NumberOfControlPoints',
    '300A0111': 'ControlPointSequence',
    '300A0112': 'ControlPointIndex',
    '300A0114': 'NominalBeamEnergy',
    '300A0115': 'DoseRateSet',
    '300A0116': 'WedgePositionSequence',
    '300A0118': 'WedgePosition',
    '300A011A': 'BeamLimitingDevicePositionSequence',
    '300A011C': 'LeafJawPositions',
    '300A011E': 'GantryAngle',
    '300A011F': 'GantryRotationDirection',
    '300A0120': 'BeamLimitingDeviceAngle',
    '300A0121': 'BeamLimitingDeviceRotationDirection',
    '300A0122': 'PatientSupportAngle',
    '300A0123': 'PatientSupportRotationDirection',
    '300A0124': 'TableTopEccentricAxisDistance',
    '300A0125': 'TableTopEccentricAngle',
    '300A0126': 'TableTopEccentricRotationDirection',
    '300A0128': 'TableTopVerticalPosition',
    '300A0129': 'TableTopLongitudinalPosition',
    '300A012A': 'TableTopLateralPosition',
    '300A012C': 'IsocenterPosition',
    '300A012E': 'SurfaceEntryPoint',
    '300A0130': 'SourceToSurfaceDistance',
    '300A0131': 'AverageBeamDosePointSourceToExternalContourDistance',
    '300A0132': 'SourceToExternalContourDistance',
    '300A0133': 'ExternalContourEntryPoint',
    '300A0134': 'CumulativeMetersetWeight',
    '300A0140': 'TableTopPitchAngle',
    '300A0142': 'TableTopPitchRotationDirection',
    '300A0144': 'TableTopRollAngle',
    '300A0146': 'TableTopRollRotationDirection',
    '300A0148': 'HeadFixationAngle',
    '300A014A': 'GantryPitchAngle',
    '300A014C': 'GantryPitchRotationDirection',
    '300A014E': 'GantryPitchAngleTolerance',
    '300A0150': 'FixationEye',
    '300A0151': 'ChairHeadFramePosition',
    '300A0152': 'HeadFixationAngleTolerance',
    '300A0153': 'ChairHeadFramePositionTolerance',
    '300A0154': 'FixationLightAzimuthalAngleTolerance',
    '300A0155': 'FixationLightPolarAngleTolerance',
    '300A0180': 'PatientSetupSequence',
    '300A0182': 'PatientSetupNumber',
    '300A0183': 'PatientSetupLabel',
    '300A0184': 'PatientAdditionalPosition',
    '300A0190': 'FixationDeviceSequence',
    '300A0192': 'FixationDeviceType',
    '300A0194': 'FixationDeviceLabel',
    '300A0196': 'FixationDeviceDescription',
    '300A0198': 'FixationDevicePosition',
    '300A0199': 'FixationDevicePitchAngle',
    '300A019A': 'FixationDeviceRollAngle',
    '300A01A0': 'ShieldingDeviceSequence',
    '300A01A2': 'ShieldingDeviceType',
    '300A01A4': 'ShieldingDeviceLabel',
    '300A01A6': 'ShieldingDeviceDescription',
    '300A01A8': 'ShieldingDevicePosition',
    '300A01B0': 'SetupTechnique',
    '300A01B2': 'SetupTechniqueDescription',
    '300A01B4': 'SetupDeviceSequence',
    '300A01B6': 'SetupDeviceType',
    '300A01B8': 'SetupDeviceLabel',
    '300A01BA': 'SetupDeviceDescription',
    '300A01BC': 'SetupDeviceParameter',
    '300A01D0': 'SetupReferenceDescription',
    '300A01D2': 'TableTopVerticalSetupDisplacement',
    '300A01D4': 'TableTopLongitudinalSetupDisplacement',
    '300A01D6': 'TableTopLateralSetupDisplacement',
    '300A0200': 'BrachyTreatmentTechnique',
    '300A0202': 'BrachyTreatmentType',
    '300A0206': 'TreatmentMachineSequence',
    '300A0210': 'SourceSequence',
    '300A0212': 'SourceNumber',
    '300A0214': 'SourceType',
    '300A0216': 'SourceManufacturer',
    '300A0218': 'ActiveSourceDiameter',
    '300A021A': 'ActiveSourceLength',
    '300A021B': 'SourceModelID',
    '300A021C': 'SourceDescription',
    '300A0222': 'SourceEncapsulationNominalThickness',
    '300A0224': 'SourceEncapsulationNominalTransmission',
    '300A0226': 'SourceIsotopeName',
    '300A0228': 'SourceIsotopeHalfLife',
    '300A0229': 'SourceStrengthUnits',
    '300A022A': 'ReferenceAirKermaRate',
    '300A022B': 'SourceStrength',
    '300A022C': 'SourceStrengthReferenceDate',
    '300A022E': 'SourceStrengthReferenceTime',
    '300A0230': 'ApplicationSetupSequence',
    '300A0232': 'ApplicationSetupType',
    '300A0234': 'ApplicationSetupNumber',
    '300A0236': 'ApplicationSetupName',
    '300A0238': 'ApplicationSetupManufacturer',
    '300A0240': 'TemplateNumber',
    '300A0242': 'TemplateType',
    '300A0244': 'TemplateName',
    '300A0250': 'TotalReferenceAirKerma',
    '300A0260': 'BrachyAccessoryDeviceSequence',
    '300A0262': 'BrachyAccessoryDeviceNumber',
    '300A0263': 'BrachyAccessoryDeviceID',
    '300A0264': 'BrachyAccessoryDeviceType',
    '300A0266': 'BrachyAccessoryDeviceName',
    '300A026A': 'BrachyAccessoryDeviceNominalThickness',
    '300A026C': 'BrachyAccessoryDeviceNominalTransmission',
    '300A0271': 'ChannelEffectiveLength',
    '300A0272': 'ChannelInnerLength',
    '300A0273': 'AfterloaderChannelID',
    '300A0274': 'SourceApplicatorTipLength',
    '300A0280': 'ChannelSequence',
    '300A0282': 'ChannelNumber',
    '300A0284': 'ChannelLength',
    '300A0286': 'ChannelTotalTime',
    '300A0288': 'SourceMovementType',
    '300A028A': 'NumberOfPulses',
    '300A028C': 'PulseRepetitionInterval',
    '300A0290': 'SourceApplicatorNumber',
    '300A0291': 'SourceApplicatorID',
    '300A0292': 'SourceApplicatorType',
    '300A0294': 'SourceApplicatorName',
    '300A0296': 'SourceApplicatorLength',
    '300A0298': 'SourceApplicatorManufacturer',
    '300A029C': 'SourceApplicatorWallNominalThickness',
    '300A029E': 'SourceApplicatorWallNominalTransmission',
    '300A02A0': 'SourceApplicatorStepSize',
    '300A02A2': 'TransferTubeNumber',
    '300A02A4': 'TransferTubeLength',
    '300A02B0': 'ChannelShieldSequence',
    '300A02B2': 'ChannelShieldNumber',
    '300A02B3': 'ChannelShieldID',
    '300A02B4': 'ChannelShieldName',
    '300A02B8': 'ChannelShieldNominalThickness',
    '300A02BA': 'ChannelShieldNominalTransmission',
    '300A02C8': 'FinalCumulativeTimeWeight',
    '300A02D0': 'BrachyControlPointSequence',
    '300A02D2': 'ControlPointRelativePosition',
    '300A02D4': ('ControlPoint3DPosition'),
    '300A02D6': 'CumulativeTimeWeight',
    '300A02E0': 'CompensatorDivergence',
    '300A02E1': 'CompensatorMountingPosition',
    '300A02E2': 'SourceToCompensatorDistance',
    '300A02E3': 'TotalCompensatorTrayWaterEquivalentThickness',
    '300A02E4': 'IsocenterToCompensatorTrayDistance',
    '300A02E5': 'CompensatorColumnOffset',
    '300A02E6': 'IsocenterToCompensatorDistances',
    '300A02E7': 'CompensatorRelativeStoppingPowerRatio',
    '300A02E8': 'CompensatorMillingToolDiameter',
    '300A02EA': 'IonRangeCompensatorSequence',
    '300A02EB': 'CompensatorDescription',
    '300A0302': 'RadiationMassNumber',
    '300A0304': 'RadiationAtomicNumber',
    '300A0306': 'RadiationChargeState',
    '300A0308': 'ScanMode',
    '300A0309': 'ModulatedScanModeType',
    '300A030A': 'VirtualSourceAxisDistances',
    '300A030C': 'SnoutSequence',
    '300A030D': 'SnoutPosition',
    '300A030F': 'SnoutID',
    '300A0312': 'NumberOfRangeShifters',
    '300A0314': 'RangeShifterSequence',
    '300A0316': 'RangeShifterNumber',
    '300A0318': 'RangeShifterID',
    '300A0320': 'RangeShifterType',
    '300A0322': 'RangeShifterDescription',
    '300A0330': 'NumberOfLateralSpreadingDevices',
    '300A0332': 'LateralSpreadingDeviceSequence',
    '300A0334': 'LateralSpreadingDeviceNumber',
    '300A0336': 'LateralSpreadingDeviceID',
    '300A0338': 'LateralSpreadingDeviceType',
    '300A033A': 'LateralSpreadingDeviceDescription',
    '300A033C': 'LateralSpreadingDeviceWaterEquivalentThickness',
    '300A0340': 'NumberOfRangeModulators',
    '300A0342': 'RangeModulatorSequence',
    '300A0344': 'RangeModulatorNumber',
    '300A0346': 'RangeModulatorID',
    '300A0348': 'RangeModulatorType',
    '300A034A': 'RangeModulatorDescription',
    '300A034C': 'BeamCurrentModulationID',
    '300A0350': 'PatientSupportType',
    '300A0352': 'PatientSupportID',
    '300A0354': 'PatientSupportAccessoryCode',
    '300A0355': 'TrayAccessoryCode',
    '300A0356': 'FixationLightAzimuthalAngle',
    '300A0358': 'FixationLightPolarAngle',
    '300A035A': 'MetersetRate',
    '300A0360': 'RangeShifterSettingsSequence',
    '300A0362': 'RangeShifterSetting',
    '300A0364': 'IsocenterToRangeShifterDistance',
    '300A0366': 'RangeShifterWaterEquivalentThickness',
    '300A0370': 'LateralSpreadingDeviceSettingsSequence',
    '300A0372': 'LateralSpreadingDeviceSetting',
    '300A0374': 'IsocenterToLateralSpreadingDeviceDistance',
    '300A0380': 'RangeModulatorSettingsSequence',
    '300A0382': 'RangeModulatorGatingStartValue',
    '300A0384': 'RangeModulatorGatingStopValue',
    '300A0386': 'RangeModulatorGatingStartWaterEquivalentThickness',
    '300A0388': 'RangeModulatorGatingStopWaterEquivalentThickness',
    '300A038A': 'IsocenterToRangeModulatorDistance',
    '300A038F': 'ScanSpotTimeOffset',
    '300A0390': 'ScanSpotTuneID',
    '300A0391': 'ScanSpotPrescribedIndices',
    '300A0392': 'NumberOfScanSpotPositions',
    '300A0393': 'ScanSpotReordered',
    '300A0394': 'ScanSpotPositionMap',
    '300A0395': 'ScanSpotReorderingAllowed',
    '300A0396': 'ScanSpotMetersetWeights',
    '300A0398': 'ScanningSpotSize',
    '300A039A': 'NumberOfPaintings',
    '300A03A0': 'IonToleranceTableSequence',
    '300A03A2': 'IonBeamSequence',
    '300A03A4': 'IonBeamLimitingDeviceSequence',
    '300A03A6': 'IonBlockSequence',
    '300A03A8': 'IonControlPointSequence',
    '300A03AA': 'IonWedgeSequence',
    '300A03AC': 'IonWedgePositionSequence',
    '300A0401': 'ReferencedSetupImageSequence',
    '300A0402': 'SetupImageComment',
    '300A0410': 'MotionSynchronizationSequence',
    '300A0412': 'ControlPointOrientation',
    '300A0420': 'GeneralAccessorySequence',
    '300A0421': 'GeneralAccessoryID',
    '300A0422': 'GeneralAccessoryDescription',
    '300A0423': 'GeneralAccessoryType',
    '300A0424': 'GeneralAccessoryNumber',
    '300A0425': 'SourceToGeneralAccessoryDistance',
    '300A0431': 'ApplicatorGeometrySequence',
    '300A0432': 'ApplicatorApertureShape',
    '300A0433': 'ApplicatorOpening',
    '300A0434': 'ApplicatorOpeningX',
    '300A0435': 'ApplicatorOpeningY',
    '300A0436': 'SourceToApplicatorMountingPositionDistance',
    '300A0440': 'NumberOfBlockSlabItems',
    '300A0441': 'BlockSlabSequence',
    '300A0442': 'BlockSlabThickness',
    '300A0443': 'BlockSlabNumber',
    '300A0450': 'DeviceMotionControlSequence',
    '300A0451': 'DeviceMotionExecutionMode',
    '300A0452': 'DeviceMotionObservationMode',
    '300A0453': 'DeviceMotionParameterCodeSequence',
    '300A0501': 'DistalDepthFraction',
    '300A0502': 'DistalDepth',
    '300A0503': 'NominalRangeModulationFractions',
    '300A0504': 'NominalRangeModulatedRegionDepths',
    '300A0505': 'DepthDoseParametersSequence',
    '300A0506': 'DeliveredDepthDoseParametersSequence',
    '300A0507': 'DeliveredDistalDepthFraction',
    '300A0508': 'DeliveredDistalDepth',
    '300A0509': 'DeliveredNominalRangeModulationFractions',
    '300A0510': 'DeliveredNominalRangeModulatedRegionDepths',
    '300A0511': 'DeliveredReferenceDoseDefinition',
    '300A0512': 'ReferenceDoseDefinition',
    '300C0002': 'ReferencedRTPlanSequence',
    '300C0004': 'ReferencedBeamSequence',
    '300C0006': 'ReferencedBeamNumber',
    '300C0007': 'ReferencedReferenceImageNumber',
    '300C0008': 'StartCumulativeMetersetWeight',
    '300C0009': 'EndCumulativeMetersetWeight',
    '300C000A': 'ReferencedBrachyApplicationSetupSequence',
    '300C000C': 'ReferencedBrachyApplicationSetupNumber',
    '300C000E': 'ReferencedSourceNumber',
    '300C0020': 'ReferencedFractionGroupSequence',
    '300C0022': 'ReferencedFractionGroupNumber',
    '300C0040': 'ReferencedVerificationImageSequence',
    '300C0042': 'ReferencedReferenceImageSequence',
    '300C0050': 'ReferencedDoseReferenceSequence',
    '300C0051': 'ReferencedDoseReferenceNumber',
    '300C0055': 'BrachyReferencedDoseReferenceSequence',
    '300C0060': 'ReferencedStructureSetSequence',
    '300C006A': 'ReferencedPatientSetupNumber',
    '300C0080': 'ReferencedDoseSequence',
    '300C00A0': 'ReferencedToleranceTableNumber',
    '300C00B0': 'ReferencedBolusSequence',
    '300C00C0': 'ReferencedWedgeNumber',
    '300C00D0': 'ReferencedCompensatorNumber',
    '300C00E0': 'ReferencedBlockNumber',
    '300C00F0': 'ReferencedControlPointIndex',
    '300C00F2': 'ReferencedControlPointSequence',
    '300C00F4': 'ReferencedStartControlPointIndex',
    '300C00F6': 'ReferencedStopControlPointIndex',
    '300C0100': 'ReferencedRangeShifterNumber',
    '300C0102': 'ReferencedLateralSpreadingDeviceNumber',
    '300C0104': 'ReferencedRangeModulatorNumber',
    '300C0111': 'OmittedBeamTaskSequence',
    '300C0112': 'ReasonForOmission',
    '300C0113': 'ReasonForOmissionDescription',
    '300E0002': 'ApprovalStatus',
    '300E0004': 'ReviewDate',
    '300E0005': 'ReviewTime',
    '300E0008': 'ReviewerName',
    '40000010': 'Arbitrary',
    '40004000': 'TextComments',
    '40080040': 'ResultsID',
    '40080042': 'ResultsIDIssuer',
    '40080050': 'ReferencedInterpretationSequence',
    '400800FF': 'ReportProductionStatusTrial',
    '40080100': 'InterpretationRecordedDate',
    '40080101': 'InterpretationRecordedTime',
    '40080102': 'InterpretationRecorder',
    '40080103': 'ReferenceToRecordedSound',
    '40080108': 'InterpretationTranscriptionDate',
    '40080109': 'InterpretationTranscriptionTime',
    '4008010A': 'InterpretationTranscriber',
    '4008010B': 'InterpretationText',
    '4008010C': 'InterpretationAuthor',
    '40080111': 'InterpretationApproverSequence',
    '40080112': 'InterpretationApprovalDate',
    '40080113': 'InterpretationApprovalTime',
    '40080114': 'PhysicianApprovingInterpretation',
    '40080115': 'InterpretationDiagnosisDescription',
    '40080117': 'InterpretationDiagnosisCodeSequence',
    '40080118': 'ResultsDistributionListSequence',
    '40080119': 'DistributionName',
    '4008011A': 'DistributionAddress',
    '40080200': 'InterpretationID',
    '40080202': 'InterpretationIDIssuer',
    '40080210': 'InterpretationTypeID',
    '40080212': 'InterpretationStatusID',
    '40080300': 'Impressions',
    '40084000': 'ResultsComments',
    '40100001': 'LowEnergyDetectors',
    '40100002': 'HighEnergyDetectors',
    '40100004': 'DetectorGeometrySequence',
    '40101001': 'ThreatROIVoxelSequence',
    '40101004': 'ThreatROIBase',
    '40101005': 'ThreatROIExtents',
    '40101006': 'ThreatROIBitmap',
    '40101007': 'RouteSegmentID',
    '40101008': 'GantryType',
    '40101009': 'OOIOwnerType',
    '4010100A': 'RouteSegmentSequence',
    '40101010': 'PotentialThreatObjectID',
    '40101011': 'ThreatSequence',
    '40101012': 'ThreatCategory',
    '40101013': 'ThreatCategoryDescription',
    '40101014': 'ATDAbilityAssessment',
    '40101015': 'ATDAssessmentFlag',
    '40101016': 'ATDAssessmentProbability',
    '40101017': 'Mass',
    '40101018': 'Density',
    '40101019': 'ZEffective',
    '4010101A': 'BoardingPassID',
    '4010101B': 'CenterOfMass',
    '4010101C': 'CenterOfPTO',
    '4010101D': 'BoundingPolygon',
    '4010101E': 'RouteSegmentStartLocationID',
    '4010101F': 'RouteSegmentEndLocationID',
    '40101020': 'RouteSegmentLocationIDType',
    '40101021': 'AbortReason',
    '40101023': 'VolumeOfPTO',
    '40101024': 'AbortFlag',
    '40101025': 'RouteSegmentStartTime',
    '40101026': 'RouteSegmentEndTime',
    '40101027': 'TDRType',
    '40101028': 'InternationalRouteSegment',
    '40101029': 'ThreatDetectionAlgorithmandVersion',
    '4010102A': 'AssignedLocation',
    '4010102B': 'AlarmDecisionTime',
    '40101031': 'AlarmDecision',
    '40101033': 'NumberOfTotalObjects',
    '40101034': 'NumberOfAlarmObjects',
    '40101037': 'PTORepresentationSequence',
    '40101038': 'ATDAssessmentSequence',
    '40101039': 'TIPType',
    '4010103A': 'DICOSVersion',
    '40101041': 'OOIOwnerCreationTime',
    '40101042': 'OOIType',
    '40101043': 'OOISize',
    '40101044': 'AcquisitionStatus',
    '40101045': 'BasisMaterialsCodeSequence',
    '40101046': 'PhantomType',
    '40101047': 'OOIOwnerSequence',
    '40101048': 'ScanType',
    '40101051': 'ItineraryID',
    '40101052': 'ItineraryIDType',
    '40101053': 'ItineraryIDAssigningAuthority',
    '40101054': 'RouteID',
    '40101055': 'RouteIDAssigningAuthority',
    '40101056': 'InboundArrivalType',
    '40101058': 'CarrierID',
    '40101059': 'CarrierIDAssigningAuthority',
    '40101060': 'SourceOrientation',
    '40101061': 'SourcePosition',
    '40101062': 'BeltHeight',
    '40101064': 'AlgorithmRoutingCodeSequence',
    '40101067': 'TransportClassification',
    '40101068': 'OOITypeDescriptor',
    '40101069': 'TotalProcessingTime',
    '4010106C': 'DetectorCalibrationData',
    '4010106D': 'AdditionalScreeningPerformed',
    '4010106E': 'AdditionalInspectionSelectionCriteria',
    '4010106F': 'AdditionalInspectionMethodSequence',
    '40101070': 'AITDeviceType',
    '40101071': 'QRMeasurementsSequence',
    '40101072': 'TargetMaterialSequence',
    '40101073': 'SNRThreshold',
    '40101075': 'ImageScaleRepresentation',
    '40101076': 'ReferencedPTOSequence',
    '40101077': 'ReferencedTDRInstanceSequence',
    '40101078': 'PTOLocationDescription',
    '40101079': 'AnomalyLocatorIndicatorSequence',
    '4010107A': 'AnomalyLocatorIndicator',
    '4010107B': 'PTORegionSequence',
    '4010107C': 'InspectionSelectionCriteria',
    '4010107D': 'SecondaryInspectionMethodSequence',
    '4010107E': 'PRCSToRCSOrientation',
    '4FFE0001': 'MACParametersSequence',
    '52009229': 'SharedFunctionalGroupsSequence',
    '52009230': 'PerFrameFunctionalGroupsSequence',
    '54000100': 'WaveformSequence',
    '54000110': 'ChannelMinimumValue',
    '54000112': 'ChannelMaximumValue',
    '54001004': 'WaveformBitsAllocated',
    '54001006': 'WaveformSampleInterpretation',
    '5400100A': 'WaveformPaddingValue',
    '54001010': 'WaveformData',
    '56000010': 'FirstOrderPhaseCorrectionAngle',
    '56000020': 'SpectroscopyData',
    '7FE00008': 'FloatPixelData',
    '7FE00009': 'DoubleFloatPixelData',
    '7FE00010': 'PixelData',
    '7FE00020': 'CoefficientsSDVN',
    '7FE00030': 'CoefficientsSDHN',
    '7FE00040': 'CoefficientsSDDN',
    'FFFAFFFA': 'DigitalSignaturesSequence',
    'FFFCFFFC': 'DataSetTrailingPadding',
    'FFFEE000': 'Item',
    'FFFEE00D': 'ItemDelimitationItem',
    'FFFEE0DD': 'SequenceDelimitationItem',
  };
  Object.freeze(tagToKeyword);

  const keywordToTag = {
    'CommandGroupLength': '00000000',
    'CommandLengthToEnd': '00000001',
    'AffectedSOPClassUID': '00000002',
    'RequestedSOPClassUID': '00000003',
    'CommandRecognitionCode': '00000010',
    'CommandField': '00000100',
    'MessageID': '00000110',
    'MessageIDBeingRespondedTo': '00000120',
    'Initiator': '00000200',
    'Receiver': '00000300',
    'FindLocation': '00000400',
    'MoveDestination': '00000600',
    'Priority': '00000700',
    'CommandDataSetType': '00000800',
    'NumberOfMatches': '00000850',
    'ResponseSequenceNumber': '00000860',
    'Status': '00000900',
    'OffendingElement': '00000901',
    'ErrorComment': '00000902',
    'ErrorID': '00000903',
    'AffectedSOPInstanceUID': '00001000',
    'RequestedSOPInstanceUID': '00001001',
    'EventTypeID': '00001002',
    'AttributeIdentifierList': '00001005',
    'ActionTypeID': '00001008',
    'NumberOfRemainingSuboperations': '00001020',
    'NumberOfCompletedSuboperations': '00001021',
    'NumberOfFailedSuboperations': '00001022',
    'NumberOfWarningSuboperations': '00001023',
    'MoveOriginatorApplicationEntityTitle': '00001030',
    'MoveOriginatorMessageID': '00001031',
    'DialogReceiver': '00004000',
    'TerminalType': '00004010',
    'MessageSetID': '00005010',
    'EndMessageID': '00005020',
    'DisplayFormat': '00005110',
    'PagePositionID': '00005120',
    'TextFormatID': '00005130',
    'NormalReverse': '00005140',
    'AddGrayScale': '00005150',
    'Borders': '00005160',
    'Copies': '00005170',
    'CommandMagnificationType': '00005180',
    'Erase': '00005190',
    'Print': '000051A0',
    'Overlays': '000051B0',
    'FileMetaInformationGroupLength': '00020000',
    'FileMetaInformationVersion': '00020001',
    'MediaStorageSOPClassUID': '00020002',
    'MediaStorageSOPInstanceUID': '00020003',
    'TransferSyntaxUID': '00020010',
    'ImplementationClassUID': '00020012',
    'ImplementationVersionName': '00020013',
    'SourceApplicationEntityTitle': '00020016',
    'SendingApplicationEntityTitle': '00020017',
    'ReceivingApplicationEntityTitle': '00020018',
    'PrivateInformationCreatorUID': '00020100',
    'PrivateInformation': '00020102',
    'FileSetID': '00041130',
    'FileSetDescriptorFileID': '00041141',
    'SpecificCharacterSetOfFileSetDescriptorFile': '00041142',
    'OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity': '00041200',
    'OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity': '00041202',
    'FileSetConsistencyFlag': '00041212',
    'DirectoryRecordSequence': '00041220',
    'OffsetOfTheNextDirectoryRecord': '00041400',
    'RecordInUseFlag': '00041410',
    'OffsetOfReferencedLowerLevelDirectoryEntity': '00041420',
    'DirectoryRecordType': '00041430',
    'PrivateRecordUID': '00041432',
    'ReferencedFileID': '00041500',
    'MRDRDirectoryRecordOffset': '00041504',
    'ReferencedSOPClassUIDInFile': '00041510',
    'ReferencedSOPInstanceUIDInFile': '00041511',
    'ReferencedTransferSyntaxUIDInFile': '00041512',
    'ReferencedRelatedGeneralSOPClassUIDInFile': '0004151A',
    'NumberOfReferences': '00041600',
    'LengthToEnd': '00080001',
    'SpecificCharacterSet': '00080005',
    'LanguageCodeSequence': '00080006',
    'ImageType': '00080008',
    'RecognitionCode': '00080010',
    'InstanceCreationDate': '00080012',
    'InstanceCreationTime': '00080013',
    'InstanceCreatorUID': '00080014',
    'InstanceCoercionDateTime': '00080015',
    'SOPClassUID': '00080016',
    'SOPInstanceUID': '00080018',
    'RelatedGeneralSOPClassUID': '0008001A',
    'OriginalSpecializedSOPClassUID': '0008001B',
    'StudyDate': '00080020',
    'SeriesDate': '00080021',
    'AcquisitionDate': '00080022',
    'ContentDate': '00080023',
    'OverlayDate': '00080024',
    'CurveDate': '00080025',
    'AcquisitionDateTime': '0008002A',
    'StudyTime': '00080030',
    'SeriesTime': '00080031',
    'AcquisitionTime': '00080032',
    'ContentTime': '00080033',
    'OverlayTime': '00080034',
    'CurveTime': '00080035',
    'DataSetType': '00080040',
    'DataSetSubtype': '00080041',
    'NuclearMedicineSeriesType': '00080042',
    'AccessionNumber': '00080050',
    'IssuerOfAccessionNumberSequence': '00080051',
    'QueryRetrieveLevel': '00080052',
    'QueryRetrieveView': '00080053',
    'RetrieveAETitle': '00080054',
    'StationAETitle': '00080055',
    'InstanceAvailability': '00080056',
    'FailedSOPInstanceUIDList': '00080058',
    'Modality': '00080060',
    'ModalitiesInStudy': '00080061',
    'SOPClassesInStudy': '00080062',
    'AnatomicRegionsInStudyCodeSequence': '00080063',
    'ConversionType': '00080064',
    'PresentationIntentType': '00080068',
    'Manufacturer': '00080070',
    'InstitutionName': '00080080',
    'InstitutionAddress': '00080081',
    'InstitutionCodeSequence': '00080082',
    'ReferringPhysicianName': '00080090',
    'ReferringPhysicianAddress': '00080092',
    'ReferringPhysicianTelephoneNumbers': '00080094',
    'ReferringPhysicianIdentificationSequence': '00080096',
    'ConsultingPhysicianName': '0008009C',
    'ConsultingPhysicianIdentificationSequence': '0008009D',
    'CodeValue': '00080100',
    'ExtendedCodeValue': '00080101',
    'CodingSchemeDesignator': '00080102',
    'CodingSchemeVersion': '00080103',
    'CodeMeaning': '00080104',
    'MappingResource': '00080105',
    'ContextGroupVersion': '00080106',
    'ContextGroupLocalVersion': '00080107',
    'ExtendedCodeMeaning': '00080108',
    'CodingSchemeResourcesSequence': '00080109',
    'CodingSchemeURLType': '0008010A',
    'ContextGroupExtensionFlag': '0008010B',
    'CodingSchemeUID': '0008010C',
    'ContextGroupExtensionCreatorUID': '0008010D',
    'CodingSchemeURL': '0008010E',
    'ContextIdentifier': '0008010F',
    'CodingSchemeIdentificationSequence': '00080110',
    'CodingSchemeRegistry': '00080112',
    'CodingSchemeExternalID': '00080114',
    'CodingSchemeName': '00080115',
    'CodingSchemeResponsibleOrganization': '00080116',
    'ContextUID': '00080117',
    'MappingResourceUID': '00080118',
    'LongCodeValue': '00080119',
    'URNCodeValue': '00080120',
    'EquivalentCodeSequence': '00080121',
    'MappingResourceName': '00080122',
    'ContextGroupIdentificationSequence': '00080123',
    'MappingResourceIdentificationSequence': '00080124',
    'TimezoneOffsetFromUTC': '00080201',
    'ResponsibleGroupCodeSequence': '00080220',
    'EquipmentModality': '00080221',
    'ManufacturerRelatedModelGroup': '00080222',
    'PrivateDataElementCharacteristicsSequence': '00080300',
    'PrivateGroupReference': '00080301',
    'PrivateCreatorReference': '00080302',
    'BlockIdentifyingInformationStatus': '00080303',
    'NonidentifyingPrivateElements': '00080304',
    'DeidentificationActionSequence': '00080305',
    'IdentifyingPrivateElements': '00080306',
    'DeidentificationAction': '00080307',
    'PrivateDataElement': '00080308',
    'PrivateDataElementValueMultiplicity': '00080309',
    'PrivateDataElementValueRepresentation': '0008030A',
    'PrivateDataElementNumberOfItems': '0008030B',
    'PrivateDataElementName': '0008030C',
    'PrivateDataElementKeyword': '0008030D',
    'PrivateDataElementDescription': '0008030E',
    'PrivateDataElementEncoding': '0008030F',
    'PrivateDataElementDefinitionSequence': '00080310',
    'NetworkID': '00081000',
    'StationName': '00081010',
    'StudyDescription': '00081030',
    'ProcedureCodeSequence': '00081032',
    'SeriesDescription': '0008103E',
    'SeriesDescriptionCodeSequence': '0008103F',
    'InstitutionalDepartmentName': '00081040',
    'PhysiciansOfRecord': '00081048',
    'PhysiciansOfRecordIdentificationSequence': '00081049',
    'PerformingPhysicianName': '00081050',
    'PerformingPhysicianIdentificationSequence': '00081052',
    'NameOfPhysiciansReadingStudy': '00081060',
    'PhysiciansReadingStudyIdentificationSequence': '00081062',
    'OperatorsName': '00081070',
    'OperatorIdentificationSequence': '00081072',
    'AdmittingDiagnosesDescription': '00081080',
    'AdmittingDiagnosesCodeSequence': '00081084',
    'ManufacturerModelName': '00081090',
    'ReferencedResultsSequence': '00081100',
    'ReferencedStudySequence': '00081110',
    'ReferencedPerformedProcedureStepSequence': '00081111',
    'ReferencedSeriesSequence': '00081115',
    'ReferencedPatientSequence': '00081120',
    'ReferencedVisitSequence': '00081125',
    'ReferencedOverlaySequence': '00081130',
    'ReferencedStereometricInstanceSequence': '00081134',
    'ReferencedWaveformSequence': '0008113A',
    'ReferencedImageSequence': '00081140',
    'ReferencedCurveSequence': '00081145',
    'ReferencedInstanceSequence': '0008114A',
    'ReferencedRealWorldValueMappingInstanceSequence': '0008114B',
    'ReferencedSOPClassUID': '00081150',
    'ReferencedSOPInstanceUID': '00081155',
    'DefinitionSourceSequence': '00081156',
    'SOPClassesSupported': '0008115A',
    'ReferencedFrameNumber': '00081160',
    'SimpleFrameList': '00081161',
    'CalculatedFrameList': '00081162',
    'TimeRange': '00081163',
    'FrameExtractionSequence': '00081164',
    'MultiFrameSourceSOPInstanceUID': '00081167',
    'RetrieveURL': '00081190',
    'TransactionUID': '00081195',
    'WarningReason': '00081196',
    'FailureReason': '00081197',
    'FailedSOPSequence': '00081198',
    'ReferencedSOPSequence': '00081199',
    'OtherFailuresSequence': '0008119A',
    'StudiesContainingOtherReferencedInstancesSequence': '00081200',
    'RelatedSeriesSequence': '00081250',
    'LossyImageCompressionRetired': '00082110',
    'DerivationDescription': '00082111',
    'SourceImageSequence': '00082112',
    'StageName': '00082120',
    'StageNumber': '00082122',
    'NumberOfStages': '00082124',
    'ViewName': '00082127',
    'ViewNumber': '00082128',
    'NumberOfEventTimers': '00082129',
    'NumberOfViewsInStage': '0008212A',
    'EventElapsedTimes': '00082130',
    'EventTimerNames': '00082132',
    'EventTimerSequence': '00082133',
    'EventTimeOffset': '00082134',
    'EventCodeSequence': '00082135',
    'StartTrim': '00082142',
    'StopTrim': '00082143',
    'RecommendedDisplayFrameRate': '00082144',
    'TransducerPosition': '00082200',
    'TransducerOrientation': '00082204',
    'AnatomicStructure': '00082208',
    'AnatomicRegionSequence': '00082218',
    'AnatomicRegionModifierSequence': '00082220',
    'PrimaryAnatomicStructureSequence': '00082228',
    'AnatomicStructureSpaceOrRegionSequence': '00082229',
    'PrimaryAnatomicStructureModifierSequence': '00082230',
    'TransducerPositionSequence': '00082240',
    'TransducerPositionModifierSequence': '00082242',
    'TransducerOrientationSequence': '00082244',
    'TransducerOrientationModifierSequence': '00082246',
    'AnatomicStructureSpaceOrRegionCodeSequenceTrial': '00082251',
    'AnatomicPortalOfEntranceCodeSequenceTrial': '00082253',
    'AnatomicApproachDirectionCodeSequenceTrial': '00082255',
    'AnatomicPerspectiveDescriptionTrial': '00082256',
    'AnatomicPerspectiveCodeSequenceTrial': '00082257',
    'AnatomicLocationOfExaminingInstrumentDescriptionTrial': '00082258',
    'AnatomicLocationOfExaminingInstrumentCodeSequenceTrial': '00082259',
    'AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial': '0008225A',
    'OnAxisBackgroundAnatomicStructureCodeSequenceTrial': '0008225C',
    'AlternateRepresentationSequence': '00083001',
    'IrradiationEventUID': '00083010',
    'SourceIrradiationEventSequence': '00083011',
    'RadiopharmaceuticalAdministrationEventUID': '00083012',
    'IdentifyingComments': '00084000',
    'FrameType': '00089007',
    'ReferencedImageEvidenceSequence': '00089092',
    'ReferencedRawDataSequence': '00089121',
    'CreatorVersionUID': '00089123',
    'DerivationImageSequence': '00089124',
    'SourceImageEvidenceSequence': '00089154',
    'PixelPresentation': '00089205',
    'VolumetricProperties': '00089206',
    'VolumeBasedCalculationTechnique': '00089207',
    'ComplexImageComponent': '00089208',
    'AcquisitionContrast': '00089209',
    'DerivationCodeSequence': '00089215',
    'ReferencedPresentationStateSequence': '00089237',
    'ReferencedOtherPlaneSequence': '00089410',
    'FrameDisplaySequence': '00089458',
    'RecommendedDisplayFrameRateInFloat': '00089459',
    'SkipFrameRangeFlag': '00089460',
    'PatientName': '00100010',
    'PatientID': '00100020',
    'IssuerOfPatientID': '00100021',
    'TypeOfPatientID': '00100022',
    'IssuerOfPatientIDQualifiersSequence': '00100024',
    'SourcePatientGroupIdentificationSequence': '00100026',
    'GroupOfPatientsIdentificationSequence': '00100027',
    'SubjectRelativePositionInImage': '00100028',
    'PatientBirthDate': '00100030',
    'PatientBirthTime': '00100032',
    'PatientBirthDateInAlternativeCalendar': '00100033',
    'PatientDeathDateInAlternativeCalendar': '00100034',
    'PatientAlternativeCalendar': '00100035',
    'PatientSex': '00100040',
    'PatientInsurancePlanCodeSequence': '00100050',
    'PatientPrimaryLanguageCodeSequence': '00100101',
    'PatientPrimaryLanguageModifierCodeSequence': '00100102',
    'QualityControlSubject': '00100200',
    'QualityControlSubjectTypeCodeSequence': '00100201',
    'StrainDescription': '00100212',
    'StrainNomenclature': '00100213',
    'StrainStockNumber': '00100214',
    'StrainSourceRegistryCodeSequence': '00100215',
    'StrainStockSequence': '00100216',
    'StrainSource': '00100217',
    'StrainAdditionalInformation': '00100218',
    'StrainCodeSequence': '00100219',
    'GeneticModificationsSequence': '00100221',
    'GeneticModificationsDescription': '00100222',
    'GeneticModificationsNomenclature': '00100223',
    'GeneticModificationsCodeSequence': '00100229',
    'OtherPatientIDs': '00101000',
    'OtherPatientNames': '00101001',
    'OtherPatientIDsSequence': '00101002',
    'PatientBirthName': '00101005',
    'PatientAge': '00101010',
    'PatientSize': '00101020',
    'PatientSizeCodeSequence': '00101021',
    'PatientBodyMassIndex': '00101022',
    'MeasuredAPDimension': '00101023',
    'MeasuredLateralDimension': '00101024',
    'PatientWeight': '00101030',
    'PatientAddress': '00101040',
    'InsurancePlanIdentification': '00101050',
    'PatientMotherBirthName': '00101060',
    'MilitaryRank': '00101080',
    'BranchOfService': '00101081',
    'MedicalRecordLocator': '00101090',
    'ReferencedPatientPhotoSequence': '00101100',
    'MedicalAlerts': '00102000',
    'Allergies': '00102110',
    'CountryOfResidence': '00102150',
    'RegionOfResidence': '00102152',
    'PatientTelephoneNumbers': '00102154',
    'PatientTelecomInformation': '00102155',
    'EthnicGroup': '00102160',
    'Occupation': '00102180',
    'SmokingStatus': '001021A0',
    'AdditionalPatientHistory': '001021B0',
    'PregnancyStatus': '001021C0',
    'LastMenstrualDate': '001021D0',
    'PatientReligiousPreference': '001021F0',
    'PatientSpeciesDescription': '00102201',
    'PatientSpeciesCodeSequence': '00102202',
    'PatientSexNeutered': '00102203',
    'AnatomicalOrientationType': '00102210',
    'PatientBreedDescription': '00102292',
    'PatientBreedCodeSequence': '00102293',
    'BreedRegistrationSequence': '00102294',
    'BreedRegistrationNumber': '00102295',
    'BreedRegistryCodeSequence': '00102296',
    'ResponsiblePerson': '00102297',
    'ResponsiblePersonRole': '00102298',
    'ResponsibleOrganization': '00102299',
    'PatientComments': '00104000',
    'ExaminedBodyThickness': '00109431',
    'ClinicalTrialSponsorName': '00120010',
    'ClinicalTrialProtocolID': '00120020',
    'ClinicalTrialProtocolName': '00120021',
    'ClinicalTrialSiteID': '00120030',
    'ClinicalTrialSiteName': '00120031',
    'ClinicalTrialSubjectID': '00120040',
    'ClinicalTrialSubjectReadingID': '00120042',
    'ClinicalTrialTimePointID': '00120050',
    'ClinicalTrialTimePointDescription': '00120051',
    'LongitudinalTemporalOffsetFromEvent': '00120052',
    'LongitudinalTemporalEventType': '00120053',
    'ClinicalTrialCoordinatingCenterName': '00120060',
    'PatientIdentityRemoved': '00120062',
    'DeidentificationMethod': '00120063',
    'DeidentificationMethodCodeSequence': '00120064',
    'ClinicalTrialSeriesID': '00120071',
    'ClinicalTrialSeriesDescription': '00120072',
    'ClinicalTrialProtocolEthicsCommitteeName': '00120081',
    'ClinicalTrialProtocolEthicsCommitteeApprovalNumber': '00120082',
    'ConsentForClinicalTrialUseSequence': '00120083',
    'DistributionType': '00120084',
    'ConsentForDistributionFlag': '00120085',
    'EthicsCommitteeApprovalEffectivenessStartDate': '00120086',
    'EthicsCommitteeApprovalEffectivenessEndDate': '00120087',
    'CADFileFormat': '00140023',
    'ComponentReferenceSystem': '00140024',
    'ComponentManufacturingProcedure': '00140025',
    'ComponentManufacturer': '00140028',
    'MaterialThickness': '00140030',
    'MaterialPipeDiameter': '00140032',
    'MaterialIsolationDiameter': '00140034',
    'MaterialGrade': '00140042',
    'MaterialPropertiesDescription': '00140044',
    'MaterialPropertiesFileFormatRetired': '00140045',
    'MaterialNotes': '00140046',
    'ComponentShape': '00140050',
    'CurvatureType': '00140052',
    'OuterDiameter': '00140054',
    'InnerDiameter': '00140056',
    'ComponentWelderIDs': '00140100',
    'SecondaryApprovalStatus': '00140101',
    'SecondaryReviewDate': '00140102',
    'SecondaryReviewTime': '00140103',
    'SecondaryReviewerName': '00140104',
    'RepairID': '00140105',
    'MultipleComponentApprovalSequence': '00140106',
    'OtherApprovalStatus': '00140107',
    'OtherSecondaryApprovalStatus': '00140108',
    'ActualEnvironmentalConditions': '00141010',
    'ExpiryDate': '00141020',
    'EnvironmentalConditions': '00141040',
    'EvaluatorSequence': '00142002',
    'EvaluatorNumber': '00142004',
    'EvaluatorName': '00142006',
    'EvaluationAttempt': '00142008',
    'IndicationSequence': '00142012',
    'IndicationNumber': '00142014',
    'IndicationLabel': '00142016',
    'IndicationDescription': '00142018',
    'IndicationType': '0014201A',
    'IndicationDisposition': '0014201C',
    'IndicationROISequence': '0014201E',
    'IndicationPhysicalPropertySequence': '00142030',
    'PropertyLabel': '00142032',
    'CoordinateSystemNumberOfAxes': '00142202',
    'CoordinateSystemAxesSequence': '00142204',
    'CoordinateSystemAxisDescription': '00142206',
    'CoordinateSystemDataSetMapping': '00142208',
    'CoordinateSystemAxisNumber': '0014220A',
    'CoordinateSystemAxisType': '0014220C',
    'CoordinateSystemAxisUnits': '0014220E',
    'CoordinateSystemAxisValues': '00142210',
    'CoordinateSystemTransformSequence': '00142220',
    'TransformDescription': '00142222',
    'TransformNumberOfAxes': '00142224',
    'TransformOrderOfAxes': '00142226',
    'TransformedAxisUnits': '00142228',
    'CoordinateSystemTransformRotationAndScaleMatrix': '0014222A',
    'CoordinateSystemTransformTranslationMatrix': '0014222C',
    'InternalDetectorFrameTime': '00143011',
    'NumberOfFramesIntegrated': '00143012',
    'DetectorTemperatureSequence': '00143020',
    'SensorName': '00143022',
    'HorizontalOffsetOfSensor': '00143024',
    'VerticalOffsetOfSensor': '00143026',
    'SensorTemperature': '00143028',
    'DarkCurrentSequence': '00143040',
    'DarkCurrentCounts': '00143050',
    'GainCorrectionReferenceSequence': '00143060',
    'AirCounts': '00143070',
    'KVUsedInGainCalibration': '00143071',
    'MAUsedInGainCalibration': '00143072',
    'NumberOfFramesUsedForIntegration': '00143073',
    'FilterMaterialUsedInGainCalibration': '00143074',
    'FilterThicknessUsedInGainCalibration': '00143075',
    'DateOfGainCalibration': '00143076',
    'TimeOfGainCalibration': '00143077',
    'BadPixelImage': '00143080',
    'CalibrationNotes': '00143099',
    'PulserEquipmentSequence': '00144002',
    'PulserType': '00144004',
    'PulserNotes': '00144006',
    'ReceiverEquipmentSequence': '00144008',
    'AmplifierType': '0014400A',
    'ReceiverNotes': '0014400C',
    'PreAmplifierEquipmentSequence': '0014400E',
    'PreAmplifierNotes': '0014400F',
    'TransmitTransducerSequence': '00144010',
    'ReceiveTransducerSequence': '00144011',
    'NumberOfElements': '00144012',
    'ElementShape': '00144013',
    'ElementDimensionA': '00144014',
    'ElementDimensionB': '00144015',
    'ElementPitchA': '00144016',
    'MeasuredBeamDimensionA': '00144017',
    'MeasuredBeamDimensionB': '00144018',
    'LocationOfMeasuredBeamDiameter': '00144019',
    'NominalFrequency': '0014401A',
    'MeasuredCenterFrequency': '0014401B',
    'MeasuredBandwidth': '0014401C',
    'ElementPitchB': '0014401D',
    'PulserSettingsSequence': '00144020',
    'PulseWidth': '00144022',
    'ExcitationFrequency': '00144024',
    'ModulationType': '00144026',
    'Damping': '00144028',
    'ReceiverSettingsSequence': '00144030',
    'AcquiredSoundpathLength': '00144031',
    'AcquisitionCompressionType': '00144032',
    'AcquisitionSampleSize': '00144033',
    'RectifierSmoothing': '00144034',
    'DACSequence': '00144035',
    'DACType': '00144036',
    'DACGainPoints': '00144038',
    'DACTimePoints': '0014403A',
    'DACAmplitude': '0014403C',
    'PreAmplifierSettingsSequence': '00144040',
    'TransmitTransducerSettingsSequence': '00144050',
    'ReceiveTransducerSettingsSequence': '00144051',
    'IncidentAngle': '00144052',
    'CouplingTechnique': '00144054',
    'CouplingMedium': '00144056',
    'CouplingVelocity': '00144057',
    'ProbeCenterLocationX': '00144058',
    'ProbeCenterLocationZ': '00144059',
    'SoundPathLength': '0014405A',
    'DelayLawIdentifier': '0014405C',
    'GateSettingsSequence': '00144060',
    'GateThreshold': '00144062',
    'VelocityOfSound': '00144064',
    'CalibrationSettingsSequence': '00144070',
    'CalibrationProcedure': '00144072',
    'ProcedureVersion': '00144074',
    'ProcedureCreationDate': '00144076',
    'ProcedureExpirationDate': '00144078',
    'ProcedureLastModifiedDate': '0014407A',
    'CalibrationTime': '0014407C',
    'CalibrationDate': '0014407E',
    'ProbeDriveEquipmentSequence': '00144080',
    'DriveType': '00144081',
    'ProbeDriveNotes': '00144082',
    'DriveProbeSequence': '00144083',
    'ProbeInductance': '00144084',
    'ProbeResistance': '00144085',
    'ReceiveProbeSequence': '00144086',
    'ProbeDriveSettingsSequence': '00144087',
    'BridgeResistors': '00144088',
    'ProbeOrientationAngle': '00144089',
    'UserSelectedGainY': '0014408B',
    'UserSelectedPhase': '0014408C',
    'UserSelectedOffsetX': '0014408D',
    'UserSelectedOffsetY': '0014408E',
    'ChannelSettingsSequence': '00144091',
    'ChannelThreshold': '00144092',
    'ScannerSettingsSequence': '0014409A',
    'ScanProcedure': '0014409B',
    'TranslationRateX': '0014409C',
    'TranslationRateY': '0014409D',
    'ChannelOverlap': '0014409F',
    'ImageQualityIndicatorType': '001440A0',
    'ImageQualityIndicatorMaterial': '001440A1',
    'ImageQualityIndicatorSize': '001440A2',
    'LINACEnergy': '00145002',
    'LINACOutput': '00145004',
    'ActiveAperture': '00145100',
    'TotalAperture': '00145101',
    'ApertureElevation': '00145102',
    'MainLobeAngle': '00145103',
    'MainRoofAngle': '00145104',
    'ConnectorType': '00145105',
    'WedgeModelNumber': '00145106',
    'WedgeAngleFloat': '00145107',
    'WedgeRoofAngle': '00145108',
    '00145109': ('WedgeElement1Position'),
    'WedgeMaterialVelocity': '0014510A',
    'WedgeMaterial': '0014510B',
    'WedgeOffsetZ': '0014510C',
    'WedgeOriginOffsetX': '0014510D',
    'WedgeTimeDelay': '0014510E',
    'WedgeName': '0014510F',
    'WedgeManufacturerName': '00145110',
    'WedgeDescription': '00145111',
    'NominalBeamAngle': '00145112',
    'WedgeOffsetX': '00145113',
    'WedgeOffsetY': '00145114',
    'WedgeTotalLength': '00145115',
    'WedgeInContactLength': '00145116',
    'WedgeFrontGap': '00145117',
    'WedgeTotalHeight': '00145118',
    'WedgeFrontHeight': '00145119',
    'WedgeRearHeight': '0014511A',
    'WedgeTotalWidth': '0014511B',
    'WedgeInContactWidth': '0014511C',
    'WedgeChamferHeight': '0014511D',
    'WedgeCurve': '0014511E',
    'RadiusAlongWedge': '0014511F',
    'ContrastBolusAgent': '00180010',
    'ContrastBolusAgentSequence': '00180012',
    '00180013': ('ContrastBolusT1Relaxivity'),
    'ContrastBolusAdministrationRouteSequence': '00180014',
    'BodyPartExamined': '00180015',
    'ScanningSequence': '00180020',
    'SequenceVariant': '00180021',
    'ScanOptions': '00180022',
    'MRAcquisitionType': '00180023',
    'SequenceName': '00180024',
    'AngioFlag': '00180025',
    'InterventionDrugInformationSequence': '00180026',
    'InterventionDrugStopTime': '00180027',
    'InterventionDrugDose': '00180028',
    'InterventionDrugCodeSequence': '00180029',
    'AdditionalDrugSequence': '0018002A',
    'Radionuclide': '00180030',
    'Radiopharmaceutical': '00180031',
    'EnergyWindowCenterline': '00180032',
    'EnergyWindowTotalWidth': '00180033',
    'InterventionDrugName': '00180034',
    'InterventionDrugStartTime': '00180035',
    'InterventionSequence': '00180036',
    'TherapyType': '00180037',
    'InterventionStatus': '00180038',
    'TherapyDescription': '00180039',
    'InterventionDescription': '0018003A',
    'CineRate': '00180040',
    'InitialCineRunState': '00180042',
    'SliceThickness': '00180050',
    'KVP': '00180060',
    '': '00180061',
    'CountsAccumulated': '00180070',
    'AcquisitionTerminationCondition': '00180071',
    'EffectiveDuration': '00180072',
    'AcquisitionStartCondition': '00180073',
    'AcquisitionStartConditionData': '00180074',
    'AcquisitionTerminationConditionData': '00180075',
    'RepetitionTime': '00180080',
    'EchoTime': '00180081',
    'InversionTime': '00180082',
    'NumberOfAverages': '00180083',
    'ImagingFrequency': '00180084',
    'ImagedNucleus': '00180085',
    'EchoNumbers': '00180086',
    'MagneticFieldStrength': '00180087',
    'SpacingBetweenSlices': '00180088',
    'NumberOfPhaseEncodingSteps': '00180089',
    'DataCollectionDiameter': '00180090',
    'EchoTrainLength': '00180091',
    'PercentSampling': '00180093',
    'PercentPhaseFieldOfView': '00180094',
    'PixelBandwidth': '00180095',
    'DeviceSerialNumber': '00181000',
    'DeviceUID': '00181002',
    'DeviceID': '00181003',
    'PlateID': '00181004',
    'GeneratorID': '00181005',
    'GridID': '00181006',
    'CassetteID': '00181007',
    'GantryID': '00181008',
    'UniqueDeviceIdentifier': '00181009',
    'UDISequence': '0018100A',
    'SecondaryCaptureDeviceID': '00181010',
    'HardcopyCreationDeviceID': '00181011',
    'DateOfSecondaryCapture': '00181012',
    'TimeOfSecondaryCapture': '00181014',
    'SecondaryCaptureDeviceManufacturer': '00181016',
    'HardcopyDeviceManufacturer': '00181017',
    'SecondaryCaptureDeviceManufacturerModelName': '00181018',
    'SecondaryCaptureDeviceSoftwareVersions': '00181019',
    'HardcopyDeviceSoftwareVersion': '0018101A',
    'HardcopyDeviceManufacturerModelName': '0018101B',
    'SoftwareVersions': '00181020',
    'VideoImageFormatAcquired': '00181022',
    'DigitalImageFormatAcquired': '00181023',
    'ProtocolName': '00181030',
    'ContrastBolusRoute': '00181040',
    'ContrastBolusVolume': '00181041',
    'ContrastBolusStartTime': '00181042',
    'ContrastBolusStopTime': '00181043',
    'ContrastBolusTotalDose': '00181044',
    'SyringeCounts': '00181045',
    'ContrastFlowRate': '00181046',
    'ContrastFlowDuration': '00181047',
    'ContrastBolusIngredient': '00181048',
    'ContrastBolusIngredientConcentration': '00181049',
    'SpatialResolution': '00181050',
    'TriggerTime': '00181060',
    'TriggerSourceOrType': '00181061',
    'NominalInterval': '00181062',
    'FrameTime': '00181063',
    'CardiacFramingType': '00181064',
    'FrameTimeVector': '00181065',
    'FrameDelay': '00181066',
    'ImageTriggerDelay': '00181067',
    'MultiplexGroupTimeOffset': '00181068',
    'TriggerTimeOffset': '00181069',
    'SynchronizationTrigger': '0018106A',
    'SynchronizationChannel': '0018106C',
    'TriggerSamplePosition': '0018106E',
    'RadiopharmaceuticalRoute': '00181070',
    'RadiopharmaceuticalVolume': '00181071',
    'RadiopharmaceuticalStartTime': '00181072',
    'RadiopharmaceuticalStopTime': '00181073',
    'RadionuclideTotalDose': '00181074',
    'RadionuclideHalfLife': '00181075',
    'RadionuclidePositronFraction': '00181076',
    'RadiopharmaceuticalSpecificActivity': '00181077',
    'RadiopharmaceuticalStartDateTime': '00181078',
    'RadiopharmaceuticalStopDateTime': '00181079',
    'BeatRejectionFlag': '00181080',
    'LowRRValue': '00181081',
    'HighRRValue': '00181082',
    'IntervalsAcquired': '00181083',
    'IntervalsRejected': '00181084',
    'PVCRejection': '00181085',
    'SkipBeats': '00181086',
    'HeartRate': '00181088',
    'CardiacNumberOfImages': '00181090',
    'TriggerWindow': '00181094',
    'ReconstructionDiameter': '00181100',
    'DistanceSourceToDetector': '00181110',
    'DistanceSourceToPatient': '00181111',
    'EstimatedRadiographicMagnificationFactor': '00181114',
    'GantryDetectorTilt': '00181120',
    'GantryDetectorSlew': '00181121',
    'TableHeight': '00181130',
    'TableTraverse': '00181131',
    'TableMotion': '00181134',
    'TableVerticalIncrement': '00181135',
    'TableLateralIncrement': '00181136',
    'TableLongitudinalIncrement': '00181137',
    'TableAngle': '00181138',
    'TableType': '0018113A',
    'RotationDirection': '00181140',
    'AngularPosition': '00181141',
    'RadialPosition': '00181142',
    'ScanArc': '00181143',
    'AngularStep': '00181144',
    'CenterOfRotationOffset': '00181145',
    'RotationOffset': '00181146',
    'FieldOfViewShape': '00181147',
    'FieldOfViewDimensions': '00181149',
    'ExposureTime': '00181150',
    'XRayTubeCurrent': '00181151',
    'Exposure': '00181152',
    'ExposureInuAs': '00181153',
    'AveragePulseWidth': '00181154',
    'RadiationSetting': '00181155',
    'RectificationType': '00181156',
    'RadiationMode': '0018115A',
    'ImageAndFluoroscopyAreaDoseProduct': '0018115E',
    'FilterType': '00181160',
    'TypeOfFilters': '00181161',
    'IntensifierSize': '00181162',
    'ImagerPixelSpacing': '00181164',
    'Grid': '00181166',
    'GeneratorPower': '00181170',
    'CollimatorGridName': '00181180',
    'CollimatorType': '00181181',
    'FocalDistance': '00181182',
    'XFocusCenter': '00181183',
    'YFocusCenter': '00181184',
    'FocalSpots': '00181190',
    'AnodeTargetMaterial': '00181191',
    'BodyPartThickness': '001811A0',
    'CompressionForce': '001811A2',
    'CompressionPressure': '001811A3',
    'PaddleDescription': '001811A4',
    'CompressionContactArea': '001811A5',
    'DateOfLastCalibration': '00181200',
    'TimeOfLastCalibration': '00181201',
    'DateTimeOfLastCalibration': '00181202',
    'ConvolutionKernel': '00181210',
    'UpperLowerPixelValues': '00181240',
    'ActualFrameDuration': '00181242',
    'CountRate': '00181243',
    'PreferredPlaybackSequencing': '00181244',
    'ReceiveCoilName': '00181250',
    'TransmitCoilName': '00181251',
    'PlateType': '00181260',
    'PhosphorType': '00181261',
    'WaterEquivalentDiameter': '00181271',
    'WaterEquivalentDiameterCalculationMethodCodeSequence': '00181272',
    'ScanVelocity': '00181300',
    'WholeBodyTechnique': '00181301',
    'ScanLength': '00181302',
    'AcquisitionMatrix': '00181310',
    'InPlanePhaseEncodingDirection': '00181312',
    'FlipAngle': '00181314',
    'VariableFlipAngleFlag': '00181315',
    'SAR': '00181316',
    'dBdt': '00181318',
    '00181320': ('B1rms'),
    'AcquisitionDeviceProcessingDescription': '00181400',
    'AcquisitionDeviceProcessingCode': '00181401',
    'CassetteOrientation': '00181402',
    'CassetteSize': '00181403',
    'ExposuresOnPlate': '00181404',
    'RelativeXRayExposure': '00181405',
    'ExposureIndex': '00181411',
    'TargetExposureIndex': '00181412',
    'DeviationIndex': '00181413',
    'ColumnAngulation': '00181450',
    'TomoLayerHeight': '00181460',
    'TomoAngle': '00181470',
    'TomoTime': '00181480',
    'TomoType': '00181490',
    'TomoClass': '00181491',
    'NumberOfTomosynthesisSourceImages': '00181495',
    'PositionerMotion': '00181500',
    'PositionerType': '00181508',
    'PositionerPrimaryAngle': '00181510',
    'PositionerSecondaryAngle': '00181511',
    'PositionerPrimaryAngleIncrement': '00181520',
    'PositionerSecondaryAngleIncrement': '00181521',
    'DetectorPrimaryAngle': '00181530',
    'DetectorSecondaryAngle': '00181531',
    'ShutterShape': '00181600',
    'ShutterLeftVerticalEdge': '00181602',
    'ShutterRightVerticalEdge': '00181604',
    'ShutterUpperHorizontalEdge': '00181606',
    'ShutterLowerHorizontalEdge': '00181608',
    'CenterOfCircularShutter': '00181610',
    'RadiusOfCircularShutter': '00181612',
    'VerticesOfThePolygonalShutter': '00181620',
    'ShutterPresentationValue': '00181622',
    'ShutterOverlayGroup': '00181623',
    'ShutterPresentationColorCIELabValue': '00181624',
    'CollimatorShape': '00181700',
    'CollimatorLeftVerticalEdge': '00181702',
    'CollimatorRightVerticalEdge': '00181704',
    'CollimatorUpperHorizontalEdge': '00181706',
    'CollimatorLowerHorizontalEdge': '00181708',
    'CenterOfCircularCollimator': '00181710',
    'RadiusOfCircularCollimator': '00181712',
    'VerticesOfThePolygonalCollimator': '00181720',
    'AcquisitionTimeSynchronized': '00181800',
    'TimeSource': '00181801',
    'TimeDistributionProtocol': '00181802',
    'NTPSourceAddress': '00181803',
    'PageNumberVector': '00182001',
    'FrameLabelVector': '00182002',
    'FramePrimaryAngleVector': '00182003',
    'FrameSecondaryAngleVector': '00182004',
    'SliceLocationVector': '00182005',
    'DisplayWindowLabelVector': '00182006',
    'NominalScannedPixelSpacing': '00182010',
    'DigitizingDeviceTransportDirection': '00182020',
    'RotationOfScannedFilm': '00182030',
    'BiopsyTargetSequence': '00182041',
    'TargetUID': '00182042',
    'LocalizingCursorPosition': '00182043',
    'CalculatedTargetPosition': '00182044',
    'TargetLabel': '00182045',
    'DisplayedZValue': '00182046',
    'IVUSAcquisition': '00183100',
    'IVUSPullbackRate': '00183101',
    'IVUSGatedRate': '00183102',
    'IVUSPullbackStartFrameNumber': '00183103',
    'IVUSPullbackStopFrameNumber': '00183104',
    'LesionNumber': '00183105',
    'AcquisitionComments': '00184000',
    'OutputPower': '00185000',
    'TransducerData': '00185010',
    'FocusDepth': '00185012',
    'ProcessingFunction': '00185020',
    'PostprocessingFunction': '00185021',
    'MechanicalIndex': '00185022',
    'BoneThermalIndex': '00185024',
    'CranialThermalIndex': '00185026',
    'SoftTissueThermalIndex': '00185027',
    'SoftTissueFocusThermalIndex': '00185028',
    'SoftTissueSurfaceThermalIndex': '00185029',
    'DynamicRange': '00185030',
    'TotalGain': '00185040',
    'DepthOfScanField': '00185050',
    'PatientPosition': '00185100',
    'ViewPosition': '00185101',
    'ProjectionEponymousNameCodeSequence': '00185104',
    'ImageTransformationMatrix': '00185210',
    'ImageTranslationVector': '00185212',
    'Sensitivity': '00186000',
    'SequenceOfUltrasoundRegions': '00186011',
    'RegionSpatialFormat': '00186012',
    'RegionDataType': '00186014',
    'RegionFlags': '00186016',
    '00186018': ('RegionLocationMinX0'),
    '0018601A': ('RegionLocationMinY0'),
    '0018601C': ('RegionLocationMaxX1'),
    '0018601E': ('RegionLocationMaxY1'),
    '00186020': ('ReferencePixelX0'),
    '00186022': ('ReferencePixelY0'),
    'PhysicalUnitsXDirection': '00186024',
    'PhysicalUnitsYDirection': '00186026',
    'ReferencePixelPhysicalValueX': '00186028',
    'ReferencePixelPhysicalValueY': '0018602A',
    'PhysicalDeltaX': '0018602C',
    'PhysicalDeltaY': '0018602E',
    'TransducerFrequency': '00186030',
    'TransducerType': '00186031',
    'PulseRepetitionFrequency': '00186032',
    'DopplerCorrectionAngle': '00186034',
    'SteeringAngle': '00186036',
    'DopplerSampleVolumeXPositionRetired': '00186038',
    'DopplerSampleVolumeXPosition': '00186039',
    'DopplerSampleVolumeYPositionRetired': '0018603A',
    'DopplerSampleVolumeYPosition': '0018603B',
    '0018603C': ('TMLinePositionX0Retired'),
    '0018603D': ('TMLinePositionX0'),
    '0018603E': ('TMLinePositionY0Retired'),
    '0018603F': ('TMLinePositionY0'),
    '00186040': ('TMLinePositionX1Retired'),
    '00186041': ('TMLinePositionX1'),
    '00186042': ('TMLinePositionY1Retired'),
    '00186043': ('TMLinePositionY1'),
    'PixelComponentOrganization': '00186044',
    'PixelComponentMask': '00186046',
    'PixelComponentRangeStart': '00186048',
    'PixelComponentRangeStop': '0018604A',
    'PixelComponentPhysicalUnits': '0018604C',
    'PixelComponentDataType': '0018604E',
    'NumberOfTableBreakPoints': '00186050',
    'TableOfXBreakPoints': '00186052',
    'TableOfYBreakPoints': '00186054',
    'NumberOfTableEntries': '00186056',
    'TableOfPixelValues': '00186058',
    'TableOfParameterValues': '0018605A',
    'RWaveTimeVector': '00186060',
    'DetectorConditionsNominalFlag': '00187000',
    'DetectorTemperature': '00187001',
    'DetectorType': '00187004',
    'DetectorConfiguration': '00187005',
    'DetectorDescription': '00187006',
    'DetectorMode': '00187008',
    'DetectorID': '0018700A',
    'DateOfLastDetectorCalibration': '0018700C',
    'TimeOfLastDetectorCalibration': '0018700E',
    'ExposuresOnDetectorSinceLastCalibration': '00187010',
    'ExposuresOnDetectorSinceManufactured': '00187011',
    'DetectorTimeSinceLastExposure': '00187012',
    'DetectorActiveTime': '00187014',
    'DetectorActivationOffsetFromExposure': '00187016',
    'DetectorBinning': '0018701A',
    'DetectorElementPhysicalSize': '00187020',
    'DetectorElementSpacing': '00187022',
    'DetectorActiveShape': '00187024',
    'DetectorActiveDimensions': '00187026',
    'DetectorActiveOrigin': '00187028',
    'DetectorManufacturerName': '0018702A',
    'DetectorManufacturerModelName': '0018702B',
    'FieldOfViewOrigin': '00187030',
    'FieldOfViewRotation': '00187032',
    'FieldOfViewHorizontalFlip': '00187034',
    'PixelDataAreaOriginRelativeToFOV': '00187036',
    'PixelDataAreaRotationAngleRelativeToFOV': '00187038',
    'GridAbsorbingMaterial': '00187040',
    'GridSpacingMaterial': '00187041',
    'GridThickness': '00187042',
    'GridPitch': '00187044',
    'GridAspectRatio': '00187046',
    'GridPeriod': '00187048',
    'GridFocalDistance': '0018704C',
    'FilterMaterial': '00187050',
    'FilterThicknessMinimum': '00187052',
    'FilterThicknessMaximum': '00187054',
    'FilterBeamPathLengthMinimum': '00187056',
    'FilterBeamPathLengthMaximum': '00187058',
    'ExposureControlMode': '00187060',
    'ExposureControlModeDescription': '00187062',
    'ExposureStatus': '00187064',
    'PhototimerSetting': '00187065',
    'ExposureTimeInuS': '00188150',
    'XRayTubeCurrentInuA': '00188151',
    'ContentQualification': '00189004',
    'PulseSequenceName': '00189005',
    'MRImagingModifierSequence': '00189006',
    'EchoPulseSequence': '00189008',
    'InversionRecovery': '00189009',
    'FlowCompensation': '00189010',
    'MultipleSpinEcho': '00189011',
    'MultiPlanarExcitation': '00189012',
    'PhaseContrast': '00189014',
    'TimeOfFlightContrast': '00189015',
    'Spoiling': '00189016',
    'SteadyStatePulseSequence': '00189017',
    'EchoPlanarPulseSequence': '00189018',
    'TagAngleFirstAxis': '00189019',
    'MagnetizationTransfer': '00189020',
    '00189021': ('T2Preparation'),
    'BloodSignalNulling': '00189022',
    'SaturationRecovery': '00189024',
    'SpectrallySelectedSuppression': '00189025',
    'SpectrallySelectedExcitation': '00189026',
    'SpatialPresaturation': '00189027',
    'Tagging': '00189028',
    'OversamplingPhase': '00189029',
    'TagSpacingFirstDimension': '00189030',
    'GeometryOfKSpaceTraversal': '00189032',
    'SegmentedKSpaceTraversal': '00189033',
    'RectilinearPhaseEncodeReordering': '00189034',
    'TagThickness': '00189035',
    'PartialFourierDirection': '00189036',
    'CardiacSynchronizationTechnique': '00189037',
    'ReceiveCoilManufacturerName': '00189041',
    'MRReceiveCoilSequence': '00189042',
    'ReceiveCoilType': '00189043',
    'QuadratureReceiveCoil': '00189044',
    'MultiCoilDefinitionSequence': '00189045',
    'MultiCoilConfiguration': '00189046',
    'MultiCoilElementName': '00189047',
    'MultiCoilElementUsed': '00189048',
    'MRTransmitCoilSequence': '00189049',
    'TransmitCoilManufacturerName': '00189050',
    'TransmitCoilType': '00189051',
    'SpectralWidth': '00189052',
    'ChemicalShiftReference': '00189053',
    'VolumeLocalizationTechnique': '00189054',
    'MRAcquisitionFrequencyEncodingSteps': '00189058',
    'Decoupling': '00189059',
    'DecoupledNucleus': '00189060',
    'DecouplingFrequency': '00189061',
    'DecouplingMethod': '00189062',
    'DecouplingChemicalShiftReference': '00189063',
    'KSpaceFiltering': '00189064',
    'TimeDomainFiltering': '00189065',
    'NumberOfZeroFills': '00189066',
    'BaselineCorrection': '00189067',
    'ParallelReductionFactorInPlane': '00189069',
    'CardiacRRIntervalSpecified': '00189070',
    'AcquisitionDuration': '00189073',
    'FrameAcquisitionDateTime': '00189074',
    'DiffusionDirectionality': '00189075',
    'DiffusionGradientDirectionSequence': '00189076',
    'ParallelAcquisition': '00189077',
    'ParallelAcquisitionTechnique': '00189078',
    'InversionTimes': '00189079',
    'MetaboliteMapDescription': '00189080',
    'PartialFourier': '00189081',
    'EffectiveEchoTime': '00189082',
    'MetaboliteMapCodeSequence': '00189083',
    'ChemicalShiftSequence': '00189084',
    'CardiacSignalSource': '00189085',
    'DiffusionBValue': '00189087',
    'DiffusionGradientOrientation': '00189089',
    'VelocityEncodingDirection': '00189090',
    'VelocityEncodingMinimumValue': '00189091',
    'VelocityEncodingAcquisitionSequence': '00189092',
    'NumberOfKSpaceTrajectories': '00189093',
    'CoverageOfKSpace': '00189094',
    'SpectroscopyAcquisitionPhaseRows': '00189095',
    'ParallelReductionFactorInPlaneRetired': '00189096',
    'TransmitterFrequency': '00189098',
    'ResonantNucleus': '00189100',
    'FrequencyCorrection': '00189101',
    'MRSpectroscopyFOVGeometrySequence': '00189103',
    'SlabThickness': '00189104',
    'SlabOrientation': '00189105',
    'MidSlabPosition': '00189106',
    'MRSpatialSaturationSequence': '00189107',
    'MRTimingAndRelatedParametersSequence': '00189112',
    'MREchoSequence': '00189114',
    'MRModifierSequence': '00189115',
    'MRDiffusionSequence': '00189117',
    'CardiacSynchronizationSequence': '00189118',
    'MRAveragesSequence': '00189119',
    'MRFOVGeometrySequence': '00189125',
    'VolumeLocalizationSequence': '00189126',
    'SpectroscopyAcquisitionDataColumns': '00189127',
    'DiffusionAnisotropyType': '00189147',
    'FrameReferenceDateTime': '00189151',
    'MRMetaboliteMapSequence': '00189152',
    'ParallelReductionFactorOutOfPlane': '00189155',
    'SpectroscopyAcquisitionOutOfPlanePhaseSteps': '00189159',
    'BulkMotionStatus': '00189166',
    'ParallelReductionFactorSecondInPlane': '00189168',
    'CardiacBeatRejectionTechnique': '00189169',
    'RespiratoryMotionCompensationTechnique': '00189170',
    'RespiratorySignalSource': '00189171',
    'BulkMotionCompensationTechnique': '00189172',
    'BulkMotionSignalSource': '00189173',
    'ApplicableSafetyStandardAgency': '00189174',
    'ApplicableSafetyStandardDescription': '00189175',
    'OperatingModeSequence': '00189176',
    'OperatingModeType': '00189177',
    'OperatingMode': '00189178',
    'SpecificAbsorptionRateDefinition': '00189179',
    'GradientOutputType': '00189180',
    'SpecificAbsorptionRateValue': '00189181',
    'GradientOutput': '00189182',
    'FlowCompensationDirection': '00189183',
    'TaggingDelay': '00189184',
    'RespiratoryMotionCompensationTechniqueDescription': '00189185',
    'RespiratorySignalSourceID': '00189186',
    'ChemicalShiftMinimumIntegrationLimitInHz': '00189195',
    'ChemicalShiftMaximumIntegrationLimitInHz': '00189196',
    'MRVelocityEncodingSequence': '00189197',
    'FirstOrderPhaseCorrection': '00189198',
    'WaterReferencedPhaseCorrection': '00189199',
    'MRSpectroscopyAcquisitionType': '00189200',
    'RespiratoryCyclePosition': '00189214',
    'VelocityEncodingMaximumValue': '00189217',
    'TagSpacingSecondDimension': '00189218',
    'TagAngleSecondAxis': '00189219',
    'FrameAcquisitionDuration': '00189220',
    'MRImageFrameTypeSequence': '00189226',
    'MRSpectroscopyFrameTypeSequence': '00189227',
    'MRAcquisitionPhaseEncodingStepsInPlane': '00189231',
    'MRAcquisitionPhaseEncodingStepsOutOfPlane': '00189232',
    'SpectroscopyAcquisitionPhaseColumns': '00189234',
    'CardiacCyclePosition': '00189236',
    'SpecificAbsorptionRateSequence': '00189239',
    'RFEchoTrainLength': '00189240',
    'GradientEchoTrainLength': '00189241',
    'ArterialSpinLabelingContrast': '00189250',
    'MRArterialSpinLabelingSequence': '00189251',
    'ASLTechniqueDescription': '00189252',
    'ASLSlabNumber': '00189253',
    'ASLSlabThickness': '00189254',
    'ASLSlabOrientation': '00189255',
    'ASLMidSlabPosition': '00189256',
    'ASLContext': '00189257',
    'ASLPulseTrainDuration': '00189258',
    'ASLCrusherFlag': '00189259',
    'ASLCrusherFlowLimit': '0018925A',
    'ASLCrusherDescription': '0018925B',
    'ASLBolusCutoffFlag': '0018925C',
    'ASLBolusCutoffTimingSequence': '0018925D',
    'ASLBolusCutoffTechnique': '0018925E',
    'ASLBolusCutoffDelayTime': '0018925F',
    'ASLSlabSequence': '00189260',
    'ChemicalShiftMinimumIntegrationLimitInppm': '00189295',
    'ChemicalShiftMaximumIntegrationLimitInppm': '00189296',
    'WaterReferenceAcquisition': '00189297',
    'EchoPeakPosition': '00189298',
    'CTAcquisitionTypeSequence': '00189301',
    'AcquisitionType': '00189302',
    'TubeAngle': '00189303',
    'CTAcquisitionDetailsSequence': '00189304',
    'RevolutionTime': '00189305',
    'SingleCollimationWidth': '00189306',
    'TotalCollimationWidth': '00189307',
    'CTTableDynamicsSequence': '00189308',
    'TableSpeed': '00189309',
    'TableFeedPerRotation': '00189310',
    'SpiralPitchFactor': '00189311',
    'CTGeometrySequence': '00189312',
    'DataCollectionCenterPatient': '00189313',
    'CTReconstructionSequence': '00189314',
    'ReconstructionAlgorithm': '00189315',
    'ConvolutionKernelGroup': '00189316',
    'ReconstructionFieldOfView': '00189317',
    'ReconstructionTargetCenterPatient': '00189318',
    'ReconstructionAngle': '00189319',
    'ImageFilter': '00189320',
    'CTExposureSequence': '00189321',
    'ReconstructionPixelSpacing': '00189322',
    'ExposureModulationType': '00189323',
    'EstimatedDoseSaving': '00189324',
    'CTXRayDetailsSequence': '00189325',
    'CTPositionSequence': '00189326',
    'TablePosition': '00189327',
    'ExposureTimeInms': '00189328',
    'CTImageFrameTypeSequence': '00189329',
    'XRayTubeCurrentInmA': '00189330',
    'ExposureInmAs': '00189332',
    'ConstantVolumeFlag': '00189333',
    'FluoroscopyFlag': '00189334',
    'DistanceSourceToDataCollectionCenter': '00189335',
    'ContrastBolusAgentNumber': '00189337',
    'ContrastBolusIngredientCodeSequence': '00189338',
    'ContrastAdministrationProfileSequence': '00189340',
    'ContrastBolusUsageSequence': '00189341',
    'ContrastBolusAgentAdministered': '00189342',
    'ContrastBolusAgentDetected': '00189343',
    'ContrastBolusAgentPhase': '00189344',
    'CTDIvol': '00189345',
    'CTDIPhantomTypeCodeSequence': '00189346',
    'CalciumScoringMassFactorPatient': '00189351',
    'CalciumScoringMassFactorDevice': '00189352',
    'EnergyWeightingFactor': '00189353',
    'CTAdditionalXRaySourceSequence': '00189360',
    'ProjectionPixelCalibrationSequence': '00189401',
    'DistanceSourceToIsocenter': '00189402',
    'DistanceObjectToTableTop': '00189403',
    'ObjectPixelSpacingInCenterOfBeam': '00189404',
    'PositionerPositionSequence': '00189405',
    'TablePositionSequence': '00189406',
    'CollimatorShapeSequence': '00189407',
    'PlanesInAcquisition': '00189410',
    'XAXRFFrameCharacteristicsSequence': '00189412',
    'FrameAcquisitionSequence': '00189417',
    'XRayReceptorType': '00189420',
    'AcquisitionProtocolName': '00189423',
    'AcquisitionProtocolDescription': '00189424',
    'ContrastBolusIngredientOpaque': '00189425',
    'DistanceReceptorPlaneToDetectorHousing': '00189426',
    'IntensifierActiveShape': '00189427',
    'IntensifierActiveDimensions': '00189428',
    'PhysicalDetectorSize': '00189429',
    'PositionOfIsocenterProjection': '00189430',
    'FieldOfViewSequence': '00189432',
    'FieldOfViewDescription': '00189433',
    'ExposureControlSensingRegionsSequence': '00189434',
    'ExposureControlSensingRegionShape': '00189435',
    'ExposureControlSensingRegionLeftVerticalEdge': '00189436',
    'ExposureControlSensingRegionRightVerticalEdge': '00189437',
    'ExposureControlSensingRegionUpperHorizontalEdge': '00189438',
    'ExposureControlSensingRegionLowerHorizontalEdge': '00189439',
    'CenterOfCircularExposureControlSensingRegion': '00189440',
    'RadiusOfCircularExposureControlSensingRegion': '00189441',
    'VerticesOfThePolygonalExposureControlSensingRegion': '00189442',
    '': '00189445',
    'ColumnAngulationPatient': '00189447',
    'BeamAngle': '00189449',
    'FrameDetectorParametersSequence': '00189451',
    'CalculatedAnatomyThickness': '00189452',
    'CalibrationSequence': '00189455',
    'ObjectThicknessSequence': '00189456',
    'PlaneIdentification': '00189457',
    'FieldOfViewDimensionsInFloat': '00189461',
    'IsocenterReferenceSystemSequence': '00189462',
    'PositionerIsocenterPrimaryAngle': '00189463',
    'PositionerIsocenterSecondaryAngle': '00189464',
    'PositionerIsocenterDetectorRotationAngle': '00189465',
    'TableXPositionToIsocenter': '00189466',
    'TableYPositionToIsocenter': '00189467',
    'TableZPositionToIsocenter': '00189468',
    'TableHorizontalRotationAngle': '00189469',
    'TableHeadTiltAngle': '00189470',
    'TableCradleTiltAngle': '00189471',
    'FrameDisplayShutterSequence': '00189472',
    'AcquiredImageAreaDoseProduct': '00189473',
    'CArmPositionerTabletopRelationship': '00189474',
    'XRayGeometrySequence': '00189476',
    'IrradiationEventIdentificationSequence': '00189477',
    '00189504': ('XRay3DFrameTypeSequence'),
    'ContributingSourcesSequence': '00189506',
    '00189507': ('XRay3DAcquisitionSequence'),
    'PrimaryPositionerScanArc': '00189508',
    'SecondaryPositionerScanArc': '00189509',
    'PrimaryPositionerScanStartAngle': '00189510',
    'SecondaryPositionerScanStartAngle': '00189511',
    'PrimaryPositionerIncrement': '00189514',
    'SecondaryPositionerIncrement': '00189515',
    'StartAcquisitionDateTime': '00189516',
    'EndAcquisitionDateTime': '00189517',
    'PrimaryPositionerIncrementSign': '00189518',
    'SecondaryPositionerIncrementSign': '00189519',
    'ApplicationName': '00189524',
    'ApplicationVersion': '00189525',
    'ApplicationManufacturer': '00189526',
    'AlgorithmType': '00189527',
    'AlgorithmDescription': '00189528',
    '00189530': ('XRay3DReconstructionSequence'),
    'ReconstructionDescription': '00189531',
    'PerProjectionAcquisitionSequence': '00189538',
    'DetectorPositionSequence': '00189541',
    'XRayAcquisitionDoseSequence': '00189542',
    'XRaySourceIsocenterPrimaryAngle': '00189543',
    'XRaySourceIsocenterSecondaryAngle': '00189544',
    'BreastSupportIsocenterPrimaryAngle': '00189545',
    'BreastSupportIsocenterSecondaryAngle': '00189546',
    'BreastSupportXPositionToIsocenter': '00189547',
    'BreastSupportYPositionToIsocenter': '00189548',
    'BreastSupportZPositionToIsocenter': '00189549',
    'DetectorIsocenterPrimaryAngle': '00189550',
    'DetectorIsocenterSecondaryAngle': '00189551',
    'DetectorXPositionToIsocenter': '00189552',
    'DetectorYPositionToIsocenter': '00189553',
    'DetectorZPositionToIsocenter': '00189554',
    'XRayGridSequence': '00189555',
    'XRayFilterSequence': '00189556',
    'DetectorActiveAreaTLHCPosition': '00189557',
    'DetectorActiveAreaOrientation': '00189558',
    'PositionerPrimaryAngleDirection': '00189559',
    'DiffusionBMatrixSequence': '00189601',
    'DiffusionBValueXX': '00189602',
    'DiffusionBValueXY': '00189603',
    'DiffusionBValueXZ': '00189604',
    'DiffusionBValueYY': '00189605',
    'DiffusionBValueYZ': '00189606',
    'DiffusionBValueZZ': '00189607',
    'FunctionalMRSequence': '00189621',
    'FunctionalSettlingPhaseFramesPresent': '00189622',
    'FunctionalSyncPulse': '00189623',
    'SettlingPhaseFrame': '00189624',
    'DecayCorrectionDateTime': '00189701',
    'StartDensityThreshold': '00189715',
    'StartRelativeDensityDifferenceThreshold': '00189716',
    'StartCardiacTriggerCountThreshold': '00189717',
    'StartRespiratoryTriggerCountThreshold': '00189718',
    'TerminationCountsThreshold': '00189719',
    'TerminationDensityThreshold': '00189720',
    'TerminationRelativeDensityThreshold': '00189721',
    'TerminationTimeThreshold': '00189722',
    'TerminationCardiacTriggerCountThreshold': '00189723',
    'TerminationRespiratoryTriggerCountThreshold': '00189724',
    'DetectorGeometry': '00189725',
    'TransverseDetectorSeparation': '00189726',
    'AxialDetectorDimension': '00189727',
    'RadiopharmaceuticalAgentNumber': '00189729',
    'PETFrameAcquisitionSequence': '00189732',
    'PETDetectorMotionDetailsSequence': '00189733',
    'PETTableDynamicsSequence': '00189734',
    'PETPositionSequence': '00189735',
    'PETFrameCorrectionFactorsSequence': '00189736',
    'RadiopharmaceuticalUsageSequence': '00189737',
    'AttenuationCorrectionSource': '00189738',
    'NumberOfIterations': '00189739',
    'NumberOfSubsets': '00189740',
    'PETReconstructionSequence': '00189749',
    'PETFrameTypeSequence': '00189751',
    'TimeOfFlightInformationUsed': '00189755',
    'ReconstructionType': '00189756',
    'DecayCorrected': '00189758',
    'AttenuationCorrected': '00189759',
    'ScatterCorrected': '00189760',
    'DeadTimeCorrected': '00189761',
    'GantryMotionCorrected': '00189762',
    'PatientMotionCorrected': '00189763',
    'CountLossNormalizationCorrected': '00189764',
    'RandomsCorrected': '00189765',
    'NonUniformRadialSamplingCorrected': '00189766',
    'SensitivityCalibrated': '00189767',
    'DetectorNormalizationCorrection': '00189768',
    'IterativeReconstructionMethod': '00189769',
    'AttenuationCorrectionTemporalRelationship': '00189770',
    'PatientPhysiologicalStateSequence': '00189771',
    'PatientPhysiologicalStateCodeSequence': '00189772',
    'DepthsOfFocus': '00189801',
    'ExcludedIntervalsSequence': '00189803',
    'ExclusionStartDateTime': '00189804',
    'ExclusionDuration': '00189805',
    'USImageDescriptionSequence': '00189806',
    'ImageDataTypeSequence': '00189807',
    'DataType': '00189808',
    'TransducerScanPatternCodeSequence': '00189809',
    'AliasedDataType': '0018980B',
    'PositionMeasuringDeviceUsed': '0018980C',
    'TransducerGeometryCodeSequence': '0018980D',
    'TransducerBeamSteeringCodeSequence': '0018980E',
    'TransducerApplicationCodeSequence': '0018980F',
    'ZeroVelocityPixelValue': '00189810',
    'ReferenceLocationLabel': '00189900',
    'ReferenceLocationDescription': '00189901',
    'ReferenceBasisCodeSequence': '00189902',
    'ReferenceGeometryCodeSequence': '00189903',
    'OffsetDistance': '00189904',
    'OffsetDirection': '00189905',
    'PotentialScheduledProtocolCodeSequence': '00189906',
    'PotentialRequestedProcedureCodeSequence': '00189907',
    'PotentialReasonsForProcedure': '00189908',
    'PotentialReasonsForProcedureCodeSequence': '00189909',
    'PotentialDiagnosticTasks': '0018990A',
    'ContraindicationsCodeSequence': '0018990B',
    'ReferencedDefinedProtocolSequence': '0018990C',
    'ReferencedPerformedProtocolSequence': '0018990D',
    'PredecessorProtocolSequence': '0018990E',
    'ProtocolPlanningInformation': '0018990F',
    'ProtocolDesignRationale': '00189910',
    'PatientSpecificationSequence': '00189911',
    'ModelSpecificationSequence': '00189912',
    'ParametersSpecificationSequence': '00189913',
    'InstructionSequence': '00189914',
    'InstructionIndex': '00189915',
    'InstructionText': '00189916',
    'InstructionDescription': '00189917',
    'InstructionPerformedFlag': '00189918',
    'InstructionPerformedDateTime': '00189919',
    'InstructionPerformanceComment': '0018991A',
    'PatientPositioningInstructionSequence': '0018991B',
    'PositioningMethodCodeSequence': '0018991C',
    'PositioningLandmarkSequence': '0018991D',
    'TargetFrameOfReferenceUID': '0018991E',
    'AcquisitionProtocolElementSpecificationSequence': '0018991F',
    'AcquisitionProtocolElementSequence': '00189920',
    'ProtocolElementNumber': '00189921',
    'ProtocolElementName': '00189922',
    'ProtocolElementCharacteristicsSummary': '00189923',
    'ProtocolElementPurpose': '00189924',
    'AcquisitionMotion': '00189930',
    'AcquisitionStartLocationSequence': '00189931',
    'AcquisitionEndLocationSequence': '00189932',
    'ReconstructionProtocolElementSpecificationSequence': '00189933',
    'ReconstructionProtocolElementSequence': '00189934',
    'StorageProtocolElementSpecificationSequence': '00189935',
    'StorageProtocolElementSequence': '00189936',
    'RequestedSeriesDescription': '00189937',
    'SourceAcquisitionProtocolElementNumber': '00189938',
    'SourceAcquisitionBeamNumber': '00189939',
    'SourceReconstructionProtocolElementNumber': '0018993A',
    'ReconstructionStartLocationSequence': '0018993B',
    'ReconstructionEndLocationSequence': '0018993C',
    'ReconstructionAlgorithmSequence': '0018993D',
    'ReconstructionTargetCenterLocationSequence': '0018993E',
    'ImageFilterDescription': '00189941',
    'CTDIvolNotificationTrigger': '00189942',
    'DLPNotificationTrigger': '00189943',
    'AutoKVPSelectionType': '00189944',
    'AutoKVPUpperBound': '00189945',
    'AutoKVPLowerBound': '00189946',
    'ProtocolDefinedPatientPosition': '00189947',
    'ContributingEquipmentSequence': '0018A001',
    'ContributionDateTime': '0018A002',
    'ContributionDescription': '0018A003',
    'StudyInstanceUID': '0020000D',
    'SeriesInstanceUID': '0020000E',
    'StudyID': '00200010',
    'SeriesNumber': '00200011',
    'AcquisitionNumber': '00200012',
    'InstanceNumber': '00200013',
    'IsotopeNumber': '00200014',
    'PhaseNumber': '00200015',
    'IntervalNumber': '00200016',
    'TimeSlotNumber': '00200017',
    'AngleNumber': '00200018',
    'ItemNumber': '00200019',
    'PatientOrientation': '00200020',
    'OverlayNumber': '00200022',
    'CurveNumber': '00200024',
    'LUTNumber': '00200026',
    'ImagePosition': '00200030',
    'ImagePositionPatient': '00200032',
    'ImageOrientation': '00200035',
    'ImageOrientationPatient': '00200037',
    'Location': '00200050',
    'FrameOfReferenceUID': '00200052',
    'Laterality': '00200060',
    'ImageLaterality': '00200062',
    'ImageGeometryType': '00200070',
    'MaskingImage': '00200080',
    'ReportNumber': '002000AA',
    'TemporalPositionIdentifier': '00200100',
    'NumberOfTemporalPositions': '00200105',
    'TemporalResolution': '00200110',
    'SynchronizationFrameOfReferenceUID': '00200200',
    'SOPInstanceUIDOfConcatenationSource': '00200242',
    'SeriesInStudy': '00201000',
    'AcquisitionsInSeries': '00201001',
    'ImagesInAcquisition': '00201002',
    'ImagesInSeries': '00201003',
    'AcquisitionsInStudy': '00201004',
    'ImagesInStudy': '00201005',
    'Reference': '00201020',
    'TargetPositionReferenceIndicator': '0020103F',
    'PositionReferenceIndicator': '00201040',
    'SliceLocation': '00201041',
    'OtherStudyNumbers': '00201070',
    'NumberOfPatientRelatedStudies': '00201200',
    'NumberOfPatientRelatedSeries': '00201202',
    'NumberOfPatientRelatedInstances': '00201204',
    'NumberOfStudyRelatedSeries': '00201206',
    'NumberOfStudyRelatedInstances': '00201208',
    'NumberOfSeriesRelatedInstances': '00201209',
    'ModifyingDeviceID': '00203401',
    'ModifiedImageID': '00203402',
    'ModifiedImageDate': '00203403',
    'ModifyingDeviceManufacturer': '00203404',
    'ModifiedImageTime': '00203405',
    'ModifiedImageDescription': '00203406',
    'ImageComments': '00204000',
    'OriginalImageIdentification': '00205000',
    'OriginalImageIdentificationNomenclature': '00205002',
    'StackID': '00209056',
    'InStackPositionNumber': '00209057',
    'FrameAnatomySequence': '00209071',
    'FrameLaterality': '00209072',
    'FrameContentSequence': '00209111',
    'PlanePositionSequence': '00209113',
    'PlaneOrientationSequence': '00209116',
    'TemporalPositionIndex': '00209128',
    'NominalCardiacTriggerDelayTime': '00209153',
    'NominalCardiacTriggerTimePriorToRPeak': '00209154',
    'ActualCardiacTriggerTimePriorToRPeak': '00209155',
    'FrameAcquisitionNumber': '00209156',
    'DimensionIndexValues': '00209157',
    'FrameComments': '00209158',
    'ConcatenationUID': '00209161',
    'InConcatenationNumber': '00209162',
    'InConcatenationTotalNumber': '00209163',
    'DimensionOrganizationUID': '00209164',
    'DimensionIndexPointer': '00209165',
    'FunctionalGroupPointer': '00209167',
    'UnassignedSharedConvertedAttributesSequence': '00209170',
    'UnassignedPerFrameConvertedAttributesSequence': '00209171',
    'ConversionSourceAttributesSequence': '00209172',
    'DimensionIndexPrivateCreator': '00209213',
    'DimensionOrganizationSequence': '00209221',
    'DimensionIndexSequence': '00209222',
    'ConcatenationFrameOffsetNumber': '00209228',
    'FunctionalGroupPrivateCreator': '00209238',
    'NominalPercentageOfCardiacPhase': '00209241',
    'NominalPercentageOfRespiratoryPhase': '00209245',
    'StartingRespiratoryAmplitude': '00209246',
    'StartingRespiratoryPhase': '00209247',
    'EndingRespiratoryAmplitude': '00209248',
    'EndingRespiratoryPhase': '00209249',
    'RespiratoryTriggerType': '00209250',
    'RRIntervalTimeNominal': '00209251',
    'ActualCardiacTriggerDelayTime': '00209252',
    'RespiratorySynchronizationSequence': '00209253',
    'RespiratoryIntervalTime': '00209254',
    'NominalRespiratoryTriggerDelayTime': '00209255',
    'RespiratoryTriggerDelayThreshold': '00209256',
    'ActualRespiratoryTriggerDelayTime': '00209257',
    'ImagePositionVolume': '00209301',
    'ImageOrientationVolume': '00209302',
    'UltrasoundAcquisitionGeometry': '00209307',
    'ApexPosition': '00209308',
    'VolumeToTransducerMappingMatrix': '00209309',
    'VolumeToTableMappingMatrix': '0020930A',
    'VolumeToTransducerRelationship': '0020930B',
    'PatientFrameOfReferenceSource': '0020930C',
    'TemporalPositionTimeOffset': '0020930D',
    'PlanePositionVolumeSequence': '0020930E',
    'PlaneOrientationVolumeSequence': '0020930F',
    'TemporalPositionSequence': '00209310',
    'DimensionOrganizationType': '00209311',
    'VolumeFrameOfReferenceUID': '00209312',
    'TableFrameOfReferenceUID': '00209313',
    'DimensionDescriptionLabel': '00209421',
    'PatientOrientationInFrameSequence': '00209450',
    'FrameLabel': '00209453',
    'AcquisitionIndex': '00209518',
    'ContributingSOPInstancesReferenceSequence': '00209529',
    'ReconstructionIndex': '00209536',
    'LightPathFilterPassThroughWavelength': '00220001',
    'LightPathFilterPassBand': '00220002',
    'ImagePathFilterPassThroughWavelength': '00220003',
    'ImagePathFilterPassBand': '00220004',
    'PatientEyeMovementCommanded': '00220005',
    'PatientEyeMovementCommandCodeSequence': '00220006',
    'SphericalLensPower': '00220007',
    'CylinderLensPower': '00220008',
    'CylinderAxis': '00220009',
    'EmmetropicMagnification': '0022000A',
    'IntraOcularPressure': '0022000B',
    'HorizontalFieldOfView': '0022000C',
    'PupilDilated': '0022000D',
    'DegreeOfDilation': '0022000E',
    'StereoBaselineAngle': '00220010',
    'StereoBaselineDisplacement': '00220011',
    'StereoHorizontalPixelOffset': '00220012',
    'StereoVerticalPixelOffset': '00220013',
    'StereoRotation': '00220014',
    'AcquisitionDeviceTypeCodeSequence': '00220015',
    'IlluminationTypeCodeSequence': '00220016',
    'LightPathFilterTypeStackCodeSequence': '00220017',
    'ImagePathFilterTypeStackCodeSequence': '00220018',
    'LensesCodeSequence': '00220019',
    'ChannelDescriptionCodeSequence': '0022001A',
    'RefractiveStateSequence': '0022001B',
    'MydriaticAgentCodeSequence': '0022001C',
    'RelativeImagePositionCodeSequence': '0022001D',
    'CameraAngleOfView': '0022001E',
    'StereoPairsSequence': '00220020',
    'LeftImageSequence': '00220021',
    'RightImageSequence': '00220022',
    'StereoPairsPresent': '00220028',
    'AxialLengthOfTheEye': '00220030',
    'OphthalmicFrameLocationSequence': '00220031',
    'ReferenceCoordinates': '00220032',
    'DepthSpatialResolution': '00220035',
    'MaximumDepthDistortion': '00220036',
    'AlongScanSpatialResolution': '00220037',
    'MaximumAlongScanDistortion': '00220038',
    'OphthalmicImageOrientation': '00220039',
    'DepthOfTransverseImage': '00220041',
    'MydriaticAgentConcentrationUnitsSequence': '00220042',
    'AcrossScanSpatialResolution': '00220048',
    'MaximumAcrossScanDistortion': '00220049',
    'MydriaticAgentConcentration': '0022004E',
    'IlluminationWaveLength': '00220055',
    'IlluminationPower': '00220056',
    'IlluminationBandwidth': '00220057',
    'MydriaticAgentSequence': '00220058',
    'OphthalmicAxialMeasurementsRightEyeSequence': '00221007',
    'OphthalmicAxialMeasurementsLeftEyeSequence': '00221008',
    'OphthalmicAxialMeasurementsDeviceType': '00221009',
    'OphthalmicAxialLengthMeasurementsType': '00221010',
    'OphthalmicAxialLengthSequence': '00221012',
    'OphthalmicAxialLength': '00221019',
    'LensStatusCodeSequence': '00221024',
    'VitreousStatusCodeSequence': '00221025',
    'IOLFormulaCodeSequence': '00221028',
    'IOLFormulaDetail': '00221029',
    'KeratometerIndex': '00221033',
    'SourceOfOphthalmicAxialLengthCodeSequence': '00221035',
    'TargetRefraction': '00221037',
    'RefractiveProcedureOccurred': '00221039',
    'RefractiveSurgeryTypeCodeSequence': '00221040',
    'OphthalmicUltrasoundMethodCodeSequence': '00221044',
    'OphthalmicAxialLengthMeasurementsSequence': '00221050',
    'IOLPower': '00221053',
    'PredictedRefractiveError': '00221054',
    'OphthalmicAxialLengthVelocity': '00221059',
    'LensStatusDescription': '00221065',
    'VitreousStatusDescription': '00221066',
    'IOLPowerSequence': '00221090',
    'LensConstantSequence': '00221092',
    'IOLManufacturer': '00221093',
    'LensConstantDescription': '00221094',
    'ImplantName': '00221095',
    'KeratometryMeasurementTypeCodeSequence': '00221096',
    'ImplantPartNumber': '00221097',
    'ReferencedOphthalmicAxialMeasurementsSequence': '00221100',
    'OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence': '00221101',
    'RefractiveErrorBeforeRefractiveSurgeryCodeSequence': '00221103',
    'IOLPowerForExactEmmetropia': '00221121',
    'IOLPowerForExactTargetRefraction': '00221122',
    'AnteriorChamberDepthDefinitionCodeSequence': '00221125',
    'LensThicknessSequence': '00221127',
    'AnteriorChamberDepthSequence': '00221128',
    'LensThickness': '00221130',
    'AnteriorChamberDepth': '00221131',
    'SourceOfLensThicknessDataCodeSequence': '00221132',
    'SourceOfAnteriorChamberDepthDataCodeSequence': '00221133',
    'SourceOfRefractiveMeasurementsSequence': '00221134',
    'SourceOfRefractiveMeasurementsCodeSequence': '00221135',
    'OphthalmicAxialLengthMeasurementModified': '00221140',
    'OphthalmicAxialLengthDataSourceCodeSequence': '00221150',
    'OphthalmicAxialLengthAcquisitionMethodCodeSequence': '00221153',
    'SignalToNoiseRatio': '00221155',
    'OphthalmicAxialLengthDataSourceDescription': '00221159',
    'OphthalmicAxialLengthMeasurementsTotalLengthSequence': '00221210',
    'OphthalmicAxialLengthMeasurementsSegmentalLengthSequence': '00221211',
    'OphthalmicAxialLengthMeasurementsLengthSummationSequence': '00221212',
    'UltrasoundOphthalmicAxialLengthMeasurementsSequence': '00221220',
    'OpticalOphthalmicAxialLengthMeasurementsSequence': '00221225',
    'UltrasoundSelectedOphthalmicAxialLengthSequence': '00221230',
    'OphthalmicAxialLengthSelectionMethodCodeSequence': '00221250',
    'OpticalSelectedOphthalmicAxialLengthSequence': '00221255',
    'SelectedSegmentalOphthalmicAxialLengthSequence': '00221257',
    'SelectedTotalOphthalmicAxialLengthSequence': '00221260',
    'OphthalmicAxialLengthQualityMetricSequence': '00221262',
    'OphthalmicAxialLengthQualityMetricTypeCodeSequence': '00221265',
    'OphthalmicAxialLengthQualityMetricTypeDescription': '00221273',
    'IntraocularLensCalculationsRightEyeSequence': '00221300',
    'IntraocularLensCalculationsLeftEyeSequence': '00221310',
    'ReferencedOphthalmicAxialLengthMeasurementQCImageSequence': '00221330',
    'OphthalmicMappingDeviceType': '00221415',
    'AcquisitionMethodCodeSequence': '00221420',
    'AcquisitionMethodAlgorithmSequence': '00221423',
    'OphthalmicThicknessMapTypeCodeSequence': '00221436',
    'OphthalmicThicknessMappingNormalsSequence': '00221443',
    'RetinalThicknessDefinitionCodeSequence': '00221445',
    'PixelValueMappingToCodedConceptSequence': '00221450',
    'MappedPixelValue': '00221452',
    'PixelValueMappingExplanation': '00221454',
    'OphthalmicThicknessMapQualityThresholdSequence': '00221458',
    'OphthalmicThicknessMapThresholdQualityRating': '00221460',
    'AnatomicStructureReferencePoint': '00221463',
    'RegistrationToLocalizerSequence': '00221465',
    'RegisteredLocalizerUnits': '00221466',
    'RegisteredLocalizerTopLeftHandCorner': '00221467',
    'RegisteredLocalizerBottomRightHandCorner': '00221468',
    'OphthalmicThicknessMapQualityRatingSequence': '00221470',
    'RelevantOPTAttributesSequence': '00221472',
    'TransformationMethodCodeSequence': '00221512',
    'TransformationAlgorithmSequence': '00221513',
    'OphthalmicAxialLengthMethod': '00221515',
    'OphthalmicFOV': '00221517',
    'TwoDimensionalToThreeDimensionalMapSequence': '00221518',
    'WideFieldOphthalmicPhotographyQualityRatingSequence': '00221525',
    'WideFieldOphthalmicPhotographyQualityThresholdSequence': '00221526',
    'WideFieldOphthalmicPhotographyThresholdQualityRating': '00221527',
    'XCoordinatesCenterPixelViewAngle': '00221528',
    'YCoordinatesCenterPixelViewAngle': '00221529',
    'NumberOfMapPoints': '00221530',
    'TwoDimensionalToThreeDimensionalMapData': '00221531',
    'DerivationAlgorithmSequence': '00221612',
    'OphthalmicImageTypeCodeSequence': '00221615',
    'OphthalmicImageTypeDescription': '00221616',
    'ScanPatternTypeCodeSequence': '00221618',
    'ReferencedSurfaceMeshIdentificationSequence': '00221620',
    'OphthalmicVolumetricPropertiesFlag': '00221622',
    'OphthalmicAnatomicReferencePointXCoordinate': '00221624',
    'OphthalmicAnatomicReferencePointYCoordinate': '00221626',
    'OphthalmicEnFaceImageQualityRatingSequence': '00221628',
    'QualityThreshold': '00221630',
    'OCTBscanAnalysisAcquisitionParametersSequence': '00221640',
    'NumberofBscansPerFrame': '00221642',
    'BscanSlabThickness': '00221643',
    'DistanceBetweenBscanSlabs': '00221644',
    'BscanCycleTime': '00221645',
    'BscanCycleTimeVector': '00221646',
    'AscanRate': '00221649',
    'BscanRate': '00221650',
    'SurfaceMeshZPixelOffset': '00221658',
    'VisualFieldHorizontalExtent': '00240010',
    'VisualFieldVerticalExtent': '00240011',
    'VisualFieldShape': '00240012',
    'ScreeningTestModeCodeSequence': '00240016',
    'MaximumStimulusLuminance': '00240018',
    'BackgroundLuminance': '00240020',
    'StimulusColorCodeSequence': '00240021',
    'BackgroundIlluminationColorCodeSequence': '00240024',
    'StimulusArea': '00240025',
    'StimulusPresentationTime': '00240028',
    'FixationSequence': '00240032',
    'FixationMonitoringCodeSequence': '00240033',
    'VisualFieldCatchTrialSequence': '00240034',
    'FixationCheckedQuantity': '00240035',
    'PatientNotProperlyFixatedQuantity': '00240036',
    'PresentedVisualStimuliDataFlag': '00240037',
    'NumberOfVisualStimuli': '00240038',
    'ExcessiveFixationLossesDataFlag': '00240039',
    'ExcessiveFixationLosses': '00240040',
    'StimuliRetestingQuantity': '00240042',
    'CommentsOnPatientPerformanceOfVisualField': '00240044',
    'FalseNegativesEstimateFlag': '00240045',
    'FalseNegativesEstimate': '00240046',
    'NegativeCatchTrialsQuantity': '00240048',
    'FalseNegativesQuantity': '00240050',
    'ExcessiveFalseNegativesDataFlag': '00240051',
    'ExcessiveFalseNegatives': '00240052',
    'FalsePositivesEstimateFlag': '00240053',
    'FalsePositivesEstimate': '00240054',
    'CatchTrialsDataFlag': '00240055',
    'PositiveCatchTrialsQuantity': '00240056',
    'TestPointNormalsDataFlag': '00240057',
    'TestPointNormalsSequence': '00240058',
    'GlobalDeviationProbabilityNormalsFlag': '00240059',
    'FalsePositivesQuantity': '00240060',
    'ExcessiveFalsePositivesDataFlag': '00240061',
    'ExcessiveFalsePositives': '00240062',
    'VisualFieldTestNormalsFlag': '00240063',
    'ResultsNormalsSequence': '00240064',
    'AgeCorrectedSensitivityDeviationAlgorithmSequence': '00240065',
    'GlobalDeviationFromNormal': '00240066',
    'GeneralizedDefectSensitivityDeviationAlgorithmSequence': '00240067',
    'LocalizedDeviationFromNormal': '00240068',
    'PatientReliabilityIndicator': '00240069',
    'VisualFieldMeanSensitivity': '00240070',
    'GlobalDeviationProbability': '00240071',
    'LocalDeviationProbabilityNormalsFlag': '00240072',
    'LocalizedDeviationProbability': '00240073',
    'ShortTermFluctuationCalculated': '00240074',
    'ShortTermFluctuation': '00240075',
    'ShortTermFluctuationProbabilityCalculated': '00240076',
    'ShortTermFluctuationProbability': '00240077',
    'CorrectedLocalizedDeviationFromNormalCalculated': '00240078',
    'CorrectedLocalizedDeviationFromNormal': '00240079',
    'CorrectedLocalizedDeviationFromNormalProbabilityCalculated': '00240080',
    'CorrectedLocalizedDeviationFromNormalProbability': '00240081',
    'GlobalDeviationProbabilitySequence': '00240083',
    'LocalizedDeviationProbabilitySequence': '00240085',
    'FovealSensitivityMeasured': '00240086',
    'FovealSensitivity': '00240087',
    'VisualFieldTestDuration': '00240088',
    'VisualFieldTestPointSequence': '00240089',
    'VisualFieldTestPointXCoordinate': '00240090',
    'VisualFieldTestPointYCoordinate': '00240091',
    'AgeCorrectedSensitivityDeviationValue': '00240092',
    'StimulusResults': '00240093',
    'SensitivityValue': '00240094',
    'RetestStimulusSeen': '00240095',
    'RetestSensitivityValue': '00240096',
    'VisualFieldTestPointNormalsSequence': '00240097',
    'QuantifiedDefect': '00240098',
    'AgeCorrectedSensitivityDeviationProbabilityValue': '00240100',
    'GeneralizedDefectCorrectedSensitivityDeviationFlag': '00240102',
    'GeneralizedDefectCorrectedSensitivityDeviationValue': '00240103',
    'GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue': '00240104',
    'MinimumSensitivityValue': '00240105',
    'BlindSpotLocalized': '00240106',
    'BlindSpotXCoordinate': '00240107',
    'BlindSpotYCoordinate': '00240108',
    'VisualAcuityMeasurementSequence': '00240110',
    'RefractiveParametersUsedOnPatientSequence': '00240112',
    'MeasurementLaterality': '00240113',
    'OphthalmicPatientClinicalInformationLeftEyeSequence': '00240114',
    'OphthalmicPatientClinicalInformationRightEyeSequence': '00240115',
    'FovealPointNormativeDataFlag': '00240117',
    'FovealPointProbabilityValue': '00240118',
    'ScreeningBaselineMeasured': '00240120',
    'ScreeningBaselineMeasuredSequence': '00240122',
    'ScreeningBaselineType': '00240124',
    'ScreeningBaselineValue': '00240126',
    'AlgorithmSource': '00240202',
    'DataSetName': '00240306',
    'DataSetVersion': '00240307',
    'DataSetSource': '00240308',
    'DataSetDescription': '00240309',
    'VisualFieldTestReliabilityGlobalIndexSequence': '00240317',
    'VisualFieldGlobalResultsIndexSequence': '00240320',
    'DataObservationSequence': '00240325',
    'IndexNormalsFlag': '00240338',
    'IndexProbability': '00240341',
    'IndexProbabilitySequence': '00240344',
    'SamplesPerPixel': '00280002',
    'SamplesPerPixelUsed': '00280003',
    'PhotometricInterpretation': '00280004',
    'ImageDimensions': '00280005',
    'PlanarConfiguration': '00280006',
    'NumberOfFrames': '00280008',
    'FrameIncrementPointer': '00280009',
    'FrameDimensionPointer': '0028000A',
    'Rows': '00280010',
    'Columns': '00280011',
    'Planes': '00280012',
    'UltrasoundColorDataPresent': '00280014',
    '': '00280020',
    'PixelSpacing': '00280030',
    'ZoomFactor': '00280031',
    'ZoomCenter': '00280032',
    'PixelAspectRatio': '00280034',
    'ImageFormat': '00280040',
    'ManipulatedImage': '00280050',
    'CorrectedImage': '00280051',
    'CompressionRecognitionCode': '0028005F',
    'CompressionCode': '00280060',
    'CompressionOriginator': '00280061',
    'CompressionLabel': '00280062',
    'CompressionDescription': '00280063',
    'CompressionSequence': '00280065',
    'CompressionStepPointers': '00280066',
    'RepeatInterval': '00280068',
    'BitsGrouped': '00280069',
    'PerimeterTable': '00280070',
    'PerimeterValue': '00280071',
    'PredictorRows': '00280080',
    'PredictorColumns': '00280081',
    'PredictorConstants': '00280082',
    'BlockedPixels': '00280090',
    'BlockRows': '00280091',
    'BlockColumns': '00280092',
    'RowOverlap': '00280093',
    'ColumnOverlap': '00280094',
    'BitsAllocated': '00280100',
    'BitsStored': '00280101',
    'HighBit': '00280102',
    'PixelRepresentation': '00280103',
    'SmallestValidPixelValue': '00280104',
    'LargestValidPixelValue': '00280105',
    'SmallestImagePixelValue': '00280106',
    'LargestImagePixelValue': '00280107',
    'SmallestPixelValueInSeries': '00280108',
    'LargestPixelValueInSeries': '00280109',
    'SmallestImagePixelValueInPlane': '00280110',
    'LargestImagePixelValueInPlane': '00280111',
    'PixelPaddingValue': '00280120',
    'PixelPaddingRangeLimit': '00280121',
    'FloatPixelPaddingValue': '00280122',
    'DoubleFloatPixelPaddingValue': '00280123',
    'FloatPixelPaddingRangeLimit': '00280124',
    'DoubleFloatPixelPaddingRangeLimit': '00280125',
    'ImageLocation': '00280200',
    'QualityControlImage': '00280300',
    'BurnedInAnnotation': '00280301',
    'RecognizableVisualFeatures': '00280302',
    'LongitudinalTemporalInformationModified': '00280303',
    'ReferencedColorPaletteInstanceUID': '00280304',
    'TransformLabel': '00280400',
    'TransformVersionNumber': '00280401',
    'NumberOfTransformSteps': '00280402',
    'SequenceOfCompressedData': '00280403',
    'DetailsOfCoefficients': '00280404',
    'DCTLabel': '00280700',
    'DataBlockDescription': '00280701',
    'DataBlock': '00280702',
    'NormalizationFactorFormat': '00280710',
    'ZonalMapNumberFormat': '00280720',
    'ZonalMapLocation': '00280721',
    'ZonalMapFormat': '00280722',
    'AdaptiveMapFormat': '00280730',
    'CodeNumberFormat': '00280740',
    'PixelSpacingCalibrationType': '00280A02',
    'PixelSpacingCalibrationDescription': '00280A04',
    'PixelIntensityRelationship': '00281040',
    'PixelIntensityRelationshipSign': '00281041',
    'WindowCenter': '00281050',
    'WindowWidth': '00281051',
    'RescaleIntercept': '00281052',
    'RescaleSlope': '00281053',
    'RescaleType': '00281054',
    'WindowCenterWidthExplanation': '00281055',
    'VOILUTFunction': '00281056',
    'GrayScale': '00281080',
    'RecommendedViewingMode': '00281090',
    'GrayLookupTableDescriptor': '00281100',
    'RedPaletteColorLookupTableDescriptor': '00281101',
    'GreenPaletteColorLookupTableDescriptor': '00281102',
    'BluePaletteColorLookupTableDescriptor': '00281103',
    'AlphaPaletteColorLookupTableDescriptor': '00281104',
    'LargeRedPaletteColorLookupTableDescriptor': '00281111',
    'LargeGreenPaletteColorLookupTableDescriptor': '00281112',
    'LargeBluePaletteColorLookupTableDescriptor': '00281113',
    'PaletteColorLookupTableUID': '00281199',
    'GrayLookupTableData': '00281200',
    'RedPaletteColorLookupTableData': '00281201',
    'GreenPaletteColorLookupTableData': '00281202',
    'BluePaletteColorLookupTableData': '00281203',
    'AlphaPaletteColorLookupTableData': '00281204',
    'LargeRedPaletteColorLookupTableData': '00281211',
    'LargeGreenPaletteColorLookupTableData': '00281212',
    'LargeBluePaletteColorLookupTableData': '00281213',
    'LargePaletteColorLookupTableUID': '00281214',
    'SegmentedRedPaletteColorLookupTableData': '00281221',
    'SegmentedGreenPaletteColorLookupTableData': '00281222',
    'SegmentedBluePaletteColorLookupTableData': '00281223',
    'SegmentedAlphaPaletteColorLookupTableData': '00281224',
    'StoredValueColorRangeSequence': '00281230',
    'MinimumStoredValueMapped': '00281231',
    'MaximumStoredValueMapped': '00281232',
    'BreastImplantPresent': '00281300',
    'PartialView': '00281350',
    'PartialViewDescription': '00281351',
    'PartialViewCodeSequence': '00281352',
    'SpatialLocationsPreserved': '0028135A',
    'DataFrameAssignmentSequence': '00281401',
    'DataPathAssignment': '00281402',
    'BitsMappedToColorLookupTable': '00281403',
    '00281404': ('BlendingLUT1Sequence'),
    '00281405': ('BlendingLUT1TransferFunction'),
    'BlendingWeightConstant': '00281406',
    'BlendingLookupTableDescriptor': '00281407',
    'BlendingLookupTableData': '00281408',
    'EnhancedPaletteColorLookupTableSequence': '0028140B',
    '0028140C': ('BlendingLUT2Sequence'),
    '0028140D': ('BlendingLUT2TransferFunction'),
    'DataPathID': '0028140E',
    'RGBLUTTransferFunction': '0028140F',
    'AlphaLUTTransferFunction': '00281410',
    'ICCProfile': '00282000',
    'ColorSpace': '00282002',
    'LossyImageCompression': '00282110',
    'LossyImageCompressionRatio': '00282112',
    'LossyImageCompressionMethod': '00282114',
    'ModalityLUTSequence': '00283000',
    'LUTDescriptor': '00283002',
    'LUTExplanation': '00283003',
    'ModalityLUTType': '00283004',
    'LUTData': '00283006',
    'VOILUTSequence': '00283010',
    'SoftcopyVOILUTSequence': '00283110',
    'ImagePresentationComments': '00284000',
    'BiPlaneAcquisitionSequence': '00285000',
    'RepresentativeFrameNumber': '00286010',
    'FrameNumbersOfInterest': '00286020',
    'FrameOfInterestDescription': '00286022',
    'FrameOfInterestType': '00286023',
    'MaskPointers': '00286030',
    'RWavePointer': '00286040',
    'MaskSubtractionSequence': '00286100',
    'MaskOperation': '00286101',
    'ApplicableFrameRange': '00286102',
    'MaskFrameNumbers': '00286110',
    'ContrastFrameAveraging': '00286112',
    'MaskSubPixelShift': '00286114',
    'TIDOffset': '00286120',
    'MaskOperationExplanation': '00286190',
    'EquipmentAdministratorSequence': '00287000',
    'NumberOfDisplaySubsystems': '00287001',
    'CurrentConfigurationID': '00287002',
    'DisplaySubsystemID': '00287003',
    'DisplaySubsystemName': '00287004',
    'DisplaySubsystemDescription': '00287005',
    'SystemStatus': '00287006',
    'SystemStatusComment': '00287007',
    'TargetLuminanceCharacteristicsSequence': '00287008',
    'LuminanceCharacteristicsID': '00287009',
    'DisplaySubsystemConfigurationSequence': '0028700A',
    'ConfigurationID': '0028700B',
    'ConfigurationName': '0028700C',
    'ConfigurationDescription': '0028700D',
    'ReferencedTargetLuminanceCharacteristicsID': '0028700E',
    'QAResultsSequence': '0028700F',
    'DisplaySubsystemQAResultsSequence': '00287010',
    'ConfigurationQAResultsSequence': '00287011',
    'MeasurementEquipmentSequence': '00287012',
    'MeasurementFunctions': '00287013',
    'MeasurementEquipmentType': '00287014',
    'VisualEvaluationResultSequence': '00287015',
    'DisplayCalibrationResultSequence': '00287016',
    'DDLValue': '00287017',
    'CIExyWhitePoint': '00287018',
    'DisplayFunctionType': '00287019',
    'GammaValue': '0028701A',
    'NumberOfLuminancePoints': '0028701B',
    'LuminanceResponseSequence': '0028701C',
    'TargetMinimumLuminance': '0028701D',
    'TargetMaximumLuminance': '0028701E',
    'LuminanceValue': '0028701F',
    'LuminanceResponseDescription': '00287020',
    'WhitePointFlag': '00287021',
    'DisplayDeviceTypeCodeSequence': '00287022',
    'DisplaySubsystemSequence': '00287023',
    'LuminanceResultSequence': '00287024',
    'AmbientLightValueSource': '00287025',
    'MeasuredCharacteristics': '00287026',
    'LuminanceUniformityResultSequence': '00287027',
    'VisualEvaluationTestSequence': '00287028',
    'TestResult': '00287029',
    'TestResultComment': '0028702A',
    'TestImageValidation': '0028702B',
    'TestPatternCodeSequence': '0028702C',
    'MeasurementPatternCodeSequence': '0028702D',
    'VisualEvaluationMethodCodeSequence': '0028702E',
    'PixelDataProviderURL': '00287FE0',
    'DataPointRows': '00289001',
    'DataPointColumns': '00289002',
    'SignalDomainColumns': '00289003',
    'LargestMonochromePixelValue': '00289099',
    'DataRepresentation': '00289108',
    'PixelMeasuresSequence': '00289110',
    'FrameVOILUTSequence': '00289132',
    'PixelValueTransformationSequence': '00289145',
    'SignalDomainRows': '00289235',
    'DisplayFilterPercentage': '00289411',
    'FramePixelShiftSequence': '00289415',
    'SubtractionItemID': '00289416',
    'PixelIntensityRelationshipLUTSequence': '00289422',
    'FramePixelDataPropertiesSequence': '00289443',
    'GeometricalProperties': '00289444',
    'GeometricMaximumDistortion': '00289445',
    'ImageProcessingApplied': '00289446',
    'MaskSelectionMode': '00289454',
    'LUTFunction': '00289474',
    'MaskVisibilityPercentage': '00289478',
    'PixelShiftSequence': '00289501',
    'RegionPixelShiftSequence': '00289502',
    'VerticesOfTheRegion': '00289503',
    'MultiFramePresentationSequence': '00289505',
    'PixelShiftFrameRange': '00289506',
    'LUTFrameRange': '00289507',
    'ImageToEquipmentMappingMatrix': '00289520',
    'EquipmentCoordinateSystemIdentification': '00289537',
    'StudyStatusID': '0032000A',
    'StudyPriorityID': '0032000C',
    'StudyIDIssuer': '00320012',
    'StudyVerifiedDate': '00320032',
    'StudyVerifiedTime': '00320033',
    'StudyReadDate': '00320034',
    'StudyReadTime': '00320035',
    'ScheduledStudyStartDate': '00321000',
    'ScheduledStudyStartTime': '00321001',
    'ScheduledStudyStopDate': '00321010',
    'ScheduledStudyStopTime': '00321011',
    'ScheduledStudyLocation': '00321020',
    'ScheduledStudyLocationAETitle': '00321021',
    'ReasonForStudy': '00321030',
    'RequestingPhysicianIdentificationSequence': '00321031',
    'RequestingPhysician': '00321032',
    'RequestingService': '00321033',
    'RequestingServiceCodeSequence': '00321034',
    'StudyArrivalDate': '00321040',
    'StudyArrivalTime': '00321041',
    'StudyCompletionDate': '00321050',
    'StudyCompletionTime': '00321051',
    'StudyComponentStatusID': '00321055',
    'RequestedProcedureDescription': '00321060',
    'RequestedProcedureCodeSequence': '00321064',
    'RequestedContrastAgent': '00321070',
    'StudyComments': '00324000',
    'ReferencedPatientAliasSequence': '00380004',
    'VisitStatusID': '00380008',
    'AdmissionID': '00380010',
    'IssuerOfAdmissionID': '00380011',
    'IssuerOfAdmissionIDSequence': '00380014',
    'RouteOfAdmissions': '00380016',
    'ScheduledAdmissionDate': '0038001A',
    'ScheduledAdmissionTime': '0038001B',
    'ScheduledDischargeDate': '0038001C',
    'ScheduledDischargeTime': '0038001D',
    'ScheduledPatientInstitutionResidence': '0038001E',
    'AdmittingDate': '00380020',
    'AdmittingTime': '00380021',
    'DischargeDate': '00380030',
    'DischargeTime': '00380032',
    'DischargeDiagnosisDescription': '00380040',
    'DischargeDiagnosisCodeSequence': '00380044',
    'SpecialNeeds': '00380050',
    'ServiceEpisodeID': '00380060',
    'IssuerOfServiceEpisodeID': '00380061',
    'ServiceEpisodeDescription': '00380062',
    'IssuerOfServiceEpisodeIDSequence': '00380064',
    'PertinentDocumentsSequence': '00380100',
    'PertinentResourcesSequence': '00380101',
    'ResourceDescription': '00380102',
    'CurrentPatientLocation': '00380300',
    'PatientInstitutionResidence': '00380400',
    'PatientState': '00380500',
    'PatientClinicalTrialParticipationSequence': '00380502',
    'VisitComments': '00384000',
    'WaveformOriginality': '003A0004',
    'NumberOfWaveformChannels': '003A0005',
    'NumberOfWaveformSamples': '003A0010',
    'SamplingFrequency': '003A001A',
    'MultiplexGroupLabel': '003A0020',
    'ChannelDefinitionSequence': '003A0200',
    'WaveformChannelNumber': '003A0202',
    'ChannelLabel': '003A0203',
    'ChannelStatus': '003A0205',
    'ChannelSourceSequence': '003A0208',
    'ChannelSourceModifiersSequence': '003A0209',
    'SourceWaveformSequence': '003A020A',
    'ChannelDerivationDescription': '003A020C',
    'ChannelSensitivity': '003A0210',
    'ChannelSensitivityUnitsSequence': '003A0211',
    'ChannelSensitivityCorrectionFactor': '003A0212',
    'ChannelBaseline': '003A0213',
    'ChannelTimeSkew': '003A0214',
    'ChannelSampleSkew': '003A0215',
    'ChannelOffset': '003A0218',
    'WaveformBitsStored': '003A021A',
    'FilterLowFrequency': '003A0220',
    'FilterHighFrequency': '003A0221',
    'NotchFilterFrequency': '003A0222',
    'NotchFilterBandwidth': '003A0223',
    'WaveformDataDisplayScale': '003A0230',
    'WaveformDisplayBackgroundCIELabValue': '003A0231',
    'WaveformPresentationGroupSequence': '003A0240',
    'PresentationGroupNumber': '003A0241',
    'ChannelDisplaySequence': '003A0242',
    'ChannelRecommendedDisplayCIELabValue': '003A0244',
    'ChannelPosition': '003A0245',
    'DisplayShadingFlag': '003A0246',
    'FractionalChannelDisplayScale': '003A0247',
    'AbsoluteChannelDisplayScale': '003A0248',
    'MultiplexedAudioChannelsDescriptionCodeSequence': '003A0300',
    'ChannelIdentificationCode': '003A0301',
    'ChannelMode': '003A0302',
    'ScheduledStationAETitle': '00400001',
    'ScheduledProcedureStepStartDate': '00400002',
    'ScheduledProcedureStepStartTime': '00400003',
    'ScheduledProcedureStepEndDate': '00400004',
    'ScheduledProcedureStepEndTime': '00400005',
    'ScheduledPerformingPhysicianName': '00400006',
    'ScheduledProcedureStepDescription': '00400007',
    'ScheduledProtocolCodeSequence': '00400008',
    'ScheduledProcedureStepID': '00400009',
    'StageCodeSequence': '0040000A',
    'ScheduledPerformingPhysicianIdentificationSequence': '0040000B',
    'ScheduledStationName': '00400010',
    'ScheduledProcedureStepLocation': '00400011',
    'PreMedication': '00400012',
    'ScheduledProcedureStepStatus': '00400020',
    'OrderPlacerIdentifierSequence': '00400026',
    'OrderFillerIdentifierSequence': '00400027',
    'LocalNamespaceEntityID': '00400031',
    'UniversalEntityID': '00400032',
    'UniversalEntityIDType': '00400033',
    'IdentifierTypeCode': '00400035',
    'AssigningFacilitySequence': '00400036',
    'AssigningJurisdictionCodeSequence': '00400039',
    'AssigningAgencyOrDepartmentCodeSequence': '0040003A',
    'ScheduledProcedureStepSequence': '00400100',
    'ReferencedNonImageCompositeSOPInstanceSequence': '00400220',
    'PerformedStationAETitle': '00400241',
    'PerformedStationName': '00400242',
    'PerformedLocation': '00400243',
    'PerformedProcedureStepStartDate': '00400244',
    'PerformedProcedureStepStartTime': '00400245',
    'PerformedProcedureStepEndDate': '00400250',
    'PerformedProcedureStepEndTime': '00400251',
    'PerformedProcedureStepStatus': '00400252',
    'PerformedProcedureStepID': '00400253',
    'PerformedProcedureStepDescription': '00400254',
    'PerformedProcedureTypeDescription': '00400255',
    'PerformedProtocolCodeSequence': '00400260',
    'PerformedProtocolType': '00400261',
    'ScheduledStepAttributesSequence': '00400270',
    'RequestAttributesSequence': '00400275',
    'CommentsOnThePerformedProcedureStep': '00400280',
    'PerformedProcedureStepDiscontinuationReasonCodeSequence': '00400281',
    'QuantitySequence': '00400293',
    'Quantity': '00400294',
    'MeasuringUnitsSequence': '00400295',
    'BillingItemSequence': '00400296',
    'TotalTimeOfFluoroscopy': '00400300',
    'TotalNumberOfExposures': '00400301',
    'EntranceDose': '00400302',
    'ExposedArea': '00400303',
    'DistanceSourceToEntrance': '00400306',
    'DistanceSourceToSupport': '00400307',
    'ExposureDoseSequence': '0040030E',
    'CommentsOnRadiationDose': '00400310',
    'XRayOutput': '00400312',
    'HalfValueLayer': '00400314',
    'OrganDose': '00400316',
    'OrganExposed': '00400318',
    'BillingProcedureStepSequence': '00400320',
    'FilmConsumptionSequence': '00400321',
    'BillingSuppliesAndDevicesSequence': '00400324',
    'ReferencedProcedureStepSequence': '00400330',
    'PerformedSeriesSequence': '00400340',
    'CommentsOnTheScheduledProcedureStep': '00400400',
    'ProtocolContextSequence': '00400440',
    'ContentItemModifierSequence': '00400441',
    'ScheduledSpecimenSequence': '00400500',
    'SpecimenAccessionNumber': '0040050A',
    'ContainerIdentifier': '00400512',
    'IssuerOfTheContainerIdentifierSequence': '00400513',
    'AlternateContainerIdentifierSequence': '00400515',
    'ContainerTypeCodeSequence': '00400518',
    'ContainerDescription': '0040051A',
    'ContainerComponentSequence': '00400520',
    'SpecimenSequence': '00400550',
    'SpecimenIdentifier': '00400551',
    'SpecimenDescriptionSequenceTrial': '00400552',
    'SpecimenDescriptionTrial': '00400553',
    'SpecimenUID': '00400554',
    'AcquisitionContextSequence': '00400555',
    'AcquisitionContextDescription': '00400556',
    'SpecimenDescriptionSequence': '00400560',
    'IssuerOfTheSpecimenIdentifierSequence': '00400562',
    'SpecimenTypeCodeSequence': '0040059A',
    'SpecimenShortDescription': '00400600',
    'SpecimenDetailedDescription': '00400602',
    'SpecimenPreparationSequence': '00400610',
    'SpecimenPreparationStepContentItemSequence': '00400612',
    'SpecimenLocalizationContentItemSequence': '00400620',
    'SlideIdentifier': '004006FA',
    'WholeSlideMicroscopyImageFrameTypeSequence': '00400710',
    'ImageCenterPointCoordinatesSequence': '0040071A',
    'XOffsetInSlideCoordinateSystem': '0040072A',
    'YOffsetInSlideCoordinateSystem': '0040073A',
    'ZOffsetInSlideCoordinateSystem': '0040074A',
    'PixelSpacingSequence': '004008D8',
    'CoordinateSystemAxisCodeSequence': '004008DA',
    'MeasurementUnitsCodeSequence': '004008EA',
    'VitalStainCodeSequenceTrial': '004009F8',
    'RequestedProcedureID': '00401001',
    'ReasonForTheRequestedProcedure': '00401002',
    'RequestedProcedurePriority': '00401003',
    'PatientTransportArrangements': '00401004',
    'RequestedProcedureLocation': '00401005',
    'PlacerOrderNumberProcedure': '00401006',
    'FillerOrderNumberProcedure': '00401007',
    'ConfidentialityCode': '00401008',
    'ReportingPriority': '00401009',
    'ReasonForRequestedProcedureCodeSequence': '0040100A',
    'NamesOfIntendedRecipientsOfResults': '00401010',
    'IntendedRecipientsOfResultsIdentificationSequence': '00401011',
    'ReasonForPerformedProcedureCodeSequence': '00401012',
    'RequestedProcedureDescriptionTrial': '00401060',
    'PersonIdentificationCodeSequence': '00401101',
    'PersonAddress': '00401102',
    'PersonTelephoneNumbers': '00401103',
    'PersonTelecomInformation': '00401104',
    'RequestedProcedureComments': '00401400',
    'ReasonForTheImagingServiceRequest': '00402001',
    'IssueDateOfImagingServiceRequest': '00402004',
    'IssueTimeOfImagingServiceRequest': '00402005',
    'PlacerOrderNumberImagingServiceRequestRetired': '00402006',
    'FillerOrderNumberImagingServiceRequestRetired': '00402007',
    'OrderEnteredBy': '00402008',
    'OrderEntererLocation': '00402009',
    'OrderCallbackPhoneNumber': '00402010',
    'OrderCallbackTelecomInformation': '00402011',
    'PlacerOrderNumberImagingServiceRequest': '00402016',
    'FillerOrderNumberImagingServiceRequest': '00402017',
    'ImagingServiceRequestComments': '00402400',
    'ConfidentialityConstraintOnPatientDataDescription': '00403001',
    'GeneralPurposeScheduledProcedureStepStatus': '00404001',
    'GeneralPurposePerformedProcedureStepStatus': '00404002',
    'GeneralPurposeScheduledProcedureStepPriority': '00404003',
    'ScheduledProcessingApplicationsCodeSequence': '00404004',
    'ScheduledProcedureStepStartDateTime': '00404005',
    'MultipleCopiesFlag': '00404006',
    'PerformedProcessingApplicationsCodeSequence': '00404007',
    'ScheduledProcedureStepExpirationDateTime': '00404008',
    'HumanPerformerCodeSequence': '00404009',
    'ScheduledProcedureStepModificationDateTime': '00404010',
    'ExpectedCompletionDateTime': '00404011',
    'ResultingGeneralPurposePerformedProcedureStepsSequence': '00404015',
    'ReferencedGeneralPurposeScheduledProcedureStepSequence': '00404016',
    'ScheduledWorkitemCodeSequence': '00404018',
    'PerformedWorkitemCodeSequence': '00404019',
    'InputAvailabilityFlag': '00404020',
    'InputInformationSequence': '00404021',
    'RelevantInformationSequence': '00404022',
    'ReferencedGeneralPurposeScheduledProcedureStepTransactionUID': '00404023',
    'ScheduledStationNameCodeSequence': '00404025',
    'ScheduledStationClassCodeSequence': '00404026',
    'ScheduledStationGeographicLocationCodeSequence': '00404027',
    'PerformedStationNameCodeSequence': '00404028',
    'PerformedStationClassCodeSequence': '00404029',
    'PerformedStationGeographicLocationCodeSequence': '00404030',
    'RequestedSubsequentWorkitemCodeSequence': '00404031',
    'NonDICOMOutputCodeSequence': '00404032',
    'OutputInformationSequence': '00404033',
    'ScheduledHumanPerformersSequence': '00404034',
    'ActualHumanPerformersSequence': '00404035',
    'HumanPerformerOrganization': '00404036',
    'HumanPerformerName': '00404037',
    'RawDataHandling': '00404040',
    'InputReadinessState': '00404041',
    'PerformedProcedureStepStartDateTime': '00404050',
    'PerformedProcedureStepEndDateTime': '00404051',
    'ProcedureStepCancellationDateTime': '00404052',
    'OutputDestinationSequence': '00404070',
    'DICOMStorageSequence': '00404071',
    'STOWRSStorageSequence': '00404072',
    'StorageURL': '00404073',
    'XDSStorageSequence': '00404074',
    'EntranceDoseInmGy': '00408302',
    'EntranceDoseDerivation': '00408303',
    'ParametricMapFrameTypeSequence': '00409092',
    'ReferencedImageRealWorldValueMappingSequence': '00409094',
    'RealWorldValueMappingSequence': '00409096',
    'PixelValueMappingCodeSequence': '00409098',
    'LUTLabel': '00409210',
    'RealWorldValueLastValueMapped': '00409211',
    'RealWorldValueLUTData': '00409212',
    'DoubleFloatRealWorldValueLastValueMapped': '00409213',
    'DoubleFloatRealWorldValueFirstValueMapped': '00409214',
    'RealWorldValueFirstValueMapped': '00409216',
    'QuantityDefinitionSequence': '00409220',
    'RealWorldValueIntercept': '00409224',
    'RealWorldValueSlope': '00409225',
    'FindingsFlagTrial': '0040A007',
    'RelationshipType': '0040A010',
    'FindingsSequenceTrial': '0040A020',
    'FindingsGroupUIDTrial': '0040A021',
    'ReferencedFindingsGroupUIDTrial': '0040A022',
    'FindingsGroupRecordingDateTrial': '0040A023',
    'FindingsGroupRecordingTimeTrial': '0040A024',
    'FindingsSourceCategoryCodeSequenceTrial': '0040A026',
    'VerifyingOrganization': '0040A027',
    'DocumentingOrganizationIdentifierCodeSequenceTrial': '0040A028',
    'VerificationDateTime': '0040A030',
    'ObservationDateTime': '0040A032',
    'ValueType': '0040A040',
    'ConceptNameCodeSequence': '0040A043',
    'MeasurementPrecisionDescriptionTrial': '0040A047',
    'ContinuityOfContent': '0040A050',
    'UrgencyOrPriorityAlertsTrial': '0040A057',
    'SequencingIndicatorTrial': '0040A060',
    'DocumentIdentifierCodeSequenceTrial': '0040A066',
    'DocumentAuthorTrial': '0040A067',
    'DocumentAuthorIdentifierCodeSequenceTrial': '0040A068',
    'IdentifierCodeSequenceTrial': '0040A070',
    'VerifyingObserverSequence': '0040A073',
    'ObjectBinaryIdentifierTrial': '0040A074',
    'VerifyingObserverName': '0040A075',
    'DocumentingObserverIdentifierCodeSequenceTrial': '0040A076',
    'AuthorObserverSequence': '0040A078',
    'ParticipantSequence': '0040A07A',
    'CustodialOrganizationSequence': '0040A07C',
    'ParticipationType': '0040A080',
    'ParticipationDateTime': '0040A082',
    'ObserverType': '0040A084',
    'ProcedureIdentifierCodeSequenceTrial': '0040A085',
    'VerifyingObserverIdentificationCodeSequence': '0040A088',
    'ObjectDirectoryBinaryIdentifierTrial': '0040A089',
    'EquivalentCDADocumentSequence': '0040A090',
    'ReferencedWaveformChannels': '0040A0B0',
    'DateOfDocumentOrVerbalTransactionTrial': '0040A110',
    'TimeOfDocumentCreationOrVerbalTransactionTrial': '0040A112',
    'DateTime': '0040A120',
    'Date': '0040A121',
    'Time': '0040A122',
    'PersonName': '0040A123',
    'UID': '0040A124',
    'ReportStatusIDTrial': '0040A125',
    'TemporalRangeType': '0040A130',
    'ReferencedSamplePositions': '0040A132',
    'ReferencedFrameNumbers': '0040A136',
    'ReferencedTimeOffsets': '0040A138',
    'ReferencedDateTime': '0040A13A',
    'TextValue': '0040A160',
    'FloatingPointValue': '0040A161',
    'RationalNumeratorValue': '0040A162',
    'RationalDenominatorValue': '0040A163',
    'ObservationCategoryCodeSequenceTrial': '0040A167',
    'ConceptCodeSequence': '0040A168',
    'BibliographicCitationTrial': '0040A16A',
    'PurposeOfReferenceCodeSequence': '0040A170',
    'ObservationUID': '0040A171',
    'ReferencedObservationUIDTrial': '0040A172',
    'ReferencedObservationClassTrial': '0040A173',
    'ReferencedObjectObservationClassTrial': '0040A174',
    'AnnotationGroupNumber': '0040A180',
    'ObservationDateTrial': '0040A192',
    'ObservationTimeTrial': '0040A193',
    'MeasurementAutomationTrial': '0040A194',
    'ModifierCodeSequence': '0040A195',
    'IdentificationDescriptionTrial': '0040A224',
    'CoordinatesSetGeometricTypeTrial': '0040A290',
    'AlgorithmCodeSequenceTrial': '0040A296',
    'AlgorithmDescriptionTrial': '0040A297',
    'PixelCoordinatesSetTrial': '0040A29A',
    'MeasuredValueSequence': '0040A300',
    'NumericValueQualifierCodeSequence': '0040A301',
    'CurrentObserverTrial': '0040A307',
    'NumericValue': '0040A30A',
    'ReferencedAccessionSequenceTrial': '0040A313',
    'ReportStatusCommentTrial': '0040A33A',
    'ProcedureContextSequenceTrial': '0040A340',
    'VerbalSourceTrial': '0040A352',
    'AddressTrial': '0040A353',
    'TelephoneNumberTrial': '0040A354',
    'VerbalSourceIdentifierCodeSequenceTrial': '0040A358',
    'PredecessorDocumentsSequence': '0040A360',
    'ReferencedRequestSequence': '0040A370',
    'PerformedProcedureCodeSequence': '0040A372',
    'CurrentRequestedProcedureEvidenceSequence': '0040A375',
    'ReportDetailSequenceTrial': '0040A380',
    'PertinentOtherEvidenceSequence': '0040A385',
    '0040A390': ('HL7StructuredDocumentReferenceSequence'),
    'ObservationSubjectUIDTrial': '0040A402',
    'ObservationSubjectClassTrial': '0040A403',
    'ObservationSubjectTypeCodeSequenceTrial': '0040A404',
    'CompletionFlag': '0040A491',
    'CompletionFlagDescription': '0040A492',
    'VerificationFlag': '0040A493',
    'ArchiveRequested': '0040A494',
    'PreliminaryFlag': '0040A496',
    'ContentTemplateSequence': '0040A504',
    'IdenticalDocumentsSequence': '0040A525',
    'ObservationSubjectContextFlagTrial': '0040A600',
    'ObserverContextFlagTrial': '0040A601',
    'ProcedureContextFlagTrial': '0040A603',
    'ContentSequence': '0040A730',
    'RelationshipSequenceTrial': '0040A731',
    'RelationshipTypeCodeSequenceTrial': '0040A732',
    'LanguageCodeSequenceTrial': '0040A744',
    'UniformResourceLocatorTrial': '0040A992',
    'WaveformAnnotationSequence': '0040B020',
    'TemplateIdentifier': '0040DB00',
    'TemplateVersion': '0040DB06',
    'TemplateLocalVersion': '0040DB07',
    'TemplateExtensionFlag': '0040DB0B',
    'TemplateExtensionOrganizationUID': '0040DB0C',
    'TemplateExtensionCreatorUID': '0040DB0D',
    'ReferencedContentItemIdentifier': '0040DB73',
    '0040E001': ('HL7InstanceIdentifier'),
    '0040E004': ('HL7DocumentEffectiveTime'),
    '0040E006': ('HL7DocumentTypeCodeSequence'),
    'DocumentClassCodeSequence': '0040E008',
    'RetrieveURI': '0040E010',
    'RetrieveLocationUID': '0040E011',
    'TypeOfInstances': '0040E020',
    'DICOMRetrievalSequence': '0040E021',
    'DICOMMediaRetrievalSequence': '0040E022',
    'WADORetrievalSequence': '0040E023',
    'XDSRetrievalSequence': '0040E024',
    'WADORSRetrievalSequence': '0040E025',
    'RepositoryUniqueID': '0040E030',
    'HomeCommunityID': '0040E031',
    'DocumentTitle': '00420010',
    'EncapsulatedDocument': '00420011',
    'MIMETypeOfEncapsulatedDocument': '00420012',
    'SourceInstanceSequence': '00420013',
    'ListOfMIMETypes': '00420014',
    'ProductPackageIdentifier': '00440001',
    'SubstanceAdministrationApproval': '00440002',
    'ApprovalStatusFurtherDescription': '00440003',
    'ApprovalStatusDateTime': '00440004',
    'ProductTypeCodeSequence': '00440007',
    'ProductName': '00440008',
    'ProductDescription': '00440009',
    'ProductLotIdentifier': '0044000A',
    'ProductExpirationDateTime': '0044000B',
    'SubstanceAdministrationDateTime': '00440010',
    'SubstanceAdministrationNotes': '00440011',
    'SubstanceAdministrationDeviceID': '00440012',
    'ProductParameterSequence': '00440013',
    'SubstanceAdministrationParameterSequence': '00440019',
    'ApprovalSequence': '00440100',
    'AssertionCodeSequence': '00440101',
    'AssertionUID': '00440102',
    'AsserterIdentificationSequence': '00440103',
    'AssertionDateTime': '00440104',
    'AssertionExpirationDateTime': '00440105',
    'AssertionComments': '00440106',
    'RelatedAssertionSequence': '00440107',
    'ReferencedAssertionUID': '00440108',
    'ApprovalSubjectSequence': '00440109',
    'OrganizationalRoleCodeSequence': '0044010A',
    'LensDescription': '00460012',
    'RightLensSequence': '00460014',
    'LeftLensSequence': '00460015',
    'UnspecifiedLateralityLensSequence': '00460016',
    'CylinderSequence': '00460018',
    'PrismSequence': '00460028',
    'HorizontalPrismPower': '00460030',
    'HorizontalPrismBase': '00460032',
    'VerticalPrismPower': '00460034',
    'VerticalPrismBase': '00460036',
    'LensSegmentType': '00460038',
    'OpticalTransmittance': '00460040',
    'ChannelWidth': '00460042',
    'PupilSize': '00460044',
    'CornealSize': '00460046',
    'AutorefractionRightEyeSequence': '00460050',
    'AutorefractionLeftEyeSequence': '00460052',
    'DistancePupillaryDistance': '00460060',
    'NearPupillaryDistance': '00460062',
    'IntermediatePupillaryDistance': '00460063',
    'OtherPupillaryDistance': '00460064',
    'KeratometryRightEyeSequence': '00460070',
    'KeratometryLeftEyeSequence': '00460071',
    'SteepKeratometricAxisSequence': '00460074',
    'RadiusOfCurvature': '00460075',
    'KeratometricPower': '00460076',
    'KeratometricAxis': '00460077',
    'FlatKeratometricAxisSequence': '00460080',
    'BackgroundColor': '00460092',
    'Optotype': '00460094',
    'OptotypePresentation': '00460095',
    'SubjectiveRefractionRightEyeSequence': '00460097',
    'SubjectiveRefractionLeftEyeSequence': '00460098',
    'AddNearSequence': '00460100',
    'AddIntermediateSequence': '00460101',
    'AddOtherSequence': '00460102',
    'AddPower': '00460104',
    'ViewingDistance': '00460106',
    'VisualAcuityTypeCodeSequence': '00460121',
    'VisualAcuityRightEyeSequence': '00460122',
    'VisualAcuityLeftEyeSequence': '00460123',
    'VisualAcuityBothEyesOpenSequence': '00460124',
    'ViewingDistanceType': '00460125',
    'VisualAcuityModifiers': '00460135',
    'DecimalVisualAcuity': '00460137',
    'OptotypeDetailedDefinition': '00460139',
    'ReferencedRefractiveMeasurementsSequence': '00460145',
    'SpherePower': '00460146',
    'CylinderPower': '00460147',
    'CornealTopographySurface': '00460201',
    'CornealVertexLocation': '00460202',
    'PupilCentroidXCoordinate': '00460203',
    'PupilCentroidYCoordinate': '00460204',
    'EquivalentPupilRadius': '00460205',
    'CornealTopographyMapTypeCodeSequence': '00460207',
    'VerticesOfTheOutlineOfPupil': '00460208',
    'CornealTopographyMappingNormalsSequence': '00460210',
    'MaximumCornealCurvatureSequence': '00460211',
    'MaximumCornealCurvature': '00460212',
    'MaximumCornealCurvatureLocation': '00460213',
    'MinimumKeratometricSequence': '00460215',
    'SimulatedKeratometricCylinderSequence': '00460218',
    'AverageCornealPower': '00460220',
    'CornealISValue': '00460224',
    'AnalyzedArea': '00460227',
    'SurfaceRegularityIndex': '00460230',
    'SurfaceAsymmetryIndex': '00460232',
    'CornealEccentricityIndex': '00460234',
    'KeratoconusPredictionIndex': '00460236',
    'DecimalPotentialVisualAcuity': '00460238',
    'CornealTopographyMapQualityEvaluation': '00460242',
    'SourceImageCornealProcessedDataSequence': '00460244',
    'CornealPointLocation': '00460247',
    'CornealPointEstimated': '00460248',
    'AxialPower': '00460249',
    'TangentialPower': '00460250',
    'RefractivePower': '00460251',
    'RelativeElevation': '00460252',
    'CornealWavefront': '00460253',
    'ImagedVolumeWidth': '00480001',
    'ImagedVolumeHeight': '00480002',
    'ImagedVolumeDepth': '00480003',
    'TotalPixelMatrixColumns': '00480006',
    'TotalPixelMatrixRows': '00480007',
    'TotalPixelMatrixOriginSequence': '00480008',
    'SpecimenLabelInImage': '00480010',
    'FocusMethod': '00480011',
    'ExtendedDepthOfField': '00480012',
    'NumberOfFocalPlanes': '00480013',
    'DistanceBetweenFocalPlanes': '00480014',
    'RecommendedAbsentPixelCIELabValue': '00480015',
    'IlluminatorTypeCodeSequence': '00480100',
    'ImageOrientationSlide': '00480102',
    'OpticalPathSequence': '00480105',
    'OpticalPathIdentifier': '00480106',
    'OpticalPathDescription': '00480107',
    'IlluminationColorCodeSequence': '00480108',
    'SpecimenReferenceSequence': '00480110',
    'CondenserLensPower': '00480111',
    'ObjectiveLensPower': '00480112',
    'ObjectiveLensNumericalAperture': '00480113',
    'PaletteColorLookupTableSequence': '00480120',
    'ReferencedImageNavigationSequence': '00480200',
    'TopLeftHandCornerOfLocalizerArea': '00480201',
    'BottomRightHandCornerOfLocalizerArea': '00480202',
    'OpticalPathIdentificationSequence': '00480207',
    'PlanePositionSlideSequence': '0048021A',
    'ColumnPositionInTotalImagePixelMatrix': '0048021E',
    'RowPositionInTotalImagePixelMatrix': '0048021F',
    'PixelOriginInterpretation': '00480301',
    'NumberOfOpticalPaths': '00480302',
    'TotalPixelMatrixFocalPlanes': '00480303',
    'CalibrationImage': '00500004',
    'DeviceSequence': '00500010',
    'ContainerComponentTypeCodeSequence': '00500012',
    'ContainerComponentThickness': '00500013',
    'DeviceLength': '00500014',
    'ContainerComponentWidth': '00500015',
    'DeviceDiameter': '00500016',
    'DeviceDiameterUnits': '00500017',
    'DeviceVolume': '00500018',
    'InterMarkerDistance': '00500019',
    'ContainerComponentMaterial': '0050001A',
    'ContainerComponentID': '0050001B',
    'ContainerComponentLength': '0050001C',
    'ContainerComponentDiameter': '0050001D',
    'ContainerComponentDescription': '0050001E',
    'DeviceDescription': '00500020',
    'ContrastBolusIngredientPercentByVolume': '00520001',
    'OCTFocalDistance': '00520002',
    'BeamSpotSize': '00520003',
    'EffectiveRefractiveIndex': '00520004',
    'OCTAcquisitionDomain': '00520006',
    'OCTOpticalCenterWavelength': '00520007',
    'AxialResolution': '00520008',
    'RangingDepth': '00520009',
    'ALineRate': '00520011',
    'ALinesPerFrame': '00520012',
    'CatheterRotationalRate': '00520013',
    'ALinePixelSpacing': '00520014',
    'ModeOfPercutaneousAccessSequence': '00520016',
    'IntravascularOCTFrameTypeSequence': '00520025',
    'OCTZOffsetApplied': '00520026',
    'IntravascularFrameContentSequence': '00520027',
    'IntravascularLongitudinalDistance': '00520028',
    'IntravascularOCTFrameContentSequence': '00520029',
    'OCTZOffsetCorrection': '00520030',
    'CatheterDirectionOfRotation': '00520031',
    'SeamLineLocation': '00520033',
    'FirstALineLocation': '00520034',
    'SeamLineIndex': '00520036',
    'NumberOfPaddedALines': '00520038',
    'InterpolationType': '00520039',
    'RefractiveIndexApplied': '0052003A',
    'EnergyWindowVector': '00540010',
    'NumberOfEnergyWindows': '00540011',
    'EnergyWindowInformationSequence': '00540012',
    'EnergyWindowRangeSequence': '00540013',
    'EnergyWindowLowerLimit': '00540014',
    'EnergyWindowUpperLimit': '00540015',
    'RadiopharmaceuticalInformationSequence': '00540016',
    'ResidualSyringeCounts': '00540017',
    'EnergyWindowName': '00540018',
    'DetectorVector': '00540020',
    'NumberOfDetectors': '00540021',
    'DetectorInformationSequence': '00540022',
    'PhaseVector': '00540030',
    'NumberOfPhases': '00540031',
    'PhaseInformationSequence': '00540032',
    'NumberOfFramesInPhase': '00540033',
    'PhaseDelay': '00540036',
    'PauseBetweenFrames': '00540038',
    'PhaseDescription': '00540039',
    'RotationVector': '00540050',
    'NumberOfRotations': '00540051',
    'RotationInformationSequence': '00540052',
    'NumberOfFramesInRotation': '00540053',
    'RRIntervalVector': '00540060',
    'NumberOfRRIntervals': '00540061',
    'GatedInformationSequence': '00540062',
    'DataInformationSequence': '00540063',
    'TimeSlotVector': '00540070',
    'NumberOfTimeSlots': '00540071',
    'TimeSlotInformationSequence': '00540072',
    'TimeSlotTime': '00540073',
    'SliceVector': '00540080',
    'NumberOfSlices': '00540081',
    'AngularViewVector': '00540090',
    'TimeSliceVector': '00540100',
    'NumberOfTimeSlices': '00540101',
    'StartAngle': '00540200',
    'TypeOfDetectorMotion': '00540202',
    'TriggerVector': '00540210',
    'NumberOfTriggersInPhase': '00540211',
    'ViewCodeSequence': '00540220',
    'ViewModifierCodeSequence': '00540222',
    'RadionuclideCodeSequence': '00540300',
    'AdministrationRouteCodeSequence': '00540302',
    'RadiopharmaceuticalCodeSequence': '00540304',
    'CalibrationDataSequence': '00540306',
    'EnergyWindowNumber': '00540308',
    'ImageID': '00540400',
    'PatientOrientationCodeSequence': '00540410',
    'PatientOrientationModifierCodeSequence': '00540412',
    'PatientGantryRelationshipCodeSequence': '00540414',
    'SliceProgressionDirection': '00540500',
    'ScanProgressionDirection': '00540501',
    'SeriesType': '00541000',
    'Units': '00541001',
    'CountsSource': '00541002',
    'ReprojectionMethod': '00541004',
    'SUVType': '00541006',
    'RandomsCorrectionMethod': '00541100',
    'AttenuationCorrectionMethod': '00541101',
    'DecayCorrection': '00541102',
    'ReconstructionMethod': '00541103',
    'DetectorLinesOfResponseUsed': '00541104',
    'ScatterCorrectionMethod': '00541105',
    'AxialAcceptance': '00541200',
    'AxialMash': '00541201',
    'TransverseMash': '00541202',
    'DetectorElementSize': '00541203',
    'CoincidenceWindowWidth': '00541210',
    'SecondaryCountsType': '00541220',
    'FrameReferenceTime': '00541300',
    'PrimaryPromptsCountsAccumulated': '00541310',
    'SecondaryCountsAccumulated': '00541311',
    'SliceSensitivityFactor': '00541320',
    'DecayFactor': '00541321',
    'DoseCalibrationFactor': '00541322',
    'ScatterFractionFactor': '00541323',
    'DeadTimeFactor': '00541324',
    'ImageIndex': '00541330',
    'CountsIncluded': '00541400',
    'DeadTimeCorrectionFlag': '00541401',
    'HistogramSequence': '00603000',
    'HistogramNumberOfBins': '00603002',
    'HistogramFirstBinValue': '00603004',
    'HistogramLastBinValue': '00603006',
    'HistogramBinWidth': '00603008',
    'HistogramExplanation': '00603010',
    'HistogramData': '00603020',
    'SegmentationType': '00620001',
    'SegmentSequence': '00620002',
    'SegmentedPropertyCategoryCodeSequence': '00620003',
    'SegmentNumber': '00620004',
    'SegmentLabel': '00620005',
    'SegmentDescription': '00620006',
    'SegmentationAlgorithmIdentificationSequence': '00620007',
    'SegmentAlgorithmType': '00620008',
    'SegmentAlgorithmName': '00620009',
    'SegmentIdentificationSequence': '0062000A',
    'ReferencedSegmentNumber': '0062000B',
    'RecommendedDisplayGrayscaleValue': '0062000C',
    'RecommendedDisplayCIELabValue': '0062000D',
    'MaximumFractionalValue': '0062000E',
    'SegmentedPropertyTypeCodeSequence': '0062000F',
    'SegmentationFractionalType': '00620010',
    'SegmentedPropertyTypeModifierCodeSequence': '00620011',
    'UsedSegmentsSequence': '00620012',
    'TrackingID': '00620020',
    'TrackingUID': '00620021',
    'DeformableRegistrationSequence': '00640002',
    'SourceFrameOfReferenceUID': '00640003',
    'DeformableRegistrationGridSequence': '00640005',
    'GridDimensions': '00640007',
    'GridResolution': '00640008',
    'VectorGridData': '00640009',
    'PreDeformationMatrixRegistrationSequence': '0064000F',
    'PostDeformationMatrixRegistrationSequence': '00640010',
    'NumberOfSurfaces': '00660001',
    'SurfaceSequence': '00660002',
    'SurfaceNumber': '00660003',
    'SurfaceComments': '00660004',
    'SurfaceProcessing': '00660009',
    'SurfaceProcessingRatio': '0066000A',
    'SurfaceProcessingDescription': '0066000B',
    'RecommendedPresentationOpacity': '0066000C',
    'RecommendedPresentationType': '0066000D',
    'FiniteVolume': '0066000E',
    'Manifold': '00660010',
    'SurfacePointsSequence': '00660011',
    'SurfacePointsNormalsSequence': '00660012',
    'SurfaceMeshPrimitivesSequence': '00660013',
    'NumberOfSurfacePoints': '00660015',
    'PointCoordinatesData': '00660016',
    'PointPositionAccuracy': '00660017',
    'MeanPointDistance': '00660018',
    'MaximumPointDistance': '00660019',
    'PointsBoundingBoxCoordinates': '0066001A',
    'AxisOfRotation': '0066001B',
    'CenterOfRotation': '0066001C',
    'NumberOfVectors': '0066001E',
    'VectorDimensionality': '0066001F',
    'VectorAccuracy': '00660020',
    'VectorCoordinateData': '00660021',
    'TrianglePointIndexList': '00660023',
    'EdgePointIndexList': '00660024',
    'VertexPointIndexList': '00660025',
    'TriangleStripSequence': '00660026',
    'TriangleFanSequence': '00660027',
    'LineSequence': '00660028',
    'PrimitivePointIndexList': '00660029',
    'SurfaceCount': '0066002A',
    'ReferencedSurfaceSequence': '0066002B',
    'ReferencedSurfaceNumber': '0066002C',
    'SegmentSurfaceGenerationAlgorithmIdentificationSequence': '0066002D',
    'SegmentSurfaceSourceInstanceSequence': '0066002E',
    'AlgorithmFamilyCodeSequence': '0066002F',
    'AlgorithmNameCodeSequence': '00660030',
    'AlgorithmVersion': '00660031',
    'AlgorithmParameters': '00660032',
    'FacetSequence': '00660034',
    'SurfaceProcessingAlgorithmIdentificationSequence': '00660035',
    'AlgorithmName': '00660036',
    'RecommendedPointRadius': '00660037',
    'RecommendedLineThickness': '00660038',
    'LongPrimitivePointIndexList': '00660040',
    'LongTrianglePointIndexList': '00660041',
    'LongEdgePointIndexList': '00660042',
    'LongVertexPointIndexList': '00660043',
    'TrackSetSequence': '00660101',
    'TrackSequence': '00660102',
    'RecommendedDisplayCIELabValueList': '00660103',
    'TrackingAlgorithmIdentificationSequence': '00660104',
    'TrackSetNumber': '00660105',
    'TrackSetLabel': '00660106',
    'TrackSetDescription': '00660107',
    'TrackSetAnatomicalTypeCodeSequence': '00660108',
    'MeasurementsSequence': '00660121',
    'TrackSetStatisticsSequence': '00660124',
    'FloatingPointValues': '00660125',
    'TrackPointIndexList': '00660129',
    'TrackStatisticsSequence': '00660130',
    'MeasurementValuesSequence': '00660132',
    'DiffusionAcquisitionCodeSequence': '00660133',
    'DiffusionModelCodeSequence': '00660134',
    'ImplantSize': '00686210',
    'ImplantTemplateVersion': '00686221',
    'ReplacedImplantTemplateSequence': '00686222',
    'ImplantType': '00686223',
    'DerivationImplantTemplateSequence': '00686224',
    'OriginalImplantTemplateSequence': '00686225',
    'EffectiveDateTime': '00686226',
    'ImplantTargetAnatomySequence': '00686230',
    'InformationFromManufacturerSequence': '00686260',
    'NotificationFromManufacturerSequence': '00686265',
    'InformationIssueDateTime': '00686270',
    'InformationSummary': '00686280',
    'ImplantRegulatoryDisapprovalCodeSequence': '006862A0',
    'OverallTemplateSpatialTolerance': '006862A5',
    'HPGLDocumentSequence': '006862C0',
    'HPGLDocumentID': '006862D0',
    'HPGLDocumentLabel': '006862D5',
    'ViewOrientationCodeSequence': '006862E0',
    'ViewOrientationModifierCodeSequence': '006862F0',
    'HPGLDocumentScaling': '006862F2',
    'HPGLDocument': '00686300',
    'HPGLContourPenNumber': '00686310',
    'HPGLPenSequence': '00686320',
    'HPGLPenNumber': '00686330',
    'HPGLPenLabel': '00686340',
    'HPGLPenDescription': '00686345',
    'RecommendedRotationPoint': '00686346',
    'BoundingRectangle': '00686347',
    '00686350': ('ImplantTemplate3DModelSurfaceNumber'),
    'SurfaceModelDescriptionSequence': '00686360',
    'SurfaceModelLabel': '00686380',
    'SurfaceModelScalingFactor': '00686390',
    'MaterialsCodeSequence': '006863A0',
    'CoatingMaterialsCodeSequence': '006863A4',
    'ImplantTypeCodeSequence': '006863A8',
    'FixationMethodCodeSequence': '006863AC',
    'MatingFeatureSetsSequence': '006863B0',
    'MatingFeatureSetID': '006863C0',
    'MatingFeatureSetLabel': '006863D0',
    'MatingFeatureSequence': '006863E0',
    'MatingFeatureID': '006863F0',
    'MatingFeatureDegreeOfFreedomSequence': '00686400',
    'DegreeOfFreedomID': '00686410',
    'DegreeOfFreedomType': '00686420',
    'TwoDMatingFeatureCoordinatesSequence': '00686430',
    'ReferencedHPGLDocumentID': '00686440',
    'TwoDMatingPoint': '00686450',
    'TwoDMatingAxes': '00686460',
    'TwoDDegreeOfFreedomSequence': '00686470',
    'ThreeDDegreeOfFreedomAxis': '00686490',
    'RangeOfFreedom': '006864A0',
    'ThreeDMatingPoint': '006864C0',
    'ThreeDMatingAxes': '006864D0',
    'TwoDDegreeOfFreedomAxis': '006864F0',
    'PlanningLandmarkPointSequence': '00686500',
    'PlanningLandmarkLineSequence': '00686510',
    'PlanningLandmarkPlaneSequence': '00686520',
    'PlanningLandmarkID': '00686530',
    'PlanningLandmarkDescription': '00686540',
    'PlanningLandmarkIdentificationCodeSequence': '00686545',
    'TwoDPointCoordinatesSequence': '00686550',
    'TwoDPointCoordinates': '00686560',
    'ThreeDPointCoordinates': '00686590',
    'TwoDLineCoordinatesSequence': '006865A0',
    'TwoDLineCoordinates': '006865B0',
    'ThreeDLineCoordinates': '006865D0',
    'TwoDPlaneCoordinatesSequence': '006865E0',
    'TwoDPlaneIntersection': '006865F0',
    'ThreeDPlaneOrigin': '00686610',
    'ThreeDPlaneNormal': '00686620',
    'ModelModification': '00687001',
    'ModelMirroring': '00687002',
    'ModelUsageCodeSequence': '00687003',
    'GraphicAnnotationSequence': '00700001',
    'GraphicLayer': '00700002',
    'BoundingBoxAnnotationUnits': '00700003',
    'AnchorPointAnnotationUnits': '00700004',
    'GraphicAnnotationUnits': '00700005',
    'UnformattedTextValue': '00700006',
    'TextObjectSequence': '00700008',
    'GraphicObjectSequence': '00700009',
    'BoundingBoxTopLeftHandCorner': '00700010',
    'BoundingBoxBottomRightHandCorner': '00700011',
    'BoundingBoxTextHorizontalJustification': '00700012',
    'AnchorPoint': '00700014',
    'AnchorPointVisibility': '00700015',
    'GraphicDimensions': '00700020',
    'NumberOfGraphicPoints': '00700021',
    'GraphicData': '00700022',
    'GraphicType': '00700023',
    'GraphicFilled': '00700024',
    'ImageRotationRetired': '00700040',
    'ImageHorizontalFlip': '00700041',
    'ImageRotation': '00700042',
    'DisplayedAreaTopLeftHandCornerTrial': '00700050',
    'DisplayedAreaBottomRightHandCornerTrial': '00700051',
    'DisplayedAreaTopLeftHandCorner': '00700052',
    'DisplayedAreaBottomRightHandCorner': '00700053',
    'DisplayedAreaSelectionSequence': '0070005A',
    'GraphicLayerSequence': '00700060',
    'GraphicLayerOrder': '00700062',
    'GraphicLayerRecommendedDisplayGrayscaleValue': '00700066',
    'GraphicLayerRecommendedDisplayRGBValue': '00700067',
    'GraphicLayerDescription': '00700068',
    'ContentLabel': '00700080',
    'ContentDescription': '00700081',
    'PresentationCreationDate': '00700082',
    'PresentationCreationTime': '00700083',
    'ContentCreatorName': '00700084',
    'ContentCreatorIdentificationCodeSequence': '00700086',
    'AlternateContentDescriptionSequence': '00700087',
    'PresentationSizeMode': '00700100',
    'PresentationPixelSpacing': '00700101',
    'PresentationPixelAspectRatio': '00700102',
    'PresentationPixelMagnificationRatio': '00700103',
    'GraphicGroupLabel': '00700207',
    'GraphicGroupDescription': '00700208',
    'CompoundGraphicSequence': '00700209',
    'CompoundGraphicInstanceID': '00700226',
    'FontName': '00700227',
    'FontNameType': '00700228',
    'CSSFontName': '00700229',
    'RotationAngle': '00700230',
    'TextStyleSequence': '00700231',
    'LineStyleSequence': '00700232',
    'FillStyleSequence': '00700233',
    'GraphicGroupSequence': '00700234',
    'TextColorCIELabValue': '00700241',
    'HorizontalAlignment': '00700242',
    'VerticalAlignment': '00700243',
    'ShadowStyle': '00700244',
    'ShadowOffsetX': '00700245',
    'ShadowOffsetY': '00700246',
    'ShadowColorCIELabValue': '00700247',
    'Underlined': '00700248',
    'Bold': '00700249',
    'Italic': '00700250',
    'PatternOnColorCIELabValue': '00700251',
    'PatternOffColorCIELabValue': '00700252',
    'LineThickness': '00700253',
    'LineDashingStyle': '00700254',
    'LinePattern': '00700255',
    'FillPattern': '00700256',
    'FillMode': '00700257',
    'ShadowOpacity': '00700258',
    'GapLength': '00700261',
    'DiameterOfVisibility': '00700262',
    'RotationPoint': '00700273',
    'TickAlignment': '00700274',
    'ShowTickLabel': '00700278',
    'TickLabelAlignment': '00700279',
    'CompoundGraphicUnits': '00700282',
    'PatternOnOpacity': '00700284',
    'PatternOffOpacity': '00700285',
    'MajorTicksSequence': '00700287',
    'TickPosition': '00700288',
    'TickLabel': '00700289',
    'CompoundGraphicType': '00700294',
    'GraphicGroupID': '00700295',
    'ShapeType': '00700306',
    'RegistrationSequence': '00700308',
    'MatrixRegistrationSequence': '00700309',
    'MatrixSequence': '0070030A',
    'FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix': '0070030B',
    'FrameOfReferenceTransformationMatrixType': '0070030C',
    'RegistrationTypeCodeSequence': '0070030D',
    'FiducialDescription': '0070030F',
    'FiducialIdentifier': '00700310',
    'FiducialIdentifierCodeSequence': '00700311',
    'ContourUncertaintyRadius': '00700312',
    'UsedFiducialsSequence': '00700314',
    'GraphicCoordinatesDataSequence': '00700318',
    'FiducialUID': '0070031A',
    'ReferencedFiducialUID': '0070031B',
    'FiducialSetSequence': '0070031C',
    'FiducialSequence': '0070031E',
    'FiducialsPropertyCategoryCodeSequence': '0070031F',
    'GraphicLayerRecommendedDisplayCIELabValue': '00700401',
    'BlendingSequence': '00700402',
    'RelativeOpacity': '00700403',
    'ReferencedSpatialRegistrationSequence': '00700404',
    'BlendingPosition': '00700405',
    'PresentationDisplayCollectionUID': '00701101',
    'PresentationSequenceCollectionUID': '00701102',
    'PresentationSequencePositionIndex': '00701103',
    'RenderedImageReferenceSequence': '00701104',
    'VolumetricPresentationStateInputSequence': '00701201',
    'PresentationInputType': '00701202',
    'InputSequencePositionIndex': '00701203',
    'Crop': '00701204',
    'CroppingSpecificationIndex': '00701205',
    'CompositingMethod': '00701206',
    'VolumetricPresentationInputNumber': '00701207',
    'ImageVolumeGeometry': '00701208',
    'VolumetricPresentationInputSetUID': '00701209',
    'VolumetricPresentationInputSetSequence': '0070120A',
    'GlobalCrop': '0070120B',
    'GlobalCroppingSpecificationIndex': '0070120C',
    'RenderingMethod': '0070120D',
    'VolumeCroppingSequence': '00701301',
    'VolumeCroppingMethod': '00701302',
    'BoundingBoxCrop': '00701303',
    'ObliqueCroppingPlaneSequence': '00701304',
    'Plane': '00701305',
    'PlaneNormal': '00701306',
    'CroppingSpecificationNumber': '00701309',
    'MultiPlanarReconstructionStyle': '00701501',
    'MPRThicknessType': '00701502',
    'MPRSlabThickness': '00701503',
    'MPRTopLeftHandCorner': '00701505',
    'MPRViewWidthDirection': '00701507',
    'MPRViewWidth': '00701508',
    'NumberOfVolumetricCurvePoints': '0070150C',
    'VolumetricCurvePoints': '0070150D',
    'MPRViewHeightDirection': '00701511',
    'MPRViewHeight': '00701512',
    'RenderProjection': '00701602',
    'ViewpointPosition': '00701603',
    'ViewpointLookAtPoint': '00701604',
    'ViewpointUpDirection': '00701605',
    'RenderFieldOfView': '00701606',
    'SamplingStepSize': '00701607',
    'ShadingStyle': '00701701',
    'AmbientReflectionIntensity': '00701702',
    'LightDirection': '00701703',
    'DiffuseReflectionIntensity': '00701704',
    'SpecularReflectionIntensity': '00701705',
    'Shininess': '00701706',
    'PresentationStateClassificationComponentSequence': '00701801',
    'ComponentType': '00701802',
    'ComponentInputSequence': '00701803',
    'VolumetricPresentationInputIndex': '00701804',
    'PresentationStateCompositorComponentSequence': '00701805',
    'WeightingTransferFunctionSequence': '00701806',
    'WeightingLookupTableDescriptor': '00701807',
    'WeightingLookupTableData': '00701808',
    'VolumetricAnnotationSequence': '00701901',
    'ReferencedStructuredContextSequence': '00701903',
    'ReferencedContentItem': '00701904',
    'VolumetricPresentationInputAnnotationSequence': '00701905',
    'AnnotationClipping': '00701907',
    'PresentationAnimationStyle': '00701A01',
    'RecommendedAnimationRate': '00701A03',
    'AnimationCurveSequence': '00701A04',
    'AnimationStepSize': '00701A05',
    'SwivelRange': '00701A06',
    'VolumetricCurveUpDirections': '00701A07',
    'VolumeStreamSequence': '00701A08',
    'RGBATransferFunctionDescription': '00701A09',
    'AdvancedBlendingSequence': '00701B01',
    'BlendingInputNumber': '00701B02',
    'BlendingDisplayInputSequence': '00701B03',
    'BlendingDisplaySequence': '00701B04',
    'BlendingMode': '00701B06',
    'TimeSeriesBlending': '00701B07',
    'GeometryForDisplay': '00701B08',
    'ThresholdSequence': '00701B11',
    'ThresholdValueSequence': '00701B12',
    'ThresholdType': '00701B13',
    'ThresholdValue': '00701B14',
    'HangingProtocolName': '00720002',
    'HangingProtocolDescription': '00720004',
    'HangingProtocolLevel': '00720006',
    'HangingProtocolCreator': '00720008',
    'HangingProtocolCreationDateTime': '0072000A',
    'HangingProtocolDefinitionSequence': '0072000C',
    'HangingProtocolUserIdentificationCodeSequence': '0072000E',
    'HangingProtocolUserGroupName': '00720010',
    'SourceHangingProtocolSequence': '00720012',
    'NumberOfPriorsReferenced': '00720014',
    'ImageSetsSequence': '00720020',
    'ImageSetSelectorSequence': '00720022',
    'ImageSetSelectorUsageFlag': '00720024',
    'SelectorAttribute': '00720026',
    'SelectorValueNumber': '00720028',
    'TimeBasedImageSetsSequence': '00720030',
    'ImageSetNumber': '00720032',
    'ImageSetSelectorCategory': '00720034',
    'RelativeTime': '00720038',
    'RelativeTimeUnits': '0072003A',
    'AbstractPriorValue': '0072003C',
    'AbstractPriorCodeSequence': '0072003E',
    'ImageSetLabel': '00720040',
    'SelectorAttributeVR': '00720050',
    'SelectorSequencePointer': '00720052',
    'SelectorSequencePointerPrivateCreator': '00720054',
    'SelectorAttributePrivateCreator': '00720056',
    'SelectorAEValue': '0072005E',
    'SelectorASValue': '0072005F',
    'SelectorATValue': '00720060',
    'SelectorDAValue': '00720061',
    'SelectorCSValue': '00720062',
    'SelectorDTValue': '00720063',
    'SelectorISValue': '00720064',
    'SelectorOBValue': '00720065',
    'SelectorLOValue': '00720066',
    'SelectorOFValue': '00720067',
    'SelectorLTValue': '00720068',
    'SelectorOWValue': '00720069',
    'SelectorPNValue': '0072006A',
    'SelectorTMValue': '0072006B',
    'SelectorSHValue': '0072006C',
    'SelectorUNValue': '0072006D',
    'SelectorSTValue': '0072006E',
    'SelectorUCValue': '0072006F',
    'SelectorUTValue': '00720070',
    'SelectorURValue': '00720071',
    'SelectorDSValue': '00720072',
    'SelectorODValue': '00720073',
    'SelectorFDValue': '00720074',
    'SelectorOLValue': '00720075',
    'SelectorFLValue': '00720076',
    'SelectorULValue': '00720078',
    'SelectorUSValue': '0072007A',
    'SelectorSLValue': '0072007C',
    'SelectorSSValue': '0072007E',
    'SelectorUIValue': '0072007F',
    'SelectorCodeSequenceValue': '00720080',
    'NumberOfScreens': '00720100',
    'NominalScreenDefinitionSequence': '00720102',
    'NumberOfVerticalPixels': '00720104',
    'NumberOfHorizontalPixels': '00720106',
    'DisplayEnvironmentSpatialPosition': '00720108',
    'ScreenMinimumGrayscaleBitDepth': '0072010A',
    'ScreenMinimumColorBitDepth': '0072010C',
    'ApplicationMaximumRepaintTime': '0072010E',
    'DisplaySetsSequence': '00720200',
    'DisplaySetNumber': '00720202',
    'DisplaySetLabel': '00720203',
    'DisplaySetPresentationGroup': '00720204',
    'DisplaySetPresentationGroupDescription': '00720206',
    'PartialDataDisplayHandling': '00720208',
    'SynchronizedScrollingSequence': '00720210',
    'DisplaySetScrollingGroup': '00720212',
    'NavigationIndicatorSequence': '00720214',
    'NavigationDisplaySet': '00720216',
    'ReferenceDisplaySets': '00720218',
    'ImageBoxesSequence': '00720300',
    'ImageBoxNumber': '00720302',
    'ImageBoxLayoutType': '00720304',
    'ImageBoxTileHorizontalDimension': '00720306',
    'ImageBoxTileVerticalDimension': '00720308',
    'ImageBoxScrollDirection': '00720310',
    'ImageBoxSmallScrollType': '00720312',
    'ImageBoxSmallScrollAmount': '00720314',
    'ImageBoxLargeScrollType': '00720316',
    'ImageBoxLargeScrollAmount': '00720318',
    'ImageBoxOverlapPriority': '00720320',
    'CineRelativeToRealTime': '00720330',
    'FilterOperationsSequence': '00720400',
    'FilterByCategory': '00720402',
    'FilterByAttributePresence': '00720404',
    'FilterByOperator': '00720406',
    'StructuredDisplayBackgroundCIELabValue': '00720420',
    'EmptyImageBoxCIELabValue': '00720421',
    'StructuredDisplayImageBoxSequence': '00720422',
    'StructuredDisplayTextBoxSequence': '00720424',
    'ReferencedFirstFrameSequence': '00720427',
    'ImageBoxSynchronizationSequence': '00720430',
    'SynchronizedImageBoxList': '00720432',
    'TypeOfSynchronization': '00720434',
    'BlendingOperationType': '00720500',
    'ReformattingOperationType': '00720510',
    'ReformattingThickness': '00720512',
    'ReformattingInterval': '00720514',
    'ReformattingOperationInitialViewDirection': '00720516',
    'ThreeDRenderingType': '00720520',
    'SortingOperationsSequence': '00720600',
    'SortByCategory': '00720602',
    'SortingDirection': '00720604',
    'DisplaySetPatientOrientation': '00720700',
    'VOIType': '00720702',
    'PseudoColorType': '00720704',
    'PseudoColorPaletteInstanceReferenceSequence': '00720705',
    'ShowGrayscaleInverted': '00720706',
    'ShowImageTrueSizeFlag': '00720710',
    'ShowGraphicAnnotationFlag': '00720712',
    'ShowPatientDemographicsFlag': '00720714',
    'ShowAcquisitionTechniquesFlag': '00720716',
    'DisplaySetHorizontalJustification': '00720717',
    'DisplaySetVerticalJustification': '00720718',
    'ContinuationStartMeterset': '00740120',
    'ContinuationEndMeterset': '00740121',
    'ProcedureStepState': '00741000',
    'ProcedureStepProgressInformationSequence': '00741002',
    'ProcedureStepProgress': '00741004',
    'ProcedureStepProgressDescription': '00741006',
    'ProcedureStepProgressParametersSequence': '00741007',
    'ProcedureStepCommunicationsURISequence': '00741008',
    'ContactURI': '0074100A',
    'ContactDisplayName': '0074100C',
    'ProcedureStepDiscontinuationReasonCodeSequence': '0074100E',
    'BeamTaskSequence': '00741020',
    'BeamTaskType': '00741022',
    'BeamOrderIndexTrial': '00741024',
    'AutosequenceFlag': '00741025',
    'TableTopVerticalAdjustedPosition': '00741026',
    'TableTopLongitudinalAdjustedPosition': '00741027',
    'TableTopLateralAdjustedPosition': '00741028',
    'PatientSupportAdjustedAngle': '0074102A',
    'TableTopEccentricAdjustedAngle': '0074102B',
    'TableTopPitchAdjustedAngle': '0074102C',
    'TableTopRollAdjustedAngle': '0074102D',
    'DeliveryVerificationImageSequence': '00741030',
    'VerificationImageTiming': '00741032',
    'DoubleExposureFlag': '00741034',
    'DoubleExposureOrdering': '00741036',
    'DoubleExposureMetersetTrial': '00741038',
    'DoubleExposureFieldDeltaTrial': '0074103A',
    'RelatedReferenceRTImageSequence': '00741040',
    'GeneralMachineVerificationSequence': '00741042',
    'ConventionalMachineVerificationSequence': '00741044',
    'IonMachineVerificationSequence': '00741046',
    'FailedAttributesSequence': '00741048',
    'OverriddenAttributesSequence': '0074104A',
    'ConventionalControlPointVerificationSequence': '0074104C',
    'IonControlPointVerificationSequence': '0074104E',
    'AttributeOccurrenceSequence': '00741050',
    'AttributeOccurrencePointer': '00741052',
    'AttributeItemSelector': '00741054',
    'AttributeOccurrencePrivateCreator': '00741056',
    'SelectorSequencePointerItems': '00741057',
    'ScheduledProcedureStepPriority': '00741200',
    'WorklistLabel': '00741202',
    'ProcedureStepLabel': '00741204',
    'ScheduledProcessingParametersSequence': '00741210',
    'PerformedProcessingParametersSequence': '00741212',
    'UnifiedProcedureStepPerformedProcedureSequence': '00741216',
    'RelatedProcedureStepSequence': '00741220',
    'ProcedureStepRelationshipType': '00741222',
    'ReplacedProcedureStepSequence': '00741224',
    'DeletionLock': '00741230',
    'ReceivingAE': '00741234',
    'RequestingAE': '00741236',
    'ReasonForCancellation': '00741238',
    'SCPStatus': '00741242',
    'SubscriptionListStatus': '00741244',
    'UnifiedProcedureStepListStatus': '00741246',
    'BeamOrderIndex': '00741324',
    'DoubleExposureMeterset': '00741338',
    'DoubleExposureFieldDelta': '0074133A',
    'BrachyTaskSequence': '00741401',
    'ContinuationStartTotalReferenceAirKerma': '00741402',
    'ContinuationEndTotalReferenceAirKerma': '00741403',
    'ContinuationPulseNumber': '00741404',
    'ChannelDeliveryOrderSequence': '00741405',
    'ReferencedChannelNumber': '00741406',
    'StartCumulativeTimeWeight': '00741407',
    'EndCumulativeTimeWeight': '00741408',
    'OmittedChannelSequence': '00741409',
    'ReasonForChannelOmission': '0074140A',
    'ReasonForChannelOmissionDescription': '0074140B',
    'ChannelDeliveryOrderIndex': '0074140C',
    'ChannelDeliveryContinuationSequence': '0074140D',
    'OmittedApplicationSetupSequence': '0074140E',
    'ImplantAssemblyTemplateName': '00760001',
    'ImplantAssemblyTemplateIssuer': '00760003',
    'ImplantAssemblyTemplateVersion': '00760006',
    'ReplacedImplantAssemblyTemplateSequence': '00760008',
    'ImplantAssemblyTemplateType': '0076000A',
    'OriginalImplantAssemblyTemplateSequence': '0076000C',
    'DerivationImplantAssemblyTemplateSequence': '0076000E',
    'ImplantAssemblyTemplateTargetAnatomySequence': '00760010',
    'ProcedureTypeCodeSequence': '00760020',
    'SurgicalTechnique': '00760030',
    'ComponentTypesSequence': '00760032',
    'ComponentTypeCodeSequence': '00760034',
    'ExclusiveComponentType': '00760036',
    'MandatoryComponentType': '00760038',
    'ComponentSequence': '00760040',
    'ComponentID': '00760055',
    'ComponentAssemblySequence': '00760060',
    '00760070': ('Component1ReferencedID'),
    '00760080': ('Component1ReferencedMatingFeatureSetID'),
    '00760090': ('Component1ReferencedMatingFeatureID'),
    '007600A0': ('Component2ReferencedID'),
    '007600B0': ('Component2ReferencedMatingFeatureSetID'),
    '007600C0': ('Component2ReferencedMatingFeatureID'),
    'ImplantTemplateGroupName': '00780001',
    'ImplantTemplateGroupDescription': '00780010',
    'ImplantTemplateGroupIssuer': '00780020',
    'ImplantTemplateGroupVersion': '00780024',
    'ReplacedImplantTemplateGroupSequence': '00780026',
    'ImplantTemplateGroupTargetAnatomySequence': '00780028',
    'ImplantTemplateGroupMembersSequence': '0078002A',
    'ImplantTemplateGroupMemberID': '0078002E',
    'ThreeDImplantTemplateGroupMemberMatchingPoint': '00780050',
    'ThreeDImplantTemplateGroupMemberMatchingAxes': '00780060',
    '00780070': ('ImplantTemplateGroupMemberMatching2DCoordinatesSequence'),
    'TwoDImplantTemplateGroupMemberMatchingPoint': '00780090',
    'TwoDImplantTemplateGroupMemberMatchingAxes': '007800A0',
    'ImplantTemplateGroupVariationDimensionSequence': '007800B0',
    'ImplantTemplateGroupVariationDimensionName': '007800B2',
    'ImplantTemplateGroupVariationDimensionRankSequence': '007800B4',
    'ReferencedImplantTemplateGroupMemberID': '007800B6',
    'ImplantTemplateGroupVariationDimensionRank': '007800B8',
    'SurfaceScanAcquisitionTypeCodeSequence': '00800001',
    'SurfaceScanModeCodeSequence': '00800002',
    'RegistrationMethodCodeSequence': '00800003',
    'ShotDurationTime': '00800004',
    'ShotOffsetTime': '00800005',
    'SurfacePointPresentationValueData': '00800006',
    'SurfacePointColorCIELabValueData': '00800007',
    'UVMappingSequence': '00800008',
    'TextureLabel': '00800009',
    'UValueData': '00800010',
    'VValueData': '00800011',
    'ReferencedTextureSequence': '00800012',
    'ReferencedSurfaceDataSequence': '00800013',
    'AssessmentSummary': '00820001',
    'AssessmentSummaryDescription': '00820003',
    'AssessedSOPInstanceSequence': '00820004',
    'ReferencedComparisonSOPInstanceSequence': '00820005',
    'NumberOfAssessmentObservations': '00820006',
    'AssessmentObservationsSequence': '00820007',
    'ObservationSignificance': '00820008',
    'ObservationDescription': '0082000A',
    'StructuredConstraintObservationSequence': '0082000C',
    'AssessedAttributeValueSequence': '00820010',
    'AssessmentSetID': '00820016',
    'AssessmentRequesterSequence': '00820017',
    'SelectorAttributeName': '00820018',
    'SelectorAttributeKeyword': '00820019',
    'AssessmentTypeCodeSequence': '00820021',
    'ObservationBasisCodeSequence': '00820022',
    'AssessmentLabel': '00820023',
    'ConstraintType': '00820032',
    'SpecificationSelectionGuidance': '00820033',
    'ConstraintValueSequence': '00820034',
    'RecommendedDefaultValueSequence': '00820035',
    'ConstraintViolationSignificance': '00820036',
    'ConstraintViolationCondition': '00820037',
    'ModifiableConstraintFlag': '00820038',
    'StorageMediaFileSetID': '00880130',
    'StorageMediaFileSetUID': '00880140',
    'IconImageSequence': '00880200',
    'TopicTitle': '00880904',
    'TopicSubject': '00880906',
    'TopicAuthor': '00880910',
    'TopicKeywords': '00880912',
    'SOPInstanceStatus': '01000410',
    'SOPAuthorizationDateTime': '01000420',
    'SOPAuthorizationComment': '01000424',
    'AuthorizationEquipmentCertificationNumber': '01000426',
    'MACIDNumber': '04000005',
    'MACCalculationTransferSyntaxUID': '04000010',
    'MACAlgorithm': '04000015',
    'DataElementsSigned': '04000020',
    'DigitalSignatureUID': '04000100',
    'DigitalSignatureDateTime': '04000105',
    'CertificateType': '04000110',
    'CertificateOfSigner': '04000115',
    'Signature': '04000120',
    'CertifiedTimestampType': '04000305',
    'CertifiedTimestamp': '04000310',
    '': '04000315',
    'DigitalSignaturePurposeCodeSequence': '04000401',
    'ReferencedDigitalSignatureSequence': '04000402',
    'ReferencedSOPInstanceMACSequence': '04000403',
    'MAC': '04000404',
    'EncryptedAttributesSequence': '04000500',
    'EncryptedContentTransferSyntaxUID': '04000510',
    'EncryptedContent': '04000520',
    'ModifiedAttributesSequence': '04000550',
    'OriginalAttributesSequence': '04000561',
    'AttributeModificationDateTime': '04000562',
    'ModifyingSystem': '04000563',
    'SourceOfPreviousValues': '04000564',
    'ReasonForTheAttributeModification': '04000565',
    'InstanceOriginStatus': '04000600',
    'NumberOfCopies': '20000010',
    'PrinterConfigurationSequence': '2000001E',
    'PrintPriority': '20000020',
    'MediumType': '20000030',
    'FilmDestination': '20000040',
    'FilmSessionLabel': '20000050',
    'MemoryAllocation': '20000060',
    'MaximumMemoryAllocation': '20000061',
    'ColorImagePrintingFlag': '20000062',
    'CollationFlag': '20000063',
    'AnnotationFlag': '20000065',
    'ImageOverlayFlag': '20000067',
    'PresentationLUTFlag': '20000069',
    'ImageBoxPresentationLUTFlag': '2000006A',
    'MemoryBitDepth': '200000A0',
    'PrintingBitDepth': '200000A1',
    'MediaInstalledSequence': '200000A2',
    'OtherMediaAvailableSequence': '200000A4',
    'SupportedImageDisplayFormatsSequence': '200000A8',
    'ReferencedFilmBoxSequence': '20000500',
    'ReferencedStoredPrintSequence': '20000510',
    'ImageDisplayFormat': '20100010',
    'AnnotationDisplayFormatID': '20100030',
    'FilmOrientation': '20100040',
    'FilmSizeID': '20100050',
    'PrinterResolutionID': '20100052',
    'DefaultPrinterResolutionID': '20100054',
    'MagnificationType': '20100060',
    'SmoothingType': '20100080',
    'DefaultMagnificationType': '201000A6',
    'OtherMagnificationTypesAvailable': '201000A7',
    'DefaultSmoothingType': '201000A8',
    'OtherSmoothingTypesAvailable': '201000A9',
    'BorderDensity': '20100100',
    'EmptyImageDensity': '20100110',
    'MinDensity': '20100120',
    'MaxDensity': '20100130',
    'Trim': '20100140',
    'ConfigurationInformation': '20100150',
    'ConfigurationInformationDescription': '20100152',
    'MaximumCollatedFilms': '20100154',
    'Illumination': '2010015E',
    'ReflectedAmbientLight': '20100160',
    'PrinterPixelSpacing': '20100376',
    'ReferencedFilmSessionSequence': '20100500',
    'ReferencedImageBoxSequence': '20100510',
    'ReferencedBasicAnnotationBoxSequence': '20100520',
    'ImageBoxPosition': '20200010',
    'Polarity': '20200020',
    'RequestedImageSize': '20200030',
    'RequestedDecimateCropBehavior': '20200040',
    'RequestedResolutionID': '20200050',
    'RequestedImageSizeFlag': '202000A0',
    'DecimateCropResult': '202000A2',
    'BasicGrayscaleImageSequence': '20200110',
    'BasicColorImageSequence': '20200111',
    'ReferencedImageOverlayBoxSequence': '20200130',
    'ReferencedVOILUTBoxSequence': '20200140',
    'AnnotationPosition': '20300010',
    'TextString': '20300020',
    'ReferencedOverlayPlaneSequence': '20400010',
    'ReferencedOverlayPlaneGroups': '20400011',
    'OverlayPixelDataSequence': '20400020',
    'OverlayMagnificationType': '20400060',
    'OverlaySmoothingType': '20400070',
    'OverlayOrImageMagnification': '20400072',
    'MagnifyToNumberOfColumns': '20400074',
    'OverlayForegroundDensity': '20400080',
    'OverlayBackgroundDensity': '20400082',
    'OverlayMode': '20400090',
    'ThresholdDensity': '20400100',
    'ReferencedImageBoxSequenceRetired': '20400500',
    'PresentationLUTSequence': '20500010',
    'PresentationLUTShape': '20500020',
    'ReferencedPresentationLUTSequence': '20500500',
    'PrintJobID': '21000010',
    'ExecutionStatus': '21000020',
    'ExecutionStatusInfo': '21000030',
    'CreationDate': '21000040',
    'CreationTime': '21000050',
    'Originator': '21000070',
    'DestinationAE': '21000140',
    'OwnerID': '21000160',
    'NumberOfFilms': '21000170',
    'ReferencedPrintJobSequencePullStoredPrint': '21000500',
    'PrinterStatus': '21100010',
    'PrinterStatusInfo': '21100020',
    'PrinterName': '21100030',
    'PrintQueueID': '21100099',
    'QueueStatus': '21200010',
    'PrintJobDescriptionSequence': '21200050',
    'ReferencedPrintJobSequence': '21200070',
    'PrintManagementCapabilitiesSequence': '21300010',
    'PrinterCharacteristicsSequence': '21300015',
    'FilmBoxContentSequence': '21300030',
    'ImageBoxContentSequence': '21300040',
    'AnnotationContentSequence': '21300050',
    'ImageOverlayBoxContentSequence': '21300060',
    'PresentationLUTContentSequence': '21300080',
    'ProposedStudySequence': '213000A0',
    'OriginalImageSequence': '213000C0',
    'LabelUsingInformationExtractedFromInstances': '22000001',
    'LabelText': '22000002',
    'LabelStyleSelection': '22000003',
    'MediaDisposition': '22000004',
    'BarcodeValue': '22000005',
    'BarcodeSymbology': '22000006',
    'AllowMediaSplitting': '22000007',
    'IncludeNonDICOMObjects': '22000008',
    'IncludeDisplayApplication': '22000009',
    'PreserveCompositeInstancesAfterMediaCreation': '2200000A',
    'TotalNumberOfPiecesOfMediaCreated': '2200000B',
    'RequestedMediaApplicationProfile': '2200000C',
    'ReferencedStorageMediaSequence': '2200000D',
    'FailureAttributes': '2200000E',
    'AllowLossyCompression': '2200000F',
    'RequestPriority': '22000020',
    'RTImageLabel': '30020002',
    'RTImageName': '30020003',
    'RTImageDescription': '30020004',
    'ReportedValuesOrigin': '3002000A',
    'RTImagePlane': '3002000C',
    'XRayImageReceptorTranslation': '3002000D',
    'XRayImageReceptorAngle': '3002000E',
    'RTImageOrientation': '30020010',
    'ImagePlanePixelSpacing': '30020011',
    'RTImagePosition': '30020012',
    'RadiationMachineName': '30020020',
    'RadiationMachineSAD': '30020022',
    'RadiationMachineSSD': '30020024',
    'RTImageSID': '30020026',
    'SourceToReferenceObjectDistance': '30020028',
    'FractionNumber': '30020029',
    'ExposureSequence': '30020030',
    'MetersetExposure': '30020032',
    'DiaphragmPosition': '30020034',
    'FluenceMapSequence': '30020040',
    'FluenceDataSource': '30020041',
    'FluenceDataScale': '30020042',
    'PrimaryFluenceModeSequence': '30020050',
    'FluenceMode': '30020051',
    'FluenceModeID': '30020052',
    'DVHType': '30040001',
    'DoseUnits': '30040002',
    'DoseType': '30040004',
    'SpatialTransformOfDose': '30040005',
    'DoseComment': '30040006',
    'NormalizationPoint': '30040008',
    'DoseSummationType': '3004000A',
    'GridFrameOffsetVector': '3004000C',
    'DoseGridScaling': '3004000E',
    'RTDoseROISequence': '30040010',
    'DoseValue': '30040012',
    'TissueHeterogeneityCorrection': '30040014',
    'DVHNormalizationPoint': '30040040',
    'DVHNormalizationDoseValue': '30040042',
    'DVHSequence': '30040050',
    'DVHDoseScaling': '30040052',
    'DVHVolumeUnits': '30040054',
    'DVHNumberOfBins': '30040056',
    'DVHData': '30040058',
    'DVHReferencedROISequence': '30040060',
    'DVHROIContributionType': '30040062',
    'DVHMinimumDose': '30040070',
    'DVHMaximumDose': '30040072',
    'DVHMeanDose': '30040074',
    'StructureSetLabel': '30060002',
    'StructureSetName': '30060004',
    'StructureSetDescription': '30060006',
    'StructureSetDate': '30060008',
    'StructureSetTime': '30060009',
    'ReferencedFrameOfReferenceSequence': '30060010',
    'RTReferencedStudySequence': '30060012',
    'RTReferencedSeriesSequence': '30060014',
    'ContourImageSequence': '30060016',
    'PredecessorStructureSetSequence': '30060018',
    'StructureSetROISequence': '30060020',
    'ROINumber': '30060022',
    'ReferencedFrameOfReferenceUID': '30060024',
    'ROIName': '30060026',
    'ROIDescription': '30060028',
    'ROIDisplayColor': '3006002A',
    'ROIVolume': '3006002C',
    'RTRelatedROISequence': '30060030',
    'RTROIRelationship': '30060033',
    'ROIGenerationAlgorithm': '30060036',
    'ROIGenerationDescription': '30060038',
    'ROIContourSequence': '30060039',
    'ContourSequence': '30060040',
    'ContourGeometricType': '30060042',
    'ContourSlabThickness': '30060044',
    'ContourOffsetVector': '30060045',
    'NumberOfContourPoints': '30060046',
    'ContourNumber': '30060048',
    'AttachedContours': '30060049',
    'ContourData': '30060050',
    'RTROIObservationsSequence': '30060080',
    'ObservationNumber': '30060082',
    'ReferencedROINumber': '30060084',
    'ROIObservationLabel': '30060085',
    'RTROIIdentificationCodeSequence': '30060086',
    'ROIObservationDescription': '30060088',
    'RelatedRTROIObservationsSequence': '300600A0',
    'RTROIInterpretedType': '300600A4',
    'ROIInterpreter': '300600A6',
    'ROIPhysicalPropertiesSequence': '300600B0',
    'ROIPhysicalProperty': '300600B2',
    'ROIPhysicalPropertyValue': '300600B4',
    'ROIElementalCompositionSequence': '300600B6',
    'ROIElementalCompositionAtomicNumber': '300600B7',
    'ROIElementalCompositionAtomicMassFraction': '300600B8',
    'AdditionalRTROIIdentificationCodeSequence': '300600B9',
    'FrameOfReferenceRelationshipSequence': '300600C0',
    'RelatedFrameOfReferenceUID': '300600C2',
    'FrameOfReferenceTransformationType': '300600C4',
    'FrameOfReferenceTransformationMatrix': '300600C6',
    'FrameOfReferenceTransformationComment': '300600C8',
    'MeasuredDoseReferenceSequence': '30080010',
    'MeasuredDoseDescription': '30080012',
    'MeasuredDoseType': '30080014',
    'MeasuredDoseValue': '30080016',
    'TreatmentSessionBeamSequence': '30080020',
    'TreatmentSessionIonBeamSequence': '30080021',
    'CurrentFractionNumber': '30080022',
    'TreatmentControlPointDate': '30080024',
    'TreatmentControlPointTime': '30080025',
    'TreatmentTerminationStatus': '3008002A',
    'TreatmentTerminationCode': '3008002B',
    'TreatmentVerificationStatus': '3008002C',
    'ReferencedTreatmentRecordSequence': '30080030',
    'SpecifiedPrimaryMeterset': '30080032',
    'SpecifiedSecondaryMeterset': '30080033',
    'DeliveredPrimaryMeterset': '30080036',
    'DeliveredSecondaryMeterset': '30080037',
    'SpecifiedTreatmentTime': '3008003A',
    'DeliveredTreatmentTime': '3008003B',
    'ControlPointDeliverySequence': '30080040',
    'IonControlPointDeliverySequence': '30080041',
    'SpecifiedMeterset': '30080042',
    'DeliveredMeterset': '30080044',
    'MetersetRateSet': '30080045',
    'MetersetRateDelivered': '30080046',
    'ScanSpotMetersetsDelivered': '30080047',
    'DoseRateDelivered': '30080048',
    'TreatmentSummaryCalculatedDoseReferenceSequence': '30080050',
    'CumulativeDoseToDoseReference': '30080052',
    'FirstTreatmentDate': '30080054',
    'MostRecentTreatmentDate': '30080056',
    'NumberOfFractionsDelivered': '3008005A',
    'OverrideSequence': '30080060',
    'ParameterSequencePointer': '30080061',
    'OverrideParameterPointer': '30080062',
    'ParameterItemIndex': '30080063',
    'MeasuredDoseReferenceNumber': '30080064',
    'ParameterPointer': '30080065',
    'OverrideReason': '30080066',
    'ParameterValueNumber': '30080067',
    'CorrectedParameterSequence': '30080068',
    'CorrectionValue': '3008006A',
    'CalculatedDoseReferenceSequence': '30080070',
    'CalculatedDoseReferenceNumber': '30080072',
    'CalculatedDoseReferenceDescription': '30080074',
    'CalculatedDoseReferenceDoseValue': '30080076',
    'StartMeterset': '30080078',
    'EndMeterset': '3008007A',
    'ReferencedMeasuredDoseReferenceSequence': '30080080',
    'ReferencedMeasuredDoseReferenceNumber': '30080082',
    'ReferencedCalculatedDoseReferenceSequence': '30080090',
    'ReferencedCalculatedDoseReferenceNumber': '30080092',
    'BeamLimitingDeviceLeafPairsSequence': '300800A0',
    'RecordedWedgeSequence': '300800B0',
    'RecordedCompensatorSequence': '300800C0',
    'RecordedBlockSequence': '300800D0',
    'TreatmentSummaryMeasuredDoseReferenceSequence': '300800E0',
    'RecordedSnoutSequence': '300800F0',
    'RecordedRangeShifterSequence': '300800F2',
    'RecordedLateralSpreadingDeviceSequence': '300800F4',
    'RecordedRangeModulatorSequence': '300800F6',
    'RecordedSourceSequence': '30080100',
    'SourceSerialNumber': '30080105',
    'TreatmentSessionApplicationSetupSequence': '30080110',
    'ApplicationSetupCheck': '30080116',
    'RecordedBrachyAccessoryDeviceSequence': '30080120',
    'ReferencedBrachyAccessoryDeviceNumber': '30080122',
    'RecordedChannelSequence': '30080130',
    'SpecifiedChannelTotalTime': '30080132',
    'DeliveredChannelTotalTime': '30080134',
    'SpecifiedNumberOfPulses': '30080136',
    'DeliveredNumberOfPulses': '30080138',
    'SpecifiedPulseRepetitionInterval': '3008013A',
    'DeliveredPulseRepetitionInterval': '3008013C',
    'RecordedSourceApplicatorSequence': '30080140',
    'ReferencedSourceApplicatorNumber': '30080142',
    'RecordedChannelShieldSequence': '30080150',
    'ReferencedChannelShieldNumber': '30080152',
    'BrachyControlPointDeliveredSequence': '30080160',
    'SafePositionExitDate': '30080162',
    'SafePositionExitTime': '30080164',
    'SafePositionReturnDate': '30080166',
    'SafePositionReturnTime': '30080168',
    'PulseSpecificBrachyControlPointDeliveredSequence': '30080171',
    'PulseNumber': '30080172',
    'BrachyPulseControlPointDeliveredSequence': '30080173',
    'CurrentTreatmentStatus': '30080200',
    'TreatmentStatusComment': '30080202',
    'FractionGroupSummarySequence': '30080220',
    'ReferencedFractionNumber': '30080223',
    'FractionGroupType': '30080224',
    'BeamStopperPosition': '30080230',
    'FractionStatusSummarySequence': '30080240',
    'TreatmentDate': '30080250',
    'TreatmentTime': '30080251',
    'RTPlanLabel': '300A0002',
    'RTPlanName': '300A0003',
    'RTPlanDescription': '300A0004',
    'RTPlanDate': '300A0006',
    'RTPlanTime': '300A0007',
    'TreatmentProtocols': '300A0009',
    'PlanIntent': '300A000A',
    'TreatmentSites': '300A000B',
    'RTPlanGeometry': '300A000C',
    'PrescriptionDescription': '300A000E',
    'DoseReferenceSequence': '300A0010',
    'DoseReferenceNumber': '300A0012',
    'DoseReferenceUID': '300A0013',
    'DoseReferenceStructureType': '300A0014',
    'NominalBeamEnergyUnit': '300A0015',
    'DoseReferenceDescription': '300A0016',
    'DoseReferencePointCoordinates': '300A0018',
    'NominalPriorDose': '300A001A',
    'DoseReferenceType': '300A0020',
    'ConstraintWeight': '300A0021',
    'DeliveryWarningDose': '300A0022',
    'DeliveryMaximumDose': '300A0023',
    'TargetMinimumDose': '300A0025',
    'TargetPrescriptionDose': '300A0026',
    'TargetMaximumDose': '300A0027',
    'TargetUnderdoseVolumeFraction': '300A0028',
    'OrganAtRiskFullVolumeDose': '300A002A',
    'OrganAtRiskLimitDose': '300A002B',
    'OrganAtRiskMaximumDose': '300A002C',
    'OrganAtRiskOverdoseVolumeFraction': '300A002D',
    'ToleranceTableSequence': '300A0040',
    'ToleranceTableNumber': '300A0042',
    'ToleranceTableLabel': '300A0043',
    'GantryAngleTolerance': '300A0044',
    'BeamLimitingDeviceAngleTolerance': '300A0046',
    'BeamLimitingDeviceToleranceSequence': '300A0048',
    'BeamLimitingDevicePositionTolerance': '300A004A',
    'SnoutPositionTolerance': '300A004B',
    'PatientSupportAngleTolerance': '300A004C',
    'TableTopEccentricAngleTolerance': '300A004E',
    'TableTopPitchAngleTolerance': '300A004F',
    'TableTopRollAngleTolerance': '300A0050',
    'TableTopVerticalPositionTolerance': '300A0051',
    'TableTopLongitudinalPositionTolerance': '300A0052',
    'TableTopLateralPositionTolerance': '300A0053',
    'RTPlanRelationship': '300A0055',
    'FractionGroupSequence': '300A0070',
    'FractionGroupNumber': '300A0071',
    'FractionGroupDescription': '300A0072',
    'NumberOfFractionsPlanned': '300A0078',
    'NumberOfFractionPatternDigitsPerDay': '300A0079',
    'RepeatFractionCycleLength': '300A007A',
    'FractionPattern': '300A007B',
    'NumberOfBeams': '300A0080',
    'BeamDoseSpecificationPoint': '300A0082',
    'ReferencedDoseReferenceUID': '300A0083',
    'BeamDose': '300A0084',
    'BeamMeterset': '300A0086',
    'BeamDosePointDepth': '300A0088',
    'BeamDosePointEquivalentDepth': '300A0089',
    'BeamDosePointSSD': '300A008A',
    'BeamDoseMeaning': '300A008B',
    'BeamDoseVerificationControlPointSequence': '300A008C',
    'AverageBeamDosePointDepth': '300A008D',
    'AverageBeamDosePointEquivalentDepth': '300A008E',
    'AverageBeamDosePointSSD': '300A008F',
    'BeamDoseType': '300A0090',
    'AlternateBeamDose': '300A0091',
    'AlternateBeamDoseType': '300A0092',
    'DepthValueAveragingFlag': '300A0093',
    'BeamDosePointSourceToExternalContourDistance': '300A0094',
    'NumberOfBrachyApplicationSetups': '300A00A0',
    'BrachyApplicationSetupDoseSpecificationPoint': '300A00A2',
    'BrachyApplicationSetupDose': '300A00A4',
    'BeamSequence': '300A00B0',
    'TreatmentMachineName': '300A00B2',
    'PrimaryDosimeterUnit': '300A00B3',
    'SourceAxisDistance': '300A00B4',
    'BeamLimitingDeviceSequence': '300A00B6',
    'RTBeamLimitingDeviceType': '300A00B8',
    'SourceToBeamLimitingDeviceDistance': '300A00BA',
    'IsocenterToBeamLimitingDeviceDistance': '300A00BB',
    'NumberOfLeafJawPairs': '300A00BC',
    'LeafPositionBoundaries': '300A00BE',
    'BeamNumber': '300A00C0',
    'BeamName': '300A00C2',
    'BeamDescription': '300A00C3',
    'BeamType': '300A00C4',
    'BeamDeliveryDurationLimit': '300A00C5',
    'RadiationType': '300A00C6',
    'HighDoseTechniqueType': '300A00C7',
    'ReferenceImageNumber': '300A00C8',
    'PlannedVerificationImageSequence': '300A00CA',
    'ImagingDeviceSpecificAcquisitionParameters': '300A00CC',
    'TreatmentDeliveryType': '300A00CE',
    'NumberOfWedges': '300A00D0',
    'WedgeSequence': '300A00D1',
    'WedgeNumber': '300A00D2',
    'WedgeType': '300A00D3',
    'WedgeID': '300A00D4',
    'WedgeAngle': '300A00D5',
    'WedgeFactor': '300A00D6',
    'TotalWedgeTrayWaterEquivalentThickness': '300A00D7',
    'WedgeOrientation': '300A00D8',
    'IsocenterToWedgeTrayDistance': '300A00D9',
    'SourceToWedgeTrayDistance': '300A00DA',
    'WedgeThinEdgePosition': '300A00DB',
    'BolusID': '300A00DC',
    'BolusDescription': '300A00DD',
    'EffectiveWedgeAngle': '300A00DE',
    'NumberOfCompensators': '300A00E0',
    'MaterialID': '300A00E1',
    'TotalCompensatorTrayFactor': '300A00E2',
    'CompensatorSequence': '300A00E3',
    'CompensatorNumber': '300A00E4',
    'CompensatorID': '300A00E5',
    'SourceToCompensatorTrayDistance': '300A00E6',
    'CompensatorRows': '300A00E7',
    'CompensatorColumns': '300A00E8',
    'CompensatorPixelSpacing': '300A00E9',
    'CompensatorPosition': '300A00EA',
    'CompensatorTransmissionData': '300A00EB',
    'CompensatorThicknessData': '300A00EC',
    'NumberOfBoli': '300A00ED',
    'CompensatorType': '300A00EE',
    'CompensatorTrayID': '300A00EF',
    'NumberOfBlocks': '300A00F0',
    'TotalBlockTrayFactor': '300A00F2',
    'TotalBlockTrayWaterEquivalentThickness': '300A00F3',
    'BlockSequence': '300A00F4',
    'BlockTrayID': '300A00F5',
    'SourceToBlockTrayDistance': '300A00F6',
    'IsocenterToBlockTrayDistance': '300A00F7',
    'BlockType': '300A00F8',
    'AccessoryCode': '300A00F9',
    'BlockDivergence': '300A00FA',
    'BlockMountingPosition': '300A00FB',
    'BlockNumber': '300A00FC',
    'BlockName': '300A00FE',
    'BlockThickness': '300A0100',
    'BlockTransmission': '300A0102',
    'BlockNumberOfPoints': '300A0104',
    'BlockData': '300A0106',
    'ApplicatorSequence': '300A0107',
    'ApplicatorID': '300A0108',
    'ApplicatorType': '300A0109',
    'ApplicatorDescription': '300A010A',
    'CumulativeDoseReferenceCoefficient': '300A010C',
    'FinalCumulativeMetersetWeight': '300A010E',
    'NumberOfControlPoints': '300A0110',
    'ControlPointSequence': '300A0111',
    'ControlPointIndex': '300A0112',
    'NominalBeamEnergy': '300A0114',
    'DoseRateSet': '300A0115',
    'WedgePositionSequence': '300A0116',
    'WedgePosition': '300A0118',
    'BeamLimitingDevicePositionSequence': '300A011A',
    'LeafJawPositions': '300A011C',
    'GantryAngle': '300A011E',
    'GantryRotationDirection': '300A011F',
    'BeamLimitingDeviceAngle': '300A0120',
    'BeamLimitingDeviceRotationDirection': '300A0121',
    'PatientSupportAngle': '300A0122',
    'PatientSupportRotationDirection': '300A0123',
    'TableTopEccentricAxisDistance': '300A0124',
    'TableTopEccentricAngle': '300A0125',
    'TableTopEccentricRotationDirection': '300A0126',
    'TableTopVerticalPosition': '300A0128',
    'TableTopLongitudinalPosition': '300A0129',
    'TableTopLateralPosition': '300A012A',
    'IsocenterPosition': '300A012C',
    'SurfaceEntryPoint': '300A012E',
    'SourceToSurfaceDistance': '300A0130',
    'AverageBeamDosePointSourceToExternalContourDistance': '300A0131',
    'SourceToExternalContourDistance': '300A0132',
    'ExternalContourEntryPoint': '300A0133',
    'CumulativeMetersetWeight': '300A0134',
    'TableTopPitchAngle': '300A0140',
    'TableTopPitchRotationDirection': '300A0142',
    'TableTopRollAngle': '300A0144',
    'TableTopRollRotationDirection': '300A0146',
    'HeadFixationAngle': '300A0148',
    'GantryPitchAngle': '300A014A',
    'GantryPitchRotationDirection': '300A014C',
    'GantryPitchAngleTolerance': '300A014E',
    'FixationEye': '300A0150',
    'ChairHeadFramePosition': '300A0151',
    'HeadFixationAngleTolerance': '300A0152',
    'ChairHeadFramePositionTolerance': '300A0153',
    'FixationLightAzimuthalAngleTolerance': '300A0154',
    'FixationLightPolarAngleTolerance': '300A0155',
    'PatientSetupSequence': '300A0180',
    'PatientSetupNumber': '300A0182',
    'PatientSetupLabel': '300A0183',
    'PatientAdditionalPosition': '300A0184',
    'FixationDeviceSequence': '300A0190',
    'FixationDeviceType': '300A0192',
    'FixationDeviceLabel': '300A0194',
    'FixationDeviceDescription': '300A0196',
    'FixationDevicePosition': '300A0198',
    'FixationDevicePitchAngle': '300A0199',
    'FixationDeviceRollAngle': '300A019A',
    'ShieldingDeviceSequence': '300A01A0',
    'ShieldingDeviceType': '300A01A2',
    'ShieldingDeviceLabel': '300A01A4',
    'ShieldingDeviceDescription': '300A01A6',
    'ShieldingDevicePosition': '300A01A8',
    'SetupTechnique': '300A01B0',
    'SetupTechniqueDescription': '300A01B2',
    'SetupDeviceSequence': '300A01B4',
    'SetupDeviceType': '300A01B6',
    'SetupDeviceLabel': '300A01B8',
    'SetupDeviceDescription': '300A01BA',
    'SetupDeviceParameter': '300A01BC',
    'SetupReferenceDescription': '300A01D0',
    'TableTopVerticalSetupDisplacement': '300A01D2',
    'TableTopLongitudinalSetupDisplacement': '300A01D4',
    'TableTopLateralSetupDisplacement': '300A01D6',
    'BrachyTreatmentTechnique': '300A0200',
    'BrachyTreatmentType': '300A0202',
    'TreatmentMachineSequence': '300A0206',
    'SourceSequence': '300A0210',
    'SourceNumber': '300A0212',
    'SourceType': '300A0214',
    'SourceManufacturer': '300A0216',
    'ActiveSourceDiameter': '300A0218',
    'ActiveSourceLength': '300A021A',
    'SourceModelID': '300A021B',
    'SourceDescription': '300A021C',
    'SourceEncapsulationNominalThickness': '300A0222',
    'SourceEncapsulationNominalTransmission': '300A0224',
    'SourceIsotopeName': '300A0226',
    'SourceIsotopeHalfLife': '300A0228',
    'SourceStrengthUnits': '300A0229',
    'ReferenceAirKermaRate': '300A022A',
    'SourceStrength': '300A022B',
    'SourceStrengthReferenceDate': '300A022C',
    'SourceStrengthReferenceTime': '300A022E',
    'ApplicationSetupSequence': '300A0230',
    'ApplicationSetupType': '300A0232',
    'ApplicationSetupNumber': '300A0234',
    'ApplicationSetupName': '300A0236',
    'ApplicationSetupManufacturer': '300A0238',
    'TemplateNumber': '300A0240',
    'TemplateType': '300A0242',
    'TemplateName': '300A0244',
    'TotalReferenceAirKerma': '300A0250',
    'BrachyAccessoryDeviceSequence': '300A0260',
    'BrachyAccessoryDeviceNumber': '300A0262',
    'BrachyAccessoryDeviceID': '300A0263',
    'BrachyAccessoryDeviceType': '300A0264',
    'BrachyAccessoryDeviceName': '300A0266',
    'BrachyAccessoryDeviceNominalThickness': '300A026A',
    'BrachyAccessoryDeviceNominalTransmission': '300A026C',
    'ChannelEffectiveLength': '300A0271',
    'ChannelInnerLength': '300A0272',
    'AfterloaderChannelID': '300A0273',
    'SourceApplicatorTipLength': '300A0274',
    'ChannelSequence': '300A0280',
    'ChannelNumber': '300A0282',
    'ChannelLength': '300A0284',
    'ChannelTotalTime': '300A0286',
    'SourceMovementType': '300A0288',
    'NumberOfPulses': '300A028A',
    'PulseRepetitionInterval': '300A028C',
    'SourceApplicatorNumber': '300A0290',
    'SourceApplicatorID': '300A0291',
    'SourceApplicatorType': '300A0292',
    'SourceApplicatorName': '300A0294',
    'SourceApplicatorLength': '300A0296',
    'SourceApplicatorManufacturer': '300A0298',
    'SourceApplicatorWallNominalThickness': '300A029C',
    'SourceApplicatorWallNominalTransmission': '300A029E',
    'SourceApplicatorStepSize': '300A02A0',
    'TransferTubeNumber': '300A02A2',
    'TransferTubeLength': '300A02A4',
    'ChannelShieldSequence': '300A02B0',
    'ChannelShieldNumber': '300A02B2',
    'ChannelShieldID': '300A02B3',
    'ChannelShieldName': '300A02B4',
    'ChannelShieldNominalThickness': '300A02B8',
    'ChannelShieldNominalTransmission': '300A02BA',
    'FinalCumulativeTimeWeight': '300A02C8',
    'BrachyControlPointSequence': '300A02D0',
    'ControlPointRelativePosition': '300A02D2',
    '300A02D4': ('ControlPoint3DPosition'),
    'CumulativeTimeWeight': '300A02D6',
    'CompensatorDivergence': '300A02E0',
    'CompensatorMountingPosition': '300A02E1',
    'SourceToCompensatorDistance': '300A02E2',
    'TotalCompensatorTrayWaterEquivalentThickness': '300A02E3',
    'IsocenterToCompensatorTrayDistance': '300A02E4',
    'CompensatorColumnOffset': '300A02E5',
    'IsocenterToCompensatorDistances': '300A02E6',
    'CompensatorRelativeStoppingPowerRatio': '300A02E7',
    'CompensatorMillingToolDiameter': '300A02E8',
    'IonRangeCompensatorSequence': '300A02EA',
    'CompensatorDescription': '300A02EB',
    'RadiationMassNumber': '300A0302',
    'RadiationAtomicNumber': '300A0304',
    'RadiationChargeState': '300A0306',
    'ScanMode': '300A0308',
    'ModulatedScanModeType': '300A0309',
    'VirtualSourceAxisDistances': '300A030A',
    'SnoutSequence': '300A030C',
    'SnoutPosition': '300A030D',
    'SnoutID': '300A030F',
    'NumberOfRangeShifters': '300A0312',
    'RangeShifterSequence': '300A0314',
    'RangeShifterNumber': '300A0316',
    'RangeShifterID': '300A0318',
    'RangeShifterType': '300A0320',
    'RangeShifterDescription': '300A0322',
    'NumberOfLateralSpreadingDevices': '300A0330',
    'LateralSpreadingDeviceSequence': '300A0332',
    'LateralSpreadingDeviceNumber': '300A0334',
    'LateralSpreadingDeviceID': '300A0336',
    'LateralSpreadingDeviceType': '300A0338',
    'LateralSpreadingDeviceDescription': '300A033A',
    'LateralSpreadingDeviceWaterEquivalentThickness': '300A033C',
    'NumberOfRangeModulators': '300A0340',
    'RangeModulatorSequence': '300A0342',
    'RangeModulatorNumber': '300A0344',
    'RangeModulatorID': '300A0346',
    'RangeModulatorType': '300A0348',
    'RangeModulatorDescription': '300A034A',
    'BeamCurrentModulationID': '300A034C',
    'PatientSupportType': '300A0350',
    'PatientSupportID': '300A0352',
    'PatientSupportAccessoryCode': '300A0354',
    'TrayAccessoryCode': '300A0355',
    'FixationLightAzimuthalAngle': '300A0356',
    'FixationLightPolarAngle': '300A0358',
    'MetersetRate': '300A035A',
    'RangeShifterSettingsSequence': '300A0360',
    'RangeShifterSetting': '300A0362',
    'IsocenterToRangeShifterDistance': '300A0364',
    'RangeShifterWaterEquivalentThickness': '300A0366',
    'LateralSpreadingDeviceSettingsSequence': '300A0370',
    'LateralSpreadingDeviceSetting': '300A0372',
    'IsocenterToLateralSpreadingDeviceDistance': '300A0374',
    'RangeModulatorSettingsSequence': '300A0380',
    'RangeModulatorGatingStartValue': '300A0382',
    'RangeModulatorGatingStopValue': '300A0384',
    'RangeModulatorGatingStartWaterEquivalentThickness': '300A0386',
    'RangeModulatorGatingStopWaterEquivalentThickness': '300A0388',
    'IsocenterToRangeModulatorDistance': '300A038A',
    'ScanSpotTimeOffset': '300A038F',
    'ScanSpotTuneID': '300A0390',
    'ScanSpotPrescribedIndices': '300A0391',
    'NumberOfScanSpotPositions': '300A0392',
    'ScanSpotReordered': '300A0393',
    'ScanSpotPositionMap': '300A0394',
    'ScanSpotReorderingAllowed': '300A0395',
    'ScanSpotMetersetWeights': '300A0396',
    'ScanningSpotSize': '300A0398',
    'NumberOfPaintings': '300A039A',
    'IonToleranceTableSequence': '300A03A0',
    'IonBeamSequence': '300A03A2',
    'IonBeamLimitingDeviceSequence': '300A03A4',
    'IonBlockSequence': '300A03A6',
    'IonControlPointSequence': '300A03A8',
    'IonWedgeSequence': '300A03AA',
    'IonWedgePositionSequence': '300A03AC',
    'ReferencedSetupImageSequence': '300A0401',
    'SetupImageComment': '300A0402',
    'MotionSynchronizationSequence': '300A0410',
    'ControlPointOrientation': '300A0412',
    'GeneralAccessorySequence': '300A0420',
    'GeneralAccessoryID': '300A0421',
    'GeneralAccessoryDescription': '300A0422',
    'GeneralAccessoryType': '300A0423',
    'GeneralAccessoryNumber': '300A0424',
    'SourceToGeneralAccessoryDistance': '300A0425',
    'ApplicatorGeometrySequence': '300A0431',
    'ApplicatorApertureShape': '300A0432',
    'ApplicatorOpening': '300A0433',
    'ApplicatorOpeningX': '300A0434',
    'ApplicatorOpeningY': '300A0435',
    'SourceToApplicatorMountingPositionDistance': '300A0436',
    'NumberOfBlockSlabItems': '300A0440',
    'BlockSlabSequence': '300A0441',
    'BlockSlabThickness': '300A0442',
    'BlockSlabNumber': '300A0443',
    'DeviceMotionControlSequence': '300A0450',
    'DeviceMotionExecutionMode': '300A0451',
    'DeviceMotionObservationMode': '300A0452',
    'DeviceMotionParameterCodeSequence': '300A0453',
    'DistalDepthFraction': '300A0501',
    'DistalDepth': '300A0502',
    'NominalRangeModulationFractions': '300A0503',
    'NominalRangeModulatedRegionDepths': '300A0504',
    'DepthDoseParametersSequence': '300A0505',
    'DeliveredDepthDoseParametersSequence': '300A0506',
    'DeliveredDistalDepthFraction': '300A0507',
    'DeliveredDistalDepth': '300A0508',
    'DeliveredNominalRangeModulationFractions': '300A0509',
    'DeliveredNominalRangeModulatedRegionDepths': '300A0510',
    'DeliveredReferenceDoseDefinition': '300A0511',
    'ReferenceDoseDefinition': '300A0512',
    'ReferencedRTPlanSequence': '300C0002',
    'ReferencedBeamSequence': '300C0004',
    'ReferencedBeamNumber': '300C0006',
    'ReferencedReferenceImageNumber': '300C0007',
    'StartCumulativeMetersetWeight': '300C0008',
    'EndCumulativeMetersetWeight': '300C0009',
    'ReferencedBrachyApplicationSetupSequence': '300C000A',
    'ReferencedBrachyApplicationSetupNumber': '300C000C',
    'ReferencedSourceNumber': '300C000E',
    'ReferencedFractionGroupSequence': '300C0020',
    'ReferencedFractionGroupNumber': '300C0022',
    'ReferencedVerificationImageSequence': '300C0040',
    'ReferencedReferenceImageSequence': '300C0042',
    'ReferencedDoseReferenceSequence': '300C0050',
    'ReferencedDoseReferenceNumber': '300C0051',
    'BrachyReferencedDoseReferenceSequence': '300C0055',
    'ReferencedStructureSetSequence': '300C0060',
    'ReferencedPatientSetupNumber': '300C006A',
    'ReferencedDoseSequence': '300C0080',
    'ReferencedToleranceTableNumber': '300C00A0',
    'ReferencedBolusSequence': '300C00B0',
    'ReferencedWedgeNumber': '300C00C0',
    'ReferencedCompensatorNumber': '300C00D0',
    'ReferencedBlockNumber': '300C00E0',
    'ReferencedControlPointIndex': '300C00F0',
    'ReferencedControlPointSequence': '300C00F2',
    'ReferencedStartControlPointIndex': '300C00F4',
    'ReferencedStopControlPointIndex': '300C00F6',
    'ReferencedRangeShifterNumber': '300C0100',
    'ReferencedLateralSpreadingDeviceNumber': '300C0102',
    'ReferencedRangeModulatorNumber': '300C0104',
    'OmittedBeamTaskSequence': '300C0111',
    'ReasonForOmission': '300C0112',
    'ReasonForOmissionDescription': '300C0113',
    'ApprovalStatus': '300E0002',
    'ReviewDate': '300E0004',
    'ReviewTime': '300E0005',
    'ReviewerName': '300E0008',
    'Arbitrary': '40000010',
    'TextComments': '40004000',
    'ResultsID': '40080040',
    'ResultsIDIssuer': '40080042',
    'ReferencedInterpretationSequence': '40080050',
    'ReportProductionStatusTrial': '400800FF',
    'InterpretationRecordedDate': '40080100',
    'InterpretationRecordedTime': '40080101',
    'InterpretationRecorder': '40080102',
    'ReferenceToRecordedSound': '40080103',
    'InterpretationTranscriptionDate': '40080108',
    'InterpretationTranscriptionTime': '40080109',
    'InterpretationTranscriber': '4008010A',
    'InterpretationText': '4008010B',
    'InterpretationAuthor': '4008010C',
    'InterpretationApproverSequence': '40080111',
    'InterpretationApprovalDate': '40080112',
    'InterpretationApprovalTime': '40080113',
    'PhysicianApprovingInterpretation': '40080114',
    'InterpretationDiagnosisDescription': '40080115',
    'InterpretationDiagnosisCodeSequence': '40080117',
    'ResultsDistributionListSequence': '40080118',
    'DistributionName': '40080119',
    'DistributionAddress': '4008011A',
    'InterpretationID': '40080200',
    'InterpretationIDIssuer': '40080202',
    'InterpretationTypeID': '40080210',
    'InterpretationStatusID': '40080212',
    'Impressions': '40080300',
    'ResultsComments': '40084000',
    'LowEnergyDetectors': '40100001',
    'HighEnergyDetectors': '40100002',
    'DetectorGeometrySequence': '40100004',
    'ThreatROIVoxelSequence': '40101001',
    'ThreatROIBase': '40101004',
    'ThreatROIExtents': '40101005',
    'ThreatROIBitmap': '40101006',
    'RouteSegmentID': '40101007',
    'GantryType': '40101008',
    'OOIOwnerType': '40101009',
    'RouteSegmentSequence': '4010100A',
    'PotentialThreatObjectID': '40101010',
    'ThreatSequence': '40101011',
    'ThreatCategory': '40101012',
    'ThreatCategoryDescription': '40101013',
    'ATDAbilityAssessment': '40101014',
    'ATDAssessmentFlag': '40101015',
    'ATDAssessmentProbability': '40101016',
    'Mass': '40101017',
    'Density': '40101018',
    'ZEffective': '40101019',
    'BoardingPassID': '4010101A',
    'CenterOfMass': '4010101B',
    'CenterOfPTO': '4010101C',
    'BoundingPolygon': '4010101D',
    'RouteSegmentStartLocationID': '4010101E',
    'RouteSegmentEndLocationID': '4010101F',
    'RouteSegmentLocationIDType': '40101020',
    'AbortReason': '40101021',
    'VolumeOfPTO': '40101023',
    'AbortFlag': '40101024',
    'RouteSegmentStartTime': '40101025',
    'RouteSegmentEndTime': '40101026',
    'TDRType': '40101027',
    'InternationalRouteSegment': '40101028',
    'ThreatDetectionAlgorithmandVersion': '40101029',
    'AssignedLocation': '4010102A',
    'AlarmDecisionTime': '4010102B',
    'AlarmDecision': '40101031',
    'NumberOfTotalObjects': '40101033',
    'NumberOfAlarmObjects': '40101034',
    'PTORepresentationSequence': '40101037',
    'ATDAssessmentSequence': '40101038',
    'TIPType': '40101039',
    'DICOSVersion': '4010103A',
    'OOIOwnerCreationTime': '40101041',
    'OOIType': '40101042',
    'OOISize': '40101043',
    'AcquisitionStatus': '40101044',
    'BasisMaterialsCodeSequence': '40101045',
    'PhantomType': '40101046',
    'OOIOwnerSequence': '40101047',
    'ScanType': '40101048',
    'ItineraryID': '40101051',
    'ItineraryIDType': '40101052',
    'ItineraryIDAssigningAuthority': '40101053',
    'RouteID': '40101054',
    'RouteIDAssigningAuthority': '40101055',
    'InboundArrivalType': '40101056',
    'CarrierID': '40101058',
    'CarrierIDAssigningAuthority': '40101059',
    'SourceOrientation': '40101060',
    'SourcePosition': '40101061',
    'BeltHeight': '40101062',
    'AlgorithmRoutingCodeSequence': '40101064',
    'TransportClassification': '40101067',
    'OOITypeDescriptor': '40101068',
    'TotalProcessingTime': '40101069',
    'DetectorCalibrationData': '4010106C',
    'AdditionalScreeningPerformed': '4010106D',
    'AdditionalInspectionSelectionCriteria': '4010106E',
    'AdditionalInspectionMethodSequence': '4010106F',
    'AITDeviceType': '40101070',
    'QRMeasurementsSequence': '40101071',
    'TargetMaterialSequence': '40101072',
    'SNRThreshold': '40101073',
    'ImageScaleRepresentation': '40101075',
    'ReferencedPTOSequence': '40101076',
    'ReferencedTDRInstanceSequence': '40101077',
    'PTOLocationDescription': '40101078',
    'AnomalyLocatorIndicatorSequence': '40101079',
    'AnomalyLocatorIndicator': '4010107A',
    'PTORegionSequence': '4010107B',
    'InspectionSelectionCriteria': '4010107C',
    'SecondaryInspectionMethodSequence': '4010107D',
    'PRCSToRCSOrientation': '4010107E',
    'MACParametersSequence': '4FFE0001',
    'SharedFunctionalGroupsSequence': '52009229',
    'PerFrameFunctionalGroupsSequence': '52009230',
    'WaveformSequence': '54000100',
    'ChannelMinimumValue': '54000110',
    'ChannelMaximumValue': '54000112',
    'WaveformBitsAllocated': '54001004',
    'WaveformSampleInterpretation': '54001006',
    'WaveformPaddingValue': '5400100A',
    'WaveformData': '54001010',
    'FirstOrderPhaseCorrectionAngle': '56000010',
    'SpectroscopyData': '56000020',
    'FloatPixelData': '7FE00008',
    'DoubleFloatPixelData': '7FE00009',
    'PixelData': '7FE00010',
    'CoefficientsSDVN': '7FE00020',
    'CoefficientsSDHN': '7FE00030',
    'CoefficientsSDDN': '7FE00040',
    'DigitalSignaturesSequence': 'FFFAFFFA',
    'DataSetTrailingPadding': 'FFFCFFFC',
    'Item': 'FFFEE000',
    'ItemDelimitationItem': 'FFFEE00D',
    'SequenceDelimitationItem': 'FFFEE0DD',
  };
  Object.freeze(keywordToTag);

  function getFrameMapping(metadata) {
    const rows = metadata.Rows;
    const columns = metadata.Columns;
    const totalPixelMatrixColumns = metadata.TotalPixelMatrixColumns;
    const totalPixelMatrixRows = metadata.TotalPixelMatrixRows;
    const sopInstanceUID = metadata.SOPInstanceUID;
    let numberOfFrames = metadata.NumberOfFrames || 1;
    numberOfFrames = Number(numberOfFrames);
    let frameOffsetNumber = metadata.ConcatenationFrameOffsetNumber || 0;
    frameOffsetNumber = Number(frameOffsetNumber);
    /*
     * The values "TILED_SPARSE" and "TILED_FULL" were introduced in the 2018
     * of the standard. Older datasets are equivalent to "TILED_SPARSE"
     * even though they may not have a value or a different value.
    */
    const dimensionOrganizationType = metadata.DimensionOrganizationType || 'TILED_SPARSE';
    const tilesPerRow = Math.ceil(totalPixelMatrixColumns / columns);
    const frameMapping = {};
    if (dimensionOrganizationType === 'TILED_FULL') {
      let offset = frameOffsetNumber + 1;
      let limit = frameOffsetNumber + numberOfFrames;
      for (let j = offset; j <= limit; j++) {
        let rowFraction = j / tilesPerRow;
        let rowIndex = Math.ceil(rowFraction);
        let colIndex = j - (rowIndex * tilesPerRow) + tilesPerRow;
        let index = rowIndex + '-' + colIndex;
        let frameNumber = j - offset + 1;
        frameMapping[index] = `${sopInstanceUID}/frames/${frameNumber}`;
      }
    } else {
      const functionalGroups = metadata.PerFrameFunctionalGroupsSequence;
      for (let j = 0; j < numberOfFrames; j++) {
        let planePositions = functionalGroups[j].PlanePositionSlideSequence[0];
        let rowPosition = planePositions.RowPositionInTotalImagePixelMatrix;
        let columnPosition = planePositions.ColumnPositionInTotalImagePixelMatrix;
        let rowIndex = Math.ceil(rowPosition / columns);
        let colIndex = Math.ceil(columnPosition / rows);
        let index = rowIndex + '-' + colIndex;
        let frameNumber = j + 1;
        frameMapping[index] = `${sopInstanceUID}/frames/${frameNumber}`;
      }
    }
    return frameMapping;
  }


  function formatImageMetadata(metadata) {

    const sopClassUID = metadata['00080016']['Value'][0];
    if (sopClassUID !== '1.2.840.10008.5.1.4.1.1.77.1.6') {
      throw new Error('SOP Class UID "' + sopClassUID + '" is not supported');
    }

    const imageType = metadata['00080008']['Value'];
    if ( imageType[2] !== 'VOLUME' ) {
      throw new Error(
        'expected image type value 3 to be "VOLUME", is "' + imageType[2] + '" instead'
      );
    }

    const loadJSONDataset = (elements) => {
      const dataset = {};
      Object.keys(elements).forEach(tag => {
        const keyword = tagToKeyword[tag];
        const vr = elements[tag]['vr'];
        if ('BulkDataURI' in elements[tag]) {
          console.log(`skip bulk data element "${keyword}"`);
        } else if ('Value' in elements[tag]) {
          const value = elements[tag]['Value'];
          if (vr === 'SQ') {
            dataset[keyword] = value.map(item => {
              return loadJSONDataset(item);
            });
          } else {
            // Handle value multiplicity.
            if (value.length === 1) {
              dataset[keyword] = value[0];
            } else {
              dataset[keyword] = value;
            }
          }
        } else {
          if (vr === 'SQ') {
            dataset[keyword] = [];
          } else {
            dataset[keyword] = "";  // TODO: should rather be null?
          }
        }
      });
      return dataset;
    };

    const dataset = loadJSONDataset(metadata);

    // The top level (lowest resolution) image may be a single frame image in
    // which case the "NumberOfFrames" attribute is optional. We include it for
    // consistency.
    if (!('NumberOfFrames' in dataset)) {
      dataset.NumberOfFrames = 1;
    }

    return dataset;
  }

  function generateUID() {
    /*
     * http://dicom.nema.org/medical/dicom/current/output/chtml/part05/sect_B.2.html
     * https://www.itu.int/rec/T-REC-X.667-201210-I/en
     *  A UUID can be represented as a single integer value.
     * To obtain the single integer value of the UUID, the 16 octets of the
     * binary representation shall be treated as an unsigned integer encoding
     * with the most significant bit of the integer encoding as the most
     * significant bit (bit 7) of the first of the sixteen octets (octet 15) and
     * the least significant bit as the least significant bit (bit 0) of the last
     * of the sixteen octets (octet 0).
    */
    // FIXME: This is not a valid UUID!
    let uid = '2.25.' + Math.floor(1 + Math.random() * 9);
    while (uid.length < 44) {
      uid += Math.floor(1 + Math.random() * 10);
    }
    return uid;
  }

  const _uid = Symbol('uid');
  const _scoord3d = Symbol('scoord3d');

  /* Region of interest.
   */
  class ROI {

    /* @constructor
     * @param{Scoord3D} scoord3d spatial coordinates
     * @param{Object} properties qualititative evaluations
     */
    constructor(options) {
      if (!('scoord3d' in options)) {
        throw new Error('spatial coordinates are required for ROI')
      }
      if (!(typeof(options.scoord3d) === 'object' || options.scoord3d !== null)) {
        throw new Error('scoord3d of ROI must be a Scoord3D object')
      }
      if (!('uid' in options)) {
        this[_uid] = generateUID();
      } else {
        if (!(typeof(options.uid) === 'string' || options.uid instanceof String)) {
          throw new Error('uid of ROI must be a string')
        }
        this[_uid] = options.uid;
      }
      this[_scoord3d] = options.scoord3d;
      // TODO: store SOPInstanceUID, SOPClassUID and FrameNumbers as reference
    }

    get uid() {
      return this[_uid];
    }

    get scoord3d() {
      return this[_scoord3d];
    }

  }

  const _coordinates = Symbol('coordinates');
  const _frameOfReferenceUID = Symbol('frameOfReferenceUID');
  const _fiducialUID = Symbol('fiducialUID');


  /*
   * Spatial coordinates of geometric region(s) of interest (ROI) in the DICOM
   * slide coordinate system in millimeter unit.
   */
  class Scoord3D {

    constructor(options) {
      if (!(typeof options.frameOfReferenceUID === 'string' ||
            options.frameOfReferenceUID instanceof String)) {
        throw new Error('frameOfReferenceUID of Scoord3D must be a string')
      }
      this[_frameOfReferenceUID] = options.frameOfReferenceUID;
      options.fiducialUID = options.fiducialUID || generateUID();
      if (!(typeof options.fiducialUID === 'string' ||
            options.fiducialUID instanceof String)) {
        throw new Error('fiducialUID of Scoord3D must be a string')
      }
      this[_fiducialUID] = options.fiducialUID;
      if (!Array.isArray(options.coordinates)) {
        throw new Error('coordinates of Scoord3D must be an array')
      }
      this[_coordinates] = options.coordinates;
    }

    get graphicData() {
      return this[_coordinates]
    }

    get graphicType() {
      throw new Error('Prototype property "graphicType" must be implemented')
    }

    get frameOfReferenceUID() {
      return this[_frameOfReferenceUID]
    }

    get fiducialUID() {
      return this[_fiducialUID]
    }

  }

  class Point$1 extends Scoord3D {

    /*
     * Single location denoted by a single (x,y,z) triplet.
     */
    constructor(options) {
      if (!Array.isArray(options.coordinates)) {
        throw new Error('coordinates of Point must be an array')
      }
      if (options.coordinates.length !== 3) {
        throw new Error('coordinates of Point must be an array of length 3')
      }
      if (options.coordinates.some((c => c < 0))) {
        throw new Error('coordinates of Point must be positive numbers')
      }
      super({
        coordinates: options.coordinates,
        frameOfReferenceUID: options.frameOfReferenceUID,
        fiducialUID: options.fiducialUID
      });
    }

    get graphicType() {
      return 'POINT'
    }

  }

  class Multipoint extends Scoord3D {

    /*
     * Multiple points each denoted by an (x,y,z) triplet.
     * Points need not be coplanar.
     */
    constructor(options) {
      if (!Array.isArray(options.coordinates)) {
        throw new Error('coordinates of Multipoint must be an array')
      }
      if(options.coordinates.find(c => c.length !== 3)!== undefined) {
        throw new Error('coordinates of Multipoint must be an array of (x,y,z) triplets')
      }
      if(options.coordinates.find(c => c.some((item => item < 0)))) {
        throw new Error('coordinates of Multipoint must be positive numbers')
      }
      super({
        coordinates: options.coordinates,
        frameOfReferenceUID: options.frameOfReferenceUID,
        fiducialUID: options.fiducialUID
      });
    }

    get graphicType() {
      return 'MULTIPOINT'
    }

  }

  class Polyline extends Scoord3D {

    /*
     * Multiple points denoted by (x,y,z) triplets that represent
     * connected line segments with ordered vertices
     * Points need not be coplanar.
     */
    constructor(options) {
      if (!Array.isArray(options.coordinates)) {
        throw new Error('coordinates of Polyline must be an array')
      }
      if(options.coordinates.find(c => c.length !== 3)!== undefined) {
        throw new Error('coordinates of Polyline must be an array of (x,y,z) triplets')
      }
      if(options.coordinates.find(c => c.some((item => item < 0)))) {
        throw new Error('coordinates of Polyline must be positive numbers')
      }
      super({
        coordinates: options.coordinates,
        frameOfReferenceUID: options.frameOfReferenceUID,
        fiducialUID: options.fiducialUID
      });
    }

    get graphicType() {
      return 'POLYLINE'
    }
  }


  class Polygon$1 extends Scoord3D {

    /*
     * Multiple points denoted by (x,y,z) triplets that represent
     * connected line segments with ordered vertices.
     * First and last point shall be the same.
     * Points shall be coplanar.
     */
    constructor(options) {
      if (!Array.isArray(options.coordinates)) {
        throw new Error('coordinates of Polygon must be an array')
      }
      if(options.coordinates.find(c => c.length !== 3)!== undefined) {
        throw new Error('coordinates of Polygon must be an array of (x,y,z) triplets')
      }
      if(options.coordinates.find(c => c.some((item => item < 0)))) {
        throw new Error('coordinates of Polygon must be positive numbers')
      }
      const n = options.coordinates.length;
      if((options.coordinates[0][0] !== options.coordinates[n-1][0]) ||
         (options.coordinates[0][1] !== options.coordinates[n-1][1]) ||
         (options.coordinates[0][2] !== options.coordinates[n-1][2])) {
        throw new Error('first and last coordinate of Polygon must be the same')
      }
      super({
        coordinates: options.coordinates,
        frameOfReferenceUID: options.frameOfReferenceUID,
        fiducialUID: options.fiducialUID
      });
    }

    get graphicType() {
      return 'POLYGON'
    }

  }

  class Ellipsoid extends Scoord3D {

    /*
     * Six points denoted by (x,y,z) triplets, where the first two points represent
     * the endpoints of the first axis and the second two points represent the
     * endpoints of the second axis and the third two points represent the
     * endpoints of the third axis. respectively.
     */
    constructor(options) {
      if (!Array.isArray(options.coordinates)) {
        throw new Error('coordinates of Ellipsoid must be an array')
      }
      if (options.coordinates.length !== 6) {
        throw new Error('coordinates of Ellipsoid must be an array of length 6')
      }
      if(options.coordinates.find(c => c.length !== 3)!== undefined) {
        throw new Error('coordinates of Ellipsoid must be an array of (x,y,z) triplets')
      }
      if(options.coordinates.find(c => c.some((item => item < 0)))) {
        throw new Error('coordinates of Ellipsoid must be positive numbers')
      }
      super({
        coordinates: options.coordinates,
        frameOfReferenceUID: options.frameOfReferenceUID,
        fiducialUID: options.fiducialUID
      });
    }

    get graphicType() {
      return 'ELLIPSOID'
    }

  }

  class Ellipse extends Scoord3D {

    /*
     * Four points denoted by (x,y,z) triplets, where the first two points represent
     * the endpoints of the major axis and the second two points represent the
     * endpoints of the minor axis.
     */
    constructor(options) {
      if (!Array.isArray(options.coordinates)) {
        throw new Error('coordinates of Ellipse must be an array')
      }
      if (options.coordinates.length !== 4) {
        throw new Error('coordinates of Ellipse must be an array of length 4')
      }
      if(options.coordinates.find(c => c.length !== 3)!== undefined) {
        throw new Error('coordinates of Ellipse must be an array of (x,y,z) triplets')
      }
      if(options.coordinates.find(c => c.some((item => item < 0)))) {
        throw new Error('coordinates of Ellipse must be positive numbers')
      }
      // TODO: assert major and minor axes are in right angle
      super({
        coordinates: options.coordinates,
        frameOfReferenceUID: options.frameOfReferenceUID,
        fiducialUID: options.fiducialUID
      });
    }

    get graphicType() {
      return 'ELLIPSE'
    }

  }

  var dicomwebClient = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
    factory(exports);
  }(commonjsGlobal, (function (exports) {
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function (obj) {
          return typeof obj;
        };
      } else {
        _typeof = function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    /**
     * Converts a Uint8Array to a String.
     * @param {Uint8Array} array that should be converted
     * @param {Number} offset array offset in case only subset of array items should
                       be extracted (default: 0)
     * @param {Number} limit maximum number of array items that should be extracted
                       (defaults to length of array)
     * @returns {String}
     */
    function uint8ArrayToString(arr) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var limit = arguments.length > 2 ? arguments[2] : undefined;
      var itemLimit = limit || arr.length - offset;
      var str = "";

      for (var i = offset; i < offset + itemLimit; i++) {
        str += String.fromCharCode(arr[i]);
      }

      return str;
    }
    /**
     * Converts a String to a Uint8Array.
     * @param {String} str string that should be converted
     * @returns {Uint8Array}
     */


    function stringToUint8Array(str) {
      var arr = new Uint8Array(str.length);

      for (var i = 0, j = str.length; i < j; i++) {
        arr[i] = str.charCodeAt(i);
      }

      return arr;
    }
    /**
     * Identifies the boundary in a multipart/related message header.
     * @param {String} header message header
     * @returns {String} boundary
     */


    function identifyBoundary(header) {
      var parts = header.split("\r\n");

      for (var i = 0; i < parts.length; i++) {
        if (parts[i].substr(0, 2) === "--") {
          return parts[i];
        }
      }

      return null;
    }
    /**
     * Checks whether a given token is contained by a message at a given offset.
     * @param {Uint8Array} message message content
     * @param {Uint8Array} token substring that should be present
     * @param {Number} offset offset in message content from where search should start
     * @returns {Boolean} whether message contains token at offset
     */


    function containsToken(message, token) {
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (offset + token.length > message.length) {
        return false;
      }

      var index = offset;

      for (var i = 0; i < token.length; i++) {
        if (token[i] !== message[index]) {
          return false;
        }

        index += 1;
      }

      return true;
    }
    /**
     * Finds a given token in a message at a given offset.
     * @param {Uint8Array} message message content
     * @param {Uint8Array} token substring that should be found
     * @param {String} offset message body offset from where search should start
     * @returns {Boolean} whether message has a part at given offset or not
     */


    function findToken(message, token) {
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var maxSearchLength = arguments.length > 3 ? arguments[3] : undefined;
      var searchLength = message.length;

      if (maxSearchLength) {
        searchLength = Math.min(offset + maxSearchLength, message.length);
      }

      for (var i = offset; i < searchLength; i++) {
        // If the first value of the message matches
        // the first value of the token, check if
        // this is the full token.
        if (message[i] === token[0]) {
          if (containsToken(message, token, i)) {
            return i;
          }
        }
      }

      return -1;
    }
    /**
     * Create a random GUID
     *
     * @return {string}
     */


    function guid() {
      function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      }

      return "".concat(s4() + s4(), "-").concat(s4(), "-").concat(s4(), "-").concat(s4(), "-").concat(s4()).concat(s4()).concat(s4());
    }
    /**
     * @typedef {Object} MultipartEncodedData
     * @property {ArrayBuffer} data The encoded Multipart Data
     * @property {String} boundary The boundary used to divide pieces of the encoded data
     */

    /**
     * Encode one or more DICOM datasets into a single body so it can be
     * sent using the Multipart Content-Type.
     *
     * @param {ArrayBuffer[]} datasets Array containing each file to be encoded in the
                              multipart body, passed as ArrayBuffers.
     * @param {String} [boundary] Optional string to define a boundary between each part
                                  of the multipart body. If this is not specified, a random
                                  GUID will be generated.
     * @return {MultipartEncodedData} The Multipart encoded data returned as an Object. This
                                      contains both the data itself, and the boundary string
                                      used to divide it.
     */


    function multipartEncode(datasets) {
      var boundary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : guid();
      var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "application/dicom";
      var contentTypeString = "Content-Type: ".concat(contentType);
      var header = "\r\n--".concat(boundary, "\r\n").concat(contentTypeString, "\r\n\r\n");
      var footer = "\r\n--".concat(boundary, "--");
      var headerArray = stringToUint8Array(header);
      var footerArray = stringToUint8Array(footer);
      var headerLength = headerArray.length;
      var footerLength = footerArray.length;
      var length = 0; // Calculate the total length for the final array

      var contentArrays = datasets.map(function (datasetBuffer) {
        var contentArray = new Uint8Array(datasetBuffer);
        var contentLength = contentArray.length;
        length += headerLength + contentLength + footerLength;
        return contentArray;
      }); // Allocate the array

      var multipartArray = new Uint8Array(length); // Set the initial header

      multipartArray.set(headerArray, 0); // Write each dataset into the multipart array

      var position = 0;
      contentArrays.forEach(function (contentArray) {
        multipartArray.set(headerArray, position);
        multipartArray.set(contentArray, position + headerLength);
        position += headerLength + contentArray.length;
      });
      multipartArray.set(footerArray, position);
      return {
        data: multipartArray.buffer,
        boundary: boundary
      };
    }
    /**
     * Decode a Multipart encoded ArrayBuffer and return the components as an Array.
     *
     * @param {ArrayBuffer} response Data encoded as a 'multipart/related' message
     * @returns {Array} The content
     */


    function multipartDecode(response) {
      var message = new Uint8Array(response);
      /* Set a maximum length to search for the header boundaries, otherwise
           findToken can run for a long time
        */

      var maxSearchLength = 1000; // First look for the multipart mime header

      var separator = stringToUint8Array("\r\n\r\n");
      var headerIndex = findToken(message, separator, 0, maxSearchLength);

      if (headerIndex === -1) {
        throw new Error("Response message has no multipart mime header");
      }

      var header = uint8ArrayToString(message, 0, headerIndex);
      var boundaryString = identifyBoundary(header);

      if (!boundaryString) {
        throw new Error("Header of response message does not specify boundary");
      }

      var boundary = stringToUint8Array(boundaryString);
      var boundaryLength = boundary.length;
      var components = [];
      var offset = boundaryLength; // Loop until we cannot find any more boundaries

      var boundaryIndex;

      while (boundaryIndex !== -1) {
        // Search for the next boundary in the message, starting
        // from the current offset position
        boundaryIndex = findToken(message, boundary, offset); // If no further boundaries are found, stop here.

        if (boundaryIndex === -1) {
          break;
        }

        var headerTokenIndex = findToken(message, separator, offset, maxSearchLength);

        if (headerTokenIndex === -1) {
          throw new Error("Response message part has no mime header");
        }

        offset = headerTokenIndex + separator.length; // Extract data from response message, excluding "\r\n"

        var spacingLength = 2;
        var data = response.slice(offset, boundaryIndex - spacingLength); // Add the data to the array of results

        components.push(data); // Move the offset to the end of the current section,
        // plus the identified boundary

        offset = boundaryIndex + boundaryLength;
      }

      return components;
    }

    function isObject(obj) {
      return _typeof(obj) === "object" && obj !== null;
    }

    function isEmptyObject(obj) {
      return Object.keys(obj).length === 0 && obj.constructor === Object;
    }

    var getFirstResult = function getFirstResult(result) {
      return result[0];
    };

    var getFirstResultIfLengthGtOne = function getFirstResultIfLengthGtOne(result) {
      if (result.length > 1) {
        return result;
      }

      return result[0];
    };

    var MEDIATYPES = {
      DICOM: "application/dicom",
      DICOM_JSON: "application/dicom+json",
      OCTET_STREAM: "application/octet-stream",
      PDF: "application/pdf",
      JPEG: "image/jpeg",
      PNG: "image/png"
    };
    /**
     * Class for interacting with DICOMweb RESTful services.
     */

    var DICOMwebClient =
    /*#__PURE__*/
    function () {
      /**
       * @constructor
       * @param {Object} options (choices: "url", "username", "password", "headers")
       */
      function DICOMwebClient(options) {
        _classCallCheck(this, DICOMwebClient);

        this.baseURL = options.url;

        if (!this.baseURL) {
          console.error("no DICOMweb base url provided - calls will fail");
        }

        if ("username" in options) {
          this.username = options.username;

          if (!("password" in options)) {
            console.error("no password provided to authenticate with DICOMweb service");
          }

          this.password = options.password;
        }

        if ("qidoURLPrefix" in options) {
          console.log("use URL prefix for QIDO-RS: ".concat(options.qidoURLPrefix));
          this.qidoURL = "".concat(this.baseURL, "/").concat(options.qidoURLPrefix);
        } else {
          this.qidoURL = this.baseURL;
        }

        if ("wadoURLPrefix" in options) {
          console.log("use URL prefix for WADO-RS: ".concat(options.wadoURLPrefix));
          this.wadoURL = "".concat(this.baseURL, "/").concat(options.wadoURLPrefix);
        } else {
          this.wadoURL = this.baseURL;
        }

        if ("stowURLPrefix" in options) {
          console.log("use URL prefix for STOW-RS: ".concat(options.stowURLPrefix));
          this.stowURL = "".concat(this.baseURL, "/").concat(options.stowURLPrefix);
        } else {
          this.stowURL = this.baseURL;
        }

        this.headers = options.headers || {};
      }

      _createClass(DICOMwebClient, [{
        key: "_httpRequest",
        value: function _httpRequest(url, method, headers) {
          var _this = this;

          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
          return new Promise(function (resolve, reject) {
            var request = new XMLHttpRequest();
            request.open(method, url, true);

            if ("responseType" in options) {
              request.responseType = options.responseType;
            }

            if (_typeof(headers) === "object") {
              Object.keys(headers).forEach(function (key) {
                request.setRequestHeader(key, headers[key]);
              });
            } // now add custom headers from the user
            // (e.g. access tokens)


            var userHeaders = _this.headers;
            Object.keys(userHeaders).forEach(function (key) {
              request.setRequestHeader(key, userHeaders[key]);
            }); // Event triggered when upload starts

            request.onloadstart = function onloadstart() {// console.log('upload started: ', url)
            }; // Event triggered when upload ends


            request.onloadend = function onloadend() {// console.log('upload finished')
            }; // Handle response message


            request.onreadystatechange = function onreadystatechange() {
              if (request.readyState === 4) {
                if (request.status === 200) {
                  resolve(request.response);
                } else if (request.status === 202) {
                  console.warn("some resources already existed: ", request);
                  resolve(request.response);
                } else if (request.status === 204) {
                  console.warn("empty response for request: ", request);
                  resolve([]);
                } else {
                  console.error("request failed: ", request);
                  var error = new Error("request failed");
                  error.request = request;
                  error.response = request.response;
                  error.status = request.status;
                  console.error(error);
                  console.error(error.response);
                  reject(error);
                }
              }
            }; // Event triggered while download progresses


            if ("progressCallback" in options) {
              if (typeof options.progressCallback === "function") {
                request.onprogress = options.progressCallback;
              }
            } // request.onprogress = function (event) {
            //   const loaded = progress.loaded;
            //   let total;
            //   let percentComplete;
            //   if (progress.lengthComputable) {
            //     total = progress.total;
            //     percentComplete = Math.round((loaded / total) * 100);
            //   j
            //   // console.log('download progress: ', percentComplete, ' %');
            //   return(percentComplete);
            // };


            if ("data" in options) {
              request.send(options.data);
            } else {
              request.send();
            }
          });
        }
      }, {
        key: "_httpGet",
        value: function _httpGet(url, headers, responseType, progressCallback) {
          return this._httpRequest(url, "get", headers, {
            responseType: responseType,
            progressCallback: progressCallback
          });
        }
      }, {
        key: "_httpGetApplicationJson",
        value: function _httpGetApplicationJson(url) {
          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var progressCallback = arguments.length > 2 ? arguments[2] : undefined;
          var urlWithQueryParams = url;

          if (_typeof(params) === "object") {
            if (!isEmptyObject(params)) {
              urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);
            }
          }

          var headers = {
            Accept: MEDIATYPES.DICOM_JSON
          };
          var responseType = "json";
          return this._httpGet(urlWithQueryParams, headers, responseType, progressCallback);
        }
        /**
         * Performs an HTTP GET request that accepts a message with
         "application/pdf" media type.
         * @param {String} url
         * @param {Object[]} mediaTypes
         * @param {Object} params
         * @param {Function} progressCallback
         * @return {*}
         * @private
         */

      }, {
        key: "_httpGetApplicationPdf",
        value: function _httpGetApplicationPdf(url) {
          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var progressCallback = arguments.length > 2 ? arguments[2] : undefined;
          var urlWithQueryParams = url;

          if (_typeof(params) === "object") {
            if (!isEmptyObject(params)) {
              urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);
            }
          }

          var headers = {
            Accept: MEDIATYPES.PDF
          };
          var responseType = "json";
          return this._httpGet(urlWithQueryParams, headers, responseType, progressCallback);
        }
        /**
         * Performs an HTTP GET request that accepts a message with an image
         media type.
         *
         * @param {String} url
         * @param {Object[]} mediaTypes
         * @param {Object} params
         * @param {Function} progressCallback
         * @return {*}
         * @private
         */

      }, {
        key: "_httpGetImage",
        value: function _httpGetImage(url, mediaTypes) {
          var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var progressCallback = arguments.length > 3 ? arguments[3] : undefined;
          var urlWithQueryParams = url;

          if (_typeof(params) === "object") {
            if (!isEmptyObject(params)) {
              urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);
            }
          }

          var supportedMediaTypes = ["image/", "image/*", "image/jpeg", "image/jp2", "image/gif", "image/png"];

          var acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes);

          var headers = {
            Accept: acceptHeaderFieldValue
          };
          var responseType = "arraybuffer";
          return this._httpGet(urlWithQueryParams, headers, responseType, progressCallback);
        }
        /**
         * Performs an HTTP GET request that accepts a message with a text
         media type.
         *
         * @param {String} url
         * @param {Object[]} mediaTypes
         * @param {Object} params
         * @param {Function} progressCallback
         * @return {*}
         * @private
         */

      }, {
        key: "_httpGetText",
        value: function _httpGetText(url, mediaTypes) {
          var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var progressCallback = arguments.length > 3 ? arguments[3] : undefined;
          var urlWithQueryParams = url;

          if (_typeof(params) === "object") {
            if (!isEmptyObject(params)) {
              urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);
            }
          }

          var supportedMediaTypes = ["text/", "text/*", "text/html", "text/plain", "text/rtf", "text/xml"];

          var acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes);

          var headers = {
            Accept: acceptHeaderFieldValue
          };
          var responseType = "arraybuffer";
          return this._httpGet(urlWithQueryParams, headers, responseType, progressCallback);
        }
        /**
         * Performs an HTTP GET request that accepts a message with a video
         media type.
         *
         * @param {String} url
         * @param {Object[]} mediaTypes
         * @param {Object} params
         * @param {Function} progressCallback
         * @return {*}
         * @private
         */

      }, {
        key: "_httpGetVideo",
        value: function _httpGetVideo(url, mediaTypes) {
          var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var progressCallback = arguments.length > 3 ? arguments[3] : undefined;
          var urlWithQueryParams = url;

          if (_typeof(params) === "object") {
            if (!isEmptyObject(params)) {
              urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);
            }
          }

          var supportedMediaTypes = ["video/", "video/*", "video/mpeg", "video/mp4", "video/H265"];

          var acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes);

          var headers = {
            Accept: acceptHeaderFieldValue
          };
          var responseType = "arraybuffer";
          return this._httpGet(urlWithQueryParams, headers, responseType, progressCallback);
        }
        /**
         * Asserts that a given media type is valid.
         *
         * @params {String} mediaType media type
         */

      }, {
        key: "_httpGetMultipartImage",

        /**
         * Performs an HTTP GET request that accepts a multipart message with an image media type.
         *
         * @param {String} url unique resource locator
         * @param {Object[]} mediaTypes acceptable media types and optionally the UIDs of the
         corresponding transfer syntaxes
         * @param {Array} byteRange start and end of byte range
         * @param {Object} params additional HTTP GET query parameters
         * @param {Boolean} rendered whether resource should be requested using rendered media types
         * @param {Function} progressCallback
         * @private
         * @returns {Array} content of HTTP message body parts
         */
        value: function _httpGetMultipartImage(url, mediaTypes, byteRange, params) {
          var rendered = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
          var progressCallback = arguments.length > 5 ? arguments[5] : undefined;
          var headers = {};
          var supportedMediaTypes;

          if (rendered) {
            supportedMediaTypes = ["image/jpeg", "image/gif", "image/png", "image/jp2"];
          } else {
            supportedMediaTypes = {
              "1.2.840.10008.1.2.5": ["image/x-dicom-rle"],
              "1.2.840.10008.1.2.4.50": ["image/jpeg"],
              "1.2.840.10008.1.2.4.51": ["image/jpeg"],
              "1.2.840.10008.1.2.4.57": ["image/jpeg"],
              "1.2.840.10008.1.2.4.70": ["image/jpeg"],
              "1.2.840.10008.1.2.4.80": ["image/x-jls", "image/jls"],
              "1.2.840.10008.1.2.4.81": ["image/x-jls", "image/jls"],
              "1.2.840.10008.1.2.4.90": ["image/jp2"],
              "1.2.840.10008.1.2.4.91": ["image/jp2"],
              "1.2.840.10008.1.2.4.92": ["image/jpx"],
              "1.2.840.10008.1.2.4.93": ["image/jpx"]
            };

            if (byteRange) {
              headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);
            }
          }

          headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes);
          return this._httpGet(url, headers, "arraybuffer", progressCallback).then(multipartDecode);
        }
        /**
         * Performs an HTTP GET request that accepts a multipart message with a video media type.
         *
         * @param {String} url unique resource locator
         * @param {Object[]} mediaTypes acceptable media types and optionally the UIDs of the
         corresponding transfer syntaxes
         * @param {Array} byteRange start and end of byte range
         * @param {Object} params additional HTTP GET query parameters
         * @param {Boolean} rendered whether resource should be requested using rendered media types
         * @param {Function} progressCallback
         * @private
         * @returns {Array} content of HTTP message body parts
         */

      }, {
        key: "_httpGetMultipartVideo",
        value: function _httpGetMultipartVideo(url, mediaTypes, byteRange, params) {
          var rendered = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
          var progressCallback = arguments.length > 5 ? arguments[5] : undefined;
          var headers = {};
          var supportedMediaTypes;

          if (rendered) {
            supportedMediaTypes = ["video/", "video/*", "video/mpeg2", "video/mp4", "video/H265"];
          } else {
            supportedMediaTypes = {
              "1.2.840.10008.1.2.4.100": ["video/mpeg2"],
              "1.2.840.10008.1.2.4.101": ["video/mpeg2"],
              "1.2.840.10008.1.2.4.102": ["video/mp4"],
              "1.2.840.10008.1.2.4.103": ["video/mp4"],
              "1.2.840.10008.1.2.4.104": ["video/mp4"],
              "1.2.840.10008.1.2.4.105": ["video/mp4"],
              "1.2.840.10008.1.2.4.106": ["video/mp4"]
            };

            if (byteRange) {
              headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);
            }
          }

          headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes);
          return this._httpGet(url, headers, "arraybuffer", progressCallback).then(multipartDecode);
        }
        /**
         * Performs a HTTP GET request that accepts a multipart message with "application/dicom" media type
         *
         * @param {String} url unique resource locator
         * @param {Object[]} mediaTypes acceptable media types and optionally the UIDs of the
         corresponding transfer syntaxes
         * @param {Object} params additional HTTP GET query parameters
         * @param {Function} progressCallback
         * @private
         * @returns {Array} content of HTTP message body parts
         */

      }, {
        key: "_httpGetMultipartApplicationDicom",
        value: function _httpGetMultipartApplicationDicom(url, mediaTypes, params, progressCallback) {
          var headers = {};
          var defaultMediaType = "application/dicom";
          var supportedMediaTypes = {
            "1.2.840.10008.1.2.1": [defaultMediaType],
            "1.2.840.10008.1.2.5": [defaultMediaType],
            "1.2.840.10008.1.2.4.50": [defaultMediaType],
            "1.2.840.10008.1.2.4.51": [defaultMediaType],
            "1.2.840.10008.1.2.4.57": [defaultMediaType],
            "1.2.840.10008.1.2.4.70": [defaultMediaType],
            "1.2.840.10008.1.2.4.80": [defaultMediaType],
            "1.2.840.10008.1.2.4.81": [defaultMediaType],
            "1.2.840.10008.1.2.4.90": [defaultMediaType],
            "1.2.840.10008.1.2.4.91": [defaultMediaType],
            "1.2.840.10008.1.2.4.92": [defaultMediaType],
            "1.2.840.10008.1.2.4.93": [defaultMediaType],
            "1.2.840.10008.1.2.4.100": [defaultMediaType],
            "1.2.840.10008.1.2.4.101": [defaultMediaType],
            "1.2.840.10008.1.2.4.102": [defaultMediaType],
            "1.2.840.10008.1.2.4.103": [defaultMediaType],
            "1.2.840.10008.1.2.4.104": [defaultMediaType],
            "1.2.840.10008.1.2.4.105": [defaultMediaType],
            "1.2.840.10008.1.2.4.106": [defaultMediaType]
          };
          var acceptableMediaTypes = mediaTypes;

          if (!mediaTypes) {
            acceptableMediaTypes = [{
              mediaType: defaultMediaType
            }];
          }

          headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(acceptableMediaTypes, supportedMediaTypes);
          return this._httpGet(url, headers, "arraybuffer", progressCallback).then(multipartDecode);
        }
        /**
         * Performs a HTTP GET request that accepts a multipart message with "application/octet-stream" media type
         *
         * @param {String} url unique resource locator
         * @param {Object[]} mediaTypes acceptable media types and optionally the UIDs of the
         corresponding transfer syntaxes
         * @param {Array} byteRange start and end of byte range
         * @param {Object} params additional HTTP GET query parameters
         * @param {Function} progressCallback
         * @private
         * @returns {Array} content of HTTP message body parts
         */

      }, {
        key: "_httpGetMultipartApplicationOctetStream",
        value: function _httpGetMultipartApplicationOctetStream(url, mediaTypes, byteRange, params, progressCallback) {
          var headers = {};
          var defaultMediaType = "application/octet-stream";
          var supportedMediaTypes = {
            "1.2.840.10008.1.2.1": [defaultMediaType]
          };
          var acceptableMediaTypes = mediaTypes;

          if (!mediaTypes) {
            acceptableMediaTypes = [{
              mediaType: defaultMediaType
            }];
          }

          if (byteRange) {
            headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);
          }

          headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(acceptableMediaTypes, supportedMediaTypes);
          return this._httpGet(url, headers, "arraybuffer", progressCallback).then(multipartDecode);
        }
      }, {
        key: "_httpPost",
        value: function _httpPost(url, headers, data, progressCallback) {
          return this._httpRequest(url, "post", headers, {
            data: data,
            progressCallback: progressCallback
          });
        }
      }, {
        key: "_httpPostApplicationJson",
        value: function _httpPostApplicationJson(url, data, progressCallback) {
          var headers = {
            "Content-Type": MEDIATYPES.DICOM_JSON
          };
          return this._httpPost(url, headers, data, progressCallback);
        }
        /**
         * Parses media type and extracts its type and subtype.
         *
         * @param mediaType e.g. image/jpeg
         * @private
         */

      }, {
        key: "searchForStudies",

        /**
         * Searches for DICOM studies.
         * @param {Object} options options object
         * @return {Array} study representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2)
         */
        value: function searchForStudies() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          console.log("search for studies");
          var url = "".concat(this.qidoURL, "/studies");

          if ("queryParams" in options) {
            url += DICOMwebClient._parseQueryParameters(options.queryParams);
          }

          return this._httpGetApplicationJson(url);
        }
        /**
         * Retrieves metadata for a DICOM study.
         * @param {Object} options options object
         * @returns {Array} metadata elements in DICOM JSON format for each instance
                            belonging to the study
         */

      }, {
        key: "retrieveStudyMetadata",
        value: function retrieveStudyMetadata(options) {
          if (!("studyInstanceUID" in options)) {
            throw new Error("Study Instance UID is required for retrieval of study metadata");
          }

          console.log("retrieve metadata of study ".concat(options.studyInstanceUID));
          var url = "".concat(this.wadoURL, "/studies/").concat(options.studyInstanceUID, "/metadata");
          return this._httpGetApplicationJson(url);
        }
        /**
         * Searches for DICOM series.
         * @param {Object} options options object
         * @returns {Array} series representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2a)
         */

      }, {
        key: "searchForSeries",
        value: function searchForSeries() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var url = this.qidoURL;

          if ("studyInstanceUID" in options) {
            console.log("search series of study ".concat(options.studyInstanceUID));
            url += "/studies/".concat(options.studyInstanceUID);
          }

          url += "/series";

          if ("queryParams" in options) {
            url += DICOMwebClient._parseQueryParameters(options.queryParams);
          }

          return this._httpGetApplicationJson(url);
        }
        /**
         * Retrieves metadata for a DICOM series.
         * @param {Object} options options object
         * @returns {Array} metadata elements in DICOM JSON format for each instance
                            belonging to the series
         */

      }, {
        key: "retrieveSeriesMetadata",
        value: function retrieveSeriesMetadata(options) {
          if (!("studyInstanceUID" in options)) {
            throw new Error("Study Instance UID is required for retrieval of series metadata");
          }

          if (!("seriesInstanceUID" in options)) {
            throw new Error("Series Instance UID is required for retrieval of series metadata");
          }

          console.log("retrieve metadata of series ".concat(options.seriesInstanceUID));
          var url = "".concat(this.wadoURL, "/studies/").concat(options.studyInstanceUID, "/series/").concat(options.seriesInstanceUID, "/metadata");
          return this._httpGetApplicationJson(url);
        }
        /**
         * Searches for DICOM instances.
         * @param {Object} options options object
         * @returns {Array} instance representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2b)
         */

      }, {
        key: "searchForInstances",
        value: function searchForInstances() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var url = this.qidoURL;

          if ("studyInstanceUID" in options) {
            url += "/studies/".concat(options.studyInstanceUID);

            if ("seriesInstanceUID" in options) {
              console.log("search for instances of series ".concat(options.seriesInstanceUID));
              url += "/series/".concat(options.seriesInstanceUID);
            } else {
              console.log("search for instances of study ".concat(options.studyInstanceUID));
            }
          } else {
            console.log("search for instances");
          }

          url += "/instances";

          if ("queryParams" in options) {
            url += DICOMwebClient._parseQueryParameters(options.queryParams);
          }

          return this._httpGetApplicationJson(url);
        }
        /** Returns a WADO-URI URL for an instance
         * @param {Object} options options object
         * @returns {String} WADO-URI URL
         */

      }, {
        key: "buildInstanceWadoURIUrl",
        value: function buildInstanceWadoURIUrl(options) {
          if (!("studyInstanceUID" in options)) {
            throw new Error("Study Instance UID is required.");
          }

          if (!("seriesInstanceUID" in options)) {
            throw new Error("Series Instance UID is required.");
          }

          if (!("sopInstanceUID" in options)) {
            throw new Error("SOP Instance UID is required.");
          }

          var contentType = options.contentType || MEDIATYPES.DICOM;
          var transferSyntax = options.transferSyntax || "*";
          var params = [];
          params.push("requestType=WADO");
          params.push("studyUID=".concat(options.studyInstanceUID));
          params.push("seriesUID=".concat(options.seriesInstanceUID));
          params.push("objectUID=".concat(options.sopInstanceUID));
          params.push("contentType=".concat(contentType));
          params.push("transferSyntax=".concat(transferSyntax));
          var paramString = params.join("&");
          return "".concat(this.wadoURL, "?").concat(paramString);
        }
        /**
         * Retrieves metadata for a DICOM instance.
         *
         * @param {Object} options object
         * @returns {Object} metadata elements in DICOM JSON format
         */

      }, {
        key: "retrieveInstanceMetadata",
        value: function retrieveInstanceMetadata(options) {
          if (!("studyInstanceUID" in options)) {
            throw new Error("Study Instance UID is required for retrieval of instance metadata");
          }

          if (!("seriesInstanceUID" in options)) {
            throw new Error("Series Instance UID is required for retrieval of instance metadata");
          }

          if (!("sopInstanceUID" in options)) {
            throw new Error("SOP Instance UID is required for retrieval of instance metadata");
          }

          console.log("retrieve metadata of instance ".concat(options.sopInstanceUID));
          var url = "".concat(this.wadoURL, "/studies/").concat(options.studyInstanceUID, "/series/").concat(options.seriesInstanceUID, "/instances/").concat(options.sopInstanceUID, "/metadata");
          return this._httpGetApplicationJson(url);
        }
        /**
         * Retrieves frames for a DICOM instance.
         * @param {Object} options options object
         * @returns {Array} frame items as byte arrays of the pixel data element
         */

      }, {
        key: "retrieveInstanceFrames",
        value: function retrieveInstanceFrames(options) {
          if (!("studyInstanceUID" in options)) {
            throw new Error("Study Instance UID is required for retrieval of instance frames");
          }

          if (!("seriesInstanceUID" in options)) {
            throw new Error("Series Instance UID is required for retrieval of instance frames");
          }

          if (!("sopInstanceUID" in options)) {
            throw new Error("SOP Instance UID is required for retrieval of instance frames");
          }

          if (!("frameNumbers" in options)) {
            throw new Error("frame numbers are required for retrieval of instance frames");
          }

          console.log("retrieve frames ".concat(options.frameNumbers.toString(), " of instance ").concat(options.sopInstanceUID));
          var url = "".concat(this.wadoURL, "/studies/").concat(options.studyInstanceUID, "/series/").concat(options.seriesInstanceUID, "/instances/").concat(options.sopInstanceUID, "/frames/").concat(options.frameNumbers.toString());
          var mediaTypes = options.mediaTypes;

          if (!mediaTypes) {
            return this._httpGetMultipartApplicationOctetStream(url);
          }

          var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);

          if (commonMediaType === MEDIATYPES.OCTET_STREAM) {
            return this._httpGetMultipartApplicationOctetStream(url, mediaTypes);
          } else if (commonMediaType.startsWith("image")) {
            return this._httpGetMultipartImage(url, mediaTypes);
          } else if (commonMediaType.startsWith("video")) {
            return this._httpGetMultipartVideo(url, mediaTypes);
          }

          throw new Error("Media type ".concat(commonMediaType, " is not supported for retrieval of frames."));
        }
        /**
         * Retrieves an individual, server-side rendered DICOM instance.
         *
         * @param {Object} options options object
         * @returns {Array} frame items as byte arrays of the pixel data element
         */

      }, {
        key: "retrieveInstanceRendered",
        value: function retrieveInstanceRendered(options) {
          if (!("studyInstanceUID" in options)) {
            throw new Error("Study Instance UID is required for retrieval of rendered instance");
          }

          if (!("seriesInstanceUID" in options)) {
            throw new Error("Series Instance UID is required for retrieval of rendered instance");
          }

          if (!("sopInstanceUID" in options)) {
            throw new Error("SOP Instance UID is required for retrieval of rendered instance");
          }

          var url = "".concat(this.wadoURL, "/studies/").concat(options.studyInstanceUID, "/series/").concat(options.seriesInstanceUID, "/instances/").concat(options.sopInstanceUID, "/rendered");
          var mediaTypes = options.mediaTypes,
              params = options.params;
          var headers = {};

          if (!mediaTypes) {
            var responseType = "arraybuffer";
            return this._httpGet(url, headers, responseType);
          }

          var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);

          if (commonMediaType.startsWith("image")) {
            return this._httpGetImage(url, mediaTypes, params);
          } else if (commonMediaType.startsWith("video")) {
            return this._httpGetVideo(url, mediaTypes, params);
          } else if (commonMediaType.startsWith("text")) {
            return this._httpGetText(url, mediaTypes, params);
          } else if (commonMediaType === MEDIATYPES.PDF) {
            return this._httpGetApplicationPdf(url, params);
          }

          throw new Error("Media type ".concat(commonMediaType, " is not supported for retrieval of rendered instance."));
        }
        /**
         * Retrieves rendered frames for a DICOM instance.
         * @param {Object} options options object
         * @returns {Array} frame items as byte arrays of the pixel data element
         */

      }, {
        key: "retrieveInstanceFramesRendered",
        value: function retrieveInstanceFramesRendered(options) {
          if (!("studyInstanceUID" in options)) {
            throw new Error("Study Instance UID is required for retrieval of rendered instance frames");
          }

          if (!("seriesInstanceUID" in options)) {
            throw new Error("Series Instance UID is required for retrieval of rendered instance frames");
          }

          if (!("sopInstanceUID" in options)) {
            throw new Error("SOP Instance UID is required for retrieval of rendered instance frames");
          }

          if (!("frameNumbers" in options)) {
            throw new Error("frame numbers are required for retrieval of rendered instance frames");
          }

          console.debug("retrieve rendered frames ".concat(options.frameNumbers.toString(), " of instance ").concat(options.sopInstanceUID));
          var url = "".concat(this.wadoURL, "/studies/").concat(options.studyInstanceUID, "/series/").concat(options.seriesInstanceUID, "/instances/").concat(options.sopInstanceUID, "/frames/").concat(options.frameNumbers.toString(), "/rendered");
          var mediaTypes = options.mediaTypes;
          var headers = {};

          if (!mediaTypes) {
            var responseType = "arraybuffer";
            return this._httpGet(url, headers, responseType);
          }

          var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);

          if (commonMediaType.startsWith("image")) {
            return this._httpGetImage(url, mediaTypes);
          } else if (commonMediaType.startsWith("video")) {
            return this._httpGetVideo(url, mediaTypes);
          }

          throw new Error("Media type ".concat(commonMediaType, " is not supported for retrieval of rendered frame."));
        }
        /**
         * Retrieves a DICOM instance.
         * @param {Object} options options object
         * @returns {ArrayBuffer} DICOM Part 10 file as Arraybuffer
         */

      }, {
        key: "retrieveInstance",
        value: function retrieveInstance(options) {
          if (!("studyInstanceUID" in options)) {
            throw new Error("Study Instance UID is required");
          }

          if (!("seriesInstanceUID" in options)) {
            throw new Error("Series Instance UID is required");
          }

          if (!("sopInstanceUID" in options)) {
            throw new Error("SOP Instance UID is required");
          }

          var url = "".concat(this.wadoURL, "/studies/").concat(options.studyInstanceUID, "/series/").concat(options.seriesInstanceUID, "/instances/").concat(options.sopInstanceUID);
          var mediaTypes = options.mediaTypes;

          if (!mediaTypes) {
            return this._httpGetMultipartApplicationDicom(url).then(getFirstResult);
          }

          var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);

          if (commonMediaType === MEDIATYPES.DICOM) {
            return this._httpGetMultipartApplicationDicom(url, mediaTypes).then(getFirstResult);
          } else if (commonMediaType === MEDIATYPES.OCTET_STREAM) {
            return this._httpGetMultipartApplicationOctetStream(url, mediaTypes).then(getFirstResult);
          } else if (commonMediaType.startsWith("image")) {
            return this._httpGetMultipartImage(url, mediaTypes).then(getFirstResultIfLengthGtOne);
          } else if (commonMediaType.startsWith("video")) {
            return this._httpGetMultipartVideo(url, mediaTypes).then(getFirstResultIfLengthGtOne);
          }

          throw new Error("Media type ".concat(commonMediaType, " is not supported for retrieval of instance."));
        }
        /**
         * Retrieves a set of DICOM instance for a series.
         * @param {Object} options options object
         * @returns {ArrayBuffer[]} Array of DICOM Part 10 files as Arraybuffers
         */

      }, {
        key: "retrieveSeries",
        value: function retrieveSeries(options) {
          if (!("studyInstanceUID" in options)) {
            throw new Error("Study Instance UID is required");
          }

          if (!("seriesInstanceUID" in options)) {
            throw new Error("Series Instance UID is required");
          }

          var url = "".concat(this.wadoURL, "/studies/").concat(options.studyInstanceUID, "/series/").concat(options.seriesInstanceUID);
          var mediaTypes = options.mediaTypes;

          if (!mediaTypes) {
            return this._httpGetMultipartApplicationDicom(url);
          }

          var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);

          if (commonMediaType === MEDIATYPES.DICOM) {
            return this._httpGetMultipartApplicationDicom(url, mediaTypes);
          } else if (commonMediaType === MEDIATYPES.OCTET_STREAM) {
            return this._httpGetMultipartApplicationOctetStream(url, mediaTypes);
          } else if (commonMediaType.startsWith("image")) {
            return this._httpGetMultipartImage(url, mediaTypes);
          } else if (commonMediaType.startsWith("video")) {
            return this._httpGetMultipartVideo(url, mediaTypes);
          }

          throw new Error("Media type ".concat(commonMediaType, " is not supported for retrieval of series."));
        }
        /**
         * Retrieves a set of DICOM instance for a study.
         * @param {Object} options options object
         * @returns {ArrayBuffer[]} Array of DICOM Part 10 files as Arraybuffers
         */

      }, {
        key: "retrieveStudy",
        value: function retrieveStudy(options) {
          if (!("studyInstanceUID" in options)) {
            throw new Error("Study Instance UID is required");
          }

          var url = "".concat(this.wadoURL, "/studies/").concat(options.studyInstanceUID);
          var mediaTypes = options.mediaTypes;

          if (!mediaTypes) {
            return this._httpGetMultipartApplicationDicom(url);
          }

          var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);

          if (commonMediaType === MEDIATYPES.DICOM) {
            return this._httpGetMultipartApplicationDicom(url, mediaTypes);
          } else if (commonMediaType === MEDIATYPES.OCTET_STREAM) {
            return this._httpGetMultipartApplicationOctetStream(url, mediaTypes);
          } else if (commonMediaType.startsWith("image")) {
            return this._httpGetMultipartImage(url, mediaTypes);
          } else if (commonMediaType.startsWith("video")) {
            return this._httpGetMultipartVideo(url, mediaTypes);
          }

          throw new Error("Media type ".concat(commonMediaType, " is not supported for retrieval of study."));
        }
        /**
         * Retrieves and parses BulkData from a BulkDataURI location.
         * Decodes the multipart encoded data and returns the resulting data
         * as an ArrayBuffer.
         *
         * See http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.5.5.html
         *
         * @param {Object} options options object
         * @return {Promise}
         */

      }, {
        key: "retrieveBulkData",
        value: function retrieveBulkData(options) {
          if (!("BulkDataURI" in options)) {
            throw new Error("BulkDataURI is required.");
          }

          var url = options.BulkDataURI;
          var mediaTypes = options.mediaTypes,
              byteRange = options.byteRange;

          if (!mediaTypes) {
            return this._httpGetMultipartApplicationOctetStream(url, mediaTypes, byteRange);
          }

          var commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);

          if (commonMediaType === MEDIATYPES.OCTET_STREAM) {
            return this._httpGetMultipartApplicationOctetStream(url, mediaTypes, byteRange);
          } else if (commonMediaType.startsWith("image")) {
            return this._httpGetMultipartImage(url, mediaTypes, byteRange);
          }

          throw new Error("Media type ".concat(commonMediaType, " is not supported for retrieval of bulk data."));
        }
        /**
         * Stores DICOM instances.
         *
         * @param {Object} options options object
         */

      }, {
        key: "storeInstances",
        value: function storeInstances(options) {
          if (!("datasets" in options)) {
            throw new Error("datasets are required for storing");
          }

          var url = "".concat(this.stowURL, "/studies");

          if ("studyInstanceUID" in options) {
            url += "/".concat(options.studyInstanceUID);
          }

          var _multipartEncode = multipartEncode(options.datasets),
              data = _multipartEncode.data,
              boundary = _multipartEncode.boundary;

          var headers = {
            "Content-Type": "multipart/related; type=application/dicom; boundary=".concat(boundary)
          };
          return this._httpPost(url, headers, data, options.progressCallback);
        }
      }], [{
        key: "_parseQueryParameters",
        value: function _parseQueryParameters() {
          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var queryString = "?";
          Object.keys(params).forEach(function (key, index) {
            if (index !== 0) {
              queryString += "&";
            }

            queryString += "".concat(key, "=").concat(encodeURIComponent(params[key]));
          });
          return queryString;
        }
      }, {
        key: "_assertMediaTypeIsValid",
        value: function _assertMediaTypeIsValid(mediaType) {
          if (!mediaType) {
            throw new Error("Not a valid media type: ".concat(mediaType));
          }

          var sepIndex = mediaType.indexOf("/");

          if (sepIndex === -1) {
            throw new Error("Not a valid media type: ".concat(mediaType));
          }

          var mediaTypeType = mediaType.slice(0, sepIndex);
          var types = ["application", "image", "text", "video"];

          if (!types.includes(mediaTypeType)) {
            throw new Error("Not a valid media type: ".concat(mediaType));
          }

          if (mediaType.slice(sepIndex + 1).includes("/")) {
            throw new Error("Not a valid media type: ".concat(mediaType));
          }
        }
      }, {
        key: "_parseMediaType",
        value: function _parseMediaType(mediaType) {
          DICOMwebClient._assertMediaTypeIsValid(mediaType);

          return mediaType.split("/");
        }
        /**
         * Builds an accept header field value for HTTP GET request messages.
         *
         * @param {Object[]} mediaTypes Acceptable media types
         * @param {Object[]} supportedMediaTypes Supported media types
         * @return {*}
         * @private
         */

      }, {
        key: "_buildAcceptHeaderFieldValue",
        value: function _buildAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes) {
          if (!Array.isArray(mediaTypes)) {
            throw new Error("Acceptable media types must be provided as an Array");
          }

          var fieldValueParts = mediaTypes.map(function (item) {
            var mediaType = item.mediaType;

            DICOMwebClient._assertMediaTypeIsValid(mediaType);

            if (!supportedMediaTypes.includes(mediaType)) {
              throw new Error("Media type ".concat(mediaType, " is not supported for requested resource"));
            }

            return mediaType;
          });
          return fieldValueParts.join(", ");
        }
        /**
           * Builds an accept header field value for HTTP GET multipart request
           messages.
           *
           * @param {Object[]} mediaTypes Acceptable media types
           * @param {Object[]} supportedMediaTypes Supported media types
           * @private
           */

      }, {
        key: "_buildMultipartAcceptHeaderFieldValue",
        value: function _buildMultipartAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes) {
          if (!Array.isArray(mediaTypes)) {
            throw new Error("Acceptable media types must be provided as an Array");
          }

          if (!Array.isArray(supportedMediaTypes) && !isObject(supportedMediaTypes)) {
            throw new Error("Supported media types must be provided as an Array or an Object");
          }

          var fieldValueParts = [];
          mediaTypes.forEach(function (item) {
            var transferSyntaxUID = item.transferSyntaxUID,
                mediaType = item.mediaType;

            DICOMwebClient._assertMediaTypeIsValid(mediaType);

            var fieldValue = "multipart/related; type=\"".concat(mediaType, "\"");

            if (isObject(supportedMediaTypes)) {
              // SupportedMediaTypes is a lookup table that maps Transfer Syntax UID
              // to one or more Media Types
              if (!Object.values(supportedMediaTypes).flat(1).includes(mediaType)) {
                if (!mediaType.endsWith("/*") || !mediaType.endsWith("/")) {
                  throw new Error("Media type ".concat(mediaType, " is not supported for requested resource"));
                }
              }

              if (transferSyntaxUID) {
                if (transferSyntaxUID !== "*") {
                  if (!Object.keys(supportedMediaTypes).includes(transferSyntaxUID)) {
                    throw new Error("Transfer syntax ".concat(transferSyntaxUID, " is not supported for requested resource"));
                  }

                  var expectedMediaTypes = supportedMediaTypes[transferSyntaxUID];

                  if (!expectedMediaTypes.includes(mediaType)) {
                    var actualType = DICOMwebClient._parseMediaType(mediaType)[0];

                    expectedMediaTypes.map(function (expectedMediaType) {
                      var expectedType = DICOMwebClient._parseMediaType(expectedMediaType)[0];

                      var haveSameType = actualType === expectedType;

                      if (haveSameType && (mediaType.endsWith("/*") || mediaType.endsWith("/"))) {
                        return;
                      }

                      throw new Error("Transfer syntax ".concat(transferSyntaxUID, " is not supported for requested resource"));
                    });
                  }
                }

                fieldValue += "; transfer-syntax=".concat(transferSyntaxUID);
              }
            } else if (Array.isArray(supportedMediaTypes) && !supportedMediaTypes.includes(mediaType)) {
              throw new Error("Media type ".concat(mediaType, " is not supported for requested resource"));
            }

            fieldValueParts.push(fieldValue);
          });
          return fieldValueParts.join(", ");
        }
        /**
         * Builds a range header field value for HTTP GET request messages.
         *
         * @param {Array} byteRange start and end of byte range
         * @returns {String} range header field value
         */

      }, {
        key: "_buildRangeHeaderFieldValue",
        value: function _buildRangeHeaderFieldValue() {
          var byteRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          if (byteRange.length === 1) {
            return "bytes=".concat(byteRange[0], "-");
          }

          if (byteRange.length === 2) {
            return "bytes=".concat(byteRange[0], "-").concat(byteRange[1]);
          }

          return "bytes=0-";
        }
        /**
         * Gets common type of acceptable media types and asserts that only
         one type is specified. For example, ``("image/jpeg", "image/jp2")``
         will pass, but ``("image/jpeg", "video/mpeg2")`` will raise an
         exception.
         * @param {String[]} acceptable media types and optionally the UIDs of the
         corresponding transfer syntaxes
         *
         */

      }, {
        key: "_getCommonMediaType",
        value: function _getCommonMediaType(mediaTypes) {
          if (!mediaTypes || !mediaTypes.length) {
            throw new Error("No acceptable media types provided");
          }

          var commonMediaTypes = new Set();
          mediaTypes.forEach(function (item) {
            var mediaType = item.mediaType;

            if (mediaType.startsWith("application")) {
              commonMediaTypes.add(mediaType);
            } else {
              var type = DICOMwebClient._parseMediaType(mediaType)[0];

              commonMediaTypes.add("".concat(type, "/"));
            }
          });

          if (commonMediaTypes.size === 0) {
            throw new Error("No common acceptable media type could be identified.");
          } else if (commonMediaTypes.size > 1) {
            throw new Error("Acceptable media types must have the same type.");
          }

          return Array.from(commonMediaTypes)[0];
        }
      }]);

      return DICOMwebClient;
    }();

    function findSubstring(str, before, after) {
      var beforeIndex = str.lastIndexOf(before) + before.length;

      if (beforeIndex < before.length) {
        return null;
      }

      if (after !== undefined) {
        var afterIndex = str.lastIndexOf(after);

        if (afterIndex < 0) {
          return null;
        }

        return str.substring(beforeIndex, afterIndex);
      }

      return str.substring(beforeIndex);
    }

    function getStudyInstanceUIDFromUri(uri) {
      var uid = findSubstring(uri, "studies/", "/series");

      if (!uid) {
        uid = findSubstring(uri, "studies/");
      }

      if (!uid) {
        console.debug("Study Instance UID could not be dertermined from URI \"".concat(uri, "\""));
      }

      return uid;
    }

    function getSeriesInstanceUIDFromUri(uri) {
      var uid = findSubstring(uri, "series/", "/instances");

      if (!uid) {
        uid = findSubstring(uri, "series/");
      }

      if (!uid) {
        console.debug("Series Instance UID could not be dertermined from URI \"".concat(uri, "\""));
      }

      return uid;
    }

    function getSOPInstanceUIDFromUri(uri) {
      var uid = findSubstring(uri, "/instances/", "/frames");

      if (!uid) {
        uid = findSubstring(uri, "/instances/", "/metadata");
      }

      if (!uid) {
        uid = findSubstring(uri, "/instances/");
      }

      if (!uid) {
        console.debug("SOP Instance UID could not be dertermined from URI\"".concat(uri, "\""));
      }

      return uid;
    }

    function getFrameNumbersFromUri(uri) {
      var numbers = findSubstring(uri, "/frames/", "/rendered");

      if (!numbers) {
        numbers = findSubstring(uri, "/frames/");
      }

      if (numbers === undefined) {
        console.debug("Frames Numbers could not be dertermined from URI\"".concat(uri, "\""));
      }

      return numbers.split(",");
    }

    var version = "0.5.2";

    var api = {
      DICOMwebClient: DICOMwebClient
    };
    var utils = {
      getStudyInstanceUIDFromUri: getStudyInstanceUIDFromUri,
      getSeriesInstanceUIDFromUri: getSeriesInstanceUIDFromUri,
      getSOPInstanceUIDFromUri: getSOPInstanceUIDFromUri,
      getFrameNumbersFromUri: getFrameNumbersFromUri
    };

    exports.api = api;
    exports.utils = utils;
    exports.version = version;

    Object.defineProperty(exports, '__esModule', { value: true });

  })));

  });

  var DICOMwebClient = unwrapExports(dicomwebClient);

  function _getPixelSpacing(metadata) {
    const functionalGroup = metadata.SharedFunctionalGroupsSequence[0];
    const pixelMeasures = functionalGroup.PixelMeasuresSequence[0];
    return pixelMeasures.PixelSpacing;
  }

  function _geometry2Scoord3d(geometry, pyramid) {
    const frameOfReferenceUID = pyramid[pyramid.length-1].FrameOfReferenceUID;
    const type = geometry.getType();
    if (type === 'Point') {
      let coordinates = geometry.getCoordinates();
      coordinates = _geometryCoordinates2scoord3dCoordinates(coordinates, pyramid);
      return new Point$1({
        coordinates,
        frameOfReferenceUID: frameOfReferenceUID
      });
    } else if (type === 'Polygon') {
      /*
       * The first linear ring of the array defines the outer-boundary (surface).
       * Each subsequent linear ring defines a hole in the surface.
       */
      let coordinates = geometry.getCoordinates()[0].map(c => {
        return _geometryCoordinates2scoord3dCoordinates(c, pyramid);
      });
      return new Polygon$1({
        coordinates,
        frameOfReferenceUID: frameOfReferenceUID
      });
    } else if (type === 'LineString') {
      let coordinates = geometry.getCoordinates().map(c => {
        return _geometryCoordinates2scoord3dCoordinates(c, pyramid);
      });
      return new Polyline({
        coordinates,
        frameOfReferenceUID: frameOfReferenceUID
      });
    } else if (type === 'Circle') {
      let centerCoordinate = geometry.getCenter();
      let radius = geometry.getRadius();
      // Endpoints of major and  minor axis of the ellipse.
      // In case of a circle they both have the same length.
      let coordinates = [
        [centerCoordinate[0] - radius, centerCoordinate[1]],
        [centerCoordinate[0] + radius, centerCoordinate[1]],
        [centerCoordinate[0], centerCoordinate[1] - radius],
        [centerCoordinate[0], centerCoordinate[1] + radius],
      ];
      coordinates = coordinates.map(c => {
        c.push(0);
        return _geometryCoordinates2scoord3dCoordinates(c, pyramid)
      });
      return new Ellipse({
        coordinates,
        frameOfReferenceUID: frameOfReferenceUID
      });
    } else {
      // TODO: Combine multiple points into MULTIPOINT.
      console.error(`unknown geometry type "${type}"`);
    }
  }

  function _scoord3d2Geometry(scoord3d, pyramid) {
    const type = scoord3d.graphicType;
    const data = scoord3d.graphicData;
    if (type === 'POINT') {
      let coordinates = _scoord3dCoordinates2geometryCoordinates(data, pyramid);
      return new Point(coordinates);
    } else if (type === 'POLYLINE') {
      const coordinates = data.map(d => {
        return _scoord3dCoordinates2geometryCoordinates(d, pyramid);
      });
      return new LineString(coordinates);
    } else if(type === 'POLYGON'){
      const coordinates = data.map(d => {
        return _scoord3dCoordinates2geometryCoordinates(d, pyramid);
      });
      return new Polygon([coordinates]);
    } else if (type === 'ELLIPSE') {
      // TODO: ensure that the ellipse represents a circle, i.e. that
      // major and minor axis form a right angle and have the same length
      let majorAxisCoordinates = data.slice(0, 2);
      let minorAxisCoordinates = data.slice(2, 4);
      // Circle is defined by two points: the center point and a point on the
      // circumference.
      let point1 = majorAxisCoordinates[0];
      let point2 = majorAxisCoordinates[1];
      let coordinates = [
        [
          (point1[0] + point2[0]) / parseFloat(2),
          (point1[1] + point2[1]) / parseFloat(2),
          0
        ],
        point2
      ];
      coordinates = coordinates.map(d => {
        return _scoord3dCoordinates2geometryCoordinates(d, pyramid);
      });
      // to flat coordinates
      coordinates = [...coordinates[0].slice(0,2), ...coordinates[1].slice(0,2)];

      // flat coordinates in combination with opt_layout and no opt_radius are also accepted
      // and internaly it calculates the Radius
      return new Circle(coordinates, null, "XY");
    } else {
      console.error(`unsupported graphic type "${type}"`);
    }
  }

  function _geometryCoordinates2scoord3dCoordinates(coordinates, pyramid) {
    return _coordinateFormatGeometry2Scoord3d([coordinates[0] + 1, coordinates[1], coordinates[2]], pyramid);
  }

  function _scoord3dCoordinates2geometryCoordinates(coordinates, pyramid) {
    return _coordinateFormatScoord3d2Geometry([coordinates[0], coordinates[1], coordinates[2]], pyramid)
  }

  /*
    * Translate pixel units of total pixel matrix into millimeters of
    * slide coordinate system
  */
  function _coordinateFormatGeometry2Scoord3d(coordinates, pyramid) {
    let transform = false;
    if(!(coordinates[0] instanceof Array)) {
      coordinates = [coordinates];
      transform = true;
    }
    const metadata = pyramid[pyramid.length-1];
    const origin = metadata.TotalPixelMatrixOriginSequence[0];
    const xOffset = Number(origin.XOffsetInSlideCoordinateSystem);
    const yOffset = Number(origin.YOffsetInSlideCoordinateSystem);
    const pixelSpacing = _getPixelSpacing(metadata);
    coordinates = coordinates.map(point => {
      const x = Number((xOffset + (point[0] * pixelSpacing[0])).toFixed(4));
      const y = Number((yOffset - ((point[1] - 1) * pixelSpacing[1])).toFixed(4));
      const z = Number((0).toFixed(4));
      return [x, y, z];
    });
    if (transform) {
      return coordinates[0];
    }
    return coordinates;
  }

  /*
    * Translate millimeters into pixel units of total pixel matrix of
    * slide coordinate system
  */
  function _coordinateFormatScoord3d2Geometry(coordinates, pyramid) {
    let transform = false;
    if(!(coordinates[0] instanceof Array)) {
      coordinates = [coordinates];
      transform = true;
    }
    const metadata = pyramid[pyramid.length-1];
    const origin = metadata.TotalPixelMatrixOriginSequence[0];
    const xOffset = Number(origin.XOffsetInSlideCoordinateSystem);
    const yOffset = Number(origin.YOffsetInSlideCoordinateSystem);
    coordinates = coordinates.map(coord =>{
      const pixelSpacing = _getPixelSpacing(pyramid[pyramid.length-1]);
      const x = (coord[0] / pixelSpacing[0] - 1) - xOffset;
      const y = -(coord[1] /pixelSpacing[1] - 1) - yOffset;
      const z = coord[2];
      return [x, y, z];
    });
    if (transform) {
      return coordinates[0];
    }
    return coordinates;
  }

  function _getROIFromFeature(feature, pyramid){
    let roi = {};
    if (feature !== undefined) {
      const geometry = feature.getGeometry();
      const scoord3d = _geometry2Scoord3d(geometry, pyramid);
      const properties = feature.getProperties();
      // Remove geometry from properties mapping
      const geometryName = feature.getGeometryName();
      delete properties[geometryName];
      const uid = feature.getId();
      roi = new ROI({scoord3d, properties, uid});
    }
    return roi;
  }

  const _usewebgl = Symbol('usewebgl');
  const _map = Symbol('map');
  const _features = Symbol('features');
  const _drawingSource = Symbol('drawingSource');
  const _drawingLayer = Symbol('drawingLayer');
  const _segmentations = Symbol('segmentations');
  const _client = Symbol('client');
  const _controls = Symbol('controls');
  const _interactions = Symbol('interactions');
  const _pyramidMetadata = Symbol('pyramidMetadata');
  const _pyramidFrameMappings = Symbol('pyramidFrameMappings');
  const _pyramidBaseMetadata = Symbol('pyramidMetadataBase');
  const _metadata = Symbol('metadata');


  class VLWholeSlideMicroscopyImageViewer {

    /*
     * options:
     *   - client (instance of DICOMwebClient)
     *   - metadata (array of DICOM JSON metadata for each image instance)
     *   - retrieveRendered (whether frames should be retrieved using DICOMweb RetrieveRenderedTransaction; default: true)
     *   - useWebGL (whether WebGL renderer should be used; default: true)
     */
    constructor(options) {
      if ('useWebGL' in options) {
        this[_usewebgl] = options.useWebGL;
      } else {
        this[_usewebgl] = true;
      }
      this[_client] = options.client;

      if (!('retrieveRendered' in options)) {
        options.retrieveRendered = true;
      }

      if (!('controls' in options)) {
        options.controls = [];
      }
      options.controls = new Set(options.controls);

      // Collection of Openlayers "VectorLayer" instances indexable by
      // DICOM Series Instance UID
      this[_segmentations] = {};

      // Collection of Openlayers "Feature" instances
      this[_features] = new Collection([], {unique: true});
      // Add unique identifier to each created "Feature" instance
      this[_features].on('add', (e) => {
        // The ID may have already been set when drawn. However, features could
        // have also been added without a draw event.
        if (e.element.getId() === undefined) {
          e.element.setId(generateUID());
        }
      });

      /*
       * To visualize images accross multiple scales, we first need to
       * determine the image pyramid structure, i.e. the size and resolution
       * images at the different pyramid levels.
      */
      this[_metadata] = options.metadata.map(m => formatImageMetadata(m));
      // Sort instances and optionally concatenation parts if present.
      this[_metadata].sort((a, b) => {
        const sizeDiff = a.TotalPixelMatrixColumns - b.TotalPixelMatrixColumns;
        if (sizeDiff === 0) {
          if (a.ConcatenationFrameOffsetNumber !== undefined) {
            return a.ConcatenationFrameOffsetNumber - b.ConcatenationFrameOffsetNumber;
          }
          return sizeDiff;
        }
        return sizeDiff;
      });
      this[_pyramidMetadata] = [];
      this[_pyramidFrameMappings] = [];
      let frameMappings = this[_metadata].map(m => getFrameMapping(m));
      for (let i = 0; i < this[_metadata].length; i++) {
        const cols = this[_metadata][i].TotalPixelMatrixColumns;
        const rows = this[_metadata][i].TotalPixelMatrixRows;
        const numberOfFrames = this[_metadata][i].NumberOfFrames;
        /*
         * Instances may be broken down into multiple concatentation parts.
         * Therefore, we have to re-assemble instance metadata.
        */
        let alreadyExists = false;
        let index = null;
        for (let j = 0; j < this[_pyramidMetadata].length; j++) {
          if (
              (this[_pyramidMetadata][j].TotalPixelMatrixColumns === cols) &&
              (this[_pyramidMetadata][j].TotalPixelMatrixRows === rows)
            ) {
            alreadyExists = true;
            index = j;
          }
        }
        if (alreadyExists) {
          // Update with information obtained from current concatentation part.
          Object.assign(this[_pyramidFrameMappings][index], frameMappings[i]);
          this[_pyramidMetadata][index].NumberOfFrames += numberOfFrames;
          if ("PerFrameFunctionalGroupsSequence" in this[_metadata][index]) {
            this[_pyramidMetadata][index].PerFrameFunctionalGroupsSequence.push(
              ...this[_metadata][i].PerFrameFunctionalGroupsSequence
            );
          }
          if (!"SOPInstanceUIDOfConcatenationSource" in this[_metadata][i]) {
            throw new Error(
              'Attribute "SOPInstanceUIDOfConcatenationSource" is required ' +
              'for concatenation parts.'
            );
          }
          const sopInstanceUID = this[_metadata][i].SOPInstanceUIDOfConcatenationSource;
          this[_pyramidMetadata][index].SOPInstanceUID = sopInstanceUID;
          delete this[_pyramidMetadata][index].SOPInstanceUIDOfConcatenationSource;
          delete this[_pyramidMetadata][index].ConcatenationUID;
          delete this[_pyramidMetadata][index].InConcatenationNumber;
          delete this[_pyramidMetadata][index].ConcatenationFrameOffsetNumber;
        } else {
          this[_pyramidMetadata].push(this[_metadata][i]);
          this[_pyramidFrameMappings].push(frameMappings[i]);
        }
      }
      const nLevels = this[_pyramidMetadata].length;
      if (nLevels === 0) {
        console.error('empty pyramid - no levels found');
      }
      this[_pyramidBaseMetadata] = this[_pyramidMetadata][nLevels - 1];
      /*
       * Collect relevant information from DICOM metadata for each pyramid
       * level to construct the Openlayers map.
      */
      const tileSizes = [];
      const totalSizes = [];
      const resolutions = [];
      const origins = [];
      const offset = [0, -1];
      const basePixelSpacing = _getPixelSpacing(this[_pyramidBaseMetadata]);
      const baseColumns = this[_pyramidBaseMetadata].Columns;
      const baseRows = this[_pyramidBaseMetadata].Rows;
      const baseTotalPixelMatrixColumns = this[_pyramidBaseMetadata].TotalPixelMatrixColumns;
      const baseTotalPixelMatrixRows = this[_pyramidBaseMetadata].TotalPixelMatrixRows;
      for (let j = (nLevels - 1); j >= 0; j--) {
        const columns = this[_pyramidMetadata][j].Columns;
        const rows = this[_pyramidMetadata][j].Rows;
        const totalPixelMatrixColumns = this[_pyramidMetadata][j].TotalPixelMatrixColumns;
        const totalPixelMatrixRows = this[_pyramidMetadata][j].TotalPixelMatrixRows;
        const pixelSpacing = _getPixelSpacing(this[_pyramidMetadata][j]);
        const colFactor = Math.ceil(totalPixelMatrixColumns / columns);
        const rowFactor = Math.ceil(totalPixelMatrixRows / rows);
        const adjustedTotalPixelMatrixColumns = columns * colFactor;
        const adjustedTotalPixelMatrixRows = rows * rowFactor;
        tileSizes.push([
          columns,
          rows
        ]);
        totalSizes.push([
          adjustedTotalPixelMatrixColumns,
          adjustedTotalPixelMatrixRows
        ]);

        /*
         * Compute the resolution at each pyramid level, since the zoom
         * factor may not be the same between adjacent pyramid levels.
        */
        let zoomFactor = pixelSpacing[0] / basePixelSpacing[0];
        resolutions.push(zoomFactor);

        /*
         * TODO: One may have to adjust the offset slightly due to the
         * difference between extent of the image at a given resolution level
         * and the actual number of tiles (frames).
        */
        origins.push(offset);
      }
      resolutions.reverse();
      tileSizes.reverse();
      origins.reverse();

      // Functions won't be able to access "this"
      const pyramid = this[_pyramidMetadata];
      const pyramidFrameMappings = this[_pyramidFrameMappings];

      /*
       * Define custom tile URL function to retrive frames via DICOMweb
       * WADO-RS.
       */
      const tileUrlFunction = (tileCoord, pixelRatio, projection) => {
        /*
         * Variables x and y correspond to the X and Y axes of the slide
         * coordinate system. Since we want to view the slide horizontally
         * with the label on the right side, the x axis of the slide
         * coordinate system is the vertical axis of the viewport and the
         * y axis of the slide coordinate system the horizontal axis of the
         * viewport. Note that this is in contrast to the nomenclature used
         * by Openlayers.
         */
        let z = tileCoord[0];
        let y = tileCoord[1] + 1;
        /*
         * The vertical axis is inverted for the chosen tile source, i.e.
         * it starts at -1 at the top left corner and descreases along the
         * vertical axis to the lower left corner of the viewport.
         */
        let x = -(tileCoord[2] + 1) + 1;
        let index = x + "-" + y;
        let path = pyramidFrameMappings[z][index];
        if (path === undefined) {
          console.warn("tile " + index + " not found at level " + z);
          return(null);
        }
        let url = options.client.wadoURL +
          "/studies/" + pyramid[z].StudyInstanceUID +
          "/series/" + pyramid[z].SeriesInstanceUID +
          '/instances/' + path;
        if (options.retrieveRendered) {
          url = url + '/rendered';
        }
        return(url);
      };

      const tileLoadFunction = (tile, src) => {
        if (src !== null) {
          const studyInstanceUID = DICOMwebClient.utils.getStudyInstanceUIDFromUri(src);
          const seriesInstanceUID = DICOMwebClient.utils.getSeriesInstanceUIDFromUri(src);
          const sopInstanceUID = DICOMwebClient.utils.getSOPInstanceUIDFromUri(src);
          const frameNumbers = DICOMwebClient.utils.getFrameNumbersFromUri(src);
          const img = tile.getImage();
          if (options.retrieveRendered) {
            const mediaType = 'image/png';
            const retrieveOptions = {
              studyInstanceUID,
              seriesInstanceUID,
              sopInstanceUID,
              frameNumbers,
              mediaTypes: [{ mediaType }]
            };
            options.client.retrieveInstanceFramesRendered(retrieveOptions).then((renderedFrame) => {
              const blob = new Blob([renderedFrame], {type: mediaType});
              img.src = window.URL.createObjectURL(blob);
            });
          } else {
            // TODO: support "image/jp2" and "image/jls"
            const mediaType = 'image/jpeg';

            const retrieveOptions = {
              studyInstanceUID,
              seriesInstanceUID,
              sopInstanceUID,
              frameNumbers,
              mediaTypes: [{mediaType, transferSyntaxUID: '1.2.840.10008.1.2.4.50'}]
            };
            options.client.retrieveInstanceFrames(retrieveOptions).then((rawFrames) => {
              const blob = new Blob(rawFrames, {type: mediaType});
              img.src = window.URL.createObjectURL(blob);
            });
          }
        } else {
          console.warn('could not load tile');
        }
      };

      /*
       * Frames may extend beyond the size of the total pixel matrix.
       * The excess pixels are empty, i.e. have only a padding value.
       * We set the extent to the size of the actual image without taken
       * excess pixels into account.
       * Note that the vertical axis is flipped in the used tile source,
       * i.e. values on the axis lie in the range [-n, -1], where n is the
       * number of rows in the total pixel matrix.
      */
      const extent = [
        0,                            // min X
        -baseTotalPixelMatrixRows,    // min Y
        baseTotalPixelMatrixColumns,  // max X
        -1                            // max Y
      ];

      /*
       * Determine whether image needs to be rotated relative to slide
       * coordinate system based on direction cosines.
       * There are only planar rotations, since the total pixel matrix is
       * parallel to the slide surface. Here, we further assume that rows and
       * columns of total pixel matrix are parallel to the borders of the slide,
       * i.e. the x and y axis of the slide coordinate system.
       * Hence, we only account for the case where the image may be rotated by
       * 180 degrees.
      */
      var degrees = 0;
      if (
        (this[_pyramidBaseMetadata].ImageOrientationSlide[1] === -1) &&
        (this[_pyramidBaseMetadata].ImageOrientationSlide[3] === -1)
      ) {
        /*
         * The row direction (left to right) of the total pixel matrix
         * is defined by the first three values.
         * The three values specify how the direction changes from the last pixel
         * to the first pixel in the row along each of the three axes of the
         * slide coordinate system (x, y, z), i.e. it express in which direction one
         * is moving in the slide coordinate system when the COLUMN index changes.
         * The column direction (top to bottom) of the total pixel matrix
         * is defined by the first three values.
         * The three values specify how the direction changes from the last pixel
         * to the first pixel in the column along each of the three axes of the
         * slide coordinate system (x, y, z), i.e. it express in which direction one
         * is moving in the slide coordinate system when the ROW index changes.
        */
        degrees = 180;
      }
      const rotation = degrees * (Math.PI / 180);

      /*
       * Specify projection to prevent default automatic projection
       * with the default Mercator projection.
       */
      const projection = new Projection({
        code: "NONE",
        units: 'metric',
        extent: extent,
        getPointResolution: function(pixelRes, point) {
          /*
           * DICOM pixel spacing has millimeter unit while the projection has
           * has meter unit.
           */
          let spacing = _getPixelSpacing(pyramid[nLevels-1])[0] / 10**3;
          let res = pixelRes * spacing;
          return(res);
        }
      });
      /*
       * TODO: Register custom projection:
       *  - http://openlayers.org/en/latest/apidoc/ol.proj.html
       *  - http://openlayers.org/en/latest/apidoc/module-ol_proj.html#~ProjectionLike
       * Direction cosines could be handled via projection rather
       * than specifying a rotation
       */

      /*
       * We need to specify the tile grid, since DICOM allows tiles to
       * have different sizes at each resolution level and a different zoom
       * factor between individual levels.
       */
      const tileGrid = new TileGrid({
        extent: extent,
        origins: origins,
        resolutions: resolutions,
        sizes: totalSizes,
        tileSizes: tileSizes
      });

      /*
       * We use the implemented XYZ tile source but customize it to retrieve
       * frames (load tiles) via DICOMweb WADO-RS.
       */
      const rasterSource = new XYZ({
        crossOrigin: "Anonymous",
        tileGrid: tileGrid,
        projection: projection,
        wrapX: false
      });
      rasterSource.setTileUrlFunction(tileUrlFunction);
      rasterSource.setTileLoadFunction(tileLoadFunction);

      const imageLayer = new TileLayer({
        extent: extent,
        source: rasterSource,
        preload: 1,
        projection: projection
      });

      this[_drawingSource] = new VectorSource({
        tileGrid: tileGrid,
        projection: projection,
        features: this[_features],
        wrapX: false
      });

      this[_drawingLayer] = new VectorLayer({
        extent: extent,
        source: this[_drawingSource],
        projection: projection,
        updateWhileAnimating: true,
        updateWhileInteracting: true,
      });

      const view = new View({
        center: getCenter(extent),
        extent: extent,
        projection: projection,
        resolutions: resolutions,
        rotation: rotation
      });

      const overviewView = new View({
        projection: projection,
        resolutions: resolutions,
        rotation: rotation
      });

      this[_interactions] = {
        draw: undefined,
        select: undefined,
        modify: undefined
      };

      this[_controls] = {
        scale: new ScaleLine({
          units: 'metric',
          className: ''
        })
      };
      if (options.controls.has('fullscreen')) {
        this[_controls].fullscreen = new FullScreen();
      }
      if (options.controls.has('overview')) {
        this[_controls].overview = new OverviewMap({
          view: overviewView,
          collapsed: true,
        });
      }

      /*
       * Creates the map with the defined layers and view and renders it via
       * WebGL.
       */
      if (this[_usewebgl]) {
        this[_map] = new WebGLMap({
          layers: [imageLayer, this[_drawingLayer]],
          view: view,
          controls: [],
          loadTilesWhileAnimating: true,
          loadTilesWhileInteracting: true,
          logo: false
        });
      } else {

        this[_map] = new Map({
          layers: [imageLayer, this[_drawingLayer]],
          view: view,
          controls: [],
          loadTilesWhileAnimating: true,
          loadTilesWhileInteracting: true,
          logo: false
        });
      }

      for (let control in this[_controls]) {
        this[_map].addControl(this[_controls][control]);
      }
      this[_map].getView().fit(extent, this[_map].getSize());

    }

    resize(){
      this[_map].updateSize();
    }
    

    /* Renders the images.
     */
    render(options) {
      if (!('container' in options)) {
        console.error('container must be provided for rendering images');
      }
      this[_map].setTarget(options.container);

      // Style scale element (overriding default Openlayers CSS "ol-scale-line")
      let scaleElement = this[_controls]['scale'].element;
      scaleElement.style.position = 'absolute';
      scaleElement.style.right = '.5em';
      scaleElement.style.bottom = '.5em';
      scaleElement.style.left = 'auto';
      scaleElement.style.padding = '2px';
      scaleElement.style.backgroundColor = 'rgba(255,255,255,.5)';
      scaleElement.style.borderRadius = '4px';
      scaleElement.style.margin = '1px';

      let scaleInnerElement = this[_controls]['scale'].innerElement_;
      scaleInnerElement.style.color = 'black';
      scaleInnerElement.style.fontWeight = '600';
      scaleInnerElement.style.fontSize = '10px';
      scaleInnerElement.style.textAlign = 'center';
      scaleInnerElement.style.borderWidth = '1.5px';
      scaleInnerElement.style.borderStyle = 'solid';
      scaleInnerElement.style.borderTop = 'none';
      scaleInnerElement.style.borderRightColor = 'black';
      scaleInnerElement.style.borderLeftColor = 'black';
      scaleInnerElement.style.borderBottomColor = 'black';
      scaleInnerElement.style.margin = '1px';
      scaleInnerElement.style.willChange = 'contents,width';

      const container = this[_map].getTargetElement();

      this[_drawingSource].on(VectorEventType.ADDFEATURE, (e) => {
        publish(container, EVENTS.ROI_ADDED, _getROIFromFeature(e.feature, this[_pyramidMetadata]));
      });

      this[_drawingSource].on(VectorEventType.CHANGEFEATURE, (e) => {
        publish(container, EVENTS.ROI_MODIFIED, _getROIFromFeature(e.feature, this[_pyramidMetadata]));
      });

      this[_drawingSource].on(VectorEventType.REMOVEFEATURE, (e) => {
        publish(container, EVENTS.ROI_REMOVED, _getROIFromFeature(e.feature, this[_pyramidMetadata]));
      });

      this[_map].on(MapEventType.MOVESTART, (e) => {
        publish(container, EVENTS.MOVE_STARTED, this.getAllROIs());
      });

      this[_map].on(MapEventType.MOVEEND, (e) => {
        publish(container, EVENTS.MOVE_ENDED, this.getAllROIs());
      });

    }

    /* Activate draw interaction.
     */
    activateDrawInteraction(options) {
      this.deactivateDrawInteraction();

      const customOptionsMapping = {
        point: {
          type: 'Point',
          geometryName: 'Point'
        },
        circle: {
          type: 'Circle',
          geometryName: 'Circle'
        },
        box: {
          type: 'Circle',
          geometryName: 'Box',
          geometryFunction: createRegularPolygon(4),
        },
        polygon: {
          type: 'Polygon',
          geometryName: 'Polygon',
          freehand: false,
        },
        freehandpolygon: {
          type: 'Polygon',
          geometryName: 'FreeHandPolygon',
          freehand: true,
        },
        line: {
          type: 'LineString',
          geometryName: 'Line',
          freehand: false,
        },
        freehandline: {
          type: 'LineString',
          geometryName: 'FreeHandLine',
          freehand: true,
        },
      };
      if (!('geometryType' in options)) {
        console.error('geometry type must be specified for drawing interaction');
      }
      if (!(options.geometryType in customOptionsMapping)) {
        console.error(`unsupported geometry type "${options.geometryType}"`);
      }

      const defaultDrawOptions = {source: this[_drawingSource]};
      const customDrawOptions = customOptionsMapping[options.geometryType];
      if ('style' in options) {
        customDrawOptions.style = options.style;
      }
      const allDrawOptions = Object.assign(defaultDrawOptions, customDrawOptions);
      this[_interactions].draw = new Draw(allDrawOptions);

      const container = this[_map].getTargetElement();

      //attaching openlayers events handling
      this[_interactions].draw.on('drawend', (e) => {
        e.feature.setId(generateUID());
        publish(container, EVENTS.ROI_DRAWN, _getROIFromFeature(e.feature, this[_pyramidMetadata]));
      });

      this[_map].addInteraction(this[_interactions].draw);

    }

    /* Deactivate draw interaction.
     */
    deactivateDrawInteraction() {
      if (this[_interactions].draw !== undefined) {
        this[_map].removeInteraction(this[_interactions].draw);
        this[_interactions].draw = undefined;
      }
    }

    get isDrawInteractionActive() {
      return this[_interactions].draw !== undefined;
    }

    /* Activate select interaction.
     */
    activateSelectInteraction(options={}) {
      this.deactivateSelectInteraction();
      this[_interactions].select = new Select({
        layers: [this[_drawingLayer]]
      });

      const container = this[_map].getTargetElement();

      this[_interactions].select.on('select', (e) => {
        publish(container, EVENTS.ROI_SELECTED, _getROIFromFeature(e.selected[0], this[_pyramidMetadata]));
      });

      this[_map].addInteraction(this[_interactions].select);
    }

    /* Deactivate select interaction.
     */
    deactivateSelectInteraction() {
      if (this[_interactions].select) {
        this[_map].removeInteraction(this[_interactions].select);
        this[_interactions].select = undefined;
      }
    }

    get isSelectInteractionActive() {
      return this[_interactions].select !== undefined;
    }

    /* Activate modify interaction.
     */
    activateModifyInteraction(options={}) {
      this.deactivateModifyInteraction();
      this[_interactions].modify = new Modify({
        features: this[_features],  // TODO: or source, i.e. "drawings"???
      });
      this[_map].addInteraction(this[_interactions].modify);
    }

    /* Deactivate modify interaction.
     */
    deactivateModifyInteraction() {
      if (this[_interactions].modify) {
        this[_map].removeInteraction(this[_interactions].modify);
        this[_interactions].modify = undefined;
      }
    }

    get isModifyInteractionActive() {
      return this[_interactions].modify !== undefined;
    }

    getAllROIs() {
      let rois = [];
      this[_features].forEach((item) => {
          rois.push(this.getROI(item.getId()));
      });
      return rois;
    }

    get numberOfROIs() {
      return this[_features].getLength();
    }

    getROI(uid) {
      const feature = this[_drawingSource].getFeatureById(uid);
      return _getROIFromFeature(feature, this[_pyramidMetadata]);
    }

    popROI() {
      const feature = this[_features].pop();
      return _getROIFromFeature(feature, this[_pyramidMetadata]);
    }

    addROI(item) {
      const geometry = _scoord3d2Geometry(item.scoord3d, this[_pyramidMetadata]);
      const feature = new Feature(geometry);
      feature.setProperties(item.properties, true);
      feature.setId(item.uid);
      this[_features].push(feature);
    }

    removeROI(uid) {
      const feature = this[_drawingSource].getFeatureById(uid);
      this[_features].remove(feature);
    }

    removeAllROI() {
      this[_features].clear();
    }

    hideROIs() {
      this[_drawingLayer].setVisible(false);
    }

    showROIs() {
      this[_drawingLayer].setVisible(true);
    }

    get areROIsVisible() {
      return this[_drawingLayer].getVisible();
    }

    get imageMetadata() {
      return this[_pyramidMetadata];
    }

  }

  let api = {
    VLWholeSlideMicroscopyImageViewer,
  };
  let scoord3d = {
    Point: Point$1,
    Multipoint,
    Polyline,
    Polygon: Polygon$1,
    Ellipsoid,
    Ellipse
  };
  let roi = {
    ROI,
  };

  exports.api = api;
  exports.scoord3d = scoord3d;
  exports.roi = roi;

  Object.defineProperty(exports, '__esModule', { value: true });

})));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(40)))

/***/ })

}]);